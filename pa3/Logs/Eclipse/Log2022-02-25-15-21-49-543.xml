<Events startTimestamp="1645820509543" logVersion="1.0.0.202009141527">
  <Command __id="1" _type="MoveCaretCommand" caretOffset="1927" date="Fri Feb 25 15:21:51 EST 2022" docOffset="2005" starttimestamp="1645820509543" timestamp="2157" />
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:21:51 EST 2022" docASTNodeCount="1533" docActiveCodeLength="10708" docExpressionCount="1067" docLength="11376" projectName="pa1" starttimestamp="1645820509543" timestamp="1482">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
			
			switch (currentToken.kind) {
			// in Type
			case ID:
			acceptIt();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			// in Reference
			case EQUAL:
			acceptIt();
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			case LPAREN:
			acceptIt();
			if (currentToken.kind == TokenKind.RPAREN) {
				acceptIt();
			} else {
				parseArgumentList();
				accept(TokenKind.RPAREN);
			}
			accept(TokenKind.SEMICOLON);
			break;
			
			// both
			case LBRACKET: 
			acceptIt();
			// in Type
			if (currentToken.kind == TokenKind.RBRACKET) {
				acceptIt();
				accept(TokenKind.ID);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			} else {
				// in Reference
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
			
			case DOT:
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET: 
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			default:
				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);
			}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="2" _type="ShellCommand" date="Fri Feb 25 15:25:56 EST 2022" starttimestamp="1645820509543" timestamp="246529" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3" _type="ShellCommand" date="Fri Feb 25 15:25:56 EST 2022" starttimestamp="1645820509543" timestamp="246592" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:26:00 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="250840">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package miniJava;

public class test {
	public static void main(String[] args) {
		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};
		Compiler a = new Compiler();
		a.main(b);
	}
}
]]></snapshot>
  </Command>
  <Command __id="5" _type="MoveCaretCommand" caretOffset="219" date="Fri Feb 25 15:26:00 EST 2022" docOffset="219" starttimestamp="1645820509543" timestamp="251006" />
  <Command __id="6" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:26:00 EST 2022" docASTNodeCount="1533" docActiveCodeLength="10708" docExpressionCount="1067" docLength="11376" projectName="pa1" starttimestamp="1645820509543" timestamp="251170">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7" _type="MoveCaretCommand" caretOffset="2661" date="Fri Feb 25 15:26:00 EST 2022" docOffset="2739" starttimestamp="1645820509543" timestamp="251348" />
  <Command __id="8" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:26:07 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="257516">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="10" _type="RunCommand" date="Fri Feb 25 15:26:09 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="260113" type="Run" />
  <Command __id="11" _type="RunCommand" date="Fri Feb 25 15:26:09 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="260115" type="Run" />
  <Command __id="12" _type="EHExceptionCommand" date="Fri Feb 25 15:26:10 EST 2022" starttimestamp="1645820509543" timestamp="260493" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
in here: 
Parse error: Parsing  and expecting 'RCURLY' but found 'EOT'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="13" _type="RunCommand" date="Fri Feb 25 15:26:10 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="260508" type="Run" />
  <Command __id="14" _type="RunCommand" date="Fri Feb 25 15:26:10 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="260508" type="Run" />
  <Command __id="15" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:26:14 EST 2022" docASTNodeCount="1049" docActiveCodeLength="7686" docExpressionCount="643" docLength="8416" projectName="pa1" starttimestamp="1645820509543" timestamp="265347">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import java.io.IOException;
import java.io.InputStream;

import miniJava.ErrorReporter;
import miniJava.SyntacticAnalyzer.Token;
import miniJava.SyntacticAnalyzer.TokenKind;

public class Scanner {
	private boolean isComment;
	
//	comment state = 0 not comment
//			= 1 show /
//			= 2 show second /
//			= 12 show first *
//			= 13 show second *
//			= 3 show third /
//			= 4 show fourth / end of comment
//			= 14 show second / end of comment
	private int commentState;
	
	private InputStream inputStream;
	private ErrorReporter reporter;
	
	private char currentChar;
	private byte currentKind;
	private StringBuilder currentSpelling;
	
	// true when end of line is found
	private boolean eot = false; 
	
	public Scanner(InputStream inputStream, ErrorReporter reporter) {
		this.isComment = false;
		this.commentState = 0;
		this.inputStream = inputStream;
		this.reporter = reporter;

		// initialize scanner state
		readChar();
	}	
	
	/**
	 * skip whitespace and scan next token
	 */	
	
// ? SINGLE SLASH
//	comment state = 0 not comment
//	= 1 show /
//	= 2 show second /
//	= 12 show first *
//	= 13 show second *
//	= 14 show second / end of comment
	public void scanSeparator() {
		switch (commentState) {
			case 0:
				while (!eot && 
						(currentChar == ' ' ||
							currentChar == '\t' ||
								currentChar == '\n' ||
									currentChar == '\r')) {
					skipIt();
				}
				if (currentChar == '/') {
					commentState = 1;
					skipIt();
					scanSeparator();
				}
				break;
			
			case 1:
				if (currentChar == '/') {
					commentState = 2;
					isComment = true;
					skipIt();
					scanSeparator();
				} else if (currentChar == '*') {
					commentState = 12;
					isComment = true;
					skipIt();
					scanSeparator();
				} else {
					System.exit(4);
				}
				break;
			
			case 2:
				if (currentChar == '\r' || currentChar == '\n' || eot) {
					commentState = 0;
					isComment = false;
					scanSeparator();
				} else {
					skipIt();
					scanSeparator();		
				}
				break;
				
			case 12:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '*') {
					skipIt();
					scanSeparator();
				} else {
					commentState = 13;
					scanSeparator();
				}
				break;
			
			case 13:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '/') {
					skipIt();
					commentState = 12;
					scanSeparator();
				} else {
					commentState = 0;
					isComment = false;
					scanSeparator();
				}
				break;	
		}		
	}
	

	public Token scan() {
		// skip whitespace and comments
		scanSeparator();

		// start of a token: collect spelling and identify token kind
		currentSpelling = new StringBuilder();
		TokenKind kind = scanToken();
		String spelling = currentSpelling.toString();
		
		if (kind == TokenKind.ID) {
			switch (spelling) {
			case "class":
				kind = TokenKind.CLASS;
				break;
			case "public":
				kind = TokenKind.PUBLIC;
				break;
			case "private":
				kind = TokenKind.PRIVATE;
				break;
			case "static":
				kind = TokenKind.STATIC;
				break;
			case "int":
				kind = TokenKind.INT;
				break;
			case "boolean":
				kind = TokenKind.BOOLEAN;
				break;
			case "void":
				kind = TokenKind.VOID;
				break;
			case "this":
				kind = TokenKind.THIS;
				break;
			case "return":
				kind = TokenKind.RETURN;
				break;
			case "if":
				kind = TokenKind.IF;
				break;
			case "else":
				kind = TokenKind.ELSE;
				break;
			case "while":
				kind = TokenKind.WHILE;
				break;
			case "true":
				kind = TokenKind.TRUE;
				break;
			case "false":
				kind = TokenKind.FALSE;
				break;
			default:
				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};
				for (String s : ss) {
					if (spelling.toLowerCase().equals(s)) {
						reporter.reportError("Key word should not be used as identifiers.");
						System.exit(4);
					}
				}
				break;
			}
		}

		// return new token
		return new Token(kind, spelling);
	}

	
	/**
	 * determine token kind
	 */
	public TokenKind scanToken() {
		if (eot) {
			return TokenKind.EOT; 
		}
			
		switch (currentChar) {
			case 'a':  case 'b':  case 'c':  case 'd':
			case 'e':  case 'f':  case 'g':  case 'h':
			case 'i':  case 'j':  case 'k':  case 'l':
			case 'm':  case 'n':  case 'o':  case 'p':
			case 'q':  case 'r':  case 's':  case 't':
	        case 'u':  case 'v':  case 'w':  case 'x':
	        case 'y':  case 'z':
	        
	        case 'A':  case 'B':  case 'C':  case 'D':
	        case 'E':  case 'F':  case 'G':  case 'H':
	        case 'I':  case 'J':  case 'K':  case 'L':
	        case 'M':  case 'N':  case 'O':	 case 'P':
	        case 'Q':  case 'R':  case 'S':  case 'T':
	        case 'U':  case 'V':  case 'W':  case 'X':
	        case 'Y':  case 'Z':
	        	takeIt();
	        	while(Character.isLetter(currentChar) 
	        			|| Character.isDigit(currentChar)
	        				|| currentChar == '_') {
	        		takeIt();
	        	}
	        	return TokenKind.ID;
	        
	        case '0':  case '1':  case '2':  case '3':  case '4':
	        case '5':  case '6':  case '7':  case '8':  case '9':
	            takeIt();
	            while(Character.isDigit(currentChar)) {
	            	takeIt();
	            }
	            return TokenKind.NUM;
	        
	        case '>': case '<': case '=':
	            takeIt();
	            if(currentChar == '=') {
	                takeIt();
	                return TokenKind.BINOP;
	            }
	            return TokenKind.BINOP;
	        
	        case '+': case '*': case '/':
	        	takeIt();
	        	return TokenKind.BINOP;
	        
	        case '&':
	            takeIt();
	            if(currentChar != '&') {
	                System.exit(4);
	            }
	            takeIt();
	            return TokenKind.BINOP;

	        case '|':
	            takeIt();
	            if(currentChar != '|')
	                System.exit(4);
	            takeIt();
	            return TokenKind.BINOP;
	        
	        case '!':
	            takeIt();
	            if(currentChar == '=') {
	                takeIt();
	                return TokenKind.BINOP;
	            }
	            return TokenKind.UNOP;
	            
	        case '-':
	            takeIt();
	            return TokenKind.MINUS;
	        
	        case '.':
	            takeIt();
	            return TokenKind.DOT;

	        case ',':
	            takeIt();
	            return TokenKind.COMMA;

	        case ';':
	            takeIt();
	            return TokenKind.SEMICOLON;

	        case '(':
	            takeIt();
	            return TokenKind.LPAREN;

	        case ')':
	            takeIt();
	            return TokenKind.RPAREN;

	        case '[':
	            takeIt();
	            return TokenKind.LBRACKET;

	        case ']':
	            takeIt();
	            return TokenKind.RBRACKET;

	        case '{':
	            takeIt();
	            return TokenKind.LCURLY;

	        case '}':
	            takeIt();
	            return TokenKind.RCURLY;
	        
	        default:
				scanError("Unrecognized character '" + currentChar + "' in input");
				return TokenKind.ERROR; 
		}
	}

	
	private void takeIt() {
		currentSpelling.append(currentChar);
		nextChar();
	}
	
	private void take(char expectedChar) {
		if (currentChar == expectedChar) {
			takeIt();
		}
	}

	private void skipIt() {
		nextChar();
	}


	private void scanError(String m) {
		reporter.reportError("Scan Error:  " + m);
	}


	private final static char eolUnix = '\n';
	private final static char eolWindows = '\r';

	/**
	 * advance to next char in inputstream
	 * detect end of file or end of line as end of input
	 */
	private void nextChar() {
		if (!eot)
			readChar();
	}

	private void readChar() {
		try {
			int c = inputStream.read();
			currentChar = (char) c;
			if (c == -1 || currentChar == eolUnix || currentChar == eolWindows) {
				eot = true;
			}
		} catch (IOException e) {
			scanError("I/O Exception!");
			eot = true;
		}
	}
	


}
]]></snapshot>
  </Command>
  <Command __id="16" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:26:15 EST 2022" docASTNodeCount="72" docActiveCodeLength="316" docExpressionCount="36" docLength="316" projectName="pa1" starttimestamp="1645820509543" timestamp="265691">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\TokenKind.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

public enum TokenKind {NUM, CLASS, ID, LBRACKET, RBRACKET, VOID, LPAREN, RPAREN, EOT, EQUAL, THIS,
							PUBLIC, PRIVATE, STATIC, INT, BOOLEAN, COMMA, DOT, RETURN, SEMICOLON,
								IF, ELSE, WHILE, UNOP, BINOP, MINUS, TRUE, FALSE, NEW, LCURLY, RCURLY,
									ERROR}

]]></snapshot>
  </Command>
  <Command __id="17" _type="MoveCaretCommand" caretOffset="8160" date="Fri Feb 25 15:26:15 EST 2022" docOffset="8311" starttimestamp="1645820509543" timestamp="265791" />
  <Command __id="18" _type="MoveCaretCommand" caretOffset="260" date="Fri Feb 25 15:26:15 EST 2022" docOffset="260" starttimestamp="1645820509543" timestamp="265807" />
  <Command __id="19" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:26:16 EST 2022" docASTNodeCount="1049" docActiveCodeLength="7686" docExpressionCount="643" docLength="8416" projectName="pa1" starttimestamp="1645820509543" timestamp="266854">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1 || currentChar == eolUnix || currentChar == eolWindows) {¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="21" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:26:17 EST 2022" docASTNodeCount="46" docActiveCodeLength="297" docExpressionCount="21" docLength="297" projectName="pa1" starttimestamp="1645820509543" timestamp="267490">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[class ErrorReporter {

		private int numErrors;
		public static kill;

		static ErrorReporter() {
			numErrors = 0;
		}

		public boolean hasErrors() {
			return numErrors > 0;
		}

		public void reportError(String message) {
			System.out.println(message);
			numErrors++;
		}	
}]]></snapshot>
  </Command>
  <Command __id="22" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:26:18 EST 2022" docASTNodeCount="46" docActiveCodeLength="297" docExpressionCount="21" docLength="297" projectName="pa1" starttimestamp="1645820509543" timestamp="269125">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static kill;¶¶		static ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="23" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:26:19 EST 2022" docASTNodeCount="1049" docActiveCodeLength="7686" docExpressionCount="643" docLength="8416" projectName="pa1" starttimestamp="1645820509543" timestamp="269697">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1 || currentChar == eolUnix || currentChar == eolWindows) {¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="24" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:26:19 EST 2022" docASTNodeCount="46" docActiveCodeLength="297" docExpressionCount="21" docLength="297" projectName="pa1" starttimestamp="1645820509543" timestamp="269779">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static kill;¶¶		static ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="20" _type="MoveCaretCommand" caretOffset="8160" date="Fri Feb 25 15:26:16 EST 2022" docOffset="8311" starttimestamp="1645820509543" timestamp="266940" />
  <Command __id="25" _type="MoveCaretCommand" caretOffset="8160" date="Fri Feb 25 15:26:19 EST 2022" docOffset="8311" starttimestamp="1645820509543" timestamp="269899" />
  <Command __id="27" _type="MoveCaretCommand" caretOffset="2661" date="Fri Feb 25 15:26:26 EST 2022" docOffset="2739" starttimestamp="1645820509543" timestamp="277000" />
  <Command __id="28" _type="MoveCaretCommand" caretOffset="2629" date="Fri Feb 25 15:26:37 EST 2022" docOffset="2707" starttimestamp="1645820509543" timestamp="287541" />
  <Command __id="26" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:26:26 EST 2022" docASTNodeCount="1533" docActiveCodeLength="10708" docExpressionCount="1067" docLength="11376" projectName="pa1" starttimestamp="1645820509543" timestamp="276856">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="30" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:27:01 EST 2022" docASTNodeCount="46" docActiveCodeLength="297" docExpressionCount="21" docLength="297" projectName="pa1" starttimestamp="1645820509543" timestamp="311488">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static kill;¶¶		static ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="29" _type="SelectTextCommand" caretOffset="2249" date="Fri Feb 25 15:26:47 EST 2022" end="2274" start="2249" starttimestamp="1645820509543" timestamp="297549" />
  <Command __id="32" _type="SelectTextCommand" caretOffset="2249" date="Fri Feb 25 15:27:02 EST 2022" end="2274" start="2249" starttimestamp="1645820509543" timestamp="313260" />
  <Command __id="34" _type="ShellCommand" date="Fri Feb 25 15:27:18 EST 2022" starttimestamp="1645820509543" timestamp="329097" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="35" _type="FindCommand" caseSensitive="true" date="Fri Feb 25 15:27:22 EST 2022" forward="false" matchWord="true" offset="2352" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="332495" wrapSearch="false">
    <searchString><![CDATA[accept]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="36" _type="FindCommand" caseSensitive="true" date="Fri Feb 25 15:27:23 EST 2022" forward="false" matchWord="true" offset="2362" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="334333" wrapSearch="false">
    <searchString><![CDATA[accept]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="37" _type="FindCommand" caseSensitive="true" date="Fri Feb 25 15:27:24 EST 2022" forward="false" matchWord="true" offset="2362" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="334757" wrapSearch="false">
    <searchString><![CDATA[accept]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="38" _type="ShellCommand" date="Fri Feb 25 15:27:25 EST 2022" starttimestamp="1645820509543" timestamp="335579" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="31" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:27:02 EST 2022" docASTNodeCount="1533" docActiveCodeLength="10708" docExpressionCount="1067" docLength="11376" projectName="pa1" starttimestamp="1645820509543" timestamp="313140">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="39" _type="MoveCaretCommand" caretOffset="10085" date="Fri Feb 25 15:27:35 EST 2022" docOffset="10163" starttimestamp="1645820509543" timestamp="346100" />
  <DocumentChange __id="40" _type="Insert" date="Fri Feb 25 15:27:36 EST 2022" docASTNodeCount="1533" docActiveCodeLength="10712" docExpressionCount="1067" docLength="11380" length="4" offset="10163" starttimestamp="1645820509543" timestamp="347293">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="41" _type="InsertStringCommand" date="Fri Feb 25 15:27:36 EST 2022" starttimestamp="1645820509543" timestamp="347308" timestamp2="347308">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="42" _type="Delete" date="Fri Feb 25 15:27:38 EST 2022" docASTNodeCount="1533" docActiveCodeLength="10711" docExpressionCount="1067" docLength="11379" endLine="470" length="1" offset="10166" startLine="470" starttimestamp="1645820509543" timestamp="348865">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="43" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 25 15:27:38 EST 2022" starttimestamp="1645820509543" timestamp="348873" />
  <DocumentChange __id="44" _type="Delete" date="Fri Feb 25 15:27:38 EST 2022" docASTNodeCount="1533" docActiveCodeLength="10710" docExpressionCount="1067" docLength="11378" endLine="470" length="1" offset="10165" startLine="470" starttimestamp="1645820509543" timestamp="349136">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="45" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 25 15:27:38 EST 2022" starttimestamp="1645820509543" timestamp="349139" />
  <Command __id="47" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 25 15:27:38 EST 2022" starttimestamp="1645820509543" timestamp="349374" />
  <Command __id="48" _type="MoveCaretCommand" caretOffset="10699" date="Fri Feb 25 15:27:40 EST 2022" docOffset="10777" starttimestamp="1645820509543" timestamp="350556" />
  <Command __id="49" _type="MoveCaretCommand" caretOffset="10504" date="Fri Feb 25 15:27:40 EST 2022" docOffset="10582" starttimestamp="1645820509543" timestamp="350900" />
  <Command __id="50" _type="MoveCaretCommand" caretOffset="10430" date="Fri Feb 25 15:27:40 EST 2022" docOffset="10508" starttimestamp="1645820509543" timestamp="351204" />
  <Command __id="51" _type="MoveCaretCommand" caretOffset="10450" date="Fri Feb 25 15:27:41 EST 2022" docOffset="10528" starttimestamp="1645820509543" timestamp="351524" />
  <Command __id="52" _type="MoveCaretCommand" caretOffset="10458" date="Fri Feb 25 15:27:41 EST 2022" docOffset="10536" starttimestamp="1645820509543" timestamp="351853" />
  <Command __id="53" _type="MoveCaretCommand" caretOffset="10445" date="Fri Feb 25 15:27:41 EST 2022" docOffset="10523" starttimestamp="1645820509543" timestamp="352132" />
  <Command __id="54" _type="MoveCaretCommand" caretOffset="10410" date="Fri Feb 25 15:27:45 EST 2022" docOffset="10488" starttimestamp="1645820509543" timestamp="355820" />
  <DocumentChange __id="46" _type="Delete" date="Fri Feb 25 15:27:38 EST 2022" docASTNodeCount="1533" docActiveCodeLength="10708" docExpressionCount="1067" docLength="11376" endLine="470" length="2" offset="10163" startLine="469" starttimestamp="1645820509543" timestamp="349357">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="56" _type="Insert" date="Fri Feb 25 15:27:49 EST 2022" docASTNodeCount="1533" docActiveCodeLength="10713" docExpressionCount="1067" docLength="11381" length="5" offset="10523" starttimestamp="1645820509543" timestamp="359687">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="55" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Fri Feb 25 15:27:48 EST 2022" starttimestamp="1645820509543" timestamp="359178" />
  <Command __id="57" _type="InsertStringCommand" date="Fri Feb 25 15:27:49 EST 2022" starttimestamp="1645820509543" timestamp="359695" timestamp2="359695">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="59" _type="InsertStringCommand" date="Fri Feb 25 15:27:50 EST 2022" starttimestamp="1645820509543" timestamp="361024" timestamp2="361024">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="61" _type="InsertStringCommand" date="Fri Feb 25 15:27:50 EST 2022" starttimestamp="1645820509543" timestamp="361281" timestamp2="361281">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="63" _type="InsertStringCommand" date="Fri Feb 25 15:27:51 EST 2022" starttimestamp="1645820509543" timestamp="361611" timestamp2="361611">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="65" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 25 15:27:51 EST 2022" starttimestamp="1645820509543" timestamp="361921" />
  <Command __id="67" _type="InsertStringCommand" date="Fri Feb 25 15:27:51 EST 2022" starttimestamp="1645820509543" timestamp="361972" timestamp2="361972">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="69" _type="InsertStringCommand" date="Fri Feb 25 15:27:51 EST 2022" starttimestamp="1645820509543" timestamp="362090" timestamp2="362090">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="71" _type="InsertStringCommand" date="Fri Feb 25 15:27:51 EST 2022" starttimestamp="1645820509543" timestamp="362194" timestamp2="362194">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="73" _type="InsertStringCommand" date="Fri Feb 25 15:27:51 EST 2022" starttimestamp="1645820509543" timestamp="362267" timestamp2="362267">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="75" _type="InsertStringCommand" date="Fri Feb 25 15:27:52 EST 2022" starttimestamp="1645820509543" timestamp="362521" timestamp2="362521">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="76" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 25 15:27:55 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="366049" />
  <Command __id="80" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 25 15:27:56 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="366924" />
  <Command __id="82" _type="InsertStringCommand" date="Fri Feb 25 15:27:56 EST 2022" starttimestamp="1645820509543" timestamp="366953" timestamp2="366953">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="84" _type="InsertStringCommand" date="Fri Feb 25 15:27:56 EST 2022" starttimestamp="1645820509543" timestamp="366969" timestamp2="366969">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="86" _type="InsertStringCommand" date="Fri Feb 25 15:27:56 EST 2022" starttimestamp="1645820509543" timestamp="366985" timestamp2="366985">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="88" _type="InsertStringCommand" date="Fri Feb 25 15:27:56 EST 2022" starttimestamp="1645820509543" timestamp="366998" timestamp2="366998">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="90" _type="InsertStringCommand" date="Fri Feb 25 15:27:56 EST 2022" starttimestamp="1645820509543" timestamp="367013" timestamp2="367013">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="92" _type="InsertStringCommand" date="Fri Feb 25 15:27:56 EST 2022" starttimestamp="1645820509543" timestamp="367025" timestamp2="367025">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="94" _type="InsertStringCommand" date="Fri Feb 25 15:27:56 EST 2022" starttimestamp="1645820509543" timestamp="367039" timestamp2="367039">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="96" _type="InsertStringCommand" date="Fri Feb 25 15:27:56 EST 2022" starttimestamp="1645820509543" timestamp="367052" timestamp2="367052">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="98" _type="InsertStringCommand" date="Fri Feb 25 15:27:56 EST 2022" starttimestamp="1645820509543" timestamp="367105" timestamp2="367105">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="99" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 25 15:27:56 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="367160" />
  <Command __id="100" _type="ShellCommand" date="Fri Feb 25 15:27:56 EST 2022" starttimestamp="1645820509543" timestamp="367369" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="101" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 25 15:27:56 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="367438" />
  <Command __id="102" _type="ShellCommand" date="Fri Feb 25 15:27:58 EST 2022" starttimestamp="1645820509543" timestamp="368468" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="58" _type="Insert" date="Fri Feb 25 15:27:50 EST 2022" docASTNodeCount="1535" docActiveCodeLength="10714" docExpressionCount="1068" docLength="11382" length="1" offset="10528" starttimestamp="1645820509543" timestamp="361018">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="60" _type="Insert" date="Fri Feb 25 15:27:50 EST 2022" docASTNodeCount="1535" docActiveCodeLength="10715" docExpressionCount="1068" docLength="11383" length="1" offset="10529" starttimestamp="1645820509543" timestamp="361267">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <DocumentChange __id="62" _type="Insert" date="Fri Feb 25 15:27:51 EST 2022" docASTNodeCount="1535" docActiveCodeLength="10716" docExpressionCount="1068" docLength="11384" length="1" offset="10530" starttimestamp="1645820509543" timestamp="361598">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="64" _type="Delete" date="Fri Feb 25 15:27:51 EST 2022" docASTNodeCount="1535" docActiveCodeLength="10715" docExpressionCount="1068" docLength="11383" endLine="481" length="1" offset="10530" startLine="481" starttimestamp="1645820509543" timestamp="361917">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="66" _type="Insert" date="Fri Feb 25 15:27:51 EST 2022" docASTNodeCount="1535" docActiveCodeLength="10716" docExpressionCount="1068" docLength="11384" length="1" offset="10530" starttimestamp="1645820509543" timestamp="361966">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="68" _type="Insert" date="Fri Feb 25 15:27:51 EST 2022" docASTNodeCount="1535" docActiveCodeLength="10717" docExpressionCount="1068" docLength="11385" length="1" offset="10531" starttimestamp="1645820509543" timestamp="362085">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="70" _type="Insert" date="Fri Feb 25 15:27:51 EST 2022" docASTNodeCount="1535" docActiveCodeLength="10718" docExpressionCount="1068" docLength="11386" length="1" offset="10532" starttimestamp="1645820509543" timestamp="362189">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="72" _type="Insert" date="Fri Feb 25 15:27:51 EST 2022" docASTNodeCount="1535" docActiveCodeLength="10719" docExpressionCount="1068" docLength="11387" length="1" offset="10533" starttimestamp="1645820509543" timestamp="362262">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="74" _type="Insert" date="Fri Feb 25 15:27:52 EST 2022" docASTNodeCount="1533" docActiveCodeLength="10720" docExpressionCount="1067" docLength="11388" length="1" offset="10534" starttimestamp="1645820509543" timestamp="362515">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="77" _type="Insert" date="Fri Feb 25 15:27:56 EST 2022" docASTNodeCount="1537" docActiveCodeLength="10721" docExpressionCount="1070" docLength="11389" length="1" offset="10535" starttimestamp="1645820509543" timestamp="366860">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="78" _type="Insert" date="Fri Feb 25 15:27:56 EST 2022" docASTNodeCount="1537" docActiveCodeLength="10722" docExpressionCount="1070" docLength="11390" length="1" offset="10536" starttimestamp="1645820509543" timestamp="366888">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="79" _type="Insert" date="Fri Feb 25 15:27:56 EST 2022" docASTNodeCount="1537" docActiveCodeLength="10723" docExpressionCount="1070" docLength="11391" length="1" offset="10537" starttimestamp="1645820509543" timestamp="366907">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="81" _type="Replace" date="Fri Feb 25 15:27:56 EST 2022" docASTNodeCount="1533" docActiveCodeLength="10724" docExpressionCount="1067" docLength="11392" endLine="481" insertionLength="4" int_docASTNodeCount="1533" int_docActiveCodeLength="10720" int_docExpressionCount="1067" int_docLength="11388" length="3" offset="10535" startLine="481" starttimestamp="1645820509543" timestamp="366939">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="83" _type="Insert" date="Fri Feb 25 15:27:56 EST 2022" docASTNodeCount="1539" docActiveCodeLength="10725" docExpressionCount="1072" docLength="11393" length="1" offset="10539" starttimestamp="1645820509543" timestamp="366963">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="85" _type="Insert" date="Fri Feb 25 15:27:56 EST 2022" docASTNodeCount="1539" docActiveCodeLength="10726" docExpressionCount="1072" docLength="11394" length="1" offset="10540" starttimestamp="1645820509543" timestamp="366980">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="87" _type="Insert" date="Fri Feb 25 15:27:56 EST 2022" docASTNodeCount="1539" docActiveCodeLength="10727" docExpressionCount="1072" docLength="11395" length="1" offset="10541" starttimestamp="1645820509543" timestamp="366992">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="89" _type="Insert" date="Fri Feb 25 15:27:56 EST 2022" docASTNodeCount="1539" docActiveCodeLength="10728" docExpressionCount="1072" docLength="11396" length="1" offset="10542" starttimestamp="1645820509543" timestamp="367008">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="91" _type="Insert" date="Fri Feb 25 15:27:56 EST 2022" docASTNodeCount="1539" docActiveCodeLength="10729" docExpressionCount="1072" docLength="11397" length="1" offset="10543" starttimestamp="1645820509543" timestamp="367019">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="93" _type="Insert" date="Fri Feb 25 15:27:56 EST 2022" docASTNodeCount="1539" docActiveCodeLength="10730" docExpressionCount="1072" docLength="11398" length="1" offset="10544" starttimestamp="1645820509543" timestamp="367034">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="95" _type="Insert" date="Fri Feb 25 15:27:56 EST 2022" docASTNodeCount="1539" docActiveCodeLength="10731" docExpressionCount="1072" docLength="11399" length="1" offset="10545" starttimestamp="1645820509543" timestamp="367046">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="97" _type="Insert" date="Fri Feb 25 15:27:56 EST 2022" docASTNodeCount="1539" docActiveCodeLength="10733" docExpressionCount="1072" docLength="11401" length="2" offset="10546" starttimestamp="1645820509543" timestamp="367065">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="103" _type="MoveCaretCommand" caretOffset="10469" date="Fri Feb 25 15:27:59 EST 2022" docOffset="10547" starttimestamp="1645820509543" timestamp="369788" />
  <DocumentChange __id="104" _type="Insert" date="Fri Feb 25 15:28:00 EST 2022" docASTNodeCount="1540" docActiveCodeLength="10734" docExpressionCount="1073" docLength="11402" length="1" offset="10547" starttimestamp="1645820509543" timestamp="371277">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="105" _type="InsertStringCommand" date="Fri Feb 25 15:28:00 EST 2022" starttimestamp="1645820509543" timestamp="371286" timestamp2="371286">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="106" _type="Insert" date="Fri Feb 25 15:28:00 EST 2022" docASTNodeCount="1540" docActiveCodeLength="10735" docExpressionCount="1073" docLength="11403" length="1" offset="10548" starttimestamp="1645820509543" timestamp="371412">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="107" _type="InsertStringCommand" date="Fri Feb 25 15:28:00 EST 2022" starttimestamp="1645820509543" timestamp="371414" timestamp2="371414">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="108" _type="Insert" date="Fri Feb 25 15:28:01 EST 2022" docASTNodeCount="1540" docActiveCodeLength="10736" docExpressionCount="1073" docLength="11404" length="1" offset="10549" starttimestamp="1645820509543" timestamp="371537">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="109" _type="InsertStringCommand" date="Fri Feb 25 15:28:01 EST 2022" starttimestamp="1645820509543" timestamp="371541" timestamp2="371541">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="110" _type="Insert" date="Fri Feb 25 15:28:01 EST 2022" docASTNodeCount="1540" docActiveCodeLength="10737" docExpressionCount="1073" docLength="11405" length="1" offset="10550" starttimestamp="1645820509543" timestamp="371684">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="111" _type="InsertStringCommand" date="Fri Feb 25 15:28:01 EST 2022" starttimestamp="1645820509543" timestamp="371687" timestamp2="371687">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="112" _type="Insert" date="Fri Feb 25 15:28:01 EST 2022" docASTNodeCount="1540" docActiveCodeLength="10738" docExpressionCount="1073" docLength="11406" length="1" offset="10551" starttimestamp="1645820509543" timestamp="371761">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="113" _type="InsertStringCommand" date="Fri Feb 25 15:28:01 EST 2022" starttimestamp="1645820509543" timestamp="371763" timestamp2="371763">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="114" _type="Insert" date="Fri Feb 25 15:28:01 EST 2022" docASTNodeCount="1540" docActiveCodeLength="10739" docExpressionCount="1073" docLength="11407" length="1" offset="10552" starttimestamp="1645820509543" timestamp="371937">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="115" _type="InsertStringCommand" date="Fri Feb 25 15:28:01 EST 2022" starttimestamp="1645820509543" timestamp="371939" timestamp2="371939">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="116" _type="Insert" date="Fri Feb 25 15:28:01 EST 2022" docASTNodeCount="1540" docActiveCodeLength="10740" docExpressionCount="1073" docLength="11408" length="1" offset="10553" starttimestamp="1645820509543" timestamp="372054">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="117" _type="InsertStringCommand" date="Fri Feb 25 15:28:01 EST 2022" starttimestamp="1645820509543" timestamp="372057" timestamp2="372057">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="118" _type="Insert" date="Fri Feb 25 15:28:02 EST 2022" docASTNodeCount="1540" docActiveCodeLength="10741" docExpressionCount="1073" docLength="11409" length="1" offset="10554" starttimestamp="1645820509543" timestamp="372827">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <Command __id="119" _type="InsertStringCommand" date="Fri Feb 25 15:28:02 EST 2022" starttimestamp="1645820509543" timestamp="372830" timestamp2="372830">
    <data><![CDATA[T]]></data>
  </Command>
  <DocumentChange __id="120" _type="Insert" date="Fri Feb 25 15:28:02 EST 2022" docASTNodeCount="1540" docActiveCodeLength="10742" docExpressionCount="1073" docLength="11410" length="1" offset="10555" starttimestamp="1645820509543" timestamp="373010">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="121" _type="InsertStringCommand" date="Fri Feb 25 15:28:02 EST 2022" starttimestamp="1645820509543" timestamp="373013" timestamp2="373013">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="122" _type="Insert" date="Fri Feb 25 15:28:02 EST 2022" docASTNodeCount="1540" docActiveCodeLength="10743" docExpressionCount="1073" docLength="11411" length="1" offset="10556" starttimestamp="1645820509543" timestamp="373168">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="123" _type="InsertStringCommand" date="Fri Feb 25 15:28:02 EST 2022" starttimestamp="1645820509543" timestamp="373171" timestamp2="373171">
    <data><![CDATA[k]]></data>
  </Command>
  <DocumentChange __id="124" _type="Insert" date="Fri Feb 25 15:28:02 EST 2022" docASTNodeCount="1540" docActiveCodeLength="10744" docExpressionCount="1073" docLength="11412" length="1" offset="10557" starttimestamp="1645820509543" timestamp="373231">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="125" _type="InsertStringCommand" date="Fri Feb 25 15:28:02 EST 2022" starttimestamp="1645820509543" timestamp="373234" timestamp2="373234">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="126" _type="Insert" date="Fri Feb 25 15:28:02 EST 2022" docASTNodeCount="1540" docActiveCodeLength="10745" docExpressionCount="1073" docLength="11413" length="1" offset="10558" starttimestamp="1645820509543" timestamp="373373">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="127" _type="InsertStringCommand" date="Fri Feb 25 15:28:02 EST 2022" starttimestamp="1645820509543" timestamp="373375" timestamp2="373375">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="129" _type="InsertStringCommand" date="Fri Feb 25 15:28:03 EST 2022" starttimestamp="1645820509543" timestamp="373600" timestamp2="373600">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="130" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 25 15:28:03 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="373604" />
  <DocumentChange __id="128" _type="Insert" date="Fri Feb 25 15:28:03 EST 2022" docASTNodeCount="1539" docActiveCodeLength="10746" docExpressionCount="1073" docLength="11414" length="1" offset="10559" starttimestamp="1645820509543" timestamp="373597">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="132" _type="Insert" date="Fri Feb 25 15:28:04 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10754" docExpressionCount="1075" docLength="11422" length="8" offset="10560" starttimestamp="1645820509543" timestamp="374674">
    <text><![CDATA[spelling]]></text>
  </DocumentChange>
  <DocumentChange __id="135" _type="Insert" date="Fri Feb 25 15:28:05 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10755" docExpressionCount="1075" docLength="11423" length="1" offset="10569" starttimestamp="1645820509543" timestamp="375942">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="140" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:28:08 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="378668">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="147" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:28:23 EST 2022" docASTNodeCount="46" docActiveCodeLength="297" docExpressionCount="21" docLength="297" projectName="pa1" starttimestamp="1645820509543" timestamp="393688">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static kill;¶¶		static ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="148" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:28:34 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10755" docExpressionCount="1075" docLength="11423" projectName="pa1" starttimestamp="1645820509543" timestamp="404639">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			currentToken = scanner.scan();¶		"), Diff(INSERT,"	System.out.println(currentToken.spelling);¶		"), Diff(EQUAL,"}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
			
			switch (currentToken.kind) {
			// in Type
			case ID:
			acceptIt();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			// in Reference
			case EQUAL:
			acceptIt();
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			case LPAREN:
			acceptIt();
			if (currentToken.kind == TokenKind.RPAREN) {
				acceptIt();
			} else {
				parseArgumentList();
				accept(TokenKind.RPAREN);
			}
			accept(TokenKind.SEMICOLON);
			break;
			
			// both
			case LBRACKET: 
			acceptIt();
			// in Type
			if (currentToken.kind == TokenKind.RBRACKET) {
				acceptIt();
				accept(TokenKind.ID);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			} else {
				// in Reference
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
			
			case DOT:
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET: 
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			default:
				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);
			}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			currentToken = scanner.scan();
			System.out.println(currentToken.spelling);
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="150" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:28:55 EST 2022" docASTNodeCount="46" docActiveCodeLength="297" docExpressionCount="21" docLength="297" projectName="pa1" starttimestamp="1645820509543" timestamp="425520">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static kill;¶¶		static ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="142" _type="RunCommand" date="Fri Feb 25 15:28:10 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="380628" type="Run" />
  <Command __id="143" _type="RunCommand" date="Fri Feb 25 15:28:10 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="380629" type="Run" />
  <Command __id="144" _type="RunCommand" date="Fri Feb 25 15:28:10 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="380773" type="Run" />
  <Command __id="145" _type="RunCommand" date="Fri Feb 25 15:28:10 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="380773" type="Run" />
  <Command __id="146" _type="EHExceptionCommand" date="Fri Feb 25 15:28:10 EST 2022" starttimestamp="1645820509543" timestamp="380813" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
ErrorReporter
{

in here: 
Parse error: Parsing  and expecting 'RCURLY' but found 'EOT'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="149" _type="MoveCaretCommand" caretOffset="10492" date="Fri Feb 25 15:28:34 EST 2022" docOffset="10570" starttimestamp="1645820509543" timestamp="404731" />
  <Command __id="152" _type="MoveCaretCommand" caretOffset="10492" date="Fri Feb 25 15:28:56 EST 2022" docOffset="10570" starttimestamp="1645820509543" timestamp="427310" />
  <Command __id="151" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:28:56 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10755" docExpressionCount="1075" docLength="11423" projectName="pa1" starttimestamp="1645820509543" timestamp="427221">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			currentToken = scanner.scan();¶			System.out.println(currentToken.spelling);¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="155" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:29:20 EST 2022" docASTNodeCount="46" docActiveCodeLength="297" docExpressionCount="21" docLength="297" projectName="pa1" starttimestamp="1645820509543" timestamp="450516">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static kill;¶¶		static ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="153" _type="SelectTextCommand" caretOffset="990" date="Fri Feb 25 15:29:17 EST 2022" end="990" start="959" starttimestamp="1645820509543" timestamp="447477" />
  <Command __id="154" _type="MoveCaretCommand" caretOffset="990" date="Fri Feb 25 15:29:17 EST 2022" docOffset="1068" starttimestamp="1645820509543" timestamp="447853" />
  <Command __id="157" _type="MoveCaretCommand" caretOffset="990" date="Fri Feb 25 15:29:21 EST 2022" docOffset="1068" starttimestamp="1645820509543" timestamp="451928" />
  <Command __id="158" _type="SelectTextCommand" caretOffset="975" date="Fri Feb 25 15:29:25 EST 2022" end="975" start="959" starttimestamp="1645820509543" timestamp="455797" />
  <Command __id="159" _type="MoveCaretCommand" caretOffset="1023" date="Fri Feb 25 15:29:25 EST 2022" docOffset="1101" starttimestamp="1645820509543" timestamp="456165" />
  <Command __id="162" _type="RunCommand" date="Fri Feb 25 15:31:05 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="556450" type="Run" />
  <Command __id="163" _type="RunCommand" date="Fri Feb 25 15:31:05 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="556451" type="Run" />
  <Command __id="164" _type="RunCommand" date="Fri Feb 25 15:31:06 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="556576" type="Run" />
  <Command __id="165" _type="RunCommand" date="Fri Feb 25 15:31:06 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="556576" type="Run" />
  <Command __id="166" _type="EHExceptionCommand" date="Fri Feb 25 15:31:06 EST 2022" starttimestamp="1645820509543" timestamp="556629" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
ErrorReporter
{

in here: 
Parse error: Parsing  and expecting 'RCURLY' but found 'EOT'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="167" _type="MoveCaretCommand" caretOffset="1023" date="Fri Feb 25 15:31:07 EST 2022" docOffset="1101" starttimestamp="1645820509543" timestamp="557909" />
  <Command __id="168" _type="MoveCaretCommand" caretOffset="976" date="Fri Feb 25 15:31:08 EST 2022" docOffset="1054" starttimestamp="1645820509543" timestamp="558508" />
  <Command __id="156" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:29:21 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10755" docExpressionCount="1075" docLength="11423" projectName="pa1" starttimestamp="1645820509543" timestamp="451853">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			currentToken = scanner.scan();¶			System.out.println(currentToken.spelling);¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="169" _type="MoveCaretCommand" caretOffset="955" date="Fri Feb 25 15:31:09 EST 2022" docOffset="1033" starttimestamp="1645820509543" timestamp="560268" />
  <Command __id="171" _type="MoveCaretCommand" caretOffset="8160" date="Fri Feb 25 15:31:44 EST 2022" docOffset="8311" starttimestamp="1645820509543" timestamp="595392" />
  <Command __id="172" _type="MoveCaretCommand" caretOffset="1455" date="Fri Feb 25 15:31:50 EST 2022" docOffset="1606" starttimestamp="1645820509543" timestamp="601133" />
  <Command __id="173" _type="MoveCaretCommand" caretOffset="1455" date="Fri Feb 25 15:31:50 EST 2022" docOffset="1606" starttimestamp="1645820509543" timestamp="601133" />
  <Command __id="175" _type="ShellCommand" date="Fri Feb 25 15:31:51 EST 2022" starttimestamp="1645820509543" timestamp="601943" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="176" _type="FindCommand" caseSensitive="true" date="Fri Feb 25 15:31:53 EST 2022" forward="false" matchWord="true" offset="1606" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="604401" wrapSearch="false">
    <searchString><![CDATA[class]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="170" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:31:44 EST 2022" docASTNodeCount="1049" docActiveCodeLength="7686" docExpressionCount="643" docLength="8416" projectName="pa1" starttimestamp="1645820509543" timestamp="595254">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1 || currentChar == eolUnix || currentChar == eolWindows) {¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="177" _type="FindCommand" caseSensitive="true" date="Fri Feb 25 15:31:55 EST 2022" forward="false" matchWord="true" offset="233" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="605837" wrapSearch="false">
    <searchString><![CDATA[class]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="178" _type="ShellCommand" date="Fri Feb 25 15:31:56 EST 2022" starttimestamp="1645820509543" timestamp="606761" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="180" _type="MoveCaretCommand" caretOffset="955" date="Fri Feb 25 15:32:39 EST 2022" docOffset="1033" starttimestamp="1645820509543" timestamp="649849" />
  <Command __id="179" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:32:39 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10755" docExpressionCount="1075" docLength="11423" projectName="pa1" starttimestamp="1645820509543" timestamp="649746">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			currentToken = scanner.scan();¶			System.out.println(currentToken.spelling);¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="181" _type="MoveCaretCommand" caretOffset="948" date="Fri Feb 25 15:32:58 EST 2022" docOffset="1026" starttimestamp="1645820509543" timestamp="668565" />
  <DocumentChange __id="182" _type="Insert" date="Fri Feb 25 15:32:59 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10759" docExpressionCount="1075" docLength="11427" length="4" offset="1026" starttimestamp="1645820509543" timestamp="669683">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="183" _type="InsertStringCommand" date="Fri Feb 25 15:32:59 EST 2022" starttimestamp="1645820509543" timestamp="669693" timestamp2="669693">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="184" _type="Insert" date="Fri Feb 25 15:33:04 EST 2022" docASTNodeCount="1545" docActiveCodeLength="10760" docExpressionCount="1076" docLength="11428" length="1" offset="1030" starttimestamp="1645820509543" timestamp="675353">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="185" _type="InsertStringCommand" date="Fri Feb 25 15:33:04 EST 2022" starttimestamp="1645820509543" timestamp="675360" timestamp2="675360">
    <data><![CDATA[S]]></data>
  </Command>
  <DocumentChange __id="186" _type="Insert" date="Fri Feb 25 15:33:05 EST 2022" docASTNodeCount="1545" docActiveCodeLength="10761" docExpressionCount="1076" docLength="11429" length="1" offset="1031" starttimestamp="1645820509543" timestamp="675559">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="187" _type="InsertStringCommand" date="Fri Feb 25 15:33:05 EST 2022" starttimestamp="1645820509543" timestamp="675567" timestamp2="675567">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="188" _type="Insert" date="Fri Feb 25 15:33:05 EST 2022" docASTNodeCount="1545" docActiveCodeLength="10762" docExpressionCount="1076" docLength="11430" length="1" offset="1032" starttimestamp="1645820509543" timestamp="675653">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="189" _type="InsertStringCommand" date="Fri Feb 25 15:33:05 EST 2022" starttimestamp="1645820509543" timestamp="675658" timestamp2="675658">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="190" _type="Insert" date="Fri Feb 25 15:33:05 EST 2022" docASTNodeCount="1545" docActiveCodeLength="10763" docExpressionCount="1076" docLength="11431" length="1" offset="1033" starttimestamp="1645820509543" timestamp="675872">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="191" _type="InsertStringCommand" date="Fri Feb 25 15:33:05 EST 2022" starttimestamp="1645820509543" timestamp="675881" timestamp2="675881">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="192" _type="Insert" date="Fri Feb 25 15:33:05 EST 2022" docASTNodeCount="1545" docActiveCodeLength="10764" docExpressionCount="1076" docLength="11432" length="1" offset="1034" starttimestamp="1645820509543" timestamp="675983">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="193" _type="InsertStringCommand" date="Fri Feb 25 15:33:05 EST 2022" starttimestamp="1645820509543" timestamp="675987" timestamp2="675987">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="194" _type="Insert" date="Fri Feb 25 15:33:05 EST 2022" docASTNodeCount="1545" docActiveCodeLength="10765" docExpressionCount="1076" docLength="11433" length="1" offset="1035" starttimestamp="1645820509543" timestamp="676061">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="195" _type="InsertStringCommand" date="Fri Feb 25 15:33:05 EST 2022" starttimestamp="1645820509543" timestamp="676066" timestamp2="676066">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="196" _type="Insert" date="Fri Feb 25 15:33:05 EST 2022" docASTNodeCount="1543" docActiveCodeLength="10766" docExpressionCount="1076" docLength="11434" length="1" offset="1036" starttimestamp="1645820509543" timestamp="676336">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="197" _type="InsertStringCommand" date="Fri Feb 25 15:33:05 EST 2022" starttimestamp="1645820509543" timestamp="676344" timestamp2="676344">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="198" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 25 15:33:05 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="676348" />
  <DocumentChange __id="199" _type="Insert" date="Fri Feb 25 15:33:06 EST 2022" docASTNodeCount="1547" docActiveCodeLength="10767" docExpressionCount="1078" docLength="11435" length="1" offset="1037" starttimestamp="1645820509543" timestamp="676565">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="200" _type="Insert" date="Fri Feb 25 15:33:06 EST 2022" docASTNodeCount="1547" docActiveCodeLength="10768" docExpressionCount="1078" docLength="11436" length="1" offset="1038" starttimestamp="1645820509543" timestamp="676703">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="201" _type="Insert" date="Fri Feb 25 15:33:06 EST 2022" docASTNodeCount="1547" docActiveCodeLength="10769" docExpressionCount="1078" docLength="11437" length="1" offset="1039" starttimestamp="1645820509543" timestamp="676840">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="202" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 25 15:33:07 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="677487" />
  <DocumentChange __id="203" _type="Replace" date="Fri Feb 25 15:33:07 EST 2022" docASTNodeCount="1545" docActiveCodeLength="10770" docExpressionCount="1078" docLength="11438" endLine="45" insertionLength="4" int_docASTNodeCount="1543" int_docActiveCodeLength="10766" int_docExpressionCount="1076" int_docLength="11434" length="3" offset="1037" startLine="45" starttimestamp="1645820509543" timestamp="677493">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="206" _type="Insert" date="Fri Feb 25 15:33:07 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10771" docExpressionCount="1080" docLength="11439" length="1" offset="1041" starttimestamp="1645820509543" timestamp="677829">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="207" _type="Insert" date="Fri Feb 25 15:33:09 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10772" docExpressionCount="1080" docLength="11440" length="1" offset="1042" starttimestamp="1645820509543" timestamp="680362">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="208" _type="Insert" date="Fri Feb 25 15:33:10 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10773" docExpressionCount="1080" docLength="11441" length="1" offset="1043" starttimestamp="1645820509543" timestamp="680461">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="209" _type="Insert" date="Fri Feb 25 15:33:10 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10774" docExpressionCount="1080" docLength="11442" length="1" offset="1044" starttimestamp="1645820509543" timestamp="680573">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="210" _type="Insert" date="Fri Feb 25 15:33:10 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10775" docExpressionCount="1080" docLength="11443" length="1" offset="1045" starttimestamp="1645820509543" timestamp="680661">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="211" _type="Insert" date="Fri Feb 25 15:33:10 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10776" docExpressionCount="1080" docLength="11444" length="1" offset="1046" starttimestamp="1645820509543" timestamp="680749">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="212" _type="Insert" date="Fri Feb 25 15:33:10 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10777" docExpressionCount="1080" docLength="11445" length="1" offset="1047" starttimestamp="1645820509543" timestamp="680829">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="213" _type="Insert" date="Fri Feb 25 15:33:11 EST 2022" docASTNodeCount="1548" docActiveCodeLength="10779" docExpressionCount="1080" docLength="11447" length="2" offset="1048" starttimestamp="1645820509543" timestamp="681782">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="214" _type="Insert" date="Fri Feb 25 15:33:12 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10780" docExpressionCount="1081" docLength="11448" length="1" offset="1049" starttimestamp="1645820509543" timestamp="682997">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="215" _type="Insert" date="Fri Feb 25 15:33:12 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10781" docExpressionCount="1081" docLength="11449" length="1" offset="1050" starttimestamp="1645820509543" timestamp="683136">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="217" _type="Delete" date="Fri Feb 25 15:33:12 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10780" docExpressionCount="1081" docLength="11448" endLine="45" length="1" offset="1050" startLine="45" starttimestamp="1645820509543" timestamp="683408">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="219" _type="Delete" date="Fri Feb 25 15:33:13 EST 2022" docASTNodeCount="1548" docActiveCodeLength="10779" docExpressionCount="1080" docLength="11447" endLine="45" length="1" offset="1049" startLine="45" starttimestamp="1645820509543" timestamp="683578">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="221" _type="Insert" date="Fri Feb 25 15:33:13 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10780" docExpressionCount="1081" docLength="11448" length="1" offset="1049" starttimestamp="1645820509543" timestamp="683626">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="223" _type="Insert" date="Fri Feb 25 15:33:13 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10781" docExpressionCount="1081" docLength="11449" length="1" offset="1050" starttimestamp="1645820509543" timestamp="683807">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="225" _type="Insert" date="Fri Feb 25 15:33:13 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10782" docExpressionCount="1081" docLength="11450" length="1" offset="1051" starttimestamp="1645820509543" timestamp="683904">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="227" _type="Insert" date="Fri Feb 25 15:33:13 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10783" docExpressionCount="1081" docLength="11451" length="1" offset="1052" starttimestamp="1645820509543" timestamp="684049">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="229" _type="Insert" date="Fri Feb 25 15:33:13 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10784" docExpressionCount="1081" docLength="11452" length="1" offset="1053" starttimestamp="1645820509543" timestamp="684163">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="231" _type="Insert" date="Fri Feb 25 15:33:13 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10785" docExpressionCount="1081" docLength="11453" length="1" offset="1054" starttimestamp="1645820509543" timestamp="684282">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="233" _type="Insert" date="Fri Feb 25 15:33:13 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10786" docExpressionCount="1081" docLength="11454" length="1" offset="1055" starttimestamp="1645820509543" timestamp="684344">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="235" _type="Insert" date="Fri Feb 25 15:33:18 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10787" docExpressionCount="1081" docLength="11455" length="1" offset="1056" starttimestamp="1645820509543" timestamp="689196">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <DocumentChange __id="237" _type="Insert" date="Fri Feb 25 15:33:18 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10788" docExpressionCount="1081" docLength="11456" length="1" offset="1057" starttimestamp="1645820509543" timestamp="689369">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="239" _type="Insert" date="Fri Feb 25 15:33:19 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10789" docExpressionCount="1081" docLength="11457" length="1" offset="1058" starttimestamp="1645820509543" timestamp="689538">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="241" _type="Insert" date="Fri Feb 25 15:33:19 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10790" docExpressionCount="1081" docLength="11458" length="1" offset="1059" starttimestamp="1645820509543" timestamp="689592">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="243" _type="Insert" date="Fri Feb 25 15:33:19 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10791" docExpressionCount="1081" docLength="11459" length="1" offset="1060" starttimestamp="1645820509543" timestamp="689696">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="245" _type="Insert" date="Fri Feb 25 15:33:19 EST 2022" docASTNodeCount="1548" docActiveCodeLength="10792" docExpressionCount="1081" docLength="11460" length="1" offset="1061" starttimestamp="1645820509543" timestamp="689974">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="249" _type="Insert" date="Fri Feb 25 15:33:20 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10800" docExpressionCount="1083" docLength="11468" length="8" offset="1062" starttimestamp="1645820509543" timestamp="690860">
    <text><![CDATA[spelling]]></text>
  </DocumentChange>
  <Command __id="255" _type="EclipseCommand" commandID="" date="Fri Feb 25 15:33:22 EST 2022" starttimestamp="1645820509543" timestamp="693422" />
  <Command __id="256" _type="EclipseCommand" commandID="" date="Fri Feb 25 15:33:23 EST 2022" starttimestamp="1645820509543" timestamp="693492" />
  <Command __id="257" _type="MoveCaretCommand" caretOffset="972" date="Fri Feb 25 15:33:24 EST 2022" docOffset="1050" starttimestamp="1645820509543" timestamp="694733" />
  <Command __id="258" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 25 15:33:25 EST 2022" starttimestamp="1645820509543" timestamp="695506" />
  <Command __id="260" _type="InsertStringCommand" date="Fri Feb 25 15:33:25 EST 2022" starttimestamp="1645820509543" timestamp="695887" timestamp2="695887">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="262" _type="InsertStringCommand" date="Fri Feb 25 15:33:25 EST 2022" starttimestamp="1645820509543" timestamp="696006" timestamp2="696006">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="263" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 25 15:33:25 EST 2022" starttimestamp="1645820509543" timestamp="696292" />
  <Command __id="265" _type="InsertStringCommand" date="Fri Feb 25 15:33:26 EST 2022" starttimestamp="1645820509543" timestamp="696939" timestamp2="696939">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="267" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 25 15:33:26 EST 2022" starttimestamp="1645820509543" timestamp="697273" />
  <Command __id="269" _type="InsertStringCommand" date="Fri Feb 25 15:33:27 EST 2022" starttimestamp="1645820509543" timestamp="697513" timestamp2="697513">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="271" _type="InsertStringCommand" date="Fri Feb 25 15:33:27 EST 2022" starttimestamp="1645820509543" timestamp="697599" timestamp2="697599">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="273" _type="InsertStringCommand" date="Fri Feb 25 15:33:27 EST 2022" starttimestamp="1645820509543" timestamp="697748" timestamp2="697748">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="275" _type="InsertStringCommand" date="Fri Feb 25 15:33:27 EST 2022" starttimestamp="1645820509543" timestamp="697876" timestamp2="697876">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="277" _type="InsertStringCommand" date="Fri Feb 25 15:33:27 EST 2022" starttimestamp="1645820509543" timestamp="697963" timestamp2="697963">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="279" _type="InsertStringCommand" date="Fri Feb 25 15:33:27 EST 2022" starttimestamp="1645820509543" timestamp="698043" timestamp2="698043">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="281" _type="InsertStringCommand" date="Fri Feb 25 15:33:27 EST 2022" starttimestamp="1645820509543" timestamp="698123" timestamp2="698123">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="283" _type="InsertStringCommand" date="Fri Feb 25 15:33:27 EST 2022" starttimestamp="1645820509543" timestamp="698260" timestamp2="698260">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="285" _type="InsertStringCommand" date="Fri Feb 25 15:33:28 EST 2022" starttimestamp="1645820509543" timestamp="698557" timestamp2="698557">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="287" _type="InsertStringCommand" date="Fri Feb 25 15:33:28 EST 2022" starttimestamp="1645820509543" timestamp="698650" timestamp2="698650">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="289" _type="InsertStringCommand" date="Fri Feb 25 15:33:28 EST 2022" starttimestamp="1645820509543" timestamp="698758" timestamp2="698758">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="291" _type="InsertStringCommand" date="Fri Feb 25 15:33:28 EST 2022" starttimestamp="1645820509543" timestamp="698830" timestamp2="698830">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="293" _type="InsertStringCommand" date="Fri Feb 25 15:33:28 EST 2022" starttimestamp="1645820509543" timestamp="698933" timestamp2="698933">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="295" _type="InsertStringCommand" date="Fri Feb 25 15:33:28 EST 2022" starttimestamp="1645820509543" timestamp="699361" timestamp2="699361">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="297" _type="InsertStringCommand" date="Fri Feb 25 15:33:29 EST 2022" starttimestamp="1645820509543" timestamp="700324" timestamp2="700324">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="298" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:33:30 EST 2022" starttimestamp="1645820509543" timestamp="700490" />
  <Command __id="300" _type="InsertStringCommand" date="Fri Feb 25 15:33:30 EST 2022" starttimestamp="1645820509543" timestamp="701117" timestamp2="701117">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="302" _type="InsertStringCommand" date="Fri Feb 25 15:33:30 EST 2022" starttimestamp="1645820509543" timestamp="701410" timestamp2="701410">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="304" _type="InsertStringCommand" date="Fri Feb 25 15:33:31 EST 2022" starttimestamp="1645820509543" timestamp="701560" timestamp2="701560">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="252" _type="Insert" date="Fri Feb 25 15:33:21 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10801" docExpressionCount="1083" docLength="11469" length="1" offset="1071" starttimestamp="1645820509543" timestamp="692447">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="259" _type="Insert" date="Fri Feb 25 15:33:25 EST 2022" docASTNodeCount="1355" docActiveCodeLength="10802" docExpressionCount="936" docLength="11470" length="1" offset="1049" starttimestamp="1645820509543" timestamp="695876">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <DocumentChange __id="261" _type="Insert" date="Fri Feb 25 15:33:25 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10803" docExpressionCount="1083" docLength="11471" length="1" offset="1050" starttimestamp="1645820509543" timestamp="695999">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <DocumentChange __id="264" _type="Insert" date="Fri Feb 25 15:33:26 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10804" docExpressionCount="1083" docLength="11472" length="1" offset="1050" starttimestamp="1645820509543" timestamp="696935">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="266" _type="Delete" date="Fri Feb 25 15:33:26 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10803" docExpressionCount="1083" docLength="11471" endLine="45" length="1" offset="1050" startLine="45" starttimestamp="1645820509543" timestamp="697270">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="268" _type="Insert" date="Fri Feb 25 15:33:27 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10804" docExpressionCount="1083" docLength="11472" length="1" offset="1050" starttimestamp="1645820509543" timestamp="697506">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="270" _type="Insert" date="Fri Feb 25 15:33:27 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10805" docExpressionCount="1083" docLength="11473" length="1" offset="1051" starttimestamp="1645820509543" timestamp="697591">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="272" _type="Insert" date="Fri Feb 25 15:33:27 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10806" docExpressionCount="1083" docLength="11474" length="1" offset="1052" starttimestamp="1645820509543" timestamp="697741">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="274" _type="Insert" date="Fri Feb 25 15:33:27 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10807" docExpressionCount="1083" docLength="11475" length="1" offset="1053" starttimestamp="1645820509543" timestamp="697869">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="276" _type="Insert" date="Fri Feb 25 15:33:27 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10808" docExpressionCount="1083" docLength="11476" length="1" offset="1054" starttimestamp="1645820509543" timestamp="697957">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <DocumentChange __id="278" _type="Insert" date="Fri Feb 25 15:33:27 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10809" docExpressionCount="1083" docLength="11477" length="1" offset="1055" starttimestamp="1645820509543" timestamp="698037">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="280" _type="Insert" date="Fri Feb 25 15:33:27 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10810" docExpressionCount="1083" docLength="11478" length="1" offset="1056" starttimestamp="1645820509543" timestamp="698117">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="282" _type="Insert" date="Fri Feb 25 15:33:27 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10811" docExpressionCount="1083" docLength="11479" length="1" offset="1057" starttimestamp="1645820509543" timestamp="698255">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="284" _type="Insert" date="Fri Feb 25 15:33:28 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10812" docExpressionCount="1083" docLength="11480" length="1" offset="1058" starttimestamp="1645820509543" timestamp="698551">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="286" _type="Insert" date="Fri Feb 25 15:33:28 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10813" docExpressionCount="1083" docLength="11481" length="1" offset="1059" starttimestamp="1645820509543" timestamp="698641">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="288" _type="Insert" date="Fri Feb 25 15:33:28 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10814" docExpressionCount="1083" docLength="11482" length="1" offset="1060" starttimestamp="1645820509543" timestamp="698743">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="290" _type="Insert" date="Fri Feb 25 15:33:28 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10815" docExpressionCount="1083" docLength="11483" length="1" offset="1061" starttimestamp="1645820509543" timestamp="698822">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="292" _type="Insert" date="Fri Feb 25 15:33:28 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10816" docExpressionCount="1083" docLength="11484" length="1" offset="1062" starttimestamp="1645820509543" timestamp="698927">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="294" _type="Insert" date="Fri Feb 25 15:33:28 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10817" docExpressionCount="1083" docLength="11485" length="1" offset="1063" starttimestamp="1645820509543" timestamp="699354">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <DocumentChange __id="296" _type="Insert" date="Fri Feb 25 15:33:29 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10818" docExpressionCount="1083" docLength="11486" length="1" offset="1064" starttimestamp="1645820509543" timestamp="700319">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="299" _type="Insert" date="Fri Feb 25 15:33:30 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10819" docExpressionCount="1083" docLength="11487" length="1" offset="1066" starttimestamp="1645820509543" timestamp="701110">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="301" _type="Insert" date="Fri Feb 25 15:33:30 EST 2022" docASTNodeCount="1553" docActiveCodeLength="10820" docExpressionCount="1085" docLength="11488" length="1" offset="1067" starttimestamp="1645820509543" timestamp="701400">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <DocumentChange __id="303" _type="Insert" date="Fri Feb 25 15:33:31 EST 2022" docASTNodeCount="1553" docActiveCodeLength="10821" docExpressionCount="1085" docLength="11489" length="1" offset="1068" starttimestamp="1645820509543" timestamp="701556">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="308" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:33:33 EST 2022" docASTNodeCount="1049" docActiveCodeLength="7686" docExpressionCount="643" docLength="8416" projectName="pa1" starttimestamp="1645820509543" timestamp="703657">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1 || currentChar == eolUnix || currentChar == eolWindows) {¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="311" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:33:35 EST 2022" docASTNodeCount="163" docActiveCodeLength="1007" docExpressionCount="111" docLength="1007" projectName="pa1" starttimestamp="1645820509543" timestamp="706038">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\Compiler.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package miniJava;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;

import miniJava.SyntacticAnalyzer.Parser;
import miniJava.SyntacticAnalyzer.Scanner;

public class Compiler {
	public static void main(String[] args) {
		InputStream inputStream = null;
		try {
			inputStream = new FileInputStream(args[0]);
		} catch (FileNotFoundException e) {
			System.out.println("Input file " + args[0] + " not found");
			System.exit(1);
		}
		
		ErrorReporter errorReporter = new ErrorReporter();
		Scanner scanner = new Scanner(inputStream, errorReporter);
		Parser parser = new Parser(scanner, errorReporter);
		
		System.out.println("Syntactic analysis ... ");
		parser.parse();
		System.out.print("Sytactic analysis complete: ");
		if (errorReporter.hasErrors()) {
			System.out.println("Invalid miniJava program");
			System.exit(4);
		}
		else {
			System.out.println("Valid miniJava program");
			System.exit(0);
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="313" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:33:36 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="706677">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="320" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:33:40 EST 2022" docASTNodeCount="1553" docActiveCodeLength="10821" docExpressionCount="1085" docLength="11489" projectName="pa1" starttimestamp="1645820509543" timestamp="710811">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		"), Diff(INSERT,"System.out.println("is this class: " + currentToken.spelling);¶		"), Diff(EQUAL,"accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			currentToken = scanner.scan();¶			System.out.println(currentToken.spelling);¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		System.out.println("is this class: " + currentToken.spelling);
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
			
			switch (currentToken.kind) {
			// in Type
			case ID:
			acceptIt();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			// in Reference
			case EQUAL:
			acceptIt();
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			case LPAREN:
			acceptIt();
			if (currentToken.kind == TokenKind.RPAREN) {
				acceptIt();
			} else {
				parseArgumentList();
				accept(TokenKind.RPAREN);
			}
			accept(TokenKind.SEMICOLON);
			break;
			
			// both
			case LBRACKET: 
			acceptIt();
			// in Type
			if (currentToken.kind == TokenKind.RBRACKET) {
				acceptIt();
				accept(TokenKind.ID);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			} else {
				// in Reference
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
			
			case DOT:
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET: 
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			default:
				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);
			}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			currentToken = scanner.scan();
			System.out.println(currentToken.spelling);
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="327" _type="RunCommand" date="Fri Feb 25 15:33:57 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="728379" type="Run" />
  <Command __id="328" _type="RunCommand" date="Fri Feb 25 15:33:57 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="728380" type="Run" />
  <Command __id="329" _type="RunCommand" date="Fri Feb 25 15:33:58 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="728526" type="Run" />
  <Command __id="330" _type="RunCommand" date="Fri Feb 25 15:33:58 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="728526" type="Run" />
  <Command __id="331" _type="EHExceptionCommand" date="Fri Feb 25 15:33:58 EST 2022" starttimestamp="1645820509543" timestamp="728579" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
ErrorReporter
{

in here: 
Parse error: Parsing  and expecting 'RCURLY' but found 'EOT'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="332" _type="SelectTextCommand" caretOffset="10505" date="Fri Feb 25 15:34:22 EST 2022" end="10505" start="10292" starttimestamp="1645820509543" timestamp="753156" />
  <Command __id="333" _type="MoveCaretCommand" caretOffset="10505" date="Fri Feb 25 15:34:22 EST 2022" docOffset="10583" starttimestamp="1645820509543" timestamp="753412" />
  <DocumentChange __id="322" _type="Delete" date="Fri Feb 25 15:33:44 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10755" docExpressionCount="1075" docLength="11423" endLine="46" length="66" offset="1028" startLine="45" starttimestamp="1645820509543" timestamp="715200">
    <text><![CDATA[		System.out.println("is this class: " + currentToken.spelling);
]]></text>
  </DocumentChange>
  <Command __id="334" _type="SelectTextCommand" caretOffset="10450" date="Fri Feb 25 15:34:54 EST 2022" end="10492" start="10450" starttimestamp="1645820509543" timestamp="785372" />
  <DocumentChange __id="335" _type="Insert" date="Fri Feb 25 15:34:56 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10797" docExpressionCount="1083" docLength="11465" length="42" offset="10488" starttimestamp="1645820509543" timestamp="786777">
    <text><![CDATA[System.out.println(currentToken.spelling);]]></text>
  </DocumentChange>
  <DocumentChange __id="336" _type="Delete" date="Fri Feb 25 15:34:56 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10755" docExpressionCount="1075" docLength="11423" endLine="481" length="42" offset="10570" startLine="481" starttimestamp="1645820509543" timestamp="786781">
    <text><![CDATA[System.out.println(currentToken.spelling);]]></text>
  </DocumentChange>
  <Command __id="337" _type="MoveCaretCommand" caretOffset="10410" date="Fri Feb 25 15:34:57 EST 2022" docOffset="10488" starttimestamp="1645820509543" timestamp="787520" />
  <DocumentChange __id="338" _type="Insert" date="Fri Feb 25 15:34:57 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10760" docExpressionCount="1075" docLength="11428" length="5" offset="10488" starttimestamp="1645820509543" timestamp="788337">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="339" _type="InsertStringCommand" date="Fri Feb 25 15:34:57 EST 2022" starttimestamp="1645820509543" timestamp="788350" timestamp2="788350">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="340" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Fri Feb 25 15:34:58 EST 2022" starttimestamp="1645820509543" timestamp="788914" />
  <Command __id="341" _type="EclipseCommand" commandID="" date="Fri Feb 25 15:34:58 EST 2022" starttimestamp="1645820509543" timestamp="789015" />
  <Command __id="342" _type="EclipseCommand" commandID="" date="Fri Feb 25 15:34:58 EST 2022" starttimestamp="1645820509543" timestamp="789036" />
  <Command __id="343" _type="MoveCaretCommand" caretOffset="10502" date="Fri Feb 25 15:34:59 EST 2022" docOffset="10580" starttimestamp="1645820509543" timestamp="789605" />
  <Command __id="344" _type="MoveCaretCommand" caretOffset="10497" date="Fri Feb 25 15:34:59 EST 2022" docOffset="10575" starttimestamp="1645820509543" timestamp="789940" />
  <DocumentChange __id="345" _type="Delete" date="Fri Feb 25 15:35:00 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10755" docExpressionCount="1075" docLength="11423" endLine="483" length="5" offset="10572" startLine="482" starttimestamp="1645820509543" timestamp="790559">
    <text><![CDATA[			
]]></text>
  </DocumentChange>
  <Command __id="346" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Fri Feb 25 15:35:00 EST 2022" starttimestamp="1645820509543" timestamp="790570" />
  <Command __id="347" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Fri Feb 25 15:35:00 EST 2022" starttimestamp="1645820509543" timestamp="791375" />
  <Command __id="348" _type="EclipseCommand" commandID="" date="Fri Feb 25 15:35:01 EST 2022" starttimestamp="1645820509543" timestamp="791476" />
  <Command __id="349" _type="EclipseCommand" commandID="" date="Fri Feb 25 15:35:01 EST 2022" starttimestamp="1645820509543" timestamp="791503" />
  <Command __id="350" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:35:02 EST 2022" docASTNodeCount="72" docActiveCodeLength="316" docExpressionCount="36" docLength="316" projectName="pa1" starttimestamp="1645820509543" timestamp="792838">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\TokenKind.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶public enum TokenKind {NUM, CLASS, ID, LBRACKET, RBRACKET, VOID, LPAREN, RPAREN, EOT, EQUAL, THIS,¶							PUBLIC, PRIVATE, STATIC, INT, BOOLEAN, COMMA, DOT, RETURN, SEMICOLON,¶								IF, ELSE, WHILE, UNOP, BINOP, MINUS, TRUE, FALSE, NEW, LCURLY, RCURLY,¶									ERROR}¶¶")]]]></diff>
  </Command>
  <Command __id="351" _type="MoveCaretCommand" caretOffset="260" date="Fri Feb 25 15:35:02 EST 2022" docOffset="260" starttimestamp="1645820509543" timestamp="792960" />
  <Command __id="352" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:35:02 EST 2022" docASTNodeCount="1049" docActiveCodeLength="7686" docExpressionCount="643" docLength="8416" projectName="pa1" starttimestamp="1645820509543" timestamp="793220">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1 || currentChar == eolUnix || currentChar == eolWindows) {¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="353" _type="MoveCaretCommand" caretOffset="2481" date="Fri Feb 25 15:35:02 EST 2022" docOffset="2632" starttimestamp="1645820509543" timestamp="793329" />
  <Command __id="354" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:35:03 EST 2022" docASTNodeCount="72" docActiveCodeLength="316" docExpressionCount="36" docLength="316" projectName="pa1" starttimestamp="1645820509543" timestamp="793718">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\TokenKind.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶public enum TokenKind {NUM, CLASS, ID, LBRACKET, RBRACKET, VOID, LPAREN, RPAREN, EOT, EQUAL, THIS,¶							PUBLIC, PRIVATE, STATIC, INT, BOOLEAN, COMMA, DOT, RETURN, SEMICOLON,¶								IF, ELSE, WHILE, UNOP, BINOP, MINUS, TRUE, FALSE, NEW, LCURLY, RCURLY,¶									ERROR}¶¶")]]]></diff>
  </Command>
  <Command __id="355" _type="MoveCaretCommand" caretOffset="260" date="Fri Feb 25 15:35:03 EST 2022" docOffset="260" starttimestamp="1645820509543" timestamp="793802" />
  <Command __id="356" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:35:03 EST 2022" docASTNodeCount="163" docActiveCodeLength="1007" docExpressionCount="111" docLength="1007" projectName="pa1" starttimestamp="1645820509543" timestamp="794366">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\Compiler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶import java.io.FileInputStream;¶import java.io.FileNotFoundException;¶import java.io.InputStream;¶¶import miniJava.SyntacticAnalyzer.Parser;¶import miniJava.SyntacticAnalyzer.Scanner;¶¶public class Compiler {¶	public static void main(String[] args) {¶		InputStream inputStream = null;¶		try {¶			inputStream = new FileInputStream(args[0]);¶		} catch (FileNotFoundException e) {¶			System.out.println("Input file " + args[0] + " not found");¶			System.exit(1);¶		}¶		¶		ErrorReporter errorReporter = new ErrorReporter();¶		Scanner scanner = new Scanner(inputStream, errorReporter);¶		Parser parser = new Parser(scanner, errorReporter);¶		¶		System.out.println("Syntactic analysis ... ");¶		parser.parse();¶		System.out.print("Sytactic analysis complete: ");¶		if (errorReporter.hasErrors()) {¶			System.out.println("Invalid miniJava program");¶			System.exit(4);¶		}¶		else {¶			System.out.println("Valid miniJava program");¶			System.exit(0);¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="357" _type="MoveCaretCommand" caretOffset="840" date="Fri Feb 25 15:35:03 EST 2022" docOffset="997" starttimestamp="1645820509543" timestamp="794453" />
  <Command __id="358" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:35:04 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="794866">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="359" _type="MoveCaretCommand" caretOffset="219" date="Fri Feb 25 15:35:04 EST 2022" docOffset="219" starttimestamp="1645820509543" timestamp="795210" />
  <Command __id="360" _type="RunCommand" date="Fri Feb 25 15:35:05 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="796131" type="Run" />
  <Command __id="361" _type="RunCommand" date="Fri Feb 25 15:35:05 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="796131" type="Run" />
  <Command __id="362" _type="RunCommand" date="Fri Feb 25 15:35:05 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="796286" type="Run" />
  <Command __id="363" _type="RunCommand" date="Fri Feb 25 15:35:05 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="796286" type="Run" />
  <Command __id="364" _type="EHExceptionCommand" date="Fri Feb 25 15:35:05 EST 2022" starttimestamp="1645820509543" timestamp="796346" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
in here: 
Parse error: Parsing  and expecting 'RCURLY' but found 'EOT'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="366" _type="MoveCaretCommand" caretOffset="10494" date="Fri Feb 25 15:35:09 EST 2022" docOffset="10572" starttimestamp="1645820509543" timestamp="800207" />
  <Command __id="367" _type="MoveCaretCommand" caretOffset="11040" date="Fri Feb 25 15:35:14 EST 2022" docOffset="11118" starttimestamp="1645820509543" timestamp="804589" />
  <Command __id="368" _type="MoveCaretCommand" caretOffset="10867" date="Fri Feb 25 15:35:14 EST 2022" docOffset="10945" starttimestamp="1645820509543" timestamp="804885" />
  <Command __id="369" _type="MoveCaretCommand" caretOffset="10834" date="Fri Feb 25 15:35:14 EST 2022" docOffset="10912" starttimestamp="1645820509543" timestamp="805124" />
  <Command __id="370" _type="MoveCaretCommand" caretOffset="10654" date="Fri Feb 25 15:35:14 EST 2022" docOffset="10732" starttimestamp="1645820509543" timestamp="805420" />
  <Command __id="371" _type="MoveCaretCommand" caretOffset="10433" date="Fri Feb 25 15:35:17 EST 2022" docOffset="10511" starttimestamp="1645820509543" timestamp="807885" />
  <Command __id="373" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 25 15:35:18 EST 2022" starttimestamp="1645820509543" timestamp="808593" />
  <Command __id="375" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 25 15:35:18 EST 2022" starttimestamp="1645820509543" timestamp="808712" />
  <Command __id="376" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Fri Feb 25 15:35:18 EST 2022" starttimestamp="1645820509543" timestamp="809371" />
  <Command __id="377" _type="EclipseCommand" commandID="" date="Fri Feb 25 15:35:19 EST 2022" starttimestamp="1645820509543" timestamp="809469" />
  <Command __id="378" _type="EclipseCommand" commandID="" date="Fri Feb 25 15:35:19 EST 2022" starttimestamp="1645820509543" timestamp="809505" />
  <Command __id="379" _type="MoveCaretCommand" caretOffset="1212" date="Fri Feb 25 15:35:24 EST 2022" docOffset="1290" starttimestamp="1645820509543" timestamp="814532" />
  <Command __id="380" _type="MoveCaretCommand" caretOffset="1126" date="Fri Feb 25 15:35:24 EST 2022" docOffset="1204" starttimestamp="1645820509543" timestamp="814868" />
  <Command __id="381" _type="MoveCaretCommand" caretOffset="1212" date="Fri Feb 25 15:35:25 EST 2022" docOffset="1290" starttimestamp="1645820509543" timestamp="815573" />
  <Command __id="365" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:35:09 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10755" docExpressionCount="1075" docLength="11423" projectName="pa1" starttimestamp="1645820509543" timestamp="800146">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		"), Diff(DELETE,"System.out.println("is this class: " + currentToken.spelling);¶		"), Diff(EQUAL,"accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			"), Diff(DELETE,"currentToken = scanner.scan();¶			"), Diff(EQUAL,"System.out.println(currentToken.spelling);¶		"), Diff(INSERT,"	currentToken = scanner.scan();¶		"), Diff(EQUAL,"}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
			
			switch (currentToken.kind) {
			// in Type
			case ID:
			acceptIt();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			// in Reference
			case EQUAL:
			acceptIt();
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			case LPAREN:
			acceptIt();
			if (currentToken.kind == TokenKind.RPAREN) {
				acceptIt();
			} else {
				parseArgumentList();
				accept(TokenKind.RPAREN);
			}
			accept(TokenKind.SEMICOLON);
			break;
			
			// both
			case LBRACKET: 
			acceptIt();
			// in Type
			if (currentToken.kind == TokenKind.RBRACKET) {
				acceptIt();
				accept(TokenKind.ID);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			} else {
				// in Reference
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
			
			case DOT:
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET: 
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			default:
				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);
			}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="372" _type="Delete" date="Fri Feb 25 15:35:18 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10754" docExpressionCount="1075" docLength="11422" endLine="480" length="1" offset="10510" startLine="480" starttimestamp="1645820509543" timestamp="808588">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="374" _type="Delete" date="Fri Feb 25 15:35:18 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10753" docExpressionCount="1075" docLength="11421" endLine="480" length="1" offset="10509" startLine="480" starttimestamp="1645820509543" timestamp="808709">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="384" _type="RunCommand" date="Fri Feb 25 15:35:36 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="827177" type="Run" />
  <Command __id="385" _type="RunCommand" date="Fri Feb 25 15:35:36 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="827178" type="Run" />
  <Command __id="386" _type="EHExceptionCommand" date="Fri Feb 25 15:35:36 EST 2022" starttimestamp="1645820509543" timestamp="827353" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
classErrorReporter{in here: 
Parse error: Parsing  and expecting 'RCURLY' but found 'EOT'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="387" _type="RunCommand" date="Fri Feb 25 15:35:36 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="827364" type="Run" />
  <Command __id="388" _type="RunCommand" date="Fri Feb 25 15:35:36 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="827364" type="Run" />
  <Command __id="389" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:35:54 EST 2022" docASTNodeCount="46" docActiveCodeLength="297" docExpressionCount="21" docLength="297" projectName="pa1" starttimestamp="1645820509543" timestamp="845416">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static kill;¶¶		static ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="390" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:35:55 EST 2022" docASTNodeCount="46" docActiveCodeLength="297" docExpressionCount="21" docLength="297" projectName="pa1" starttimestamp="1645820509543" timestamp="845911">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static kill;¶¶		static ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="391" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:35:56 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10753" docExpressionCount="1075" docLength="11421" projectName="pa1" starttimestamp="1645820509543" timestamp="846540">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.print"), Diff(DELETE,"ln"), Diff(EQUAL,"(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
			
			switch (currentToken.kind) {
			// in Type
			case ID:
			acceptIt();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			// in Reference
			case EQUAL:
			acceptIt();
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			case LPAREN:
			acceptIt();
			if (currentToken.kind == TokenKind.RPAREN) {
				acceptIt();
			} else {
				parseArgumentList();
				accept(TokenKind.RPAREN);
			}
			accept(TokenKind.SEMICOLON);
			break;
			
			// both
			case LBRACKET: 
			acceptIt();
			// in Type
			if (currentToken.kind == TokenKind.RBRACKET) {
				acceptIt();
				accept(TokenKind.ID);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			} else {
				// in Reference
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
			
			case DOT:
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET: 
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			default:
				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);
			}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.print(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="392" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:35:56 EST 2022" docASTNodeCount="46" docActiveCodeLength="297" docExpressionCount="21" docLength="297" projectName="pa1" starttimestamp="1645820509543" timestamp="846602">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static kill;¶¶		static ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="393" _type="MoveCaretCommand" caretOffset="1689" date="Fri Feb 25 15:35:56 EST 2022" docOffset="1767" starttimestamp="1645820509543" timestamp="846725" />
  <Command __id="395" _type="MoveCaretCommand" caretOffset="1070" date="Fri Feb 25 15:36:09 EST 2022" docOffset="1148" starttimestamp="1645820509543" timestamp="860095" />
  <Command __id="396" _type="SelectTextCommand" caretOffset="1034" date="Fri Feb 25 15:36:10 EST 2022" end="1070" start="1034" starttimestamp="1645820509543" timestamp="861308" />
  <Command __id="397" _type="SelectTextCommand" caretOffset="1034" date="Fri Feb 25 15:36:10 EST 2022" end="1070" start="1034" starttimestamp="1645820509543" timestamp="861308" />
  <Command __id="394" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:36:09 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10753" docExpressionCount="1075" docLength="11421" projectName="pa1" starttimestamp="1645820509543" timestamp="860005">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.print(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="398" _type="CopyCommand" date="Fri Feb 25 15:36:18 EST 2022" starttimestamp="1645820509543" timestamp="868498" />
  <Command __id="399" _type="MoveCaretCommand" caretOffset="1023" date="Fri Feb 25 15:36:18 EST 2022" docOffset="1101" starttimestamp="1645820509543" timestamp="869292" />
  <Command __id="400" _type="MoveCaretCommand" caretOffset="1023" date="Fri Feb 25 15:36:18 EST 2022" docOffset="1101" starttimestamp="1645820509543" timestamp="869292" />
  <DocumentChange __id="401" _type="Insert" date="Fri Feb 25 15:36:20 EST 2022" docASTNodeCount="1544" docActiveCodeLength="10754" docExpressionCount="1076" docLength="11422" length="1" offset="1101" starttimestamp="1645820509543" timestamp="870568">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="402" _type="InsertStringCommand" date="Fri Feb 25 15:36:20 EST 2022" starttimestamp="1645820509543" timestamp="870572" timestamp2="870572">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="403" _type="InsertStringCommand" date="Fri Feb 25 15:36:20 EST 2022" starttimestamp="1645820509543" timestamp="870573" timestamp2="870573">
    <data><![CDATA[S]]></data>
  </Command>
  <DocumentChange __id="404" _type="Insert" date="Fri Feb 25 15:36:20 EST 2022" docASTNodeCount="1544" docActiveCodeLength="10755" docExpressionCount="1076" docLength="11423" length="1" offset="1102" starttimestamp="1645820509543" timestamp="870781">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="405" _type="InsertStringCommand" date="Fri Feb 25 15:36:20 EST 2022" starttimestamp="1645820509543" timestamp="870787" timestamp2="870787">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="406" _type="InsertStringCommand" date="Fri Feb 25 15:36:20 EST 2022" starttimestamp="1645820509543" timestamp="870787" timestamp2="870787">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="407" _type="Insert" date="Fri Feb 25 15:36:20 EST 2022" docASTNodeCount="1544" docActiveCodeLength="10756" docExpressionCount="1076" docLength="11424" length="1" offset="1103" starttimestamp="1645820509543" timestamp="870845">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="408" _type="InsertStringCommand" date="Fri Feb 25 15:36:20 EST 2022" starttimestamp="1645820509543" timestamp="870851" timestamp2="870851">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="409" _type="InsertStringCommand" date="Fri Feb 25 15:36:20 EST 2022" starttimestamp="1645820509543" timestamp="870851" timestamp2="870851">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="410" _type="Insert" date="Fri Feb 25 15:36:20 EST 2022" docASTNodeCount="1544" docActiveCodeLength="10757" docExpressionCount="1076" docLength="11425" length="1" offset="1104" starttimestamp="1645820509543" timestamp="871103">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="411" _type="InsertStringCommand" date="Fri Feb 25 15:36:20 EST 2022" starttimestamp="1645820509543" timestamp="871109" timestamp2="871109">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="412" _type="InsertStringCommand" date="Fri Feb 25 15:36:20 EST 2022" starttimestamp="1645820509543" timestamp="871109" timestamp2="871109">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="413" _type="Insert" date="Fri Feb 25 15:36:20 EST 2022" docASTNodeCount="1544" docActiveCodeLength="10758" docExpressionCount="1076" docLength="11426" length="1" offset="1105" starttimestamp="1645820509543" timestamp="871415">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="414" _type="InsertStringCommand" date="Fri Feb 25 15:36:20 EST 2022" starttimestamp="1645820509543" timestamp="871422" timestamp2="871422">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="415" _type="InsertStringCommand" date="Fri Feb 25 15:36:20 EST 2022" starttimestamp="1645820509543" timestamp="871423" timestamp2="871423">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="416" _type="Insert" date="Fri Feb 25 15:36:21 EST 2022" docASTNodeCount="1544" docActiveCodeLength="10759" docExpressionCount="1076" docLength="11427" length="1" offset="1106" starttimestamp="1645820509543" timestamp="871518">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="417" _type="InsertStringCommand" date="Fri Feb 25 15:36:21 EST 2022" starttimestamp="1645820509543" timestamp="871525" timestamp2="871525">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="418" _type="InsertStringCommand" date="Fri Feb 25 15:36:21 EST 2022" starttimestamp="1645820509543" timestamp="871525" timestamp2="871525">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="419" _type="Insert" date="Fri Feb 25 15:36:21 EST 2022" docASTNodeCount="1544" docActiveCodeLength="10760" docExpressionCount="1076" docLength="11428" length="1" offset="1107" starttimestamp="1645820509543" timestamp="871956">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="420" _type="InsertStringCommand" date="Fri Feb 25 15:36:21 EST 2022" starttimestamp="1645820509543" timestamp="871964" timestamp2="871964">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="421" _type="InsertStringCommand" date="Fri Feb 25 15:36:21 EST 2022" starttimestamp="1645820509543" timestamp="871964" timestamp2="871964">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="422" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 25 15:36:21 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="871968" />
  <DocumentChange __id="423" _type="Insert" date="Fri Feb 25 15:36:21 EST 2022" docASTNodeCount="1546" docActiveCodeLength="10761" docExpressionCount="1078" docLength="11429" length="1" offset="1108" starttimestamp="1645820509543" timestamp="872197">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="424" _type="Insert" date="Fri Feb 25 15:36:21 EST 2022" docASTNodeCount="1546" docActiveCodeLength="10762" docExpressionCount="1078" docLength="11430" length="1" offset="1109" starttimestamp="1645820509543" timestamp="872301">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="425" _type="Insert" date="Fri Feb 25 15:36:21 EST 2022" docASTNodeCount="1546" docActiveCodeLength="10763" docExpressionCount="1078" docLength="11431" length="1" offset="1110" starttimestamp="1645820509543" timestamp="872380">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="426" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 25 15:36:22 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="872621" />
  <DocumentChange __id="427" _type="Replace" date="Fri Feb 25 15:36:22 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10764" docExpressionCount="1075" docLength="11432" endLine="48" insertionLength="4" int_docASTNodeCount="1544" int_docActiveCodeLength="10760" int_docExpressionCount="1076" int_docLength="11428" length="3" offset="1108" startLine="48" starttimestamp="1645820509543" timestamp="872629">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <Command __id="428" _type="InsertStringCommand" date="Fri Feb 25 15:36:22 EST 2022" starttimestamp="1645820509543" timestamp="872639" timestamp2="872639">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="429" _type="InsertStringCommand" date="Fri Feb 25 15:36:22 EST 2022" starttimestamp="1645820509543" timestamp="872639" timestamp2="872639">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="430" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 25 15:36:22 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="872644" />
  <DocumentChange __id="431" _type="Insert" date="Fri Feb 25 15:36:22 EST 2022" docASTNodeCount="1548" docActiveCodeLength="10765" docExpressionCount="1080" docLength="11433" length="1" offset="1112" starttimestamp="1645820509543" timestamp="873182">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="432" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 25 15:36:23 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="873988" />
  <DocumentChange __id="433" _type="Replace" date="Fri Feb 25 15:36:23 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10773" docExpressionCount="1081" docLength="11441" endLine="48" insertionLength="9" int_docASTNodeCount="1542" int_docActiveCodeLength="10764" int_docExpressionCount="1075" int_docLength="11432" length="1" offset="1112" startLine="48" starttimestamp="1645820509543" timestamp="873995">
    <deletedText><![CDATA[p]]></deletedText>
    <insertedText><![CDATA[print(b);]]></insertedText>
  </DocumentChange>
  <Command __id="434" _type="InsertStringCommand" date="Fri Feb 25 15:36:23 EST 2022" starttimestamp="1645820509543" timestamp="874066" timestamp2="874066">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="435" _type="InsertStringCommand" date="Fri Feb 25 15:36:23 EST 2022" starttimestamp="1645820509543" timestamp="874066" timestamp2="874066">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="436" _type="Replace" date="Fri Feb 25 15:36:25 EST 2022" docASTNodeCount="1355" docActiveCodeLength="10773" docExpressionCount="936" docLength="11441" endLine="48" insertionLength="1" int_docASTNodeCount="1548" int_docActiveCodeLength="10772" int_docExpressionCount="1080" int_docLength="11440" length="1" offset="1118" startLine="48" starttimestamp="1645820509543" timestamp="875542">
    <deletedText><![CDATA[b]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <Command __id="437" _type="InsertStringCommand" date="Fri Feb 25 15:36:25 EST 2022" starttimestamp="1645820509543" timestamp="875554" timestamp2="875554">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="438" _type="InsertStringCommand" date="Fri Feb 25 15:36:25 EST 2022" starttimestamp="1645820509543" timestamp="875555" timestamp2="875555">
    <data><![CDATA["]]></data>
  </Command>
  <DocumentChange __id="439" _type="Insert" date="Fri Feb 25 15:36:26 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10774" docExpressionCount="1081" docLength="11442" length="1" offset="1119" starttimestamp="1645820509543" timestamp="877225">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <Command __id="440" _type="InsertStringCommand" date="Fri Feb 25 15:36:26 EST 2022" starttimestamp="1645820509543" timestamp="877239" timestamp2="877239">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="441" _type="InsertStringCommand" date="Fri Feb 25 15:36:26 EST 2022" starttimestamp="1645820509543" timestamp="877239" timestamp2="877239">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="442" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 25 15:36:27 EST 2022" starttimestamp="1645820509543" timestamp="877512" />
  <Command __id="443" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 25 15:36:27 EST 2022" starttimestamp="1645820509543" timestamp="877512" />
  <DocumentChange __id="444" _type="Insert" date="Fri Feb 25 15:36:27 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10775" docExpressionCount="1081" docLength="11443" length="1" offset="1119" starttimestamp="1645820509543" timestamp="878240">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="445" _type="InsertStringCommand" date="Fri Feb 25 15:36:27 EST 2022" starttimestamp="1645820509543" timestamp="878243" timestamp2="878243">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="446" _type="InsertStringCommand" date="Fri Feb 25 15:36:27 EST 2022" starttimestamp="1645820509543" timestamp="878244" timestamp2="878244">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="447" _type="Insert" date="Fri Feb 25 15:36:27 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10776" docExpressionCount="1081" docLength="11444" length="1" offset="1120" starttimestamp="1645820509543" timestamp="878373">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="448" _type="InsertStringCommand" date="Fri Feb 25 15:36:27 EST 2022" starttimestamp="1645820509543" timestamp="878377" timestamp2="878377">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="449" _type="InsertStringCommand" date="Fri Feb 25 15:36:27 EST 2022" starttimestamp="1645820509543" timestamp="878377" timestamp2="878377">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="450" _type="Insert" date="Fri Feb 25 15:36:28 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10777" docExpressionCount="1081" docLength="11445" length="1" offset="1121" starttimestamp="1645820509543" timestamp="878841">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="451" _type="InsertStringCommand" date="Fri Feb 25 15:36:28 EST 2022" starttimestamp="1645820509543" timestamp="878843" timestamp2="878843">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="452" _type="InsertStringCommand" date="Fri Feb 25 15:36:28 EST 2022" starttimestamp="1645820509543" timestamp="878843" timestamp2="878843">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="453" _type="Insert" date="Fri Feb 25 15:36:28 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10778" docExpressionCount="1081" docLength="11446" length="1" offset="1122" starttimestamp="1645820509543" timestamp="878994">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="454" _type="InsertStringCommand" date="Fri Feb 25 15:36:28 EST 2022" starttimestamp="1645820509543" timestamp="878996" timestamp2="878996">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="455" _type="InsertStringCommand" date="Fri Feb 25 15:36:28 EST 2022" starttimestamp="1645820509543" timestamp="878996" timestamp2="878996">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="456" _type="Insert" date="Fri Feb 25 15:36:28 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10779" docExpressionCount="1081" docLength="11447" length="1" offset="1123" starttimestamp="1645820509543" timestamp="879120">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <Command __id="457" _type="InsertStringCommand" date="Fri Feb 25 15:36:28 EST 2022" starttimestamp="1645820509543" timestamp="879122" timestamp2="879122">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="458" _type="InsertStringCommand" date="Fri Feb 25 15:36:28 EST 2022" starttimestamp="1645820509543" timestamp="879122" timestamp2="879122">
    <data><![CDATA[h]]></data>
  </Command>
  <DocumentChange __id="459" _type="Insert" date="Fri Feb 25 15:36:28 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10780" docExpressionCount="1081" docLength="11448" length="1" offset="1124" starttimestamp="1645820509543" timestamp="879199">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="460" _type="InsertStringCommand" date="Fri Feb 25 15:36:28 EST 2022" starttimestamp="1645820509543" timestamp="879202" timestamp2="879202">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="461" _type="InsertStringCommand" date="Fri Feb 25 15:36:28 EST 2022" starttimestamp="1645820509543" timestamp="879202" timestamp2="879202">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="462" _type="Insert" date="Fri Feb 25 15:36:28 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10781" docExpressionCount="1081" docLength="11449" length="1" offset="1125" starttimestamp="1645820509543" timestamp="879370">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="463" _type="InsertStringCommand" date="Fri Feb 25 15:36:28 EST 2022" starttimestamp="1645820509543" timestamp="879372" timestamp2="879372">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="464" _type="InsertStringCommand" date="Fri Feb 25 15:36:28 EST 2022" starttimestamp="1645820509543" timestamp="879372" timestamp2="879372">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="465" _type="Insert" date="Fri Feb 25 15:36:29 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10782" docExpressionCount="1081" docLength="11450" length="1" offset="1126" starttimestamp="1645820509543" timestamp="879538">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="466" _type="InsertStringCommand" date="Fri Feb 25 15:36:29 EST 2022" starttimestamp="1645820509543" timestamp="879541" timestamp2="879541">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="467" _type="InsertStringCommand" date="Fri Feb 25 15:36:29 EST 2022" starttimestamp="1645820509543" timestamp="879541" timestamp2="879541">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="468" _type="Insert" date="Fri Feb 25 15:36:29 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10783" docExpressionCount="1081" docLength="11451" length="1" offset="1127" starttimestamp="1645820509543" timestamp="879727">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="469" _type="InsertStringCommand" date="Fri Feb 25 15:36:29 EST 2022" starttimestamp="1645820509543" timestamp="879731" timestamp2="879731">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="470" _type="InsertStringCommand" date="Fri Feb 25 15:36:29 EST 2022" starttimestamp="1645820509543" timestamp="879731" timestamp2="879731">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="471" _type="Delete" date="Fri Feb 25 15:36:29 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10782" docExpressionCount="1081" docLength="11450" endLine="48" length="1" offset="1127" startLine="48" starttimestamp="1645820509543" timestamp="879990">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="472" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 25 15:36:29 EST 2022" starttimestamp="1645820509543" timestamp="879995" />
  <Command __id="473" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 25 15:36:29 EST 2022" starttimestamp="1645820509543" timestamp="879995" />
  <DocumentChange __id="474" _type="Insert" date="Fri Feb 25 15:36:29 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10783" docExpressionCount="1081" docLength="11451" length="1" offset="1127" starttimestamp="1645820509543" timestamp="880065">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="475" _type="InsertStringCommand" date="Fri Feb 25 15:36:29 EST 2022" starttimestamp="1645820509543" timestamp="880067" timestamp2="880067">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="476" _type="InsertStringCommand" date="Fri Feb 25 15:36:29 EST 2022" starttimestamp="1645820509543" timestamp="880067" timestamp2="880067">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="477" _type="Insert" date="Fri Feb 25 15:36:29 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10784" docExpressionCount="1081" docLength="11452" length="1" offset="1128" starttimestamp="1645820509543" timestamp="880209">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="478" _type="InsertStringCommand" date="Fri Feb 25 15:36:29 EST 2022" starttimestamp="1645820509543" timestamp="880211" timestamp2="880211">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="479" _type="InsertStringCommand" date="Fri Feb 25 15:36:29 EST 2022" starttimestamp="1645820509543" timestamp="880211" timestamp2="880211">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="480" _type="Insert" date="Fri Feb 25 15:36:29 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10785" docExpressionCount="1081" docLength="11453" length="1" offset="1129" starttimestamp="1645820509543" timestamp="880264">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="481" _type="InsertStringCommand" date="Fri Feb 25 15:36:29 EST 2022" starttimestamp="1645820509543" timestamp="880266" timestamp2="880266">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="482" _type="InsertStringCommand" date="Fri Feb 25 15:36:29 EST 2022" starttimestamp="1645820509543" timestamp="880266" timestamp2="880266">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="483" _type="Insert" date="Fri Feb 25 15:36:30 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10786" docExpressionCount="1081" docLength="11454" length="1" offset="1130" starttimestamp="1645820509543" timestamp="881370">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="484" _type="InsertStringCommand" date="Fri Feb 25 15:36:30 EST 2022" starttimestamp="1645820509543" timestamp="881373" timestamp2="881373">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="485" _type="InsertStringCommand" date="Fri Feb 25 15:36:30 EST 2022" starttimestamp="1645820509543" timestamp="881373" timestamp2="881373">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="486" _type="Delete" date="Fri Feb 25 15:36:31 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10785" docExpressionCount="1081" docLength="11453" endLine="48" length="1" offset="1130" startLine="48" starttimestamp="1645820509543" timestamp="881838">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="487" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 25 15:36:31 EST 2022" starttimestamp="1645820509543" timestamp="881842" />
  <Command __id="488" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 25 15:36:31 EST 2022" starttimestamp="1645820509543" timestamp="881842" />
  <DocumentChange __id="489" _type="Insert" date="Fri Feb 25 15:36:31 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10786" docExpressionCount="1081" docLength="11454" length="1" offset="1130" starttimestamp="1645820509543" timestamp="882000">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="490" _type="InsertStringCommand" date="Fri Feb 25 15:36:31 EST 2022" starttimestamp="1645820509543" timestamp="882002" timestamp2="882002">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="491" _type="InsertStringCommand" date="Fri Feb 25 15:36:31 EST 2022" starttimestamp="1645820509543" timestamp="882002" timestamp2="882002">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="492" _type="Insert" date="Fri Feb 25 15:36:31 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10787" docExpressionCount="1081" docLength="11455" length="1" offset="1131" starttimestamp="1645820509543" timestamp="882210">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="493" _type="InsertStringCommand" date="Fri Feb 25 15:36:31 EST 2022" starttimestamp="1645820509543" timestamp="882212" timestamp2="882212">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="494" _type="InsertStringCommand" date="Fri Feb 25 15:36:31 EST 2022" starttimestamp="1645820509543" timestamp="882212" timestamp2="882212">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="495" _type="Insert" date="Fri Feb 25 15:36:32 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10788" docExpressionCount="1081" docLength="11456" length="1" offset="1132" starttimestamp="1645820509543" timestamp="882979">
    <text><![CDATA[?]]></text>
  </DocumentChange>
  <Command __id="496" _type="InsertStringCommand" date="Fri Feb 25 15:36:32 EST 2022" starttimestamp="1645820509543" timestamp="882982" timestamp2="882982">
    <data><![CDATA[?]]></data>
  </Command>
  <Command __id="497" _type="InsertStringCommand" date="Fri Feb 25 15:36:32 EST 2022" starttimestamp="1645820509543" timestamp="882982" timestamp2="882982">
    <data><![CDATA[?]]></data>
  </Command>
  <DocumentChange __id="498" _type="Insert" date="Fri Feb 25 15:36:32 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10789" docExpressionCount="1081" docLength="11457" length="1" offset="1133" starttimestamp="1645820509543" timestamp="883301">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="499" _type="InsertStringCommand" date="Fri Feb 25 15:36:32 EST 2022" starttimestamp="1645820509543" timestamp="883304" timestamp2="883304">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="500" _type="InsertStringCommand" date="Fri Feb 25 15:36:32 EST 2022" starttimestamp="1645820509543" timestamp="883305" timestamp2="883305">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="501" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:36:33 EST 2022" starttimestamp="1645820509543" timestamp="883924" />
  <Command __id="502" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:36:33 EST 2022" starttimestamp="1645820509543" timestamp="883924" />
  <DocumentChange __id="503" _type="Insert" date="Fri Feb 25 15:36:33 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10790" docExpressionCount="1081" docLength="11458" length="1" offset="1135" starttimestamp="1645820509543" timestamp="884253">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="504" _type="InsertStringCommand" date="Fri Feb 25 15:36:33 EST 2022" starttimestamp="1645820509543" timestamp="884256" timestamp2="884256">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="505" _type="InsertStringCommand" date="Fri Feb 25 15:36:33 EST 2022" starttimestamp="1645820509543" timestamp="884257" timestamp2="884257">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="506" _type="Insert" date="Fri Feb 25 15:36:34 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10791" docExpressionCount="1081" docLength="11459" length="1" offset="1136" starttimestamp="1645820509543" timestamp="884868">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <Command __id="507" _type="InsertStringCommand" date="Fri Feb 25 15:36:34 EST 2022" starttimestamp="1645820509543" timestamp="884871" timestamp2="884871">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="508" _type="InsertStringCommand" date="Fri Feb 25 15:36:34 EST 2022" starttimestamp="1645820509543" timestamp="884871" timestamp2="884871">
    <data><![CDATA[+]]></data>
  </Command>
  <DocumentChange __id="509" _type="Insert" date="Fri Feb 25 15:36:34 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10792" docExpressionCount="1081" docLength="11460" length="1" offset="1137" starttimestamp="1645820509543" timestamp="885000">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="510" _type="InsertStringCommand" date="Fri Feb 25 15:36:34 EST 2022" starttimestamp="1645820509543" timestamp="885002" timestamp2="885002">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="511" _type="InsertStringCommand" date="Fri Feb 25 15:36:34 EST 2022" starttimestamp="1645820509543" timestamp="885002" timestamp2="885002">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="513" _type="PasteCommand" date="Fri Feb 25 15:36:35 EST 2022" starttimestamp="1645820509543" timestamp="885845" />
  <DocumentChange __id="512" _type="Insert" date="Fri Feb 25 15:36:35 EST 2022" docASTNodeCount="1555" docActiveCodeLength="10828" docExpressionCount="1087" docLength="11496" length="36" offset="1138" starttimestamp="1645820509543" timestamp="885838">
    <text><![CDATA[startsDeclaration(currentToken.kind)]]></text>
  </DocumentChange>
  <Command __id="520" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:36:38 EST 2022" docASTNodeCount="46" docActiveCodeLength="297" docExpressionCount="21" docLength="297" projectName="pa1" starttimestamp="1645820509543" timestamp="888944">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static kill;¶¶		static ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="521" _type="RunCommand" date="Fri Feb 25 15:36:39 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="890326" type="Run" />
  <Command __id="522" _type="RunCommand" date="Fri Feb 25 15:36:39 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="890327" type="Run" />
  <Command __id="523" _type="RunCommand" date="Fri Feb 25 15:36:39 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="890454" type="Run" />
  <Command __id="524" _type="RunCommand" date="Fri Feb 25 15:36:39 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="890454" type="Run" />
  <Command __id="525" _type="EHExceptionCommand" date="Fri Feb 25 15:36:40 EST 2022" starttimestamp="1645820509543" timestamp="890506" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
classErrorReporter{is this true ? falsein here: 
Parse error: Parsing  and expecting 'RCURLY' but found 'EOT'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="526" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:36:42 EST 2022" docASTNodeCount="1555" docActiveCodeLength="10828" docExpressionCount="1087" docLength="11496" projectName="pa1" starttimestamp="1645820509543" timestamp="892461">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		"), Diff(INSERT,"System.out.print("is this true ? " + startsDeclaration(currentToken.kind));"), Diff(EQUAL,"¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.print(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		System.out.print("is this true ? " + startsDeclaration(currentToken.kind));
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
			
			switch (currentToken.kind) {
			// in Type
			case ID:
			acceptIt();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			// in Reference
			case EQUAL:
			acceptIt();
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			case LPAREN:
			acceptIt();
			if (currentToken.kind == TokenKind.RPAREN) {
				acceptIt();
			} else {
				parseArgumentList();
				accept(TokenKind.RPAREN);
			}
			accept(TokenKind.SEMICOLON);
			break;
			
			// both
			case LBRACKET: 
			acceptIt();
			// in Type
			if (currentToken.kind == TokenKind.RBRACKET) {
				acceptIt();
				accept(TokenKind.ID);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			} else {
				// in Reference
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
			
			case DOT:
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET: 
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			default:
				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);
			}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.print(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="527" _type="MoveCaretCommand" caretOffset="1212" date="Fri Feb 25 15:36:42 EST 2022" docOffset="1290" starttimestamp="1645820509543" timestamp="892497" />
  <Command __id="528" _type="MoveCaretCommand" caretOffset="1212" date="Fri Feb 25 15:36:42 EST 2022" docOffset="1290" starttimestamp="1645820509543" timestamp="892564" />
  <Command __id="529" _type="MoveCaretCommand" caretOffset="1098" date="Fri Feb 25 15:36:42 EST 2022" docOffset="1176" starttimestamp="1645820509543" timestamp="893245" />
  <Command __id="530" _type="MoveCaretCommand" caretOffset="1098" date="Fri Feb 25 15:36:42 EST 2022" docOffset="1176" starttimestamp="1645820509543" timestamp="893245" />
  <Command __id="532" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Fri Feb 25 15:36:43 EST 2022" starttimestamp="1645820509543" timestamp="894169" />
  <Command __id="533" _type="MoveCaretCommand" caretOffset="1019" date="Fri Feb 25 15:36:44 EST 2022" docOffset="1097" starttimestamp="1645820509543" timestamp="895357" />
  <Command __id="534" _type="MoveCaretCommand" caretOffset="1019" date="Fri Feb 25 15:36:44 EST 2022" docOffset="1097" starttimestamp="1645820509543" timestamp="895357" />
  <Command __id="536" _type="InsertStringCommand" date="Fri Feb 25 15:36:45 EST 2022" starttimestamp="1645820509543" timestamp="896149" timestamp2="896149">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="537" _type="InsertStringCommand" date="Fri Feb 25 15:36:45 EST 2022" starttimestamp="1645820509543" timestamp="896149" timestamp2="896149">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="538" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Fri Feb 25 15:36:46 EST 2022" starttimestamp="1645820509543" timestamp="897053" />
  <Command __id="539" _type="EclipseCommand" commandID="" date="Fri Feb 25 15:36:46 EST 2022" starttimestamp="1645820509543" timestamp="897149" />
  <Command __id="540" _type="EclipseCommand" commandID="" date="Fri Feb 25 15:36:46 EST 2022" starttimestamp="1645820509543" timestamp="897169" />
  <Command __id="541" _type="SelectTextCommand" caretOffset="1243" date="Fri Feb 25 15:36:46 EST 2022" end="1243" start="1180" starttimestamp="1645820509543" timestamp="897429" />
  <Command __id="542" _type="SelectTextCommand" caretOffset="1243" date="Fri Feb 25 15:36:46 EST 2022" end="1243" start="1180" starttimestamp="1645820509543" timestamp="897429" />
  <Command __id="543" _type="MoveCaretCommand" caretOffset="1284" date="Fri Feb 25 15:36:47 EST 2022" docOffset="1362" starttimestamp="1645820509543" timestamp="897948" />
  <Command __id="544" _type="MoveCaretCommand" caretOffset="1284" date="Fri Feb 25 15:36:47 EST 2022" docOffset="1362" starttimestamp="1645820509543" timestamp="897948" />
  <Command __id="545" _type="MoveCaretCommand" caretOffset="1045" date="Fri Feb 25 15:36:47 EST 2022" docOffset="1123" starttimestamp="1645820509543" timestamp="898325" />
  <Command __id="546" _type="MoveCaretCommand" caretOffset="1045" date="Fri Feb 25 15:36:47 EST 2022" docOffset="1123" starttimestamp="1645820509543" timestamp="898325" />
  <Command __id="547" _type="MoveCaretCommand" caretOffset="1045" date="Fri Feb 25 15:36:53 EST 2022" docOffset="1123" starttimestamp="1645820509543" timestamp="904013" />
  <Command __id="548" _type="MoveCaretCommand" caretOffset="1045" date="Fri Feb 25 15:36:53 EST 2022" docOffset="1123" starttimestamp="1645820509543" timestamp="904014" />
  <Command __id="549" _type="SelectTextCommand" caretOffset="1051" date="Fri Feb 25 15:36:53 EST 2022" end="1051" start="1034" starttimestamp="1645820509543" timestamp="904180" />
  <Command __id="550" _type="SelectTextCommand" caretOffset="1051" date="Fri Feb 25 15:36:53 EST 2022" end="1051" start="1034" starttimestamp="1645820509543" timestamp="904180" />
  <Command __id="551" _type="SelectTextCommand" caretOffset="1051" date="Fri Feb 25 15:36:56 EST 2022" end="1051" start="1034" starttimestamp="1645820509543" timestamp="907140" />
  <Command __id="552" _type="SelectTextCommand" caretOffset="1051" date="Fri Feb 25 15:36:56 EST 2022" end="1051" start="1034" starttimestamp="1645820509543" timestamp="907140" />
  <Command __id="553" _type="MoveCaretCommand" caretOffset="1046" date="Fri Feb 25 15:36:58 EST 2022" docOffset="1124" starttimestamp="1645820509543" timestamp="908726" />
  <Command __id="554" _type="MoveCaretCommand" caretOffset="1046" date="Fri Feb 25 15:36:58 EST 2022" docOffset="1124" starttimestamp="1645820509543" timestamp="908726" />
  <Command __id="556" _type="ShellCommand" date="Fri Feb 25 15:36:58 EST 2022" starttimestamp="1645820509543" timestamp="909210" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="557" _type="ShellCommand" date="Fri Feb 25 15:37:00 EST 2022" starttimestamp="1645820509543" timestamp="910986" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="558" _type="MoveCaretCommand" caretOffset="1046" date="Fri Feb 25 15:37:01 EST 2022" docOffset="1124" starttimestamp="1645820509543" timestamp="911573" />
  <Command __id="559" _type="MoveCaretCommand" caretOffset="1046" date="Fri Feb 25 15:37:01 EST 2022" docOffset="1124" starttimestamp="1645820509543" timestamp="911573" />
  <Command __id="560" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Fri Feb 25 15:37:02 EST 2022" starttimestamp="1645820509543" timestamp="913101" />
  <DocumentChange __id="531" _type="Delete" date="Fri Feb 25 15:36:43 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10749" docExpressionCount="1075" docLength="11417" endLine="49" length="79" offset="1099" startLine="48" starttimestamp="1645820509543" timestamp="894157">
    <text><![CDATA[		System.out.print("is this true ? " + startsDeclaration(currentToken.kind));
]]></text>
  </DocumentChange>
  <DocumentChange __id="535" _type="Insert" date="Fri Feb 25 15:36:45 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10753" docExpressionCount="1075" docLength="11421" length="4" offset="1097" starttimestamp="1645820509543" timestamp="896140">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="561" _type="MoveCaretCommand" caretOffset="621" date="Fri Feb 25 15:37:09 EST 2022" docOffset="699" starttimestamp="1645820509543" timestamp="920077" />
  <Command __id="562" _type="MoveCaretCommand" caretOffset="621" date="Fri Feb 25 15:37:09 EST 2022" docOffset="699" starttimestamp="1645820509543" timestamp="920077" />
  <Command __id="563" _type="MoveCaretCommand" caretOffset="634" date="Fri Feb 25 15:37:10 EST 2022" docOffset="712" starttimestamp="1645820509543" timestamp="920861" />
  <Command __id="564" _type="MoveCaretCommand" caretOffset="634" date="Fri Feb 25 15:37:10 EST 2022" docOffset="712" starttimestamp="1645820509543" timestamp="920861" />
  <Command __id="565" _type="MoveCaretCommand" caretOffset="695" date="Fri Feb 25 15:37:10 EST 2022" docOffset="773" starttimestamp="1645820509543" timestamp="921445" />
  <Command __id="566" _type="MoveCaretCommand" caretOffset="695" date="Fri Feb 25 15:37:10 EST 2022" docOffset="773" starttimestamp="1645820509543" timestamp="921445" />
  <Command __id="567" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:37:21 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="932323">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="569" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:37:22 EST 2022" docASTNodeCount="46" docActiveCodeLength="297" docExpressionCount="21" docLength="297" projectName="pa1" starttimestamp="1645820509543" timestamp="933363">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static kill;¶¶		static ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="568" _type="MoveCaretCommand" caretOffset="219" date="Fri Feb 25 15:37:21 EST 2022" docOffset="219" starttimestamp="1645820509543" timestamp="932408" />
  <Command __id="571" _type="MoveCaretCommand" caretOffset="695" date="Fri Feb 25 15:37:49 EST 2022" docOffset="773" starttimestamp="1645820509543" timestamp="959792" />
  <Command __id="572" _type="MoveCaretCommand" caretOffset="1147" date="Fri Feb 25 15:37:56 EST 2022" docOffset="1225" starttimestamp="1645820509543" timestamp="966692" />
  <Command __id="573" _type="MoveCaretCommand" caretOffset="1147" date="Fri Feb 25 15:37:56 EST 2022" docOffset="1225" starttimestamp="1645820509543" timestamp="966692" />
  <Command __id="574" _type="MoveCaretCommand" caretOffset="1115" date="Fri Feb 25 15:37:56 EST 2022" docOffset="1193" starttimestamp="1645820509543" timestamp="967172" />
  <Command __id="575" _type="MoveCaretCommand" caretOffset="1115" date="Fri Feb 25 15:37:56 EST 2022" docOffset="1193" starttimestamp="1645820509543" timestamp="967172" />
  <Command __id="570" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:37:49 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10753" docExpressionCount="1075" docLength="11421" projectName="pa1" starttimestamp="1645820509543" timestamp="959715">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		"), Diff(DELETE,"System.out.print("is this true ? " + startsDeclaration(currentToken.kind));"), Diff(EQUAL,"¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.print(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
			
			switch (currentToken.kind) {
			// in Type
			case ID:
			acceptIt();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			// in Reference
			case EQUAL:
			acceptIt();
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			case LPAREN:
			acceptIt();
			if (currentToken.kind == TokenKind.RPAREN) {
				acceptIt();
			} else {
				parseArgumentList();
				accept(TokenKind.RPAREN);
			}
			accept(TokenKind.SEMICOLON);
			break;
			
			// both
			case LBRACKET: 
			acceptIt();
			// in Type
			if (currentToken.kind == TokenKind.RBRACKET) {
				acceptIt();
				accept(TokenKind.ID);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			} else {
				// in Reference
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
			
			case DOT:
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET: 
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			default:
				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);
			}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.print(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="576" _type="MoveCaretCommand" caretOffset="1057" date="Fri Feb 25 15:38:00 EST 2022" docOffset="1135" starttimestamp="1645820509543" timestamp="970501" />
  <Command __id="577" _type="MoveCaretCommand" caretOffset="1057" date="Fri Feb 25 15:38:00 EST 2022" docOffset="1135" starttimestamp="1645820509543" timestamp="970501" />
  <Command __id="578" _type="SelectTextCommand" caretOffset="1064" date="Fri Feb 25 15:38:00 EST 2022" end="1064" start="1052" starttimestamp="1645820509543" timestamp="971020" />
  <Command __id="579" _type="SelectTextCommand" caretOffset="1064" date="Fri Feb 25 15:38:00 EST 2022" end="1064" start="1052" starttimestamp="1645820509543" timestamp="971020" />
  <Command __id="580" _type="MoveCaretCommand" caretOffset="1023" date="Fri Feb 25 15:38:00 EST 2022" docOffset="1101" starttimestamp="1645820509543" timestamp="971404" />
  <Command __id="581" _type="MoveCaretCommand" caretOffset="1023" date="Fri Feb 25 15:38:00 EST 2022" docOffset="1101" starttimestamp="1645820509543" timestamp="971404" />
  <DocumentChange __id="582" _type="Insert" date="Fri Feb 25 15:38:01 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10757" docExpressionCount="1075" docLength="11425" length="4" offset="1101" starttimestamp="1645820509543" timestamp="972410">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="583" _type="InsertStringCommand" date="Fri Feb 25 15:38:01 EST 2022" starttimestamp="1645820509543" timestamp="972419" timestamp2="972419">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="584" _type="InsertStringCommand" date="Fri Feb 25 15:38:01 EST 2022" starttimestamp="1645820509543" timestamp="972419" timestamp2="972419">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="585" _type="Insert" date="Fri Feb 25 15:38:02 EST 2022" docASTNodeCount="1544" docActiveCodeLength="10758" docExpressionCount="1076" docLength="11426" length="1" offset="1105" starttimestamp="1645820509543" timestamp="973157">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="586" _type="InsertStringCommand" date="Fri Feb 25 15:38:02 EST 2022" starttimestamp="1645820509543" timestamp="973161" timestamp2="973161">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="587" _type="InsertStringCommand" date="Fri Feb 25 15:38:02 EST 2022" starttimestamp="1645820509543" timestamp="973161" timestamp2="973161">
    <data><![CDATA[S]]></data>
  </Command>
  <DocumentChange __id="588" _type="Insert" date="Fri Feb 25 15:38:02 EST 2022" docASTNodeCount="1544" docActiveCodeLength="10759" docExpressionCount="1076" docLength="11427" length="1" offset="1106" starttimestamp="1645820509543" timestamp="973411">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="589" _type="InsertStringCommand" date="Fri Feb 25 15:38:02 EST 2022" starttimestamp="1645820509543" timestamp="973420" timestamp2="973420">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="590" _type="InsertStringCommand" date="Fri Feb 25 15:38:02 EST 2022" starttimestamp="1645820509543" timestamp="973421" timestamp2="973421">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="591" _type="Insert" date="Fri Feb 25 15:38:03 EST 2022" docASTNodeCount="1544" docActiveCodeLength="10760" docExpressionCount="1076" docLength="11428" length="1" offset="1107" starttimestamp="1645820509543" timestamp="973492">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="592" _type="InsertStringCommand" date="Fri Feb 25 15:38:03 EST 2022" starttimestamp="1645820509543" timestamp="973497" timestamp2="973497">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="593" _type="InsertStringCommand" date="Fri Feb 25 15:38:03 EST 2022" starttimestamp="1645820509543" timestamp="973497" timestamp2="973497">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="594" _type="Insert" date="Fri Feb 25 15:38:03 EST 2022" docASTNodeCount="1544" docActiveCodeLength="10761" docExpressionCount="1076" docLength="11429" length="1" offset="1108" starttimestamp="1645820509543" timestamp="973689">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="595" _type="InsertStringCommand" date="Fri Feb 25 15:38:03 EST 2022" starttimestamp="1645820509543" timestamp="973697" timestamp2="973697">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="596" _type="InsertStringCommand" date="Fri Feb 25 15:38:03 EST 2022" starttimestamp="1645820509543" timestamp="973697" timestamp2="973697">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="597" _type="Insert" date="Fri Feb 25 15:38:03 EST 2022" docASTNodeCount="1544" docActiveCodeLength="10762" docExpressionCount="1076" docLength="11430" length="1" offset="1109" starttimestamp="1645820509543" timestamp="973806">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="598" _type="InsertStringCommand" date="Fri Feb 25 15:38:03 EST 2022" starttimestamp="1645820509543" timestamp="973812" timestamp2="973812">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="599" _type="InsertStringCommand" date="Fri Feb 25 15:38:03 EST 2022" starttimestamp="1645820509543" timestamp="973813" timestamp2="973813">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="600" _type="Insert" date="Fri Feb 25 15:38:03 EST 2022" docASTNodeCount="1544" docActiveCodeLength="10763" docExpressionCount="1076" docLength="11431" length="1" offset="1110" starttimestamp="1645820509543" timestamp="973925">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="601" _type="InsertStringCommand" date="Fri Feb 25 15:38:03 EST 2022" starttimestamp="1645820509543" timestamp="973932" timestamp2="973932">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="602" _type="InsertStringCommand" date="Fri Feb 25 15:38:03 EST 2022" starttimestamp="1645820509543" timestamp="973932" timestamp2="973932">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="603" _type="Insert" date="Fri Feb 25 15:38:03 EST 2022" docASTNodeCount="1544" docActiveCodeLength="10764" docExpressionCount="1076" docLength="11432" length="1" offset="1111" starttimestamp="1645820509543" timestamp="974197">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="604" _type="InsertStringCommand" date="Fri Feb 25 15:38:03 EST 2022" starttimestamp="1645820509543" timestamp="974202" timestamp2="974202">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="605" _type="InsertStringCommand" date="Fri Feb 25 15:38:03 EST 2022" starttimestamp="1645820509543" timestamp="974202" timestamp2="974202">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="606" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 25 15:38:03 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="974203" />
  <DocumentChange __id="607" _type="Insert" date="Fri Feb 25 15:38:03 EST 2022" docASTNodeCount="1546" docActiveCodeLength="10765" docExpressionCount="1078" docLength="11433" length="1" offset="1112" starttimestamp="1645820509543" timestamp="974452">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="608" _type="Insert" date="Fri Feb 25 15:38:04 EST 2022" docASTNodeCount="1546" docActiveCodeLength="10766" docExpressionCount="1078" docLength="11434" length="1" offset="1113" starttimestamp="1645820509543" timestamp="974580">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="609" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 25 15:38:04 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="974925" />
  <DocumentChange __id="610" _type="Replace" date="Fri Feb 25 15:38:04 EST 2022" docASTNodeCount="1546" docActiveCodeLength="10767" docExpressionCount="1078" docLength="11435" endLine="49" insertionLength="3" int_docASTNodeCount="1544" int_docActiveCodeLength="10764" int_docExpressionCount="1076" int_docLength="11432" length="2" offset="1112" startLine="49" starttimestamp="1645820509543" timestamp="974933">
    <deletedText><![CDATA[ou]]></deletedText>
    <insertedText><![CDATA[out]]></insertedText>
  </DocumentChange>
  <Command __id="611" _type="InsertStringCommand" date="Fri Feb 25 15:38:04 EST 2022" starttimestamp="1645820509543" timestamp="974940" timestamp2="974940">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="612" _type="InsertStringCommand" date="Fri Feb 25 15:38:04 EST 2022" starttimestamp="1645820509543" timestamp="974940" timestamp2="974940">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="613" _type="Insert" date="Fri Feb 25 15:38:05 EST 2022" docASTNodeCount="1542" docActiveCodeLength="10768" docExpressionCount="1075" docLength="11436" length="1" offset="1115" starttimestamp="1645820509543" timestamp="975895">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="614" _type="InsertStringCommand" date="Fri Feb 25 15:38:05 EST 2022" starttimestamp="1645820509543" timestamp="975899" timestamp2="975899">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="615" _type="InsertStringCommand" date="Fri Feb 25 15:38:05 EST 2022" starttimestamp="1645820509543" timestamp="975899" timestamp2="975899">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="616" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 25 15:38:05 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="975902" />
  <DocumentChange __id="617" _type="Insert" date="Fri Feb 25 15:38:05 EST 2022" docASTNodeCount="1548" docActiveCodeLength="10769" docExpressionCount="1080" docLength="11437" length="1" offset="1116" starttimestamp="1645820509543" timestamp="976161">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="618" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 25 15:38:06 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="976916" />
  <DocumentChange __id="619" _type="Replace" date="Fri Feb 25 15:38:06 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10777" docExpressionCount="1081" docLength="11445" endLine="49" insertionLength="9" int_docASTNodeCount="1542" int_docActiveCodeLength="10768" int_docExpressionCount="1075" int_docLength="11436" length="1" offset="1116" startLine="49" starttimestamp="1645820509543" timestamp="976922">
    <deletedText><![CDATA[p]]></deletedText>
    <insertedText><![CDATA[print(b);]]></insertedText>
  </DocumentChange>
  <Command __id="620" _type="InsertStringCommand" date="Fri Feb 25 15:38:06 EST 2022" starttimestamp="1645820509543" timestamp="976967" timestamp2="976967">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="621" _type="InsertStringCommand" date="Fri Feb 25 15:38:06 EST 2022" starttimestamp="1645820509543" timestamp="976968" timestamp2="976968">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="622" _type="Replace" date="Fri Feb 25 15:38:08 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10777" docExpressionCount="1081" docLength="11445" endLine="49" insertionLength="1" int_docASTNodeCount="1548" int_docActiveCodeLength="10776" int_docExpressionCount="1080" int_docLength="11444" length="1" offset="1122" startLine="49" starttimestamp="1645820509543" timestamp="978886">
    <deletedText><![CDATA[b]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <Command __id="623" _type="InsertStringCommand" date="Fri Feb 25 15:38:08 EST 2022" starttimestamp="1645820509543" timestamp="978894" timestamp2="978894">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="624" _type="InsertStringCommand" date="Fri Feb 25 15:38:08 EST 2022" starttimestamp="1645820509543" timestamp="978894" timestamp2="978894">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="625" _type="Insert" date="Fri Feb 25 15:38:08 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10778" docExpressionCount="1081" docLength="11446" length="1" offset="1123" starttimestamp="1645820509543" timestamp="979032">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="626" _type="InsertStringCommand" date="Fri Feb 25 15:38:08 EST 2022" starttimestamp="1645820509543" timestamp="979035" timestamp2="979035">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="627" _type="InsertStringCommand" date="Fri Feb 25 15:38:08 EST 2022" starttimestamp="1645820509543" timestamp="979035" timestamp2="979035">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="628" _type="Insert" date="Fri Feb 25 15:38:08 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10779" docExpressionCount="1081" docLength="11447" length="1" offset="1124" starttimestamp="1645820509543" timestamp="979403">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="629" _type="InsertStringCommand" date="Fri Feb 25 15:38:08 EST 2022" starttimestamp="1645820509543" timestamp="979405" timestamp2="979405">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="630" _type="InsertStringCommand" date="Fri Feb 25 15:38:08 EST 2022" starttimestamp="1645820509543" timestamp="979405" timestamp2="979405">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="631" _type="Insert" date="Fri Feb 25 15:38:09 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10780" docExpressionCount="1081" docLength="11448" length="1" offset="1125" starttimestamp="1645820509543" timestamp="979585">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="632" _type="InsertStringCommand" date="Fri Feb 25 15:38:09 EST 2022" starttimestamp="1645820509543" timestamp="979587" timestamp2="979587">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="633" _type="InsertStringCommand" date="Fri Feb 25 15:38:09 EST 2022" starttimestamp="1645820509543" timestamp="979587" timestamp2="979587">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="634" _type="Insert" date="Fri Feb 25 15:38:09 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10781" docExpressionCount="1081" docLength="11449" length="1" offset="1126" starttimestamp="1645820509543" timestamp="979625">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="635" _type="InsertStringCommand" date="Fri Feb 25 15:38:09 EST 2022" starttimestamp="1645820509543" timestamp="979626" timestamp2="979626">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="636" _type="InsertStringCommand" date="Fri Feb 25 15:38:09 EST 2022" starttimestamp="1645820509543" timestamp="979626" timestamp2="979626">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="637" _type="Insert" date="Fri Feb 25 15:38:09 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10782" docExpressionCount="1081" docLength="11450" length="1" offset="1127" starttimestamp="1645820509543" timestamp="979808">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="638" _type="InsertStringCommand" date="Fri Feb 25 15:38:09 EST 2022" starttimestamp="1645820509543" timestamp="979811" timestamp2="979811">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="639" _type="InsertStringCommand" date="Fri Feb 25 15:38:09 EST 2022" starttimestamp="1645820509543" timestamp="979811" timestamp2="979811">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="640" _type="Insert" date="Fri Feb 25 15:38:09 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10783" docExpressionCount="1081" docLength="11451" length="1" offset="1128" starttimestamp="1645820509543" timestamp="979902">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="641" _type="InsertStringCommand" date="Fri Feb 25 15:38:09 EST 2022" starttimestamp="1645820509543" timestamp="979904" timestamp2="979904">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="642" _type="InsertStringCommand" date="Fri Feb 25 15:38:09 EST 2022" starttimestamp="1645820509543" timestamp="979904" timestamp2="979904">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="643" _type="Insert" date="Fri Feb 25 15:38:10 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10784" docExpressionCount="1081" docLength="11452" length="1" offset="1129" starttimestamp="1645820509543" timestamp="980576">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <Command __id="644" _type="InsertStringCommand" date="Fri Feb 25 15:38:10 EST 2022" starttimestamp="1645820509543" timestamp="980579" timestamp2="980579">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="645" _type="InsertStringCommand" date="Fri Feb 25 15:38:10 EST 2022" starttimestamp="1645820509543" timestamp="980579" timestamp2="980579">
    <data><![CDATA[T]]></data>
  </Command>
  <DocumentChange __id="646" _type="Insert" date="Fri Feb 25 15:38:10 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10785" docExpressionCount="1081" docLength="11453" length="1" offset="1130" starttimestamp="1645820509543" timestamp="980679">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="647" _type="InsertStringCommand" date="Fri Feb 25 15:38:10 EST 2022" starttimestamp="1645820509543" timestamp="980682" timestamp2="980682">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="648" _type="InsertStringCommand" date="Fri Feb 25 15:38:10 EST 2022" starttimestamp="1645820509543" timestamp="980682" timestamp2="980682">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="649" _type="Insert" date="Fri Feb 25 15:38:10 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10786" docExpressionCount="1081" docLength="11454" length="1" offset="1131" starttimestamp="1645820509543" timestamp="980932">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="650" _type="InsertStringCommand" date="Fri Feb 25 15:38:10 EST 2022" starttimestamp="1645820509543" timestamp="980934" timestamp2="980934">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="651" _type="InsertStringCommand" date="Fri Feb 25 15:38:10 EST 2022" starttimestamp="1645820509543" timestamp="980934" timestamp2="980934">
    <data><![CDATA[k]]></data>
  </Command>
  <DocumentChange __id="652" _type="Insert" date="Fri Feb 25 15:38:10 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10787" docExpressionCount="1081" docLength="11455" length="1" offset="1132" starttimestamp="1645820509543" timestamp="981031">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="653" _type="InsertStringCommand" date="Fri Feb 25 15:38:10 EST 2022" starttimestamp="1645820509543" timestamp="981034" timestamp2="981034">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="654" _type="InsertStringCommand" date="Fri Feb 25 15:38:10 EST 2022" starttimestamp="1645820509543" timestamp="981034" timestamp2="981034">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="655" _type="Insert" date="Fri Feb 25 15:38:10 EST 2022" docASTNodeCount="1549" docActiveCodeLength="10788" docExpressionCount="1081" docLength="11456" length="1" offset="1133" starttimestamp="1645820509543" timestamp="981152">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="656" _type="InsertStringCommand" date="Fri Feb 25 15:38:10 EST 2022" starttimestamp="1645820509543" timestamp="981155" timestamp2="981155">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="657" _type="InsertStringCommand" date="Fri Feb 25 15:38:10 EST 2022" starttimestamp="1645820509543" timestamp="981156" timestamp2="981156">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="658" _type="Insert" date="Fri Feb 25 15:38:11 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10789" docExpressionCount="1082" docLength="11457" length="1" offset="1134" starttimestamp="1645820509543" timestamp="981563">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="659" _type="InsertStringCommand" date="Fri Feb 25 15:38:11 EST 2022" starttimestamp="1645820509543" timestamp="981565" timestamp2="981565">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="660" _type="InsertStringCommand" date="Fri Feb 25 15:38:11 EST 2022" starttimestamp="1645820509543" timestamp="981565" timestamp2="981565">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="661" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 25 15:38:11 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="981567" />
  <DocumentChange __id="662" _type="Insert" date="Fri Feb 25 15:38:11 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10790" docExpressionCount="1083" docLength="11458" length="1" offset="1135" starttimestamp="1645820509543" timestamp="981860">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="663" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 25 15:38:11 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="982277" />
  <DocumentChange __id="664" _type="Replace" date="Fri Feb 25 15:38:11 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10793" docExpressionCount="1083" docLength="11461" endLine="49" insertionLength="4" int_docASTNodeCount="1551" int_docActiveCodeLength="10789" int_docExpressionCount="1082" int_docLength="11457" length="1" offset="1135" startLine="49" starttimestamp="1645820509543" timestamp="982283">
    <deletedText><![CDATA[k]]></deletedText>
    <insertedText><![CDATA[kind]]></insertedText>
  </DocumentChange>
  <Command __id="673" _type="RunCommand" date="Fri Feb 25 15:38:16 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="986753" type="Run" />
  <Command __id="674" _type="RunCommand" date="Fri Feb 25 15:38:16 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="986753" type="Run" />
  <Command __id="675" _type="RunCommand" date="Fri Feb 25 15:38:16 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="986906" type="Run" />
  <Command __id="676" _type="RunCommand" date="Fri Feb 25 15:38:16 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="986906" type="Run" />
  <Command __id="677" _type="EHExceptionCommand" date="Fri Feb 25 15:38:16 EST 2022" starttimestamp="1645820509543" timestamp="986952" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
classErrorReporter{EOTin here: 
Parse error: Parsing  and expecting 'RCURLY' but found 'EOT'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="678" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:38:28 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="998980">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="679" _type="MoveCaretCommand" caretOffset="219" date="Fri Feb 25 15:38:28 EST 2022" docOffset="219" starttimestamp="1645820509543" timestamp="999187" />
  <Command __id="680" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:38:29 EST 2022" docASTNodeCount="1049" docActiveCodeLength="7686" docExpressionCount="643" docLength="8416" projectName="pa1" starttimestamp="1645820509543" timestamp="999737">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1 || currentChar == eolUnix || currentChar == eolWindows) {¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="681" _type="MoveCaretCommand" caretOffset="2481" date="Fri Feb 25 15:38:29 EST 2022" docOffset="2632" starttimestamp="1645820509543" timestamp="999822" />
  <Command __id="682" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:38:30 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="1000519">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="683" _type="MoveCaretCommand" caretOffset="219" date="Fri Feb 25 15:38:30 EST 2022" docOffset="219" starttimestamp="1645820509543" timestamp="1000661" />
  <Command __id="685" _type="MoveCaretCommand" caretOffset="2481" date="Fri Feb 25 15:38:31 EST 2022" docOffset="2632" starttimestamp="1645820509543" timestamp="1002050" />
  <Command __id="687" _type="ShellCommand" date="Fri Feb 25 15:38:34 EST 2022" starttimestamp="1645820509543" timestamp="1004850" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="688" _type="FindCommand" caseSensitive="true" date="Fri Feb 25 15:38:35 EST 2022" forward="false" matchWord="true" offset="2632" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="1006073" wrapSearch="false">
    <searchString><![CDATA[eot]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="689" _type="FindCommand" caseSensitive="true" date="Fri Feb 25 15:38:37 EST 2022" forward="false" matchWord="true" offset="2388" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="1008134" wrapSearch="false">
    <searchString><![CDATA[eot]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="690" _type="ShellCommand" date="Fri Feb 25 15:38:38 EST 2022" starttimestamp="1645820509543" timestamp="1008898" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="684" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:38:31 EST 2022" docASTNodeCount="1049" docActiveCodeLength="7686" docExpressionCount="643" docLength="8416" projectName="pa1" starttimestamp="1645820509543" timestamp="1001979">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1 || currentChar == eolUnix || currentChar == eolWindows) {¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="695" _type="Insert" date="Fri Feb 25 15:39:12 EST 2022" docASTNodeCount="1049" docActiveCodeLength="7692" docExpressionCount="643" docLength="8422" length="6" offset="8294" starttimestamp="1645820509543" timestamp="1043063">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <Command __id="691" _type="MoveCaretCommand" caretOffset="8160" date="Fri Feb 25 15:39:11 EST 2022" docOffset="8311" starttimestamp="1645820509543" timestamp="1041733" />
  <Command __id="692" _type="MoveCaretCommand" caretOffset="8160" date="Fri Feb 25 15:39:11 EST 2022" docOffset="8311" starttimestamp="1645820509543" timestamp="1041733" />
  <Command __id="693" _type="MoveCaretCommand" caretOffset="8143" date="Fri Feb 25 15:39:11 EST 2022" docOffset="8294" starttimestamp="1645820509543" timestamp="1042404" />
  <Command __id="694" _type="MoveCaretCommand" caretOffset="8143" date="Fri Feb 25 15:39:11 EST 2022" docOffset="8294" starttimestamp="1645820509543" timestamp="1042404" />
  <Command __id="696" _type="InsertStringCommand" date="Fri Feb 25 15:39:12 EST 2022" starttimestamp="1645820509543" timestamp="1043072" timestamp2="1043072">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="697" _type="InsertStringCommand" date="Fri Feb 25 15:39:12 EST 2022" starttimestamp="1645820509543" timestamp="1043072" timestamp2="1043072">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="699" _type="InsertStringCommand" date="Fri Feb 25 15:39:15 EST 2022" starttimestamp="1645820509543" timestamp="1045525" timestamp2="1045525">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="700" _type="InsertStringCommand" date="Fri Feb 25 15:39:15 EST 2022" starttimestamp="1645820509543" timestamp="1045525" timestamp2="1045525">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="702" _type="InsertStringCommand" date="Fri Feb 25 15:39:15 EST 2022" starttimestamp="1645820509543" timestamp="1045664" timestamp2="1045664">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="703" _type="InsertStringCommand" date="Fri Feb 25 15:39:15 EST 2022" starttimestamp="1645820509543" timestamp="1045664" timestamp2="1045664">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="705" _type="InsertStringCommand" date="Fri Feb 25 15:39:15 EST 2022" starttimestamp="1645820509543" timestamp="1045737" timestamp2="1045737">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="706" _type="InsertStringCommand" date="Fri Feb 25 15:39:15 EST 2022" starttimestamp="1645820509543" timestamp="1045737" timestamp2="1045737">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="708" _type="InsertStringCommand" date="Fri Feb 25 15:39:15 EST 2022" starttimestamp="1645820509543" timestamp="1045978" timestamp2="1045978">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="709" _type="InsertStringCommand" date="Fri Feb 25 15:39:15 EST 2022" starttimestamp="1645820509543" timestamp="1045978" timestamp2="1045978">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="711" _type="InsertStringCommand" date="Fri Feb 25 15:39:15 EST 2022" starttimestamp="1645820509543" timestamp="1046098" timestamp2="1046098">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="712" _type="InsertStringCommand" date="Fri Feb 25 15:39:15 EST 2022" starttimestamp="1645820509543" timestamp="1046098" timestamp2="1046098">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="714" _type="InsertStringCommand" date="Fri Feb 25 15:39:15 EST 2022" starttimestamp="1645820509543" timestamp="1046203" timestamp2="1046203">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="715" _type="InsertStringCommand" date="Fri Feb 25 15:39:15 EST 2022" starttimestamp="1645820509543" timestamp="1046203" timestamp2="1046203">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="717" _type="InsertStringCommand" date="Fri Feb 25 15:39:16 EST 2022" starttimestamp="1645820509543" timestamp="1046472" timestamp2="1046472">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="718" _type="InsertStringCommand" date="Fri Feb 25 15:39:16 EST 2022" starttimestamp="1645820509543" timestamp="1046472" timestamp2="1046472">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="719" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 25 15:39:16 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="1046475" />
  <Command __id="723" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 25 15:39:16 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="1047096" />
  <Command __id="725" _type="InsertStringCommand" date="Fri Feb 25 15:39:16 EST 2022" starttimestamp="1645820509543" timestamp="1047115" timestamp2="1047115">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="726" _type="InsertStringCommand" date="Fri Feb 25 15:39:16 EST 2022" starttimestamp="1645820509543" timestamp="1047116" timestamp2="1047116">
    <data><![CDATA[.]]></data>
  </Command>
  <DocumentChange __id="698" _type="Insert" date="Fri Feb 25 15:39:15 EST 2022" docASTNodeCount="1051" docActiveCodeLength="7693" docExpressionCount="643" docLength="8423" length="1" offset="8300" starttimestamp="1645820509543" timestamp="1045518">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="701" _type="Insert" date="Fri Feb 25 15:39:15 EST 2022" docASTNodeCount="1051" docActiveCodeLength="7694" docExpressionCount="643" docLength="8424" length="1" offset="8301" starttimestamp="1645820509543" timestamp="1045660">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <DocumentChange __id="704" _type="Insert" date="Fri Feb 25 15:39:15 EST 2022" docASTNodeCount="1051" docActiveCodeLength="7695" docExpressionCount="643" docLength="8425" length="1" offset="8302" starttimestamp="1645820509543" timestamp="1045732">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="707" _type="Insert" date="Fri Feb 25 15:39:15 EST 2022" docASTNodeCount="1051" docActiveCodeLength="7696" docExpressionCount="643" docLength="8426" length="1" offset="8303" starttimestamp="1645820509543" timestamp="1045972">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="710" _type="Insert" date="Fri Feb 25 15:39:15 EST 2022" docASTNodeCount="1051" docActiveCodeLength="7697" docExpressionCount="643" docLength="8427" length="1" offset="8304" starttimestamp="1645820509543" timestamp="1046088">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="713" _type="Insert" date="Fri Feb 25 15:39:15 EST 2022" docASTNodeCount="1051" docActiveCodeLength="7698" docExpressionCount="643" docLength="8428" length="1" offset="8305" starttimestamp="1645820509543" timestamp="1046197">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="716" _type="Insert" date="Fri Feb 25 15:39:16 EST 2022" docASTNodeCount="1051" docActiveCodeLength="7699" docExpressionCount="645" docLength="8429" length="1" offset="8306" starttimestamp="1645820509543" timestamp="1046468">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="720" _type="Insert" date="Fri Feb 25 15:39:16 EST 2022" docASTNodeCount="1053" docActiveCodeLength="7700" docExpressionCount="645" docLength="8430" length="1" offset="8307" starttimestamp="1645820509543" timestamp="1046701">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="721" _type="Insert" date="Fri Feb 25 15:39:16 EST 2022" docASTNodeCount="1053" docActiveCodeLength="7701" docExpressionCount="645" docLength="8431" length="1" offset="8308" starttimestamp="1645820509543" timestamp="1046780">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="722" _type="Insert" date="Fri Feb 25 15:39:16 EST 2022" docASTNodeCount="1053" docActiveCodeLength="7702" docExpressionCount="645" docLength="8432" length="1" offset="8309" starttimestamp="1645820509543" timestamp="1046867">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="724" _type="Replace" date="Fri Feb 25 15:39:16 EST 2022" docASTNodeCount="1053" docActiveCodeLength="7703" docExpressionCount="647" docLength="8433" endLine="358" insertionLength="4" int_docASTNodeCount="1051" int_docActiveCodeLength="7699" int_docExpressionCount="645" int_docLength="8429" length="3" offset="8307" startLine="358" starttimestamp="1645820509543" timestamp="1047105">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="728" _type="Insert" date="Fri Feb 25 15:39:16 EST 2022" docASTNodeCount="1055" docActiveCodeLength="7704" docExpressionCount="647" docLength="8434" length="1" offset="8311" starttimestamp="1645820509543" timestamp="1047350">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="730" _type="Replace" date="Fri Feb 25 15:39:17 EST 2022" docASTNodeCount="1056" docActiveCodeLength="7712" docExpressionCount="649" docLength="8442" endLine="358" insertionLength="9" int_docASTNodeCount="1053" int_docActiveCodeLength="7703" int_docExpressionCount="647" int_docLength="8433" length="1" offset="8311" startLine="358" starttimestamp="1645820509543" timestamp="1047864">
    <deletedText><![CDATA[p]]></deletedText>
    <insertedText><![CDATA[print(b);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="733" _type="Replace" date="Fri Feb 25 15:39:17 EST 2022" docASTNodeCount="1055" docActiveCodeLength="7712" docExpressionCount="648" docLength="8442" endLine="358" insertionLength="1" int_docASTNodeCount="1055" int_docActiveCodeLength="7711" int_docExpressionCount="648" int_docLength="8441" length="1" offset="8317" startLine="358" starttimestamp="1645820509543" timestamp="1048285">
    <deletedText><![CDATA[b]]></deletedText>
    <insertedText><![CDATA[*]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="736" _type="Delete" date="Fri Feb 25 15:39:18 EST 2022" docASTNodeCount="1055" docActiveCodeLength="7711" docExpressionCount="648" docLength="8441" endLine="358" length="1" offset="8317" startLine="358" starttimestamp="1645820509543" timestamp="1049027">
    <text><![CDATA[*]]></text>
  </DocumentChange>
  <Command __id="727" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 25 15:39:16 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="1047120" />
  <Command __id="729" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 25 15:39:17 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="1047860" />
  <Command __id="731" _type="InsertStringCommand" date="Fri Feb 25 15:39:17 EST 2022" starttimestamp="1645820509543" timestamp="1047912" timestamp2="1047912">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="732" _type="InsertStringCommand" date="Fri Feb 25 15:39:17 EST 2022" starttimestamp="1645820509543" timestamp="1047912" timestamp2="1047912">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="734" _type="InsertStringCommand" date="Fri Feb 25 15:39:17 EST 2022" starttimestamp="1645820509543" timestamp="1048295" timestamp2="1048295">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="735" _type="InsertStringCommand" date="Fri Feb 25 15:39:17 EST 2022" starttimestamp="1645820509543" timestamp="1048295" timestamp2="1048295">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="737" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 25 15:39:18 EST 2022" starttimestamp="1645820509543" timestamp="1049032" />
  <Command __id="738" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 25 15:39:18 EST 2022" starttimestamp="1645820509543" timestamp="1049032" />
  <Command __id="740" _type="InsertStringCommand" date="Fri Feb 25 15:39:21 EST 2022" starttimestamp="1645820509543" timestamp="1051913" timestamp2="1051913">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="741" _type="InsertStringCommand" date="Fri Feb 25 15:39:21 EST 2022" starttimestamp="1645820509543" timestamp="1051913" timestamp2="1051913">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="742" _type="InsertStringCommand" date="Fri Feb 25 15:39:21 EST 2022" starttimestamp="1645820509543" timestamp="1052070" timestamp2="1052070">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="743" _type="InsertStringCommand" date="Fri Feb 25 15:39:21 EST 2022" starttimestamp="1645820509543" timestamp="1052070" timestamp2="1052070">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="744" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 25 15:39:22 EST 2022" starttimestamp="1645820509543" timestamp="1052497" />
  <Command __id="745" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 25 15:39:22 EST 2022" starttimestamp="1645820509543" timestamp="1052497" />
  <Command __id="747" _type="InsertStringCommand" date="Fri Feb 25 15:39:22 EST 2022" starttimestamp="1645820509543" timestamp="1052617" timestamp2="1052617">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="748" _type="InsertStringCommand" date="Fri Feb 25 15:39:22 EST 2022" starttimestamp="1645820509543" timestamp="1052617" timestamp2="1052617">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="749" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:22 EST 2022" starttimestamp="1645820509543" timestamp="1053327" />
  <Command __id="750" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:22 EST 2022" starttimestamp="1645820509543" timestamp="1053327" />
  <Command __id="752" _type="InsertStringCommand" date="Fri Feb 25 15:39:23 EST 2022" starttimestamp="1645820509543" timestamp="1054050" timestamp2="1054050">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="753" _type="InsertStringCommand" date="Fri Feb 25 15:39:23 EST 2022" starttimestamp="1645820509543" timestamp="1054051" timestamp2="1054051">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="755" _type="InsertStringCommand" date="Fri Feb 25 15:39:23 EST 2022" starttimestamp="1645820509543" timestamp="1054259" timestamp2="1054259">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="756" _type="InsertStringCommand" date="Fri Feb 25 15:39:23 EST 2022" starttimestamp="1645820509543" timestamp="1054259" timestamp2="1054259">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="758" _type="InsertStringCommand" date="Fri Feb 25 15:39:23 EST 2022" starttimestamp="1645820509543" timestamp="1054442" timestamp2="1054442">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="759" _type="InsertStringCommand" date="Fri Feb 25 15:39:23 EST 2022" starttimestamp="1645820509543" timestamp="1054443" timestamp2="1054443">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="760" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 25 15:39:27 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="1057927" />
  <Command __id="761" _type="SelectTextCommand" caretOffset="8085" date="Fri Feb 25 15:39:28 EST 2022" end="8085" start="8078" starttimestamp="1645820509543" timestamp="1058836" />
  <Command __id="762" _type="SelectTextCommand" caretOffset="8085" date="Fri Feb 25 15:39:28 EST 2022" end="8085" start="8078" starttimestamp="1645820509543" timestamp="1058837" />
  <Command __id="763" _type="CopyCommand" date="Fri Feb 25 15:39:28 EST 2022" starttimestamp="1645820509543" timestamp="1058923" />
  <Command __id="764" _type="MoveCaretCommand" caretOffset="8171" date="Fri Feb 25 15:39:29 EST 2022" docOffset="8322" starttimestamp="1645820509543" timestamp="1059589" />
  <Command __id="765" _type="MoveCaretCommand" caretOffset="8171" date="Fri Feb 25 15:39:29 EST 2022" docOffset="8322" starttimestamp="1645820509543" timestamp="1059589" />
  <Command __id="766" _type="MoveCaretCommand" caretOffset="8172" date="Fri Feb 25 15:39:29 EST 2022" docOffset="8323" starttimestamp="1645820509543" timestamp="1060381" />
  <Command __id="767" _type="MoveCaretCommand" caretOffset="8172" date="Fri Feb 25 15:39:29 EST 2022" docOffset="8323" starttimestamp="1645820509543" timestamp="1060381" />
  <Command __id="769" _type="PasteCommand" date="Fri Feb 25 15:39:30 EST 2022" starttimestamp="1645820509543" timestamp="1061108" />
  <Command __id="770" _type="MoveCaretCommand" caretOffset="8181" date="Fri Feb 25 15:39:31 EST 2022" docOffset="8332" starttimestamp="1645820509543" timestamp="1061861" />
  <Command __id="771" _type="MoveCaretCommand" caretOffset="8181" date="Fri Feb 25 15:39:31 EST 2022" docOffset="8332" starttimestamp="1645820509543" timestamp="1061861" />
  <Command __id="772" _type="MoveCaretCommand" caretOffset="8171" date="Fri Feb 25 15:39:44 EST 2022" docOffset="8322" starttimestamp="1645820509543" timestamp="1075053" />
  <Command __id="773" _type="MoveCaretCommand" caretOffset="8171" date="Fri Feb 25 15:39:44 EST 2022" docOffset="8322" starttimestamp="1645820509543" timestamp="1075053" />
  <Command __id="774" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:45 EST 2022" starttimestamp="1645820509543" timestamp="1075772" />
  <Command __id="775" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:45 EST 2022" starttimestamp="1645820509543" timestamp="1075772" />
  <Command __id="777" _type="InsertStringCommand" date="Fri Feb 25 15:39:45 EST 2022" starttimestamp="1645820509543" timestamp="1076237" timestamp2="1076237">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="778" _type="InsertStringCommand" date="Fri Feb 25 15:39:45 EST 2022" starttimestamp="1645820509543" timestamp="1076237" timestamp2="1076237">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="779" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:46 EST 2022" starttimestamp="1645820509543" timestamp="1076574" />
  <Command __id="780" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:46 EST 2022" starttimestamp="1645820509543" timestamp="1076574" />
  <Command __id="781" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:46 EST 2022" starttimestamp="1645820509543" timestamp="1077073" />
  <Command __id="782" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:46 EST 2022" starttimestamp="1645820509543" timestamp="1077074" />
  <Command __id="783" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:46 EST 2022" starttimestamp="1645820509543" timestamp="1077104" />
  <Command __id="784" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:46 EST 2022" starttimestamp="1645820509543" timestamp="1077104" />
  <Command __id="785" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:46 EST 2022" starttimestamp="1645820509543" timestamp="1077151" />
  <Command __id="786" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:46 EST 2022" starttimestamp="1645820509543" timestamp="1077151" />
  <Command __id="787" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:46 EST 2022" starttimestamp="1645820509543" timestamp="1077307" />
  <Command __id="788" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:46 EST 2022" starttimestamp="1645820509543" timestamp="1077307" />
  <Command __id="789" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:47 EST 2022" starttimestamp="1645820509543" timestamp="1077491" />
  <Command __id="790" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:47 EST 2022" starttimestamp="1645820509543" timestamp="1077491" />
  <Command __id="791" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:47 EST 2022" starttimestamp="1645820509543" timestamp="1077659" />
  <Command __id="792" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 25 15:39:47 EST 2022" starttimestamp="1645820509543" timestamp="1077659" />
  <Command __id="793" _type="InsertStringCommand" date="Fri Feb 25 15:39:48 EST 2022" starttimestamp="1645820509543" timestamp="1078481" timestamp2="1078481">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="794" _type="InsertStringCommand" date="Fri Feb 25 15:39:48 EST 2022" starttimestamp="1645820509543" timestamp="1078481" timestamp2="1078481">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="795" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 25 15:39:49 EST 2022" starttimestamp="1645820509543" timestamp="1080406" />
  <Command __id="796" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 25 15:39:49 EST 2022" starttimestamp="1645820509543" timestamp="1080410" />
  <Command __id="798" _type="InsertStringCommand" date="Fri Feb 25 15:39:50 EST 2022" starttimestamp="1645820509543" timestamp="1080896" timestamp2="1080896">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="799" _type="InsertStringCommand" date="Fri Feb 25 15:39:50 EST 2022" starttimestamp="1645820509543" timestamp="1080896" timestamp2="1080896">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="800" _type="MoveCaretCommand" caretOffset="8183" date="Fri Feb 25 15:39:52 EST 2022" docOffset="8334" starttimestamp="1645820509543" timestamp="1082749" />
  <Command __id="801" _type="MoveCaretCommand" caretOffset="8183" date="Fri Feb 25 15:39:52 EST 2022" docOffset="8334" starttimestamp="1645820509543" timestamp="1082749" />
  <Command __id="802" _type="MoveCaretCommand" caretOffset="8183" date="Fri Feb 25 15:39:53 EST 2022" docOffset="8334" starttimestamp="1645820509543" timestamp="1083668" />
  <Command __id="803" _type="MoveCaretCommand" caretOffset="8183" date="Fri Feb 25 15:39:53 EST 2022" docOffset="8334" starttimestamp="1645820509543" timestamp="1083668" />
  <Command __id="804" _type="SelectTextCommand" caretOffset="8192" date="Fri Feb 25 15:39:53 EST 2022" end="8192" start="8183" starttimestamp="1645820509543" timestamp="1083828" />
  <Command __id="805" _type="SelectTextCommand" caretOffset="8192" date="Fri Feb 25 15:39:53 EST 2022" end="8192" start="8183" starttimestamp="1645820509543" timestamp="1083828" />
  <Command __id="806" _type="SelectTextCommand" caretOffset="8185" date="Fri Feb 25 15:39:53 EST 2022" end="8185" start="8145" starttimestamp="1645820509543" timestamp="1084164" />
  <Command __id="807" _type="SelectTextCommand" caretOffset="8185" date="Fri Feb 25 15:39:53 EST 2022" end="8185" start="8145" starttimestamp="1645820509543" timestamp="1084164" />
  <Command __id="808" _type="MoveCaretCommand" caretOffset="8183" date="Fri Feb 25 15:39:54 EST 2022" docOffset="8334" starttimestamp="1645820509543" timestamp="1084572" />
  <Command __id="809" _type="MoveCaretCommand" caretOffset="8183" date="Fri Feb 25 15:39:54 EST 2022" docOffset="8334" starttimestamp="1645820509543" timestamp="1084572" />
  <Command __id="810" _type="SelectTextCommand" caretOffset="8149" date="Fri Feb 25 15:39:55 EST 2022" end="8183" start="8149" starttimestamp="1645820509543" timestamp="1085765" />
  <Command __id="811" _type="SelectTextCommand" caretOffset="8149" date="Fri Feb 25 15:39:55 EST 2022" end="8183" start="8149" starttimestamp="1645820509543" timestamp="1085765" />
  <Command __id="812" _type="CopyCommand" date="Fri Feb 25 15:39:55 EST 2022" starttimestamp="1645820509543" timestamp="1085933" />
  <Command __id="813" _type="MoveCaretCommand" caretOffset="8183" date="Fri Feb 25 15:39:56 EST 2022" docOffset="8334" starttimestamp="1645820509543" timestamp="1086565" />
  <Command __id="814" _type="MoveCaretCommand" caretOffset="8183" date="Fri Feb 25 15:39:56 EST 2022" docOffset="8334" starttimestamp="1645820509543" timestamp="1086565" />
  <Command __id="816" _type="InsertStringCommand" date="Fri Feb 25 15:39:56 EST 2022" starttimestamp="1645820509543" timestamp="1087134" timestamp2="1087134">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="817" _type="InsertStringCommand" date="Fri Feb 25 15:39:56 EST 2022" starttimestamp="1645820509543" timestamp="1087134" timestamp2="1087134">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="819" _type="PasteCommand" date="Fri Feb 25 15:39:56 EST 2022" starttimestamp="1645820509543" timestamp="1087389" />
  <Command __id="821" _type="InsertStringCommand" date="Fri Feb 25 15:39:57 EST 2022" starttimestamp="1645820509543" timestamp="1087617" timestamp2="1087617">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="822" _type="InsertStringCommand" date="Fri Feb 25 15:39:57 EST 2022" starttimestamp="1645820509543" timestamp="1087617" timestamp2="1087617">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="824" _type="PasteCommand" date="Fri Feb 25 15:39:57 EST 2022" starttimestamp="1645820509543" timestamp="1087813" />
  <Command __id="825" _type="SelectTextCommand" caretOffset="8208" date="Fri Feb 25 15:39:59 EST 2022" end="8208" start="8207" starttimestamp="1645820509543" timestamp="1089492" />
  <Command __id="826" _type="SelectTextCommand" caretOffset="8208" date="Fri Feb 25 15:39:59 EST 2022" end="8208" start="8207" starttimestamp="1645820509543" timestamp="1089493" />
  <Command __id="828" _type="InsertStringCommand" date="Fri Feb 25 15:39:59 EST 2022" starttimestamp="1645820509543" timestamp="1089540" timestamp2="1089540">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="829" _type="InsertStringCommand" date="Fri Feb 25 15:39:59 EST 2022" starttimestamp="1645820509543" timestamp="1089540" timestamp2="1089540">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="830" _type="SelectTextCommand" caretOffset="8248" date="Fri Feb 25 15:39:59 EST 2022" end="8248" start="8247" starttimestamp="1645820509543" timestamp="1090372" />
  <Command __id="831" _type="SelectTextCommand" caretOffset="8248" date="Fri Feb 25 15:39:59 EST 2022" end="8248" start="8247" starttimestamp="1645820509543" timestamp="1090372" />
  <Command __id="833" _type="InsertStringCommand" date="Fri Feb 25 15:40:00 EST 2022" starttimestamp="1645820509543" timestamp="1090471" timestamp2="1090471">
    <data><![CDATA[3]]></data>
  </Command>
  <Command __id="834" _type="InsertStringCommand" date="Fri Feb 25 15:40:00 EST 2022" starttimestamp="1645820509543" timestamp="1090471" timestamp2="1090471">
    <data><![CDATA[3]]></data>
  </Command>
  <Command __id="835" _type="SelectTextCommand" caretOffset="8112" date="Fri Feb 25 15:40:02 EST 2022" end="8112" start="8089" starttimestamp="1645820509543" timestamp="1092700" />
  <Command __id="836" _type="SelectTextCommand" caretOffset="8112" date="Fri Feb 25 15:40:02 EST 2022" end="8112" start="8089" starttimestamp="1645820509543" timestamp="1092701" />
  <Command __id="837" _type="CopyCommand" date="Fri Feb 25 15:40:03 EST 2022" starttimestamp="1645820509543" timestamp="1093513" />
  <Command __id="838" _type="SelectTextCommand" caretOffset="8220" date="Fri Feb 25 15:40:04 EST 2022" end="8220" start="8213" starttimestamp="1645820509543" timestamp="1095188" />
  <Command __id="839" _type="SelectTextCommand" caretOffset="8220" date="Fri Feb 25 15:40:04 EST 2022" end="8220" start="8213" starttimestamp="1645820509543" timestamp="1095188" />
  <Command __id="841" _type="PasteCommand" date="Fri Feb 25 15:40:04 EST 2022" starttimestamp="1645820509543" timestamp="1095360" />
  <DocumentChange __id="739" _type="Insert" date="Fri Feb 25 15:39:21 EST 2022" docASTNodeCount="1056" docActiveCodeLength="7713" docExpressionCount="649" docLength="8443" length="2" offset="8317" starttimestamp="1645820509543" timestamp="1051905">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="746" _type="Insert" date="Fri Feb 25 15:39:22 EST 2022" docASTNodeCount="1056" docActiveCodeLength="7714" docExpressionCount="649" docLength="8444" length="1" offset="8318" starttimestamp="1645820509543" timestamp="1052615">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <DocumentChange __id="751" _type="Insert" date="Fri Feb 25 15:39:23 EST 2022" docASTNodeCount="1056" docActiveCodeLength="7715" docExpressionCount="649" docLength="8445" length="1" offset="8320" starttimestamp="1645820509543" timestamp="1054048">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="754" _type="Insert" date="Fri Feb 25 15:39:23 EST 2022" docASTNodeCount="1056" docActiveCodeLength="7716" docExpressionCount="649" docLength="8446" length="1" offset="8321" starttimestamp="1645820509543" timestamp="1054257">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <DocumentChange __id="757" _type="Insert" date="Fri Feb 25 15:39:23 EST 2022" docASTNodeCount="1056" docActiveCodeLength="7717" docExpressionCount="649" docLength="8447" length="1" offset="8322" starttimestamp="1645820509543" timestamp="1054440">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="768" _type="Insert" date="Fri Feb 25 15:39:30 EST 2022" docASTNodeCount="1061" docActiveCodeLength="7724" docExpressionCount="654" docLength="8454" length="7" offset="8323" starttimestamp="1645820509543" timestamp="1061104">
    <text><![CDATA[c == -1]]></text>
  </DocumentChange>
  <DocumentChange __id="776" _type="Insert" date="Fri Feb 25 15:39:45 EST 2022" docASTNodeCount="1062" docActiveCodeLength="7725" docExpressionCount="655" docLength="8455" length="1" offset="8323" starttimestamp="1645820509543" timestamp="1076233">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="797" _type="Insert" date="Fri Feb 25 15:39:50 EST 2022" docASTNodeCount="1062" docActiveCodeLength="7726" docExpressionCount="655" docLength="8456" length="1" offset="8332" starttimestamp="1645820509543" timestamp="1080886">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="815" _type="Insert" date="Fri Feb 25 15:39:56 EST 2022" docASTNodeCount="1062" docActiveCodeLength="7732" docExpressionCount="655" docLength="8462" length="6" offset="8334" starttimestamp="1645820509543" timestamp="1087125">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="818" _type="Replace" date="Fri Feb 25 15:39:56 EST 2022" docASTNodeCount="1075" docActiveCodeLength="7766" docExpressionCount="667" docLength="8496" endLine="359" insertionLength="38" int_docASTNodeCount="1062" int_docActiveCodeLength="7728" int_docExpressionCount="655" int_docLength="8458" length="4" offset="8336" startLine="359" starttimestamp="1645820509543" timestamp="1087381">
    <deletedText><![CDATA[				]]></deletedText>
    <insertedText><![CDATA[				System.out.print("1" + (c == -1));]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="820" _type="Insert" date="Fri Feb 25 15:39:57 EST 2022" docASTNodeCount="1075" docActiveCodeLength="7772" docExpressionCount="667" docLength="8502" length="6" offset="8374" starttimestamp="1645820509543" timestamp="1087606">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="823" _type="Replace" date="Fri Feb 25 15:39:57 EST 2022" docASTNodeCount="1088" docActiveCodeLength="7806" docExpressionCount="679" docLength="8536" endLine="360" insertionLength="38" int_docASTNodeCount="1075" int_docActiveCodeLength="7768" int_docExpressionCount="667" int_docLength="8498" length="4" offset="8376" startLine="360" starttimestamp="1645820509543" timestamp="1087808">
    <deletedText><![CDATA[				]]></deletedText>
    <insertedText><![CDATA[				System.out.print("1" + (c == -1));]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="827" _type="Replace" date="Fri Feb 25 15:39:59 EST 2022" docASTNodeCount="1088" docActiveCodeLength="7806" docExpressionCount="679" docLength="8536" endLine="359" insertionLength="1" int_docASTNodeCount="1088" int_docActiveCodeLength="7805" int_docExpressionCount="679" int_docLength="8535" length="1" offset="8358" startLine="359" starttimestamp="1645820509543" timestamp="1089534">
    <deletedText><![CDATA[1]]></deletedText>
    <insertedText><![CDATA[2]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="832" _type="Replace" date="Fri Feb 25 15:40:00 EST 2022" docASTNodeCount="1088" docActiveCodeLength="7806" docExpressionCount="679" docLength="8536" endLine="360" insertionLength="1" int_docASTNodeCount="1088" int_docActiveCodeLength="7805" int_docExpressionCount="679" int_docLength="8535" length="1" offset="8398" startLine="360" starttimestamp="1645820509543" timestamp="1090464">
    <deletedText><![CDATA[1]]></deletedText>
    <insertedText><![CDATA[3]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="840" _type="Replace" date="Fri Feb 25 15:40:04 EST 2022" docASTNodeCount="1087" docActiveCodeLength="7822" docExpressionCount="678" docLength="8552" endLine="359" insertionLength="23" int_docASTNodeCount="1028" int_docActiveCodeLength="7799" int_docExpressionCount="632" int_docLength="8529" length="7" offset="8364" startLine="359" starttimestamp="1645820509543" timestamp="1095351">
    <deletedText><![CDATA[c == -1]]></deletedText>
    <insertedText><![CDATA[currentChar == eolUnix ]]></insertedText>
  </DocumentChange>
  <Command __id="842" _type="SelectTextCommand" caretOffset="480" date="Fri Feb 25 15:40:07 EST 2022" end="480" start="469" starttimestamp="1645820509543" timestamp="1098013" />
  <Command __id="843" _type="SelectTextCommand" caretOffset="480" date="Fri Feb 25 15:40:07 EST 2022" end="480" start="469" starttimestamp="1645820509543" timestamp="1098013" />
  <Command __id="844" _type="CopyCommand" date="Fri Feb 25 15:40:07 EST 2022" starttimestamp="1645820509543" timestamp="1098084" />
  <DocumentChange __id="845" _type="Replace" date="Fri Feb 25 15:40:09 EST 2022" docASTNodeCount="1088" docActiveCodeLength="7806" docExpressionCount="679" docLength="8536" endLine="359" insertionLength="7" int_docASTNodeCount="1028" int_docActiveCodeLength="7799" int_docExpressionCount="632" int_docLength="8529" length="23" offset="8364" startLine="359" starttimestamp="1645820509543" timestamp="1100031">
    <deletedText><![CDATA[currentChar == eolUnix ]]></deletedText>
    <insertedText><![CDATA[c == -1]]></insertedText>
  </DocumentChange>
  <Command __id="846" _type="UndoCommand" date="Fri Feb 25 15:40:09 EST 2022" starttimestamp="1645820509543" timestamp="1100051" />
  <Command __id="848" _type="RedoCommand" date="Fri Feb 25 15:40:18 EST 2022" starttimestamp="1645820509543" timestamp="1109006" />
  <Command __id="849" _type="SelectTextCommand" caretOffset="8111" date="Fri Feb 25 15:40:21 EST 2022" end="8111" start="8089" starttimestamp="1645820509543" timestamp="1111637" />
  <Command __id="850" _type="SelectTextCommand" caretOffset="8111" date="Fri Feb 25 15:40:21 EST 2022" end="8111" start="8089" starttimestamp="1645820509543" timestamp="1111637" />
  <Command __id="851" _type="CopyCommand" date="Fri Feb 25 15:40:21 EST 2022" starttimestamp="1645820509543" timestamp="1111822" />
  <Command __id="852" _type="SelectTextCommand" caretOffset="8140" date="Fri Feb 25 15:40:24 EST 2022" end="8140" start="8115" starttimestamp="1645820509543" timestamp="1114749" />
  <Command __id="853" _type="SelectTextCommand" caretOffset="8140" date="Fri Feb 25 15:40:24 EST 2022" end="8140" start="8115" starttimestamp="1645820509543" timestamp="1114750" />
  <Command __id="854" _type="CopyCommand" date="Fri Feb 25 15:40:24 EST 2022" starttimestamp="1645820509543" timestamp="1114847" />
  <DocumentChange __id="847" _type="Replace" date="Fri Feb 25 15:40:18 EST 2022" docASTNodeCount="1087" docActiveCodeLength="7822" docExpressionCount="678" docLength="8552" endLine="359" insertionLength="23" int_docASTNodeCount="1028" int_docActiveCodeLength="7799" int_docExpressionCount="632" int_docLength="8529" length="7" offset="8364" startLine="359" starttimestamp="1645820509543" timestamp="1108992">
    <deletedText><![CDATA[c == -1]]></deletedText>
    <insertedText><![CDATA[currentChar == eolUnix ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="857" _type="Replace" date="Fri Feb 25 15:40:26 EST 2022" docASTNodeCount="1086" docActiveCodeLength="7840" docExpressionCount="677" docLength="8570" endLine="360" insertionLength="25" int_docASTNodeCount="1040" int_docActiveCodeLength="7815" int_docExpressionCount="643" int_docLength="8545" length="7" offset="8420" startLine="360" starttimestamp="1645820509543" timestamp="1116775">
    <deletedText><![CDATA[c == -1]]></deletedText>
    <insertedText><![CDATA[currentChar == eolWindows]]></insertedText>
  </DocumentChange>
  <Command __id="862" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:40:27 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10793" docExpressionCount="1083" docLength="11461" projectName="pa1" starttimestamp="1645820509543" timestamp="1117778">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		"), Diff(INSERT,"System.out.print(currentToken.kind);¶		"), Diff(EQUAL,"while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.print(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
			
			switch (currentToken.kind) {
			// in Type
			case ID:
			acceptIt();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			// in Reference
			case EQUAL:
			acceptIt();
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			case LPAREN:
			acceptIt();
			if (currentToken.kind == TokenKind.RPAREN) {
				acceptIt();
			} else {
				parseArgumentList();
				accept(TokenKind.RPAREN);
			}
			accept(TokenKind.SEMICOLON);
			break;
			
			// both
			case LBRACKET: 
			acceptIt();
			// in Type
			if (currentToken.kind == TokenKind.RBRACKET) {
				acceptIt();
				accept(TokenKind.ID);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			} else {
				// in Reference
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
			
			case DOT:
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET: 
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			default:
				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);
			}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.print(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="865" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:40:28 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="1118805">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="867" _type="RunCommand" date="Fri Feb 25 15:40:30 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="1121430" type="Run" />
  <Command __id="868" _type="RunCommand" date="Fri Feb 25 15:40:30 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="1121430" type="Run" />
  <Command __id="869" _type="RunCommand" date="Fri Feb 25 15:40:31 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="1121621" type="Run" />
  <Command __id="870" _type="RunCommand" date="Fri Feb 25 15:40:31 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="1121621" type="Run" />
  <Command __id="871" _type="EHExceptionCommand" date="Fri Feb 25 15:40:31 EST 2022" starttimestamp="1645820509543" timestamp="1121668" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
classErrorReporter1false2false3true{EOTin here: 
Parse error: Parsing  and expecting 'RCURLY' but found 'EOT'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="873" _type="MoveCaretCommand" caretOffset="8294" date="Fri Feb 25 15:40:35 EST 2022" docOffset="8445" starttimestamp="1645820509543" timestamp="1125841" />
  <Command __id="874" _type="MoveCaretCommand" caretOffset="8134" date="Fri Feb 25 15:40:41 EST 2022" docOffset="8285" starttimestamp="1645820509543" timestamp="1131629" />
  <Command __id="875" _type="MoveCaretCommand" caretOffset="8134" date="Fri Feb 25 15:40:41 EST 2022" docOffset="8285" starttimestamp="1645820509543" timestamp="1131629" />
  <Command __id="876" _type="ShellCommand" date="Fri Feb 25 15:41:33 EST 2022" starttimestamp="1645820509543" timestamp="1184132" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="877" _type="ShellCommand" date="Fri Feb 25 15:42:10 EST 2022" starttimestamp="1645820509543" timestamp="1220494" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="878" _type="ShellCommand" date="Fri Feb 25 15:42:24 EST 2022" starttimestamp="1645820509543" timestamp="1234708" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="879" _type="ShellCommand" date="Fri Feb 25 15:42:40 EST 2022" starttimestamp="1645820509543" timestamp="1250672" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="880" _type="ShellCommand" date="Fri Feb 25 15:42:48 EST 2022" starttimestamp="1645820509543" timestamp="1258751" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="883" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:43:15 EST 2022" projectName="null" starttimestamp="1645820509543" timestamp="1285924">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="886" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:43:22 EST 2022" docASTNodeCount="1" docActiveCodeLength="28" docExpressionCount="0" docLength="28" projectName="miniJava.zip_expanded" starttimestamp="1645820509543" timestamp="1292899">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\miniJava.zip_expanded\pa1\bin\miniJava\testfile]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[if (1 == 1) {
	return 1;
}]]></snapshot>
  </Command>
  <Command __id="887" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:43:24 EST 2022" docASTNodeCount="1086" docActiveCodeLength="7840" docExpressionCount="677" docLength="8570" projectName="pa1" starttimestamp="1645820509543" timestamp="1294761">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1 || currentChar == eolUnix || currentChar == eolWindows) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="890" _type="ShellCommand" date="Fri Feb 25 15:43:40 EST 2022" starttimestamp="1645820509543" timestamp="1310531" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="892" _type="MoveCaretCommand" caretOffset="8216" date="Fri Feb 25 15:43:42 EST 2022" docOffset="8367" starttimestamp="1645820509543" timestamp="1313333" />
  <Command __id="893" _type="MoveCaretCommand" caretOffset="8216" date="Fri Feb 25 15:43:42 EST 2022" docOffset="8367" starttimestamp="1645820509543" timestamp="1313365" />
  <Command __id="894" _type="MoveCaretCommand" caretOffset="8208" date="Fri Feb 25 15:43:43 EST 2022" docOffset="8359" starttimestamp="1645820509543" timestamp="1314037" />
  <Command __id="895" _type="MoveCaretCommand" caretOffset="8208" date="Fri Feb 25 15:43:43 EST 2022" docOffset="8359" starttimestamp="1645820509543" timestamp="1314037" />
  <Command __id="896" _type="ShellCommand" date="Fri Feb 25 15:43:43 EST 2022" starttimestamp="1645820509543" timestamp="1314276" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="897" _type="ShellCommand" date="Fri Feb 25 15:43:44 EST 2022" starttimestamp="1645820509543" timestamp="1315123" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="898" _type="ShellCommand" date="Fri Feb 25 15:43:45 EST 2022" starttimestamp="1645820509543" timestamp="1315738" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="899" _type="ShellCommand" date="Fri Feb 25 15:44:01 EST 2022" starttimestamp="1645820509543" timestamp="1332415" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="900" _type="ShellCommand" date="Fri Feb 25 15:44:04 EST 2022" starttimestamp="1645820509543" timestamp="1334776" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="901" _type="PasteCommand" date="Fri Feb 25 15:44:05 EST 2022" starttimestamp="1645820509543" timestamp="1335763" />
  <Command __id="923" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:47:42 EST 2022" docASTNodeCount="349" docActiveCodeLength="2006" docExpressionCount="199" docLength="2545" projectName="simpleScannerParser" starttimestamp="1645820509543" timestamp="1552843">
    <filePath><![CDATA[C:\Users\zengqh\Desktop\comp 520\simpleScannerParser\simpleScannerParser\src\miniArith\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"/**¶ *  Scan the a single line of input¶ *¶ *  Grammar:¶ *   num ::= digit digit*¶ *   digit ::= '0' | ... | '9'¶ *   oper ::= '+' | '*'¶ *   ¶ *   whitespace is the space character¶ */¶package miniArith.SyntacticAnalyzer;¶¶import java.io.*;¶import miniArith.ErrorReporter;¶¶public class Scanner{¶¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶¶	private char currentChar;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}¶¶	/**¶	 * skip whitespace and scan next token¶	 */¶	public Token scan() {¶¶		// skip whitespace¶		while (!eot && currentChar == ' ')¶			skipIt();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		¶		if (eot)¶			return(TokenKind.EOT); ¶¶		// scan Token¶		switch (currentChar) {¶		case '+':¶			takeIt();¶			return(TokenKind.PLUS);¶¶		case '*':¶			takeIt();¶			return(TokenKind.TIMES);¶¶		case '(': ¶			takeIt();¶			return(TokenKind.LPAREN);¶¶		case ')':¶			takeIt();¶			return(TokenKind.RPAREN);¶¶		case '0': case '1': case '2': case '3': case '4':¶		case '5': case '6': case '7': case '8': case '9':¶			while (isDigit(currentChar))¶				takeIt();¶			return(TokenKind.NUM);¶¶		default:¶			scanError("Unrecognized character '" + currentChar + "' in input");¶			return(TokenKind.ERROR);¶		}¶	}¶¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶	private boolean isDigit(char c) {¶		return (c >= '0') && (c <= '9');¶	}¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1 || currentChar == eolUnix || currentChar == eolWindows) {¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="945" _type="MoveCaretCommand" caretOffset="2306" date="Fri Feb 25 15:53:18 EST 2022" docOffset="2488" starttimestamp="1645820509543" timestamp="1888517" />
  <Command __id="947" _type="MoveCaretCommand" caretOffset="1305" date="Fri Feb 25 15:53:20 EST 2022" docOffset="1383" starttimestamp="1645820509543" timestamp="1890657" />
  <Command __id="948" _type="MoveCaretCommand" caretOffset="1305" date="Fri Feb 25 15:53:20 EST 2022" docOffset="1383" starttimestamp="1645820509543" timestamp="1890717" />
  <Command __id="949" _type="MoveCaretCommand" caretOffset="1187" date="Fri Feb 25 15:53:20 EST 2022" docOffset="1265" starttimestamp="1645820509543" timestamp="1891132" />
  <Command __id="950" _type="MoveCaretCommand" caretOffset="1187" date="Fri Feb 25 15:53:20 EST 2022" docOffset="1265" starttimestamp="1645820509543" timestamp="1891132" />
  <Command __id="952" _type="ShellCommand" date="Fri Feb 25 15:53:21 EST 2022" starttimestamp="1645820509543" timestamp="1892160" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="946" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:53:20 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10793" docExpressionCount="1083" docLength="11461" projectName="pa1" starttimestamp="1645820509543" timestamp="1890627">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.print(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="954" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 15:53:23 EST 2022" docASTNodeCount="349" docActiveCodeLength="2006" docExpressionCount="199" docLength="2545" projectName="simpleScannerParser" starttimestamp="1645820509543" timestamp="1893472">
    <filePath><![CDATA[C:\Users\zengqh\Desktop\comp 520\simpleScannerParser\simpleScannerParser\src\miniArith\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"/**¶ *  Scan the a single line of input¶ *¶ *  Grammar:¶ *   num ::= digit digit*¶ *   digit ::= '0' | ... | '9'¶ *   oper ::= '+' | '*'¶ *   ¶ *   whitespace is the space character¶ */¶package miniArith.SyntacticAnalyzer;¶¶import java.io.*;¶import miniArith.ErrorReporter;¶¶public class Scanner{¶¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶¶	private char currentChar;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}¶¶	/**¶	 * skip whitespace and scan next token¶	 */¶	public Token scan() {¶¶		// skip whitespace¶		while (!eot && currentChar == ' ')¶			skipIt();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		¶		if (eot)¶			return(TokenKind.EOT); ¶¶		// scan Token¶		switch (currentChar) {¶		case '+':¶			takeIt();¶			return(TokenKind.PLUS);¶¶		case '*':¶			takeIt();¶			return(TokenKind.TIMES);¶¶		case '(': ¶			takeIt();¶			return(TokenKind.LPAREN);¶¶		case ')':¶			takeIt();¶			return(TokenKind.RPAREN);¶¶		case '0': case '1': case '2': case '3': case '4':¶		case '5': case '6': case '7': case '8': case '9':¶			while (isDigit(currentChar))¶				takeIt();¶			return(TokenKind.NUM);¶¶		default:¶			scanError("Unrecognized character '" + currentChar + "' in input");¶			return(TokenKind.ERROR);¶		}¶	}¶¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶	private boolean isDigit(char c) {¶		return (c >= '0') && (c <= '9');¶	}¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1 || currentChar == eolUnix || currentChar == eolWindows) {¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1008" _type="SelectTextCommand" caretOffset="2200" date="Fri Feb 25 16:05:05 EST 2022" end="2254" start="2200" starttimestamp="1645820509543" timestamp="2595941" />
  <Command __id="1009" _type="SelectTextCommand" caretOffset="2200" date="Fri Feb 25 16:05:05 EST 2022" end="2254" start="2200" starttimestamp="1645820509543" timestamp="2595941" />
  <Command __id="1011" _type="MoveCaretCommand" caretOffset="8208" date="Fri Feb 25 16:05:15 EST 2022" docOffset="8359" starttimestamp="1645820509543" timestamp="2606127" />
  <Command __id="1010" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 16:05:15 EST 2022" docASTNodeCount="1086" docActiveCodeLength="7840" docExpressionCount="677" docLength="8570" projectName="pa1" starttimestamp="1645820509543" timestamp="2606009">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1 || currentChar == eolUnix || currentChar == eolWindows) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1018" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 16:05:21 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10793" docExpressionCount="1083" docLength="11461" projectName="pa1" starttimestamp="1645820509543" timestamp="2611687">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.print(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1021" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 16:05:22 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="2613054">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1023" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 16:05:23 EST 2022" docASTNodeCount="46" docActiveCodeLength="297" docExpressionCount="21" docLength="297" projectName="pa1" starttimestamp="1645820509543" timestamp="2613697">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static kill;¶¶		static ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="1024" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 16:05:23 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="2614131">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1026" _type="RunCommand" date="Fri Feb 25 16:05:25 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="2615589" type="Run" />
  <Command __id="1027" _type="RunCommand" date="Fri Feb 25 16:05:25 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="2615590" type="Run" />
  <Command __id="1028" _type="RunCommand" date="Fri Feb 25 16:05:25 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="2615783" type="Run" />
  <Command __id="1029" _type="RunCommand" date="Fri Feb 25 16:05:25 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="2615783" type="Run" />
  <Command __id="1030" _type="EHExceptionCommand" date="Fri Feb 25 16:05:25 EST 2022" starttimestamp="1645820509543" timestamp="2615835" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
classErrorReporter{PRIVATEprivateintnumErrors;publicstatickillParse error: Parsing ; and expecting 'ID' but found 'SEMICOLON'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="1031" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 16:05:35 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10793" docExpressionCount="1083" docLength="11461" projectName="pa1" starttimestamp="1645820509543" timestamp="2626098">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.print(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1032" _type="MoveCaretCommand" caretOffset="1249" date="Fri Feb 25 16:05:35 EST 2022" docOffset="1327" starttimestamp="1645820509543" timestamp="2626140" />
  <Command __id="1033" _type="MoveCaretCommand" caretOffset="1249" date="Fri Feb 25 16:05:35 EST 2022" docOffset="1327" starttimestamp="1645820509543" timestamp="2626169" />
  <Command __id="1034" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 16:05:38 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7785" docExpressionCount="669" docLength="8515" projectName="pa1" starttimestamp="1645820509543" timestamp="2629199">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1"), Diff(DELETE," || currentChar == eolUnix || currentChar == eolWindows"), Diff(EQUAL,") {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import java.io.IOException;
import java.io.InputStream;

import miniJava.ErrorReporter;
import miniJava.SyntacticAnalyzer.Token;
import miniJava.SyntacticAnalyzer.TokenKind;

public class Scanner {
	private boolean isComment;
	
//	comment state = 0 not comment
//			= 1 show /
//			= 2 show second /
//			= 12 show first *
//			= 13 show second *
//			= 3 show third /
//			= 4 show fourth / end of comment
//			= 14 show second / end of comment
	private int commentState;
	
	private InputStream inputStream;
	private ErrorReporter reporter;
	
	private char currentChar;
	private byte currentKind;
	private StringBuilder currentSpelling;
	
	// true when end of line is found
	private boolean eot = false; 
	
	public Scanner(InputStream inputStream, ErrorReporter reporter) {
		this.isComment = false;
		this.commentState = 0;
		this.inputStream = inputStream;
		this.reporter = reporter;

		// initialize scanner state
		readChar();
	}	
	
	/**
	 * skip whitespace and scan next token
	 */	
	
// ? SINGLE SLASH
//	comment state = 0 not comment
//	= 1 show /
//	= 2 show second /
//	= 12 show first *
//	= 13 show second *
//	= 14 show second / end of comment
	public void scanSeparator() {
		switch (commentState) {
			case 0:
				while (!eot && 
						(currentChar == ' ' ||
							currentChar == '\t' ||
								currentChar == '\n' ||
									currentChar == '\r')) {
					skipIt();
				}
				if (currentChar == '/') {
					commentState = 1;
					skipIt();
					scanSeparator();
				}
				break;
			
			case 1:
				if (currentChar == '/') {
					commentState = 2;
					isComment = true;
					skipIt();
					scanSeparator();
				} else if (currentChar == '*') {
					commentState = 12;
					isComment = true;
					skipIt();
					scanSeparator();
				} else {
					System.exit(4);
				}
				break;
			
			case 2:
				if (currentChar == '\r' || currentChar == '\n' || eot) {
					commentState = 0;
					isComment = false;
					scanSeparator();
				} else {
					skipIt();
					scanSeparator();		
				}
				break;
				
			case 12:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '*') {
					skipIt();
					scanSeparator();
				} else {
					commentState = 13;
					scanSeparator();
				}
				break;
			
			case 13:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '/') {
					skipIt();
					commentState = 12;
					scanSeparator();
				} else {
					commentState = 0;
					isComment = false;
					scanSeparator();
				}
				break;	
		}		
	}
	

	public Token scan() {
		// skip whitespace and comments
		scanSeparator();

		// start of a token: collect spelling and identify token kind
		currentSpelling = new StringBuilder();
		TokenKind kind = scanToken();
		String spelling = currentSpelling.toString();
		
		if (kind == TokenKind.ID) {
			switch (spelling) {
			case "class":
				kind = TokenKind.CLASS;
				break;
			case "public":
				kind = TokenKind.PUBLIC;
				break;
			case "private":
				kind = TokenKind.PRIVATE;
				break;
			case "static":
				kind = TokenKind.STATIC;
				break;
			case "int":
				kind = TokenKind.INT;
				break;
			case "boolean":
				kind = TokenKind.BOOLEAN;
				break;
			case "void":
				kind = TokenKind.VOID;
				break;
			case "this":
				kind = TokenKind.THIS;
				break;
			case "return":
				kind = TokenKind.RETURN;
				break;
			case "if":
				kind = TokenKind.IF;
				break;
			case "else":
				kind = TokenKind.ELSE;
				break;
			case "while":
				kind = TokenKind.WHILE;
				break;
			case "true":
				kind = TokenKind.TRUE;
				break;
			case "false":
				kind = TokenKind.FALSE;
				break;
			default:
				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};
				for (String s : ss) {
					if (spelling.toLowerCase().equals(s)) {
						reporter.reportError("Key word should not be used as identifiers.");
						System.exit(4);
					}
				}
				break;
			}
		}

		// return new token
		return new Token(kind, spelling);
	}

	
	/**
	 * determine token kind
	 */
	public TokenKind scanToken() {
		if (eot) {
			return TokenKind.EOT; 
		}
			
		switch (currentChar) {
			case 'a':  case 'b':  case 'c':  case 'd':
			case 'e':  case 'f':  case 'g':  case 'h':
			case 'i':  case 'j':  case 'k':  case 'l':
			case 'm':  case 'n':  case 'o':  case 'p':
			case 'q':  case 'r':  case 's':  case 't':
	        case 'u':  case 'v':  case 'w':  case 'x':
	        case 'y':  case 'z':
	        
	        case 'A':  case 'B':  case 'C':  case 'D':
	        case 'E':  case 'F':  case 'G':  case 'H':
	        case 'I':  case 'J':  case 'K':  case 'L':
	        case 'M':  case 'N':  case 'O':	 case 'P':
	        case 'Q':  case 'R':  case 'S':  case 'T':
	        case 'U':  case 'V':  case 'W':  case 'X':
	        case 'Y':  case 'Z':
	        	takeIt();
	        	while(Character.isLetter(currentChar) 
	        			|| Character.isDigit(currentChar)
	        				|| currentChar == '_') {
	        		takeIt();
	        	}
	        	return TokenKind.ID;
	        
	        case '0':  case '1':  case '2':  case '3':  case '4':
	        case '5':  case '6':  case '7':  case '8':  case '9':
	            takeIt();
	            while(Character.isDigit(currentChar)) {
	            	takeIt();
	            }
	            return TokenKind.NUM;
	        
	        case '>': case '<': case '=':
	            takeIt();
	            if(currentChar == '=') {
	                takeIt();
	                return TokenKind.BINOP;
	            }
	            return TokenKind.BINOP;
	        
	        case '+': case '*': case '/':
	        	takeIt();
	        	return TokenKind.BINOP;
	        
	        case '&':
	            takeIt();
	            if(currentChar != '&') {
	                System.exit(4);
	            }
	            takeIt();
	            return TokenKind.BINOP;

	        case '|':
	            takeIt();
	            if(currentChar != '|')
	                System.exit(4);
	            takeIt();
	            return TokenKind.BINOP;
	        
	        case '!':
	            takeIt();
	            if(currentChar == '=') {
	                takeIt();
	                return TokenKind.BINOP;
	            }
	            return TokenKind.UNOP;
	            
	        case '-':
	            takeIt();
	            return TokenKind.MINUS;
	        
	        case '.':
	            takeIt();
	            return TokenKind.DOT;

	        case ',':
	            takeIt();
	            return TokenKind.COMMA;

	        case ';':
	            takeIt();
	            return TokenKind.SEMICOLON;

	        case '(':
	            takeIt();
	            return TokenKind.LPAREN;

	        case ')':
	            takeIt();
	            return TokenKind.RPAREN;

	        case '[':
	            takeIt();
	            return TokenKind.LBRACKET;

	        case ']':
	            takeIt();
	            return TokenKind.RBRACKET;

	        case '{':
	            takeIt();
	            return TokenKind.LCURLY;

	        case '}':
	            takeIt();
	            return TokenKind.RCURLY;
	        
	        default:
				scanError("Unrecognized character '" + currentChar + "' in input");
				return TokenKind.ERROR; 
		}
	}

	
	private void takeIt() {
		currentSpelling.append(currentChar);
		nextChar();
	}
	
	private void take(char expectedChar) {
		if (currentChar == expectedChar) {
			takeIt();
		}
	}

	private void skipIt() {
		nextChar();
	}


	private void scanError(String m) {
		reporter.reportError("Scan Error:  " + m);
	}


	private final static char eolUnix = '\n';
	private final static char eolWindows = '\r';

	/**
	 * advance to next char in inputstream
	 * detect end of file or end of line as end of input
	 */
	private void nextChar() {
		if (!eot)
			readChar();
	}

	private void readChar() {
		try {
			int c = inputStream.read();
			currentChar = (char) c;
			if (c == -1) {
				System.out.print("1" + (c == -1));
				System.out.print("2" + (currentChar == eolUnix ));
				System.out.print("3" + (currentChar == eolWindows));
				eot = true;
			}
		} catch (IOException e) {
			scanError("I/O Exception!");
			eot = true;
		}
	}
	


}
]]></snapshot>
  </Command>
  <Command __id="1035" _type="MoveCaretCommand" caretOffset="8069" date="Fri Feb 25 16:05:38 EST 2022" docOffset="8220" starttimestamp="1645820509543" timestamp="2629269" />
  <Command __id="1037" _type="MoveCaretCommand" caretOffset="1249" date="Fri Feb 25 16:05:43 EST 2022" docOffset="1327" starttimestamp="1645820509543" timestamp="2633484" />
  <Command __id="1039" _type="ShellCommand" date="Fri Feb 25 16:05:45 EST 2022" starttimestamp="1645820509543" timestamp="2635556" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1040" _type="FindCommand" caseSensitive="true" date="Fri Feb 25 16:05:47 EST 2022" forward="false" matchWord="true" offset="1327" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="2638451" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1041" _type="FindCommand" caseSensitive="true" date="Fri Feb 25 16:05:49 EST 2022" forward="false" matchWord="true" offset="1121" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="2640326" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1042" _type="ShellCommand" date="Fri Feb 25 16:05:50 EST 2022" starttimestamp="1645820509543" timestamp="2641266" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1043" _type="MoveCaretCommand" caretOffset="10470" date="Fri Feb 25 16:06:09 EST 2022" docOffset="10548" starttimestamp="1645820509543" timestamp="2660309" />
  <Command __id="1044" _type="MoveCaretCommand" caretOffset="10470" date="Fri Feb 25 16:06:09 EST 2022" docOffset="10548" starttimestamp="1645820509543" timestamp="2660309" />
  <Command __id="1045" _type="SelectTextCommand" caretOffset="10471" date="Fri Feb 25 16:06:10 EST 2022" end="10471" start="10466" starttimestamp="1645820509543" timestamp="2660709" />
  <Command __id="1046" _type="SelectTextCommand" caretOffset="10471" date="Fri Feb 25 16:06:10 EST 2022" end="10471" start="10466" starttimestamp="1645820509543" timestamp="2660709" />
  <Command __id="1047" _type="MoveCaretCommand" caretOffset="10471" date="Fri Feb 25 16:06:10 EST 2022" docOffset="10549" starttimestamp="1645820509543" timestamp="2661248" />
  <Command __id="1048" _type="MoveCaretCommand" caretOffset="10471" date="Fri Feb 25 16:06:10 EST 2022" docOffset="10549" starttimestamp="1645820509543" timestamp="2661248" />
  <Command __id="1050" _type="InsertStringCommand" date="Fri Feb 25 16:06:11 EST 2022" starttimestamp="1645820509543" timestamp="2662198" timestamp2="2662198">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1051" _type="InsertStringCommand" date="Fri Feb 25 16:06:11 EST 2022" starttimestamp="1645820509543" timestamp="2662198" timestamp2="2662198">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1053" _type="InsertStringCommand" date="Fri Feb 25 16:06:11 EST 2022" starttimestamp="1645820509543" timestamp="2662398" timestamp2="2662398">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1054" _type="InsertStringCommand" date="Fri Feb 25 16:06:11 EST 2022" starttimestamp="1645820509543" timestamp="2662398" timestamp2="2662398">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1056" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 25 16:06:12 EST 2022" starttimestamp="1645820509543" timestamp="2663094" />
  <Command __id="1057" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 25 16:06:12 EST 2022" starttimestamp="1645820509543" timestamp="2663094" />
  <Command __id="1059" _type="InsertStringCommand" date="Fri Feb 25 16:06:12 EST 2022" starttimestamp="1645820509543" timestamp="2663410" timestamp2="2663410">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1060" _type="InsertStringCommand" date="Fri Feb 25 16:06:12 EST 2022" starttimestamp="1645820509543" timestamp="2663410" timestamp2="2663410">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1036" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 16:05:42 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10793" docExpressionCount="1083" docLength="11461" projectName="pa1" starttimestamp="1645820509543" timestamp="2633431">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.print(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1049" _type="Insert" date="Fri Feb 25 16:06:11 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10794" docExpressionCount="1083" docLength="11462" length="1" offset="10549" starttimestamp="1645820509543" timestamp="2662191">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="1052" _type="Insert" date="Fri Feb 25 16:06:11 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10795" docExpressionCount="1083" docLength="11463" length="1" offset="10550" starttimestamp="1645820509543" timestamp="2662391">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="1055" _type="Delete" date="Fri Feb 25 16:06:12 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10794" docExpressionCount="1083" docLength="11462" endLine="481" length="1" offset="10550" startLine="481" starttimestamp="1645820509543" timestamp="2663092">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="1058" _type="Insert" date="Fri Feb 25 16:06:12 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10795" docExpressionCount="1083" docLength="11463" length="1" offset="10550" starttimestamp="1645820509543" timestamp="2663400">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1066" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 16:06:15 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7785" docExpressionCount="669" docLength="8515" projectName="pa1" starttimestamp="1645820509543" timestamp="2665521">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1074" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 16:07:54 EST 2022" docASTNodeCount="46" docActiveCodeLength="297" docExpressionCount="21" docLength="297" projectName="pa1" starttimestamp="1645820509543" timestamp="2764493">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static kill;¶¶		static ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="1075" _type="EclipseCommand" commandID="" date="Fri Feb 25 16:08:06 EST 2022" starttimestamp="1645820509543" timestamp="2776895" />
  <Command __id="1076" _type="EclipseCommand" commandID="" date="Fri Feb 25 16:08:06 EST 2022" starttimestamp="1645820509543" timestamp="2776938" />
  <Command __id="1077" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 16:08:10 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="2780937">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1078" _type="MoveCaretCommand" caretOffset="219" date="Fri Feb 25 16:08:10 EST 2022" docOffset="219" starttimestamp="1645820509543" timestamp="2781001" />
  <Command __id="1079" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 16:08:11 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7785" docExpressionCount="669" docLength="8515" projectName="pa1" starttimestamp="1645820509543" timestamp="2782090">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1080" _type="MoveCaretCommand" caretOffset="7706" date="Fri Feb 25 16:08:11 EST 2022" docOffset="7857" starttimestamp="1645820509543" timestamp="2782143" />
  <Command __id="1081" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 16:08:13 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="2783839">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1083" _type="RunCommand" date="Fri Feb 25 16:08:14 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="2784987" type="Run" />
  <Command __id="1084" _type="RunCommand" date="Fri Feb 25 16:08:14 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="2784988" type="Run" />
  <Command __id="1085" _type="RunCommand" date="Fri Feb 25 16:08:14 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="2785105" type="Run" />
  <Command __id="1086" _type="RunCommand" date="Fri Feb 25 16:08:14 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="2785105" type="Run" />
  <Command __id="1087" _type="EHExceptionCommand" date="Fri Feb 25 16:08:14 EST 2022" starttimestamp="1645820509543" timestamp="2785156" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
ErrorReporter
Parse error: Parsing ( and expecting 'ID' but found 'LPAREN'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="1089" _type="ShellCommand" date="Fri Feb 25 16:08:47 EST 2022" starttimestamp="1645820509543" timestamp="2818388" type="ECLIPSE_MINIMIZED" />
  <Command __id="1090" _type="ShellCommand" date="Fri Feb 25 16:08:47 EST 2022" starttimestamp="1645820509543" timestamp="2818393" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1091" _type="ShellCommand" date="Sat Feb 26 22:32:52 EST 2022" starttimestamp="1645820509543" timestamp="112263035" type="ECLIPSE_MAXIMIZED" />
  <Command __id="1092" _type="ShellCommand" date="Sat Feb 26 22:32:52 EST 2022" starttimestamp="1645820509543" timestamp="112263157" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1093" _type="ShellCommand" date="Sat Feb 26 22:34:42 EST 2022" starttimestamp="1645820509543" timestamp="112373447" type="ECLIPSE_MINIMIZED" />
  <Command __id="1094" _type="ShellCommand" date="Sat Feb 26 22:34:42 EST 2022" starttimestamp="1645820509543" timestamp="112373453" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1095" _type="ShellCommand" date="Sat Feb 26 23:38:26 EST 2022" starttimestamp="1645820509543" timestamp="116197312" type="ECLIPSE_MINIMIZED" />
  <Command __id="1096" _type="ShellCommand" date="Sat Feb 26 23:38:39 EST 2022" starttimestamp="1645820509543" timestamp="116209578" type="ECLIPSE_MAXIMIZED" />
  <Command __id="1097" _type="ShellCommand" date="Sat Feb 26 23:38:39 EST 2022" starttimestamp="1645820509543" timestamp="116209648" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1098" _type="ShellCommand" date="Sat Feb 26 23:38:39 EST 2022" starttimestamp="1645820509543" timestamp="116210154" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1099" _type="ShellCommand" date="Sun Feb 27 02:00:47 EST 2022" starttimestamp="1645820509543" timestamp="124737925" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1100" _type="ShellCommand" date="Sun Feb 27 02:00:47 EST 2022" starttimestamp="1645820509543" timestamp="124738353" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1101" _type="ShellCommand" date="Sun Feb 27 02:00:47 EST 2022" starttimestamp="1645820509543" timestamp="124738445" type="ECLIPSE_MINIMIZED" />
  <Command __id="1102" _type="ShellCommand" date="Sun Feb 27 14:41:55 EST 2022" starttimestamp="1645820509543" timestamp="170405933" type="ECLIPSE_MAXIMIZED" />
  <Command __id="1103" _type="ShellCommand" date="Sun Feb 27 14:41:55 EST 2022" starttimestamp="1645820509543" timestamp="170405984" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1104" _type="ShellCommand" date="Sun Feb 27 14:42:09 EST 2022" starttimestamp="1645820509543" timestamp="170420014" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1105" _type="ShellCommand" date="Sun Feb 27 14:42:11 EST 2022" starttimestamp="1645820509543" timestamp="170422358" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1107" _type="MoveCaretCommand" caretOffset="10652" date="Sun Feb 27 14:42:12 EST 2022" docOffset="10730" starttimestamp="1645820509543" timestamp="170422566" />
  <Command __id="1108" _type="MoveCaretCommand" caretOffset="10652" date="Sun Feb 27 14:42:12 EST 2022" docOffset="10730" starttimestamp="1645820509543" timestamp="170422605" />
  <Command __id="1109" _type="ShellCommand" date="Sun Feb 27 15:25:45 EST 2022" starttimestamp="1645820509543" timestamp="173035931" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1110" _type="ShellCommand" date="Sun Feb 27 15:48:53 EST 2022" starttimestamp="1645820509543" timestamp="174423672" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1111" _type="ShellCommand" date="Sun Feb 27 15:49:19 EST 2022" starttimestamp="1645820509543" timestamp="174449553" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1112" _type="ShellCommand" date="Sun Feb 27 16:47:25 EST 2022" starttimestamp="1645820509543" timestamp="177936442" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1114" _type="ShellCommand" date="Sun Feb 27 16:48:52 EST 2022" starttimestamp="1645820509543" timestamp="178023411" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1115" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 16:49:03 EST 2022" forward="false" matchWord="true" offset="10730" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="178033799" wrapSearch="false">
    <searchString><![CDATA[accept(TokenKind.ID]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1116" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 16:49:03 EST 2022" forward="false" matchWord="true" offset="9533" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="178034011" wrapSearch="false">
    <searchString><![CDATA[accept(TokenKind.ID]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1117" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 16:49:03 EST 2022" forward="false" matchWord="true" offset="9533" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="178034340" wrapSearch="false">
    <searchString><![CDATA[accept(TokenKind.ID]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1118" _type="ShellCommand" date="Sun Feb 27 16:49:04 EST 2022" starttimestamp="1645820509543" timestamp="178034711" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1119" _type="MoveCaretCommand" caretOffset="9463" date="Sun Feb 27 16:49:04 EST 2022" docOffset="9541" starttimestamp="1645820509543" timestamp="178034764" />
  <Command __id="1120" _type="MoveCaretCommand" caretOffset="9463" date="Sun Feb 27 16:49:04 EST 2022" docOffset="9541" starttimestamp="1645820509543" timestamp="178034764" />
  <Command __id="1121" _type="ShellCommand" date="Sun Feb 27 16:49:05 EST 2022" starttimestamp="1645820509543" timestamp="178035551" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1122" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 16:49:05 EST 2022" forward="false" matchWord="true" offset="9541" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="178035615" wrapSearch="false">
    <searchString><![CDATA[accept(TokenKind.ID]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1123" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 16:49:05 EST 2022" forward="false" matchWord="true" offset="9533" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="178035828" wrapSearch="false">
    <searchString><![CDATA[accept(TokenKind.ID]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1124" _type="ShellCommand" date="Sun Feb 27 16:49:06 EST 2022" starttimestamp="1645820509543" timestamp="178037116" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1088" _type="DiffBasedFileOpenCommand" date="Fri Feb 25 16:08:29 EST 2022" docASTNodeCount="50" docActiveCodeLength="303" docExpressionCount="22" docLength="303" projectName="pa1" starttimestamp="1645820509543" timestamp="2800245">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static "), Diff(DELETE,"kill"), Diff(INSERT,"boolean gg"), Diff(EQUAL,";¶¶		static ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
    <snapshot><![CDATA[class ErrorReporter {

		private int numErrors;
		public static boolean gg;

		static ErrorReporter() {
			numErrors = 0;
		}

		public boolean hasErrors() {
			return numErrors > 0;
		}

		public void reportError(String message) {
			System.out.println(message);
			numErrors++;
		}	
}]]></snapshot>
  </Command>
  <Command __id="1106" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 14:42:12 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10795" docExpressionCount="1083" docLength="11463" projectName="pa1" starttimestamp="1645820509543" timestamp="170422524">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.print"), Diff(INSERT,"ln"), Diff(EQUAL,"(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
			
			switch (currentToken.kind) {
			// in Type
			case ID:
			acceptIt();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			// in Reference
			case EQUAL:
			acceptIt();
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			case LPAREN:
			acceptIt();
			if (currentToken.kind == TokenKind.RPAREN) {
				acceptIt();
			} else {
				parseArgumentList();
				accept(TokenKind.RPAREN);
			}
			accept(TokenKind.SEMICOLON);
			break;
			
			// both
			case LBRACKET: 
			acceptIt();
			// in Type
			if (currentToken.kind == TokenKind.RBRACKET) {
				acceptIt();
				accept(TokenKind.ID);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			} else {
				// in Reference
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
			
			case DOT:
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET: 
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			default:
				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);
			}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="1131" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:09:44 EST 2022" docASTNodeCount="50" docActiveCodeLength="303" docExpressionCount="22" docLength="303" projectName="pa1" starttimestamp="1645820509543" timestamp="179274600">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="1132" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:09:59 EST 2022" starttimestamp="1645820509543" timestamp="179290045" />
  <Command __id="1133" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:09:59 EST 2022" starttimestamp="1645820509543" timestamp="179290083" />
  <Command __id="1134" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:10:10 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="179301042">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1135" _type="MoveCaretCommand" caretOffset="219" date="Sun Feb 27 17:10:10 EST 2022" docOffset="219" starttimestamp="1645820509543" timestamp="179301131" />
  <Command __id="1136" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:10:11 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7785" docExpressionCount="669" docLength="8515" projectName="pa1" starttimestamp="1645820509543" timestamp="179301724">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1138" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:10:11 EST 2022" docASTNodeCount="51" docActiveCodeLength="308" docExpressionCount="22" docLength="308" projectName="pa1" starttimestamp="1645820509543" timestamp="179302414">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static "), Diff(INSERT,"void "), Diff(EQUAL,"ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
    <snapshot><![CDATA[class ErrorReporter {

		private int numErrors;
		public static boolean gg;

		static void ErrorReporter() {
			numErrors = 0;
		}

		public boolean hasErrors() {
			return numErrors > 0;
		}

		public void reportError(String message) {
			System.out.println(message);
			numErrors++;
		}	
}]]></snapshot>
  </Command>
  <Command __id="1139" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:10:16 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="179306496">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1141" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:10:16 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7785" docExpressionCount="669" docLength="8515" projectName="pa1" starttimestamp="1645820509543" timestamp="179306862">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1143" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:10:19 EST 2022" docASTNodeCount="163" docActiveCodeLength="1007" docExpressionCount="111" docLength="1007" projectName="pa1" starttimestamp="1645820509543" timestamp="179309504">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\Compiler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶import java.io.FileInputStream;¶import java.io.FileNotFoundException;¶import java.io.InputStream;¶¶import miniJava.SyntacticAnalyzer.Parser;¶import miniJava.SyntacticAnalyzer.Scanner;¶¶public class Compiler {¶	public static void main(String[] args) {¶		InputStream inputStream = null;¶		try {¶			inputStream = new FileInputStream(args[0]);¶		} catch (FileNotFoundException e) {¶			System.out.println("Input file " + args[0] + " not found");¶			System.exit(1);¶		}¶		¶		ErrorReporter errorReporter = new ErrorReporter();¶		Scanner scanner = new Scanner(inputStream, errorReporter);¶		Parser parser = new Parser(scanner, errorReporter);¶		¶		System.out.println("Syntactic analysis ... ");¶		parser.parse();¶		System.out.print("Sytactic analysis complete: ");¶		if (errorReporter.hasErrors()) {¶			System.out.println("Invalid miniJava program");¶			System.exit(4);¶		}¶		else {¶			System.out.println("Valid miniJava program");¶			System.exit(0);¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1145" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:10:20 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="179311086">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1152" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:10:30 EST 2022" docASTNodeCount="51" docActiveCodeLength="308" docExpressionCount="22" docLength="308" projectName="pa1" starttimestamp="1645820509543" timestamp="179320785">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="1153" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:10:56 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10795" docExpressionCount="1083" docLength="11463" projectName="pa1" starttimestamp="1645820509543" timestamp="179346688">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1156" _type="Insert" date="Sun Feb 27 17:10:59 EST 2022" docASTNodeCount="1551" docActiveCodeLength="10802" docExpressionCount="1083" docLength="11470" length="7" offset="1281" starttimestamp="1645820509543" timestamp="179349826">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <DocumentChange __id="1159" _type="Insert" date="Sun Feb 27 17:10:59 EST 2022" docASTNodeCount="1553" docActiveCodeLength="10803" docExpressionCount="1084" docLength="11471" length="1" offset="1288" starttimestamp="1645820509543" timestamp="179350395">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="1162" _type="Insert" date="Sun Feb 27 17:11:00 EST 2022" docASTNodeCount="1553" docActiveCodeLength="10804" docExpressionCount="1084" docLength="11472" length="1" offset="1289" starttimestamp="1645820509543" timestamp="179350625">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="1147" _type="RunCommand" date="Sun Feb 27 17:10:22 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179312609" type="Run" />
  <Command __id="1148" _type="RunCommand" date="Sun Feb 27 17:10:22 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179312609" type="Run" />
  <Command __id="1149" _type="RunCommand" date="Sun Feb 27 17:10:22 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179313124" type="Run" />
  <Command __id="1150" _type="RunCommand" date="Sun Feb 27 17:10:22 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179313124" type="Run" />
  <Command __id="1151" _type="EHExceptionCommand" date="Sun Feb 27 17:10:22 EST 2022" starttimestamp="1645820509543" timestamp="179313165" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
Parse error: Parsing void and expecting 'ID' but found 'VOID'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="1154" _type="MoveCaretCommand" caretOffset="1203" date="Sun Feb 27 17:10:56 EST 2022" docOffset="1281" starttimestamp="1645820509543" timestamp="179346731" />
  <Command __id="1155" _type="MoveCaretCommand" caretOffset="1203" date="Sun Feb 27 17:10:56 EST 2022" docOffset="1281" starttimestamp="1645820509543" timestamp="179346776" />
  <Command __id="1157" _type="InsertStringCommand" date="Sun Feb 27 17:10:59 EST 2022" starttimestamp="1645820509543" timestamp="179349835" timestamp2="179349835">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1158" _type="InsertStringCommand" date="Sun Feb 27 17:10:59 EST 2022" starttimestamp="1645820509543" timestamp="179349835" timestamp2="179349835">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1160" _type="InsertStringCommand" date="Sun Feb 27 17:10:59 EST 2022" starttimestamp="1645820509543" timestamp="179350399" timestamp2="179350399">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1161" _type="InsertStringCommand" date="Sun Feb 27 17:10:59 EST 2022" starttimestamp="1645820509543" timestamp="179350399" timestamp2="179350399">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1163" _type="InsertStringCommand" date="Sun Feb 27 17:11:00 EST 2022" starttimestamp="1645820509543" timestamp="179350631" timestamp2="179350631">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1164" _type="InsertStringCommand" date="Sun Feb 27 17:11:00 EST 2022" starttimestamp="1645820509543" timestamp="179350631" timestamp2="179350631">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1166" _type="InsertStringCommand" date="Sun Feb 27 17:11:01 EST 2022" starttimestamp="1645820509543" timestamp="179352150" timestamp2="179352150">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1167" _type="InsertStringCommand" date="Sun Feb 27 17:11:01 EST 2022" starttimestamp="1645820509543" timestamp="179352150" timestamp2="179352150">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1169" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:11:02 EST 2022" starttimestamp="1645820509543" timestamp="179352499" />
  <Command __id="1170" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:11:02 EST 2022" starttimestamp="1645820509543" timestamp="179352500" />
  <Command __id="1172" _type="InsertStringCommand" date="Sun Feb 27 17:11:02 EST 2022" starttimestamp="1645820509543" timestamp="179352662" timestamp2="179352662">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1173" _type="InsertStringCommand" date="Sun Feb 27 17:11:02 EST 2022" starttimestamp="1645820509543" timestamp="179352662" timestamp2="179352662">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1175" _type="InsertStringCommand" date="Sun Feb 27 17:11:02 EST 2022" starttimestamp="1645820509543" timestamp="179352886" timestamp2="179352886">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1176" _type="InsertStringCommand" date="Sun Feb 27 17:11:02 EST 2022" starttimestamp="1645820509543" timestamp="179352886" timestamp2="179352886">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1178" _type="InsertStringCommand" date="Sun Feb 27 17:11:02 EST 2022" starttimestamp="1645820509543" timestamp="179353011" timestamp2="179353011">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1179" _type="InsertStringCommand" date="Sun Feb 27 17:11:02 EST 2022" starttimestamp="1645820509543" timestamp="179353012" timestamp2="179353012">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1181" _type="InsertStringCommand" date="Sun Feb 27 17:11:03 EST 2022" starttimestamp="1645820509543" timestamp="179353662" timestamp2="179353662">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="1165" _type="Insert" date="Sun Feb 27 17:11:01 EST 2022" docASTNodeCount="1553" docActiveCodeLength="10805" docExpressionCount="1084" docLength="11473" length="1" offset="1290" starttimestamp="1645820509543" timestamp="179352146">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1168" _type="Delete" date="Sun Feb 27 17:11:02 EST 2022" docASTNodeCount="1553" docActiveCodeLength="10804" docExpressionCount="1084" docLength="11472" endLine="55" length="1" offset="1290" startLine="55" starttimestamp="1645820509543" timestamp="179352498">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1171" _type="Insert" date="Sun Feb 27 17:11:02 EST 2022" docASTNodeCount="1553" docActiveCodeLength="10805" docExpressionCount="1084" docLength="11473" length="1" offset="1290" starttimestamp="1645820509543" timestamp="179352658">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="1174" _type="Insert" date="Sun Feb 27 17:11:02 EST 2022" docASTNodeCount="1553" docActiveCodeLength="10806" docExpressionCount="1084" docLength="11474" length="1" offset="1291" starttimestamp="1645820509543" timestamp="179352877">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1177" _type="Insert" date="Sun Feb 27 17:11:02 EST 2022" docASTNodeCount="1553" docActiveCodeLength="10807" docExpressionCount="1084" docLength="11475" length="1" offset="1292" starttimestamp="1645820509543" timestamp="179353007">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="1180" _type="Insert" date="Sun Feb 27 17:11:03 EST 2022" docASTNodeCount="1553" docActiveCodeLength="10808" docExpressionCount="1084" docLength="11476" length="1" offset="1293" starttimestamp="1645820509543" timestamp="179353658">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="1183" _type="Insert" date="Sun Feb 27 17:11:03 EST 2022" docASTNodeCount="1553" docActiveCodeLength="10809" docExpressionCount="1084" docLength="11477" length="1" offset="1294" starttimestamp="1645820509543" timestamp="179354240">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="1186" _type="Insert" date="Sun Feb 27 17:11:04 EST 2022" docASTNodeCount="1553" docActiveCodeLength="10810" docExpressionCount="1084" docLength="11478" length="1" offset="1295" starttimestamp="1645820509543" timestamp="179354469">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="1189" _type="Insert" date="Sun Feb 27 17:11:07 EST 2022" docASTNodeCount="1554" docActiveCodeLength="10812" docExpressionCount="1085" docLength="11480" length="2" offset="1296" starttimestamp="1645820509543" timestamp="179357783">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="1192" _type="Insert" date="Sun Feb 27 17:11:09 EST 2022" docASTNodeCount="1391" docActiveCodeLength="10813" docExpressionCount="963" docLength="11481" length="1" offset="1297" starttimestamp="1645820509543" timestamp="179359582">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="1195" _type="Delete" date="Sun Feb 27 17:11:10 EST 2022" docASTNodeCount="1554" docActiveCodeLength="10812" docExpressionCount="1085" docLength="11480" endLine="55" length="1" offset="1297" startLine="55" starttimestamp="1645820509543" timestamp="179360770">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="1200" _type="Insert" date="Sun Feb 27 17:11:10 EST 2022" docASTNodeCount="1355" docActiveCodeLength="10814" docExpressionCount="936" docLength="11482" length="2" offset="1298" starttimestamp="1645820509543" timestamp="179361431">
    <text><![CDATA['']]></text>
  </DocumentChange>
  <DocumentChange __id="1203" _type="Delete" date="Sun Feb 27 17:11:11 EST 2022" docASTNodeCount="1355" docActiveCodeLength="10813" docExpressionCount="936" docLength="11481" endLine="55" length="1" offset="1298" startLine="55" starttimestamp="1645820509543" timestamp="179361871">
    <text><![CDATA[']]></text>
  </DocumentChange>
  <DocumentChange __id="1204" _type="Delete" date="Sun Feb 27 17:11:11 EST 2022" docASTNodeCount="1554" docActiveCodeLength="10812" docExpressionCount="1085" docLength="11480" endLine="55" length="1" offset="1298" startLine="55" starttimestamp="1645820509543" timestamp="179361878">
    <text><![CDATA[']]></text>
  </DocumentChange>
  <DocumentChange __id="1207" _type="Insert" date="Sun Feb 27 17:11:12 EST 2022" docASTNodeCount="1554" docActiveCodeLength="10813" docExpressionCount="1085" docLength="11481" length="1" offset="1298" starttimestamp="1645820509543" timestamp="179362487">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="1213" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:11:15 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="179365566">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1220" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:11:16 EST 2022" docASTNodeCount="51" docActiveCodeLength="308" docExpressionCount="22" docLength="308" projectName="pa1" starttimestamp="1645820509543" timestamp="179367440">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter() {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="1221" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:12:02 EST 2022" starttimestamp="1645820509543" timestamp="179412808" />
  <Command __id="1222" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:12:02 EST 2022" starttimestamp="1645820509543" timestamp="179412833" />
  <Command __id="1223" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:12:04 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="179414608">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1230" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:12:06 EST 2022" docASTNodeCount="53" docActiveCodeLength="327" docExpressionCount="21" docLength="327" projectName="pa1" starttimestamp="1645820509543" timestamp="179416459">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter("), Diff(INSERT,"int j, int k, int 1"), Diff(EQUAL,") {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
    <snapshot><![CDATA[class ErrorReporter {

		private int numErrors;
		public static boolean gg;

		static void ErrorReporter(int j, int k, int 1) {
			numErrors = 0;
		}

		public boolean hasErrors() {
			return numErrors > 0;
		}

		public void reportError(String message) {
			System.out.println(message);
			numErrors++;
		}	
}]]></snapshot>
  </Command>
  <Command __id="1233" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:12:36 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="179447386">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1240" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:12:39 EST 2022" docASTNodeCount="60" docActiveCodeLength="328" docExpressionCount="25" docLength="328" projectName="pa1" starttimestamp="1645820509543" timestamp="179449665">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, int k, int "), Diff(INSERT,"a"), Diff(EQUAL,"1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
    <snapshot><![CDATA[class ErrorReporter {

		private int numErrors;
		public static boolean gg;

		static void ErrorReporter(int j, int k, int a1) {
			numErrors = 0;
		}

		public boolean hasErrors() {
			return numErrors > 0;
		}

		public void reportError(String message) {
			System.out.println(message);
			numErrors++;
		}	
}]]></snapshot>
  </Command>
  <Command __id="1241" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:13:10 EST 2022" starttimestamp="1645820509543" timestamp="179481013" />
  <Command __id="1242" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:13:10 EST 2022" starttimestamp="1645820509543" timestamp="179481026" />
  <Command __id="1243" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:13:11 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="179481906">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1250" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:13:12 EST 2022" docASTNodeCount="61" docActiveCodeLength="338" docExpressionCount="25" docLength="338" projectName="pa1" starttimestamp="1645820509543" timestamp="179483410">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, "), Diff(DELETE,"int k, int"), Diff(INSERT,"boolean k, boolean[]"), Diff(EQUAL," a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
    <snapshot><![CDATA[class ErrorReporter {

		private int numErrors;
		public static boolean gg;

		static void ErrorReporter(int j, boolean k, boolean[] a1) {
			numErrors = 0;
		}

		public boolean hasErrors() {
			return numErrors > 0;
		}

		public void reportError(String message) {
			System.out.println(message);
			numErrors++;
		}	
}]]></snapshot>
  </Command>
  <Command __id="1251" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:14:09 EST 2022" starttimestamp="1645820509543" timestamp="179540003" />
  <Command __id="1252" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:14:09 EST 2022" starttimestamp="1645820509543" timestamp="179540014" />
  <Command __id="1253" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:14:11 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="179541466">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1260" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:14:14 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="179545018">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo"), Diff(DELETE,"lean"), Diff(EQUAL,"[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
    <snapshot><![CDATA[class ErrorReporter {

		private int numErrors;
		public static boolean gg;

		static void ErrorReporter(int j, boolean k, boo[] a1) {
			numErrors = 0;
		}

		public boolean hasErrors() {
			return numErrors > 0;
		}

		public void reportError(String message) {
			System.out.println(message);
			numErrors++;
		}	
}]]></snapshot>
  </Command>
  <Command __id="1254" _type="MoveCaretCommand" caretOffset="219" date="Sun Feb 27 17:14:11 EST 2022" docOffset="219" starttimestamp="1645820509543" timestamp="179541574" />
  <Command __id="1255" _type="RunCommand" date="Sun Feb 27 17:14:11 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179542449" type="Run" />
  <Command __id="1256" _type="RunCommand" date="Sun Feb 27 17:14:11 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179542449" type="Run" />
  <Command __id="1257" _type="RunCommand" date="Sun Feb 27 17:14:12 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179542565" type="Run" />
  <Command __id="1258" _type="RunCommand" date="Sun Feb 27 17:14:12 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179542565" type="Run" />
  <Command __id="1259" _type="EHExceptionCommand" date="Sun Feb 27 17:14:12 EST 2022" starttimestamp="1645820509543" timestamp="179542610" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
Parse error: parsing statement, in subcase ID, current token is: miniJava.SyntacticAnalyzer.Token@15db9742
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="1262" _type="MoveCaretCommand" caretOffset="3014" date="Sun Feb 27 17:16:25 EST 2022" docOffset="3092" starttimestamp="1645820509543" timestamp="179675959" />
  <Command __id="1263" _type="MoveCaretCommand" caretOffset="3014" date="Sun Feb 27 17:16:25 EST 2022" docOffset="3092" starttimestamp="1645820509543" timestamp="179675998" />
  <Command __id="1265" _type="ShellCommand" date="Sun Feb 27 17:16:26 EST 2022" starttimestamp="1645820509543" timestamp="179676827" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1266" _type="PasteCommand" date="Sun Feb 27 17:16:26 EST 2022" starttimestamp="1645820509543" timestamp="179677341" />
  <Command __id="1267" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:16:27 EST 2022" forward="false" matchWord="true" offset="3092" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="179678180" wrapSearch="false">
    <searchString><![CDATA[Parse error: parsing statement, in subcase ID]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1268" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:16:28 EST 2022" forward="false" matchWord="true" offset="3092" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="179678588" wrapSearch="false">
    <searchString><![CDATA[Parse error: parsing statement, in subcase ID]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1269" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:16:28 EST 2022" forward="false" matchWord="true" offset="3092" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="179678773" wrapSearch="false">
    <searchString><![CDATA[Parse error: parsing statement, in subcase ID]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1270" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:16:28 EST 2022" forward="false" matchWord="true" offset="3092" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="179678932" wrapSearch="false">
    <searchString><![CDATA[Parse error: parsing statement, in subcase ID]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1271" _type="ShellCommand" date="Sun Feb 27 17:16:29 EST 2022" starttimestamp="1645820509543" timestamp="179679596" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1272" _type="MoveCaretCommand" caretOffset="2929" date="Sun Feb 27 17:16:29 EST 2022" docOffset="3007" starttimestamp="1645820509543" timestamp="179679644" />
  <Command __id="1273" _type="MoveCaretCommand" caretOffset="2929" date="Sun Feb 27 17:16:29 EST 2022" docOffset="3007" starttimestamp="1645820509543" timestamp="179679644" />
  <Command __id="1274" _type="ShellCommand" date="Sun Feb 27 17:16:29 EST 2022" starttimestamp="1645820509543" timestamp="179680136" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1275" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:16:29 EST 2022" forward="false" matchWord="true" offset="3007" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="179680429" wrapSearch="false">
    <searchString><![CDATA[Parse error: parsing statement, in subcase ID]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1276" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:16:31 EST 2022" forward="false" matchWord="true" offset="3007" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="179682356" wrapSearch="false">
    <searchString><![CDATA[Parse error: parsing statement, in subcase ID]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1277" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:16:32 EST 2022" forward="false" matchWord="true" offset="3007" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="179682620" wrapSearch="false">
    <searchString><![CDATA[Parse error: parsing statement, in subcase ID]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1278" _type="ShellCommand" date="Sun Feb 27 17:16:53 EST 2022" starttimestamp="1645820509543" timestamp="179704022" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1279" _type="MoveCaretCommand" caretOffset="4676" date="Sun Feb 27 17:16:59 EST 2022" docOffset="4754" starttimestamp="1645820509543" timestamp="179710106" />
  <Command __id="1280" _type="MoveCaretCommand" caretOffset="4676" date="Sun Feb 27 17:16:59 EST 2022" docOffset="4754" starttimestamp="1645820509543" timestamp="179710106" />
  <Command __id="1281" _type="MoveCaretCommand" caretOffset="4664" date="Sun Feb 27 17:17:00 EST 2022" docOffset="4742" starttimestamp="1645820509543" timestamp="179710594" />
  <Command __id="1282" _type="MoveCaretCommand" caretOffset="4664" date="Sun Feb 27 17:17:00 EST 2022" docOffset="4742" starttimestamp="1645820509543" timestamp="179710594" />
  <Command __id="1283" _type="MoveCaretCommand" caretOffset="4741" date="Sun Feb 27 17:17:00 EST 2022" docOffset="4819" starttimestamp="1645820509543" timestamp="179710915" />
  <Command __id="1284" _type="MoveCaretCommand" caretOffset="4741" date="Sun Feb 27 17:17:00 EST 2022" docOffset="4819" starttimestamp="1645820509543" timestamp="179710915" />
  <Command __id="1285" _type="MoveCaretCommand" caretOffset="4686" date="Sun Feb 27 17:17:00 EST 2022" docOffset="4764" starttimestamp="1645820509543" timestamp="179711290" />
  <Command __id="1286" _type="MoveCaretCommand" caretOffset="4686" date="Sun Feb 27 17:17:00 EST 2022" docOffset="4764" starttimestamp="1645820509543" timestamp="179711290" />
  <Command __id="1287" _type="MoveCaretCommand" caretOffset="4694" date="Sun Feb 27 17:17:01 EST 2022" docOffset="4772" starttimestamp="1645820509543" timestamp="179711746" />
  <Command __id="1288" _type="MoveCaretCommand" caretOffset="4694" date="Sun Feb 27 17:17:01 EST 2022" docOffset="4772" starttimestamp="1645820509543" timestamp="179711746" />
  <Command __id="1289" _type="MoveCaretCommand" caretOffset="4707" date="Sun Feb 27 17:17:02 EST 2022" docOffset="4785" starttimestamp="1645820509543" timestamp="179712506" />
  <Command __id="1290" _type="MoveCaretCommand" caretOffset="4707" date="Sun Feb 27 17:17:02 EST 2022" docOffset="4785" starttimestamp="1645820509543" timestamp="179712506" />
  <Command __id="1291" _type="MoveCaretCommand" caretOffset="4685" date="Sun Feb 27 17:17:07 EST 2022" docOffset="4763" starttimestamp="1645820509543" timestamp="179717530" />
  <Command __id="1292" _type="MoveCaretCommand" caretOffset="4685" date="Sun Feb 27 17:17:07 EST 2022" docOffset="4763" starttimestamp="1645820509543" timestamp="179717530" />
  <Command __id="1261" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:16:25 EST 2022" docASTNodeCount="1554" docActiveCodeLength="10813" docExpressionCount="1085" docLength="11481" projectName="pa1" starttimestamp="1645820509543" timestamp="179675926">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					"), Diff(INSERT,"acceptIt();¶					"), Diff(EQUAL,"parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
			
			switch (currentToken.kind) {
			// in Type
			case ID:
			acceptIt();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			// in Reference
			case EQUAL:
			acceptIt();
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			case LPAREN:
			acceptIt();
			if (currentToken.kind == TokenKind.RPAREN) {
				acceptIt();
			} else {
				parseArgumentList();
				accept(TokenKind.RPAREN);
			}
			accept(TokenKind.SEMICOLON);
			break;
			
			// both
			case LBRACKET: 
			acceptIt();
			// in Type
			if (currentToken.kind == TokenKind.RBRACKET) {
				acceptIt();
				accept(TokenKind.ID);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			} else {
				// in Reference
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
			
			case DOT:
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET: 
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			default:
				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken);
			}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="1293" _type="MoveCaretCommand" caretOffset="4733" date="Sun Feb 27 17:17:10 EST 2022" docOffset="4811" starttimestamp="1645820509543" timestamp="179720556" />
  <Command __id="1294" _type="MoveCaretCommand" caretOffset="4733" date="Sun Feb 27 17:17:10 EST 2022" docOffset="4811" starttimestamp="1645820509543" timestamp="179720556" />
  <Command __id="1296" _type="InsertStringCommand" date="Sun Feb 27 17:17:11 EST 2022" starttimestamp="1645820509543" timestamp="179721757" timestamp2="179721757">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1297" _type="InsertStringCommand" date="Sun Feb 27 17:17:11 EST 2022" starttimestamp="1645820509543" timestamp="179721757" timestamp2="179721757">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1298" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:17:11 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="179721760" />
  <Command __id="1299" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:17:12 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="179723150" />
  <Command __id="1301" _type="InsertStringCommand" date="Sun Feb 27 17:17:12 EST 2022" starttimestamp="1645820509543" timestamp="179723163" timestamp2="179723163">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1302" _type="InsertStringCommand" date="Sun Feb 27 17:17:12 EST 2022" starttimestamp="1645820509543" timestamp="179723163" timestamp2="179723163">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1303" _type="MoveCaretCommand" caretOffset="4626" date="Sun Feb 27 17:17:15 EST 2022" docOffset="4704" starttimestamp="1645820509543" timestamp="179726370" />
  <Command __id="1304" _type="MoveCaretCommand" caretOffset="4626" date="Sun Feb 27 17:17:15 EST 2022" docOffset="4704" starttimestamp="1645820509543" timestamp="179726370" />
  <Command __id="1306" _type="InsertStringCommand" date="Sun Feb 27 17:17:16 EST 2022" starttimestamp="1645820509543" timestamp="179727206" timestamp2="179727206">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1307" _type="InsertStringCommand" date="Sun Feb 27 17:17:16 EST 2022" starttimestamp="1645820509543" timestamp="179727206" timestamp2="179727206">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1308" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:17:16 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="179727209" />
  <Command __id="1311" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:17:17 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="179728089" />
  <Command __id="1313" _type="InsertStringCommand" date="Sun Feb 27 17:17:17 EST 2022" starttimestamp="1645820509543" timestamp="179728104" timestamp2="179728104">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1314" _type="InsertStringCommand" date="Sun Feb 27 17:17:17 EST 2022" starttimestamp="1645820509543" timestamp="179728104" timestamp2="179728104">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1295" _type="Insert" date="Sun Feb 27 17:17:11 EST 2022" docASTNodeCount="1556" docActiveCodeLength="10814" docExpressionCount="1086" docLength="11482" length="1" offset="4811" starttimestamp="1645820509543" timestamp="179721752">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="1300" _type="Insert" date="Sun Feb 27 17:17:12 EST 2022" docASTNodeCount="1556" docActiveCodeLength="10822" docExpressionCount="1087" docLength="11490" length="8" offset="4812" starttimestamp="1645820509543" timestamp="179723157">
    <text><![CDATA[spelling]]></text>
  </DocumentChange>
  <DocumentChange __id="1305" _type="Insert" date="Sun Feb 27 17:17:16 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10823" docExpressionCount="1088" docLength="11491" length="1" offset="4704" starttimestamp="1645820509543" timestamp="179727201">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="1309" _type="Insert" date="Sun Feb 27 17:17:17 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10824" docExpressionCount="1089" docLength="11492" length="1" offset="4705" starttimestamp="1645820509543" timestamp="179727513">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="1310" _type="Insert" date="Sun Feb 27 17:17:17 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10825" docExpressionCount="1089" docLength="11493" length="1" offset="4706" starttimestamp="1645820509543" timestamp="179727667">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="1312" _type="Replace" date="Sun Feb 27 17:17:17 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10831" docExpressionCount="1089" docLength="11499" endLine="208" insertionLength="8" int_docASTNodeCount="1558" int_docActiveCodeLength="10823" int_docExpressionCount="1088" int_docLength="11491" length="2" offset="4705" startLine="208" starttimestamp="1645820509543" timestamp="179728095">
    <deletedText><![CDATA[sp]]></deletedText>
    <insertedText><![CDATA[spelling]]></insertedText>
  </DocumentChange>
  <Command __id="1315" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:17:18 EST 2022" starttimestamp="1645820509543" timestamp="179729390" />
  <Command __id="1316" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:17:19 EST 2022" starttimestamp="1645820509543" timestamp="179729485" />
  <Command __id="1317" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:17:19 EST 2022" starttimestamp="1645820509543" timestamp="179729506" />
  <Command __id="1318" _type="MoveCaretCommand" caretOffset="4759" date="Sun Feb 27 17:17:19 EST 2022" docOffset="4837" starttimestamp="1645820509543" timestamp="179729914" />
  <Command __id="1319" _type="MoveCaretCommand" caretOffset="4759" date="Sun Feb 27 17:17:19 EST 2022" docOffset="4837" starttimestamp="1645820509543" timestamp="179729914" />
  <Command __id="1320" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:17:21 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="179732399">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1327" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:17:25 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="179736320">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="1321" _type="MoveCaretCommand" caretOffset="219" date="Sun Feb 27 17:17:22 EST 2022" docOffset="219" starttimestamp="1645820509543" timestamp="179732476" />
  <Command __id="1322" _type="RunCommand" date="Sun Feb 27 17:17:22 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179733230" type="Run" />
  <Command __id="1323" _type="RunCommand" date="Sun Feb 27 17:17:22 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179733230" type="Run" />
  <Command __id="1324" _type="RunCommand" date="Sun Feb 27 17:17:22 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179733345" type="Run" />
  <Command __id="1325" _type="RunCommand" date="Sun Feb 27 17:17:22 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179733345" type="Run" />
  <Command __id="1326" _type="EHExceptionCommand" date="Sun Feb 27 17:17:22 EST 2022" starttimestamp="1645820509543" timestamp="179733411" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
Parse error: parsing statement, in subcase ID, current token is: =
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="1329" _type="MoveCaretCommand" caretOffset="3976" date="Sun Feb 27 17:17:42 EST 2022" docOffset="4054" starttimestamp="1645820509543" timestamp="179753127" />
  <Command __id="1328" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:17:42 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10831" docExpressionCount="1089" docLength="11499" projectName="pa1" starttimestamp="1645820509543" timestamp="179753049">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			acceptIt();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// in Reference¶			case EQUAL:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			case LPAREN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.RPAREN) {¶				acceptIt();¶			} else {¶				parseArgumentList();¶				accept(TokenKind.RPAREN);¶			}¶			accept(TokenKind.SEMICOLON);¶			break;¶			¶			// both¶			case LBRACKET: ¶			acceptIt();¶			// in Type¶			if (currentToken.kind == TokenKind.RBRACKET) {¶				acceptIt();¶				accept(TokenKind.ID);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			} else {¶				// in Reference¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶			¶			case DOT:¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET: ¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken"), Diff(INSERT,".spelling"), Diff(EQUAL,");¶			}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken"), Diff(INSERT,".spelling"), Diff(EQUAL,");¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
			
			switch (currentToken.kind) {
			// in Type
			case ID:
			acceptIt();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			// in Reference
			case EQUAL:
			acceptIt();
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
			
			case LPAREN:
			acceptIt();
			if (currentToken.kind == TokenKind.RPAREN) {
				acceptIt();
			} else {
				parseArgumentList();
				accept(TokenKind.RPAREN);
			}
			accept(TokenKind.SEMICOLON);
			break;
			
			// both
			case LBRACKET: 
			acceptIt();
			// in Type
			if (currentToken.kind == TokenKind.RBRACKET) {
				acceptIt();
				accept(TokenKind.ID);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			} else {
				// in Reference
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
			
			case DOT:
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET: 
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			default:
				parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
			}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="1332" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10832" docExpressionCount="1089" docLength="11500" length="1" offset="4051" starttimestamp="1645820509543" timestamp="179762140">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1333" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10833" docExpressionCount="1089" docLength="11501" length="1" offset="4068" starttimestamp="1645820509543" timestamp="179762142">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1334" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10834" docExpressionCount="1089" docLength="11502" length="1" offset="4086" starttimestamp="1645820509543" timestamp="179762144">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1335" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10835" docExpressionCount="1089" docLength="11503" length="1" offset="4111" starttimestamp="1645820509543" timestamp="179762146">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1336" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10836" docExpressionCount="1089" docLength="11504" length="1" offset="4146" starttimestamp="1645820509543" timestamp="179762147">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1337" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10837" docExpressionCount="1089" docLength="11505" length="1" offset="4159" starttimestamp="1645820509543" timestamp="179762149">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1338" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10838" docExpressionCount="1089" docLength="11506" length="1" offset="4165" starttimestamp="1645820509543" timestamp="179762151">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1339" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10839" docExpressionCount="1089" docLength="11507" length="1" offset="4186" starttimestamp="1645820509543" timestamp="179762152">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1340" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10840" docExpressionCount="1089" docLength="11508" length="1" offset="4204" starttimestamp="1645820509543" timestamp="179762154">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1341" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10841" docExpressionCount="1089" docLength="11509" length="1" offset="4229" starttimestamp="1645820509543" timestamp="179762156">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1342" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10842" docExpressionCount="1089" docLength="11510" length="1" offset="4263" starttimestamp="1645820509543" timestamp="179762158">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1343" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10843" docExpressionCount="1089" docLength="11511" length="1" offset="4294" starttimestamp="1645820509543" timestamp="179762160">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1344" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10844" docExpressionCount="1089" docLength="11512" length="1" offset="4319" starttimestamp="1645820509543" timestamp="179762162">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1345" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10845" docExpressionCount="1089" docLength="11513" length="1" offset="4354" starttimestamp="1645820509543" timestamp="179762164">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1346" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10846" docExpressionCount="1089" docLength="11514" length="1" offset="4367" starttimestamp="1645820509543" timestamp="179762166">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1347" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10847" docExpressionCount="1089" docLength="11515" length="1" offset="4373" starttimestamp="1645820509543" timestamp="179762168">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1348" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10848" docExpressionCount="1089" docLength="11516" length="1" offset="4391" starttimestamp="1645820509543" timestamp="179762171">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1349" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10849" docExpressionCount="1089" docLength="11517" length="1" offset="4409" starttimestamp="1645820509543" timestamp="179762175">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1350" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10850" docExpressionCount="1089" docLength="11518" length="1" offset="4460" starttimestamp="1645820509543" timestamp="179762177">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1351" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10851" docExpressionCount="1089" docLength="11519" length="1" offset="4479" starttimestamp="1645820509543" timestamp="179762180">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1352" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10852" docExpressionCount="1089" docLength="11520" length="1" offset="4494" starttimestamp="1645820509543" timestamp="179762183">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1353" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10853" docExpressionCount="1089" docLength="11521" length="1" offset="4522" starttimestamp="1645820509543" timestamp="179762187">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1354" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10854" docExpressionCount="1089" docLength="11522" length="1" offset="4555" starttimestamp="1645820509543" timestamp="179762190">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1355" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10855" docExpressionCount="1089" docLength="11523" length="1" offset="4563" starttimestamp="1645820509543" timestamp="179762194">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="1330" _type="SelectTextCommand" caretOffset="4637" date="Sun Feb 27 17:17:46 EST 2022" end="4637" start="3976" starttimestamp="1645820509543" timestamp="179756898" />
  <Command __id="1331" _type="SelectTextCommand" caretOffset="4637" date="Sun Feb 27 17:17:46 EST 2022" end="4637" start="3976" starttimestamp="1645820509543" timestamp="179756898" />
  <Command __id="1360" _type="InsertStringCommand" date="Sun Feb 27 17:17:51 EST 2022" starttimestamp="1645820509543" timestamp="179762247" timestamp2="179762247">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1361" _type="InsertStringCommand" date="Sun Feb 27 17:17:51 EST 2022" starttimestamp="1645820509543" timestamp="179762247" timestamp2="179762247">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1362" _type="MoveCaretCommand" caretOffset="4489" date="Sun Feb 27 17:17:56 EST 2022" docOffset="4567" starttimestamp="1645820509543" timestamp="179767159" />
  <Command __id="1363" _type="MoveCaretCommand" caretOffset="4489" date="Sun Feb 27 17:17:56 EST 2022" docOffset="4567" starttimestamp="1645820509543" timestamp="179767159" />
  <Command __id="1364" _type="SelectTextCommand" caretOffset="4671" date="Sun Feb 27 17:18:15 EST 2022" end="4671" start="3844" starttimestamp="1645820509543" timestamp="179786195" />
  <Command __id="1365" _type="SelectTextCommand" caretOffset="4671" date="Sun Feb 27 17:18:15 EST 2022" end="4671" start="3844" starttimestamp="1645820509543" timestamp="179786195" />
  <Command __id="1366" _type="MoveCaretCommand" caretOffset="4551" date="Sun Feb 27 17:18:19 EST 2022" docOffset="4629" starttimestamp="1645820509543" timestamp="179789787" />
  <Command __id="1367" _type="MoveCaretCommand" caretOffset="4551" date="Sun Feb 27 17:18:19 EST 2022" docOffset="4629" starttimestamp="1645820509543" timestamp="179789787" />
  <Command __id="1368" _type="MoveCaretCommand" caretOffset="4671" date="Sun Feb 27 17:18:20 EST 2022" docOffset="4749" starttimestamp="1645820509543" timestamp="179790474" />
  <Command __id="1369" _type="MoveCaretCommand" caretOffset="4671" date="Sun Feb 27 17:18:20 EST 2022" docOffset="4749" starttimestamp="1645820509543" timestamp="179790474" />
  <DocumentChange __id="1356" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10856" docExpressionCount="1089" docLength="11524" length="1" offset="4598" starttimestamp="1645820509543" timestamp="179762196">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1357" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10857" docExpressionCount="1089" docLength="11525" length="1" offset="4611" starttimestamp="1645820509543" timestamp="179762216">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1358" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10858" docExpressionCount="1089" docLength="11526" length="1" offset="4617" starttimestamp="1645820509543" timestamp="179762219">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1359" _type="Insert" date="Sun Feb 27 17:17:51 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10859" docExpressionCount="1089" docLength="11527" length="1" offset="4631" starttimestamp="1645820509543" timestamp="179762222">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1372" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10860" docExpressionCount="1089" docLength="11528" length="1" offset="3919" starttimestamp="1645820509543" timestamp="179798378">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1373" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10861" docExpressionCount="1089" docLength="11529" length="1" offset="3969" starttimestamp="1645820509543" timestamp="179798380">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1374" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10862" docExpressionCount="1089" docLength="11530" length="1" offset="3987" starttimestamp="1645820509543" timestamp="179798382">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1375" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10863" docExpressionCount="1089" docLength="11531" length="1" offset="4015" starttimestamp="1645820509543" timestamp="179798383">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1376" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10864" docExpressionCount="1089" docLength="11532" length="1" offset="4022" starttimestamp="1645820509543" timestamp="179798385">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1377" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10865" docExpressionCount="1089" docLength="11533" length="1" offset="4056" starttimestamp="1645820509543" timestamp="179798386">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1378" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10866" docExpressionCount="1089" docLength="11534" length="1" offset="4074" starttimestamp="1645820509543" timestamp="179798388">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1379" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10867" docExpressionCount="1089" docLength="11535" length="1" offset="4093" starttimestamp="1645820509543" timestamp="179798390">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1380" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10868" docExpressionCount="1089" docLength="11536" length="1" offset="4119" starttimestamp="1645820509543" timestamp="179798392">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1381" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10869" docExpressionCount="1089" docLength="11537" length="1" offset="4155" starttimestamp="1645820509543" timestamp="179798394">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1382" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10870" docExpressionCount="1089" docLength="11538" length="1" offset="4169" starttimestamp="1645820509543" timestamp="179798396">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1383" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10871" docExpressionCount="1089" docLength="11539" length="1" offset="4176" starttimestamp="1645820509543" timestamp="179798397">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1384" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10872" docExpressionCount="1089" docLength="11540" length="1" offset="4198" starttimestamp="1645820509543" timestamp="179798399">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1385" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10873" docExpressionCount="1089" docLength="11541" length="1" offset="4217" starttimestamp="1645820509543" timestamp="179798401">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1386" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10874" docExpressionCount="1089" docLength="11542" length="1" offset="4243" starttimestamp="1645820509543" timestamp="179798403">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1387" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10875" docExpressionCount="1089" docLength="11543" length="1" offset="4278" starttimestamp="1645820509543" timestamp="179798404">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1388" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10876" docExpressionCount="1089" docLength="11544" length="1" offset="4310" starttimestamp="1645820509543" timestamp="179798406">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1389" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10877" docExpressionCount="1089" docLength="11545" length="1" offset="4336" starttimestamp="1645820509543" timestamp="179798408">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1390" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10878" docExpressionCount="1089" docLength="11546" length="1" offset="4372" starttimestamp="1645820509543" timestamp="179798410">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1391" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10879" docExpressionCount="1089" docLength="11547" length="1" offset="4386" starttimestamp="1645820509543" timestamp="179798412">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1392" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10880" docExpressionCount="1089" docLength="11548" length="1" offset="4393" starttimestamp="1645820509543" timestamp="179798414">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1393" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10881" docExpressionCount="1089" docLength="11549" length="1" offset="4412" starttimestamp="1645820509543" timestamp="179798416">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1394" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10882" docExpressionCount="1089" docLength="11550" length="1" offset="4431" starttimestamp="1645820509543" timestamp="179798417">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1395" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10883" docExpressionCount="1089" docLength="11551" length="1" offset="4483" starttimestamp="1645820509543" timestamp="179798419">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="1370" _type="SelectTextCommand" caretOffset="3844" date="Sun Feb 27 17:18:26 EST 2022" end="4671" start="3844" starttimestamp="1645820509543" timestamp="179797338" />
  <Command __id="1371" _type="SelectTextCommand" caretOffset="3844" date="Sun Feb 27 17:18:26 EST 2022" end="4671" start="3844" starttimestamp="1645820509543" timestamp="179797338" />
  <Command __id="1406" _type="InsertStringCommand" date="Sun Feb 27 17:18:28 EST 2022" starttimestamp="1645820509543" timestamp="179798457" timestamp2="179798457">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1407" _type="InsertStringCommand" date="Sun Feb 27 17:18:28 EST 2022" starttimestamp="1645820509543" timestamp="179798457" timestamp2="179798457">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1408" _type="MoveCaretCommand" caretOffset="4234" date="Sun Feb 27 17:18:28 EST 2022" docOffset="4312" starttimestamp="1645820509543" timestamp="179798992" />
  <Command __id="1409" _type="MoveCaretCommand" caretOffset="4234" date="Sun Feb 27 17:18:28 EST 2022" docOffset="4312" starttimestamp="1645820509543" timestamp="179798992" />
  <Command __id="1410" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:18:29 EST 2022" starttimestamp="1645820509543" timestamp="179799776" />
  <Command __id="1411" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:18:29 EST 2022" starttimestamp="1645820509543" timestamp="179799877" />
  <Command __id="1412" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:18:29 EST 2022" starttimestamp="1645820509543" timestamp="179799911" />
  <DocumentChange __id="1396" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10884" docExpressionCount="1089" docLength="11552" length="1" offset="4503" starttimestamp="1645820509543" timestamp="179798421">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1397" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10885" docExpressionCount="1089" docLength="11553" length="1" offset="4519" starttimestamp="1645820509543" timestamp="179798424">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1398" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10886" docExpressionCount="1089" docLength="11554" length="1" offset="4548" starttimestamp="1645820509543" timestamp="179798426">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1399" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10887" docExpressionCount="1089" docLength="11555" length="1" offset="4582" starttimestamp="1645820509543" timestamp="179798429">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1400" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10888" docExpressionCount="1089" docLength="11556" length="1" offset="4591" starttimestamp="1645820509543" timestamp="179798431">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1401" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10889" docExpressionCount="1089" docLength="11557" length="1" offset="4627" starttimestamp="1645820509543" timestamp="179798432">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1402" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10890" docExpressionCount="1089" docLength="11558" length="1" offset="4641" starttimestamp="1645820509543" timestamp="179798434">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1403" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10891" docExpressionCount="1089" docLength="11559" length="1" offset="4648" starttimestamp="1645820509543" timestamp="179798436">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1404" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10892" docExpressionCount="1089" docLength="11560" length="1" offset="4663" starttimestamp="1645820509543" timestamp="179798438">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1405" _type="Insert" date="Sun Feb 27 17:18:27 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10893" docExpressionCount="1089" docLength="11561" length="1" offset="4778" starttimestamp="1645820509543" timestamp="179798440">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1415" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10894" docExpressionCount="1089" docLength="11562" length="1" offset="3490" starttimestamp="1645820509543" timestamp="179808383">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1416" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10895" docExpressionCount="1089" docLength="11563" length="1" offset="3507" starttimestamp="1645820509543" timestamp="179808385">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1417" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10896" docExpressionCount="1089" docLength="11564" length="1" offset="3523" starttimestamp="1645820509543" timestamp="179808388">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1418" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10897" docExpressionCount="1089" docLength="11565" length="1" offset="3575" starttimestamp="1645820509543" timestamp="179808390">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1419" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10898" docExpressionCount="1089" docLength="11566" length="1" offset="3593" starttimestamp="1645820509543" timestamp="179808392">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1420" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10899" docExpressionCount="1089" docLength="11567" length="1" offset="3621" starttimestamp="1645820509543" timestamp="179808394">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1421" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10900" docExpressionCount="1089" docLength="11568" length="1" offset="3652" starttimestamp="1645820509543" timestamp="179808396">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1422" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10901" docExpressionCount="1089" docLength="11569" length="1" offset="3677" starttimestamp="1645820509543" timestamp="179808398">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1423" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10902" docExpressionCount="1089" docLength="11570" length="1" offset="3712" starttimestamp="1645820509543" timestamp="179808400">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1424" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10903" docExpressionCount="1089" docLength="11571" length="1" offset="3726" starttimestamp="1645820509543" timestamp="179808402">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1425" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10904" docExpressionCount="1089" docLength="11572" length="1" offset="3748" starttimestamp="1645820509543" timestamp="179808404">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1426" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10905" docExpressionCount="1089" docLength="11573" length="1" offset="3773" starttimestamp="1645820509543" timestamp="179808406">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1427" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10906" docExpressionCount="1089" docLength="11574" length="1" offset="3807" starttimestamp="1645820509543" timestamp="179808408">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1428" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10907" docExpressionCount="1089" docLength="11575" length="1" offset="3838" starttimestamp="1645820509543" timestamp="179808411">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="1413" _type="SelectTextCommand" caretOffset="3412" date="Sun Feb 27 17:18:37 EST 2022" end="3820" start="3412" starttimestamp="1645820509543" timestamp="179808210" />
  <Command __id="1414" _type="SelectTextCommand" caretOffset="3412" date="Sun Feb 27 17:18:37 EST 2022" end="3820" start="3412" starttimestamp="1645820509543" timestamp="179808211" />
  <Command __id="1432" _type="InsertStringCommand" date="Sun Feb 27 17:18:37 EST 2022" starttimestamp="1645820509543" timestamp="179808439" timestamp2="179808439">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1433" _type="InsertStringCommand" date="Sun Feb 27 17:18:37 EST 2022" starttimestamp="1645820509543" timestamp="179808439" timestamp2="179808439">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1434" _type="MoveCaretCommand" caretOffset="3642" date="Sun Feb 27 17:18:38 EST 2022" docOffset="3720" starttimestamp="1645820509543" timestamp="179808895" />
  <Command __id="1435" _type="MoveCaretCommand" caretOffset="3642" date="Sun Feb 27 17:18:38 EST 2022" docOffset="3720" starttimestamp="1645820509543" timestamp="179808895" />
  <Command __id="1436" _type="SelectTextCommand" caretOffset="3173" date="Sun Feb 27 17:18:42 EST 2022" end="3373" start="3173" starttimestamp="1645820509543" timestamp="179812946" />
  <Command __id="1437" _type="SelectTextCommand" caretOffset="3173" date="Sun Feb 27 17:18:42 EST 2022" end="3373" start="3173" starttimestamp="1645820509543" timestamp="179812946" />
  <Command __id="1447" _type="InsertStringCommand" date="Sun Feb 27 17:18:42 EST 2022" starttimestamp="1645820509543" timestamp="179813089" timestamp2="179813089">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1448" _type="InsertStringCommand" date="Sun Feb 27 17:18:42 EST 2022" starttimestamp="1645820509543" timestamp="179813089" timestamp2="179813089">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1449" _type="MoveCaretCommand" caretOffset="3307" date="Sun Feb 27 17:18:43 EST 2022" docOffset="3385" starttimestamp="1645820509543" timestamp="179813502" />
  <Command __id="1450" _type="MoveCaretCommand" caretOffset="3307" date="Sun Feb 27 17:18:43 EST 2022" docOffset="3385" starttimestamp="1645820509543" timestamp="179813502" />
  <Command __id="1451" _type="SelectTextCommand" caretOffset="3068" date="Sun Feb 27 17:18:44 EST 2022" end="3149" start="3068" starttimestamp="1645820509543" timestamp="179815298" />
  <Command __id="1452" _type="SelectTextCommand" caretOffset="3068" date="Sun Feb 27 17:18:44 EST 2022" end="3149" start="3068" starttimestamp="1645820509543" timestamp="179815298" />
  <Command __id="1457" _type="InsertStringCommand" date="Sun Feb 27 17:18:44 EST 2022" starttimestamp="1645820509543" timestamp="179815391" timestamp2="179815391">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1458" _type="InsertStringCommand" date="Sun Feb 27 17:18:44 EST 2022" starttimestamp="1645820509543" timestamp="179815391" timestamp2="179815391">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1459" _type="SelectTextCommand" caretOffset="2915" date="Sun Feb 27 17:18:46 EST 2022" end="3025" start="2915" starttimestamp="1645820509543" timestamp="179816691" />
  <Command __id="1460" _type="SelectTextCommand" caretOffset="2915" date="Sun Feb 27 17:18:46 EST 2022" end="3025" start="2915" starttimestamp="1645820509543" timestamp="179816691" />
  <Command __id="1466" _type="InsertStringCommand" date="Sun Feb 27 17:18:46 EST 2022" starttimestamp="1645820509543" timestamp="179816772" timestamp2="179816772">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1467" _type="InsertStringCommand" date="Sun Feb 27 17:18:46 EST 2022" starttimestamp="1645820509543" timestamp="179816772" timestamp2="179816772">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1468" _type="MoveCaretCommand" caretOffset="2941" date="Sun Feb 27 17:18:46 EST 2022" docOffset="3019" starttimestamp="1645820509543" timestamp="179817119" />
  <Command __id="1469" _type="MoveCaretCommand" caretOffset="2941" date="Sun Feb 27 17:18:46 EST 2022" docOffset="3019" starttimestamp="1645820509543" timestamp="179817120" />
  <Command __id="1470" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:18:48 EST 2022" starttimestamp="1645820509543" timestamp="179818892" />
  <Command __id="1471" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:18:48 EST 2022" starttimestamp="1645820509543" timestamp="179818996" />
  <Command __id="1472" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:18:48 EST 2022" starttimestamp="1645820509543" timestamp="179819026" />
  <Command __id="1473" _type="MoveCaretCommand" caretOffset="3088" date="Sun Feb 27 17:18:49 EST 2022" docOffset="3166" starttimestamp="1645820509543" timestamp="179819498" />
  <Command __id="1474" _type="MoveCaretCommand" caretOffset="3088" date="Sun Feb 27 17:18:49 EST 2022" docOffset="3166" starttimestamp="1645820509543" timestamp="179819498" />
  <Command __id="1475" _type="SelectTextCommand" caretOffset="3109" date="Sun Feb 27 17:18:49 EST 2022" end="3109" start="3088" starttimestamp="1645820509543" timestamp="179819586" />
  <Command __id="1476" _type="SelectTextCommand" caretOffset="3109" date="Sun Feb 27 17:18:49 EST 2022" end="3109" start="3088" starttimestamp="1645820509543" timestamp="179819586" />
  <Command __id="1477" _type="MoveCaretCommand" caretOffset="3158" date="Sun Feb 27 17:18:49 EST 2022" docOffset="3236" starttimestamp="1645820509543" timestamp="179820130" />
  <Command __id="1478" _type="MoveCaretCommand" caretOffset="3158" date="Sun Feb 27 17:18:49 EST 2022" docOffset="3236" starttimestamp="1645820509543" timestamp="179820131" />
  <Command __id="1479" _type="MoveCaretCommand" caretOffset="4474" date="Sun Feb 27 17:18:55 EST 2022" docOffset="4552" starttimestamp="1645820509543" timestamp="179825554" />
  <Command __id="1480" _type="MoveCaretCommand" caretOffset="4474" date="Sun Feb 27 17:18:55 EST 2022" docOffset="4552" starttimestamp="1645820509543" timestamp="179825555" />
  <Command __id="1481" _type="MoveCaretCommand" caretOffset="3071" date="Sun Feb 27 17:19:30 EST 2022" docOffset="3149" starttimestamp="1645820509543" timestamp="179861243" />
  <Command __id="1482" _type="MoveCaretCommand" caretOffset="3071" date="Sun Feb 27 17:19:30 EST 2022" docOffset="3149" starttimestamp="1645820509543" timestamp="179861243" />
  <Command __id="1483" _type="MoveCaretCommand" caretOffset="4856" date="Sun Feb 27 17:19:45 EST 2022" docOffset="4934" starttimestamp="1645820509543" timestamp="179876427" />
  <Command __id="1484" _type="MoveCaretCommand" caretOffset="4856" date="Sun Feb 27 17:19:45 EST 2022" docOffset="4934" starttimestamp="1645820509543" timestamp="179876427" />
  <Command __id="1485" _type="MoveCaretCommand" caretOffset="4750" date="Sun Feb 27 17:19:49 EST 2022" docOffset="4828" starttimestamp="1645820509543" timestamp="179879746" />
  <Command __id="1486" _type="MoveCaretCommand" caretOffset="4750" date="Sun Feb 27 17:19:49 EST 2022" docOffset="4828" starttimestamp="1645820509543" timestamp="179879746" />
  <Command __id="1487" _type="MoveCaretCommand" caretOffset="2884" date="Sun Feb 27 17:19:59 EST 2022" docOffset="2962" starttimestamp="1645820509543" timestamp="179889659" />
  <Command __id="1488" _type="MoveCaretCommand" caretOffset="2884" date="Sun Feb 27 17:19:59 EST 2022" docOffset="2962" starttimestamp="1645820509543" timestamp="179889659" />
  <Command __id="1489" _type="MoveCaretCommand" caretOffset="2852" date="Sun Feb 27 17:19:59 EST 2022" docOffset="2930" starttimestamp="1645820509543" timestamp="179890026" />
  <Command __id="1490" _type="MoveCaretCommand" caretOffset="2852" date="Sun Feb 27 17:19:59 EST 2022" docOffset="2930" starttimestamp="1645820509543" timestamp="179890026" />
  <Command __id="1491" _type="MoveCaretCommand" caretOffset="4753" date="Sun Feb 27 17:20:17 EST 2022" docOffset="4831" starttimestamp="1645820509543" timestamp="179907587" />
  <Command __id="1492" _type="MoveCaretCommand" caretOffset="4753" date="Sun Feb 27 17:20:17 EST 2022" docOffset="4831" starttimestamp="1645820509543" timestamp="179907587" />
  <Command __id="1493" _type="SelectTextCommand" caretOffset="5124" date="Sun Feb 27 17:20:19 EST 2022" end="5124" start="5115" starttimestamp="1645820509543" timestamp="179909730" />
  <Command __id="1494" _type="SelectTextCommand" caretOffset="5124" date="Sun Feb 27 17:20:19 EST 2022" end="5124" start="5115" starttimestamp="1645820509543" timestamp="179909731" />
  <Command __id="1495" _type="MoveCaretCommand" caretOffset="4994" date="Sun Feb 27 17:20:19 EST 2022" docOffset="5072" starttimestamp="1645820509543" timestamp="179910147" />
  <Command __id="1496" _type="MoveCaretCommand" caretOffset="4994" date="Sun Feb 27 17:20:19 EST 2022" docOffset="5072" starttimestamp="1645820509543" timestamp="179910147" />
  <Command __id="1497" _type="MoveCaretCommand" caretOffset="4745" date="Sun Feb 27 17:20:23 EST 2022" docOffset="4823" starttimestamp="1645820509543" timestamp="179913907" />
  <Command __id="1498" _type="MoveCaretCommand" caretOffset="4745" date="Sun Feb 27 17:20:23 EST 2022" docOffset="4823" starttimestamp="1645820509543" timestamp="179913907" />
  <DocumentChange __id="1429" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10908" docExpressionCount="1089" docLength="11576" length="1" offset="3863" starttimestamp="1645820509543" timestamp="179808413">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1430" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10909" docExpressionCount="1089" docLength="11577" length="1" offset="3898" starttimestamp="1645820509543" timestamp="179808417">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1431" _type="Insert" date="Sun Feb 27 17:18:37 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10910" docExpressionCount="1089" docLength="11578" length="1" offset="3905" starttimestamp="1645820509543" timestamp="179808419">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1438" _type="Insert" date="Sun Feb 27 17:18:42 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10911" docExpressionCount="1089" docLength="11579" length="1" offset="3251" starttimestamp="1645820509543" timestamp="179813057">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1439" _type="Insert" date="Sun Feb 27 17:18:42 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10912" docExpressionCount="1089" docLength="11580" length="1" offset="3268" starttimestamp="1645820509543" timestamp="179813058">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1440" _type="Insert" date="Sun Feb 27 17:18:42 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10913" docExpressionCount="1089" docLength="11581" length="1" offset="3318" starttimestamp="1645820509543" timestamp="179813060">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1441" _type="Insert" date="Sun Feb 27 17:18:42 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10914" docExpressionCount="1089" docLength="11582" length="1" offset="3336" starttimestamp="1645820509543" timestamp="179813062">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1442" _type="Insert" date="Sun Feb 27 17:18:42 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10915" docExpressionCount="1089" docLength="11583" length="1" offset="3350" starttimestamp="1645820509543" timestamp="179813064">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1443" _type="Insert" date="Sun Feb 27 17:18:42 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10916" docExpressionCount="1089" docLength="11584" length="1" offset="3377" starttimestamp="1645820509543" timestamp="179813066">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1444" _type="Insert" date="Sun Feb 27 17:18:42 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10917" docExpressionCount="1089" docLength="11585" length="1" offset="3409" starttimestamp="1645820509543" timestamp="179813068">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1445" _type="Insert" date="Sun Feb 27 17:18:42 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10918" docExpressionCount="1089" docLength="11586" length="1" offset="3416" starttimestamp="1645820509543" timestamp="179813069">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1446" _type="Insert" date="Sun Feb 27 17:18:42 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10919" docExpressionCount="1089" docLength="11587" length="1" offset="3450" starttimestamp="1645820509543" timestamp="179813071">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1453" _type="Insert" date="Sun Feb 27 17:18:44 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10920" docExpressionCount="1089" docLength="11588" length="1" offset="3146" starttimestamp="1645820509543" timestamp="179815366">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1454" _type="Insert" date="Sun Feb 27 17:18:44 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10921" docExpressionCount="1089" docLength="11589" length="1" offset="3163" starttimestamp="1645820509543" timestamp="179815368">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1455" _type="Insert" date="Sun Feb 27 17:18:44 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10922" docExpressionCount="1089" docLength="11590" length="1" offset="3187" starttimestamp="1645820509543" timestamp="179815370">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1456" _type="Insert" date="Sun Feb 27 17:18:44 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10923" docExpressionCount="1089" docLength="11591" length="1" offset="3221" starttimestamp="1645820509543" timestamp="179815372">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1461" _type="Insert" date="Sun Feb 27 17:18:46 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10924" docExpressionCount="1089" docLength="11592" length="1" offset="2993" starttimestamp="1645820509543" timestamp="179816744">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1462" _type="Insert" date="Sun Feb 27 17:18:46 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10925" docExpressionCount="1089" docLength="11593" length="1" offset="3010" starttimestamp="1645820509543" timestamp="179816746">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1463" _type="Insert" date="Sun Feb 27 17:18:46 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10926" docExpressionCount="1089" docLength="11594" length="1" offset="3040" starttimestamp="1645820509543" timestamp="179816748">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1464" _type="Insert" date="Sun Feb 27 17:18:46 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10927" docExpressionCount="1089" docLength="11595" length="1" offset="3064" starttimestamp="1645820509543" timestamp="179816750">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="1465" _type="Insert" date="Sun Feb 27 17:18:46 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10928" docExpressionCount="1089" docLength="11596" length="1" offset="3098" starttimestamp="1645820509543" timestamp="179816752">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="1499" _type="MoveCaretCommand" caretOffset="2852" date="Sun Feb 27 17:20:31 EST 2022" docOffset="2930" starttimestamp="1645820509543" timestamp="179922450" />
  <Command __id="1500" _type="MoveCaretCommand" caretOffset="2852" date="Sun Feb 27 17:20:31 EST 2022" docOffset="2930" starttimestamp="1645820509543" timestamp="179922450" />
  <DocumentChange __id="1501" _type="Insert" date="Sun Feb 27 17:20:39 EST 2022" docASTNodeCount="1560" docActiveCodeLength="10929" docExpressionCount="1090" docLength="11597" length="1" offset="2930" starttimestamp="1645820509543" timestamp="179929978">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="1502" _type="InsertStringCommand" date="Sun Feb 27 17:20:39 EST 2022" starttimestamp="1645820509543" timestamp="179929984" timestamp2="179929984">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1503" _type="InsertStringCommand" date="Sun Feb 27 17:20:39 EST 2022" starttimestamp="1645820509543" timestamp="179929984" timestamp2="179929984">
    <data><![CDATA[S]]></data>
  </Command>
  <DocumentChange __id="1504" _type="Insert" date="Sun Feb 27 17:20:39 EST 2022" docASTNodeCount="1560" docActiveCodeLength="10930" docExpressionCount="1090" docLength="11598" length="1" offset="2931" starttimestamp="1645820509543" timestamp="179930189">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="1505" _type="InsertStringCommand" date="Sun Feb 27 17:20:39 EST 2022" starttimestamp="1645820509543" timestamp="179930199" timestamp2="179930199">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="1506" _type="InsertStringCommand" date="Sun Feb 27 17:20:39 EST 2022" starttimestamp="1645820509543" timestamp="179930199" timestamp2="179930199">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="1507" _type="Insert" date="Sun Feb 27 17:20:40 EST 2022" docASTNodeCount="1560" docActiveCodeLength="10931" docExpressionCount="1090" docLength="11599" length="1" offset="2932" starttimestamp="1645820509543" timestamp="179930706">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="1508" _type="InsertStringCommand" date="Sun Feb 27 17:20:40 EST 2022" starttimestamp="1645820509543" timestamp="179930710" timestamp2="179930710">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1509" _type="InsertStringCommand" date="Sun Feb 27 17:20:40 EST 2022" starttimestamp="1645820509543" timestamp="179930710" timestamp2="179930710">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="1510" _type="Insert" date="Sun Feb 27 17:20:40 EST 2022" docASTNodeCount="1560" docActiveCodeLength="10932" docExpressionCount="1090" docLength="11600" length="1" offset="2933" starttimestamp="1645820509543" timestamp="179930943">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="1511" _type="InsertStringCommand" date="Sun Feb 27 17:20:40 EST 2022" starttimestamp="1645820509543" timestamp="179930948" timestamp2="179930948">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1512" _type="InsertStringCommand" date="Sun Feb 27 17:20:40 EST 2022" starttimestamp="1645820509543" timestamp="179930948" timestamp2="179930948">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="1513" _type="Insert" date="Sun Feb 27 17:20:40 EST 2022" docASTNodeCount="1560" docActiveCodeLength="10933" docExpressionCount="1090" docLength="11601" length="1" offset="2934" starttimestamp="1645820509543" timestamp="179931049">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1514" _type="InsertStringCommand" date="Sun Feb 27 17:20:40 EST 2022" starttimestamp="1645820509543" timestamp="179931055" timestamp2="179931055">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1515" _type="InsertStringCommand" date="Sun Feb 27 17:20:40 EST 2022" starttimestamp="1645820509543" timestamp="179931055" timestamp2="179931055">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1516" _type="Insert" date="Sun Feb 27 17:20:40 EST 2022" docASTNodeCount="1560" docActiveCodeLength="10934" docExpressionCount="1090" docLength="11602" length="1" offset="2935" starttimestamp="1645820509543" timestamp="179931165">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="1517" _type="InsertStringCommand" date="Sun Feb 27 17:20:40 EST 2022" starttimestamp="1645820509543" timestamp="179931177" timestamp2="179931177">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1518" _type="InsertStringCommand" date="Sun Feb 27 17:20:40 EST 2022" starttimestamp="1645820509543" timestamp="179931177" timestamp2="179931177">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="1519" _type="Insert" date="Sun Feb 27 17:20:41 EST 2022" docASTNodeCount="1560" docActiveCodeLength="10935" docExpressionCount="1090" docLength="11603" length="1" offset="2936" starttimestamp="1645820509543" timestamp="179931506">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="1520" _type="InsertStringCommand" date="Sun Feb 27 17:20:41 EST 2022" starttimestamp="1645820509543" timestamp="179931510" timestamp2="179931510">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1521" _type="InsertStringCommand" date="Sun Feb 27 17:20:41 EST 2022" starttimestamp="1645820509543" timestamp="179931510" timestamp2="179931510">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1522" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:20:41 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="179931513" />
  <DocumentChange __id="1523" _type="Insert" date="Sun Feb 27 17:20:41 EST 2022" docASTNodeCount="1562" docActiveCodeLength="10936" docExpressionCount="1092" docLength="11604" length="1" offset="2937" starttimestamp="1645820509543" timestamp="179931741">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="1524" _type="Insert" date="Sun Feb 27 17:20:41 EST 2022" docASTNodeCount="1562" docActiveCodeLength="10937" docExpressionCount="1092" docLength="11605" length="1" offset="2938" starttimestamp="1645820509543" timestamp="179931857">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="1525" _type="Insert" date="Sun Feb 27 17:20:41 EST 2022" docASTNodeCount="1562" docActiveCodeLength="10938" docExpressionCount="1092" docLength="11606" length="1" offset="2939" starttimestamp="1645820509543" timestamp="179931872">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1526" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:20:41 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="179931888" />
  <DocumentChange __id="1527" _type="Insert" date="Sun Feb 27 17:20:41 EST 2022" docASTNodeCount="1562" docActiveCodeLength="10939" docExpressionCount="1092" docLength="11607" length="1" offset="2940" starttimestamp="1645820509543" timestamp="179931973">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="1528" _type="InsertStringCommand" date="Sun Feb 27 17:20:41 EST 2022" starttimestamp="1645820509543" timestamp="179931983" timestamp2="179931983">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1529" _type="InsertStringCommand" date="Sun Feb 27 17:20:41 EST 2022" starttimestamp="1645820509543" timestamp="179931984" timestamp2="179931984">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="1530" _type="Insert" date="Sun Feb 27 17:20:41 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10940" docExpressionCount="1089" docLength="11608" length="1" offset="2941" starttimestamp="1645820509543" timestamp="179932186">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="1531" _type="InsertStringCommand" date="Sun Feb 27 17:20:41 EST 2022" starttimestamp="1645820509543" timestamp="179932193" timestamp2="179932193">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1532" _type="InsertStringCommand" date="Sun Feb 27 17:20:41 EST 2022" starttimestamp="1645820509543" timestamp="179932193" timestamp2="179932193">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1533" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:20:41 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="179932196" />
  <Command __id="1534" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:20:41 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="179932208" />
  <DocumentChange __id="1535" _type="Delete" date="Sun Feb 27 17:20:42 EST 2022" docASTNodeCount="1562" docActiveCodeLength="10939" docExpressionCount="1092" docLength="11607" endLine="127" length="1" offset="2941" startLine="127" starttimestamp="1645820509543" timestamp="179932473">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="1536" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:42 EST 2022" starttimestamp="1645820509543" timestamp="179932476" />
  <Command __id="1537" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:42 EST 2022" starttimestamp="1645820509543" timestamp="179932476" />
  <DocumentChange __id="1538" _type="Delete" date="Sun Feb 27 17:20:42 EST 2022" docASTNodeCount="1562" docActiveCodeLength="10938" docExpressionCount="1092" docLength="11606" endLine="127" length="1" offset="2940" startLine="127" starttimestamp="1645820509543" timestamp="179932618">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="1539" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:42 EST 2022" starttimestamp="1645820509543" timestamp="179932622" />
  <Command __id="1540" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:42 EST 2022" starttimestamp="1645820509543" timestamp="179932622" />
  <DocumentChange __id="1541" _type="Delete" date="Sun Feb 27 17:20:42 EST 2022" docASTNodeCount="1562" docActiveCodeLength="10937" docExpressionCount="1092" docLength="11605" endLine="127" length="1" offset="2939" startLine="127" starttimestamp="1645820509543" timestamp="179932770">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1542" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:42 EST 2022" starttimestamp="1645820509543" timestamp="179932772" />
  <Command __id="1543" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:42 EST 2022" starttimestamp="1645820509543" timestamp="179932772" />
  <DocumentChange __id="1544" _type="Insert" date="Sun Feb 27 17:20:42 EST 2022" docASTNodeCount="1562" docActiveCodeLength="10938" docExpressionCount="1092" docLength="11606" length="1" offset="2939" starttimestamp="1645820509543" timestamp="179932876">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="1545" _type="InsertStringCommand" date="Sun Feb 27 17:20:42 EST 2022" starttimestamp="1645820509543" timestamp="179932880" timestamp2="179932880">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1546" _type="InsertStringCommand" date="Sun Feb 27 17:20:42 EST 2022" starttimestamp="1645820509543" timestamp="179932880" timestamp2="179932880">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="1547" _type="Insert" date="Sun Feb 27 17:20:42 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10939" docExpressionCount="1089" docLength="11607" length="1" offset="2940" starttimestamp="1645820509543" timestamp="179932973">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="1548" _type="InsertStringCommand" date="Sun Feb 27 17:20:42 EST 2022" starttimestamp="1645820509543" timestamp="179932983" timestamp2="179932983">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1549" _type="InsertStringCommand" date="Sun Feb 27 17:20:42 EST 2022" starttimestamp="1645820509543" timestamp="179932983" timestamp2="179932983">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1550" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:20:42 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="179932987" />
  <DocumentChange __id="1551" _type="Insert" date="Sun Feb 27 17:20:42 EST 2022" docASTNodeCount="1568" docActiveCodeLength="10941" docExpressionCount="1095" docLength="11609" length="2" offset="2941" starttimestamp="1645820509543" timestamp="179933289">
    <text><![CDATA[[]]]></text>
  </DocumentChange>
  <Command __id="1552" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:20:42 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="179933303" />
  <DocumentChange __id="1553" _type="Delete" date="Sun Feb 27 17:20:43 EST 2022" docASTNodeCount="1075" docActiveCodeLength="10940" docExpressionCount="743" docLength="11608" endLine="127" length="1" offset="2941" startLine="127" starttimestamp="1645820509543" timestamp="179933923">
    <text><![CDATA[[]]></text>
  </DocumentChange>
  <DocumentChange __id="1554" _type="Delete" date="Sun Feb 27 17:20:43 EST 2022" docASTNodeCount="1558" docActiveCodeLength="10939" docExpressionCount="1089" docLength="11607" endLine="127" length="1" offset="2941" startLine="127" starttimestamp="1645820509543" timestamp="179933928">
    <text><![CDATA[]]]></text>
  </DocumentChange>
  <Command __id="1555" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:43 EST 2022" starttimestamp="1645820509543" timestamp="179933930" />
  <Command __id="1556" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:43 EST 2022" starttimestamp="1645820509543" timestamp="179933930" />
  <DocumentChange __id="1557" _type="Insert" date="Sun Feb 27 17:20:44 EST 2022" docASTNodeCount="1564" docActiveCodeLength="10940" docExpressionCount="1094" docLength="11608" length="1" offset="2941" starttimestamp="1645820509543" timestamp="179934595">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="1558" _type="InsertStringCommand" date="Sun Feb 27 17:20:44 EST 2022" starttimestamp="1645820509543" timestamp="179934599" timestamp2="179934599">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1559" _type="InsertStringCommand" date="Sun Feb 27 17:20:44 EST 2022" starttimestamp="1645820509543" timestamp="179934599" timestamp2="179934599">
    <data><![CDATA[p]]></data>
  </Command>
  <DocumentChange __id="1560" _type="Insert" date="Sun Feb 27 17:20:44 EST 2022" docASTNodeCount="1564" docActiveCodeLength="10941" docExpressionCount="1094" docLength="11609" length="1" offset="2942" starttimestamp="1645820509543" timestamp="179935032">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="1561" _type="InsertStringCommand" date="Sun Feb 27 17:20:44 EST 2022" starttimestamp="1645820509543" timestamp="179935037" timestamp2="179935037">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1562" _type="InsertStringCommand" date="Sun Feb 27 17:20:44 EST 2022" starttimestamp="1645820509543" timestamp="179935037" timestamp2="179935037">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1563" _type="Insert" date="Sun Feb 27 17:20:44 EST 2022" docASTNodeCount="1564" docActiveCodeLength="10942" docExpressionCount="1094" docLength="11610" length="1" offset="2943" starttimestamp="1645820509543" timestamp="179935186">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1564" _type="InsertStringCommand" date="Sun Feb 27 17:20:44 EST 2022" starttimestamp="1645820509543" timestamp="179935191" timestamp2="179935191">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1565" _type="InsertStringCommand" date="Sun Feb 27 17:20:44 EST 2022" starttimestamp="1645820509543" timestamp="179935191" timestamp2="179935191">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="1566" _type="Insert" date="Sun Feb 27 17:20:44 EST 2022" docASTNodeCount="1564" docActiveCodeLength="10943" docExpressionCount="1094" docLength="11611" length="1" offset="2944" starttimestamp="1645820509543" timestamp="179935294">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1567" _type="InsertStringCommand" date="Sun Feb 27 17:20:44 EST 2022" starttimestamp="1645820509543" timestamp="179935301" timestamp2="179935301">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1568" _type="InsertStringCommand" date="Sun Feb 27 17:20:44 EST 2022" starttimestamp="1645820509543" timestamp="179935302" timestamp2="179935302">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="1569" _type="Insert" date="Sun Feb 27 17:20:44 EST 2022" docASTNodeCount="1564" docActiveCodeLength="10944" docExpressionCount="1094" docLength="11612" length="1" offset="2945" starttimestamp="1645820509543" timestamp="179935368">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="1570" _type="InsertStringCommand" date="Sun Feb 27 17:20:44 EST 2022" starttimestamp="1645820509543" timestamp="179935372" timestamp2="179935372">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1571" _type="InsertStringCommand" date="Sun Feb 27 17:20:44 EST 2022" starttimestamp="1645820509543" timestamp="179935372" timestamp2="179935372">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="1572" _type="Insert" date="Sun Feb 27 17:20:45 EST 2022" docASTNodeCount="1564" docActiveCodeLength="10945" docExpressionCount="1094" docLength="11613" length="1" offset="2946" starttimestamp="1645820509543" timestamp="179935493">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="1573" _type="InsertStringCommand" date="Sun Feb 27 17:20:45 EST 2022" starttimestamp="1645820509543" timestamp="179935509" timestamp2="179935509">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1574" _type="InsertStringCommand" date="Sun Feb 27 17:20:45 EST 2022" starttimestamp="1645820509543" timestamp="179935509" timestamp2="179935509">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="1575" _type="Insert" date="Sun Feb 27 17:20:45 EST 2022" docASTNodeCount="1564" docActiveCodeLength="10946" docExpressionCount="1094" docLength="11614" length="1" offset="2947" starttimestamp="1645820509543" timestamp="179935583">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1576" _type="InsertStringCommand" date="Sun Feb 27 17:20:45 EST 2022" starttimestamp="1645820509543" timestamp="179935588" timestamp2="179935588">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1577" _type="InsertStringCommand" date="Sun Feb 27 17:20:45 EST 2022" starttimestamp="1645820509543" timestamp="179935588" timestamp2="179935588">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="1578" _type="Insert" date="Sun Feb 27 17:20:45 EST 2022" docASTNodeCount="1564" docActiveCodeLength="10948" docExpressionCount="1094" docLength="11616" length="2" offset="2948" starttimestamp="1645820509543" timestamp="179936172">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="1579" _type="InsertStringCommand" date="Sun Feb 27 17:20:45 EST 2022" starttimestamp="1645820509543" timestamp="179936175" timestamp2="179936175">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1580" _type="InsertStringCommand" date="Sun Feb 27 17:20:45 EST 2022" starttimestamp="1645820509543" timestamp="179936175" timestamp2="179936175">
    <data><![CDATA[(]]></data>
  </Command>
  <DocumentChange __id="1581" _type="Insert" date="Sun Feb 27 17:20:48 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10950" docExpressionCount="1095" docLength="11618" length="2" offset="2949" starttimestamp="1645820509543" timestamp="179938685">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <Command __id="1582" _type="InsertStringCommand" date="Sun Feb 27 17:20:48 EST 2022" starttimestamp="1645820509543" timestamp="179938688" timestamp2="179938688">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="1583" _type="InsertStringCommand" date="Sun Feb 27 17:20:48 EST 2022" starttimestamp="1645820509543" timestamp="179938689" timestamp2="179938689">
    <data><![CDATA["]]></data>
  </Command>
  <DocumentChange __id="1584" _type="Insert" date="Sun Feb 27 17:20:49 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10951" docExpressionCount="1095" docLength="11619" length="1" offset="2950" starttimestamp="1645820509543" timestamp="179939486">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="1585" _type="InsertStringCommand" date="Sun Feb 27 17:20:49 EST 2022" starttimestamp="1645820509543" timestamp="179939488" timestamp2="179939488">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1586" _type="InsertStringCommand" date="Sun Feb 27 17:20:49 EST 2022" starttimestamp="1645820509543" timestamp="179939488" timestamp2="179939488">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="1587" _type="Insert" date="Sun Feb 27 17:20:49 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10952" docExpressionCount="1095" docLength="11620" length="1" offset="2951" starttimestamp="1645820509543" timestamp="179939496">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1588" _type="InsertStringCommand" date="Sun Feb 27 17:20:49 EST 2022" starttimestamp="1645820509543" timestamp="179939497" timestamp2="179939497">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1589" _type="InsertStringCommand" date="Sun Feb 27 17:20:49 EST 2022" starttimestamp="1645820509543" timestamp="179939498" timestamp2="179939498">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="1590" _type="Insert" date="Sun Feb 27 17:20:49 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10953" docExpressionCount="1095" docLength="11621" length="1" offset="2952" starttimestamp="1645820509543" timestamp="179939586">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1591" _type="InsertStringCommand" date="Sun Feb 27 17:20:49 EST 2022" starttimestamp="1645820509543" timestamp="179939589" timestamp2="179939589">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1592" _type="InsertStringCommand" date="Sun Feb 27 17:20:49 EST 2022" starttimestamp="1645820509543" timestamp="179939589" timestamp2="179939589">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="1593" _type="Delete" date="Sun Feb 27 17:20:49 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10952" docExpressionCount="1095" docLength="11620" endLine="127" length="1" offset="2952" startLine="127" starttimestamp="1645820509543" timestamp="179939931">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1594" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:49 EST 2022" starttimestamp="1645820509543" timestamp="179939934" />
  <Command __id="1595" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:49 EST 2022" starttimestamp="1645820509543" timestamp="179939934" />
  <DocumentChange __id="1596" _type="Delete" date="Sun Feb 27 17:20:49 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10951" docExpressionCount="1095" docLength="11619" endLine="127" length="1" offset="2951" startLine="127" starttimestamp="1645820509543" timestamp="179940079">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1597" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:49 EST 2022" starttimestamp="1645820509543" timestamp="179940082" />
  <Command __id="1598" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:49 EST 2022" starttimestamp="1645820509543" timestamp="179940082" />
  <DocumentChange __id="1599" _type="Delete" date="Sun Feb 27 17:20:49 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10950" docExpressionCount="1095" docLength="11618" endLine="127" length="1" offset="2950" startLine="127" starttimestamp="1645820509543" timestamp="179940442">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="1600" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:49 EST 2022" starttimestamp="1645820509543" timestamp="179940444" />
  <Command __id="1601" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:49 EST 2022" starttimestamp="1645820509543" timestamp="179940445" />
  <DocumentChange __id="1602" _type="Insert" date="Sun Feb 27 17:20:50 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10951" docExpressionCount="1095" docLength="11619" length="1" offset="2950" starttimestamp="1645820509543" timestamp="179940657">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1603" _type="InsertStringCommand" date="Sun Feb 27 17:20:50 EST 2022" starttimestamp="1645820509543" timestamp="179940660" timestamp2="179940660">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1604" _type="InsertStringCommand" date="Sun Feb 27 17:20:50 EST 2022" starttimestamp="1645820509543" timestamp="179940660" timestamp2="179940660">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="1605" _type="Insert" date="Sun Feb 27 17:20:50 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10952" docExpressionCount="1095" docLength="11620" length="1" offset="2951" starttimestamp="1645820509543" timestamp="179940757">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1606" _type="InsertStringCommand" date="Sun Feb 27 17:20:50 EST 2022" starttimestamp="1645820509543" timestamp="179940758" timestamp2="179940758">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1607" _type="InsertStringCommand" date="Sun Feb 27 17:20:50 EST 2022" starttimestamp="1645820509543" timestamp="179940758" timestamp2="179940758">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="1608" _type="Insert" date="Sun Feb 27 17:20:50 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10953" docExpressionCount="1095" docLength="11621" length="1" offset="2952" starttimestamp="1645820509543" timestamp="179940965">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1609" _type="InsertStringCommand" date="Sun Feb 27 17:20:50 EST 2022" starttimestamp="1645820509543" timestamp="179940966" timestamp2="179940966">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1610" _type="InsertStringCommand" date="Sun Feb 27 17:20:50 EST 2022" starttimestamp="1645820509543" timestamp="179940966" timestamp2="179940966">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="1611" _type="Insert" date="Sun Feb 27 17:20:50 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10954" docExpressionCount="1095" docLength="11622" length="1" offset="2953" starttimestamp="1645820509543" timestamp="179941098">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <Command __id="1612" _type="InsertStringCommand" date="Sun Feb 27 17:20:50 EST 2022" starttimestamp="1645820509543" timestamp="179941100" timestamp2="179941100">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1613" _type="InsertStringCommand" date="Sun Feb 27 17:20:50 EST 2022" starttimestamp="1645820509543" timestamp="179941100" timestamp2="179941100">
    <data><![CDATA[h]]></data>
  </Command>
  <DocumentChange __id="1614" _type="Insert" date="Sun Feb 27 17:20:50 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10955" docExpressionCount="1095" docLength="11623" length="1" offset="2954" starttimestamp="1645820509543" timestamp="179941223">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1615" _type="InsertStringCommand" date="Sun Feb 27 17:20:50 EST 2022" starttimestamp="1645820509543" timestamp="179941225" timestamp2="179941225">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1616" _type="InsertStringCommand" date="Sun Feb 27 17:20:50 EST 2022" starttimestamp="1645820509543" timestamp="179941225" timestamp2="179941225">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1617" _type="Insert" date="Sun Feb 27 17:20:50 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10956" docExpressionCount="1095" docLength="11624" length="1" offset="2955" starttimestamp="1645820509543" timestamp="179941351">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="1618" _type="InsertStringCommand" date="Sun Feb 27 17:20:50 EST 2022" starttimestamp="1645820509543" timestamp="179941354" timestamp2="179941354">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1619" _type="InsertStringCommand" date="Sun Feb 27 17:20:50 EST 2022" starttimestamp="1645820509543" timestamp="179941354" timestamp2="179941354">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1620" _type="Insert" date="Sun Feb 27 17:20:50 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10957" docExpressionCount="1095" docLength="11625" length="1" offset="2956" starttimestamp="1645820509543" timestamp="179941434">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1621" _type="InsertStringCommand" date="Sun Feb 27 17:20:50 EST 2022" starttimestamp="1645820509543" timestamp="179941436" timestamp2="179941436">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1622" _type="InsertStringCommand" date="Sun Feb 27 17:20:50 EST 2022" starttimestamp="1645820509543" timestamp="179941436" timestamp2="179941436">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1623" _type="Insert" date="Sun Feb 27 17:20:51 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10958" docExpressionCount="1095" docLength="11626" length="1" offset="2957" starttimestamp="1645820509543" timestamp="179941510">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1624" _type="InsertStringCommand" date="Sun Feb 27 17:20:51 EST 2022" starttimestamp="1645820509543" timestamp="179941512" timestamp2="179941512">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1625" _type="InsertStringCommand" date="Sun Feb 27 17:20:51 EST 2022" starttimestamp="1645820509543" timestamp="179941512" timestamp2="179941512">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="1626" _type="Delete" date="Sun Feb 27 17:20:52 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10957" docExpressionCount="1095" docLength="11625" endLine="127" length="1" offset="2957" startLine="127" starttimestamp="1645820509543" timestamp="179942762">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1627" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:52 EST 2022" starttimestamp="1645820509543" timestamp="179942764" />
  <Command __id="1628" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:52 EST 2022" starttimestamp="1645820509543" timestamp="179942764" />
  <DocumentChange __id="1629" _type="Insert" date="Sun Feb 27 17:20:52 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10958" docExpressionCount="1095" docLength="11626" length="1" offset="2957" starttimestamp="1645820509543" timestamp="179943051">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="1630" _type="InsertStringCommand" date="Sun Feb 27 17:20:52 EST 2022" starttimestamp="1645820509543" timestamp="179943052" timestamp2="179943052">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="1631" _type="InsertStringCommand" date="Sun Feb 27 17:20:52 EST 2022" starttimestamp="1645820509543" timestamp="179943052" timestamp2="179943052">
    <data><![CDATA[,]]></data>
  </Command>
  <DocumentChange __id="1632" _type="Insert" date="Sun Feb 27 17:20:53 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10959" docExpressionCount="1095" docLength="11627" length="1" offset="2958" starttimestamp="1645820509543" timestamp="179943757">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1633" _type="InsertStringCommand" date="Sun Feb 27 17:20:53 EST 2022" starttimestamp="1645820509543" timestamp="179943759" timestamp2="179943759">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1634" _type="InsertStringCommand" date="Sun Feb 27 17:20:53 EST 2022" starttimestamp="1645820509543" timestamp="179943759" timestamp2="179943759">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="1635" _type="Delete" date="Sun Feb 27 17:20:53 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10958" docExpressionCount="1095" docLength="11626" endLine="127" length="1" offset="2958" startLine="127" starttimestamp="1645820509543" timestamp="179944190">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1636" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:53 EST 2022" starttimestamp="1645820509543" timestamp="179944193" />
  <Command __id="1637" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:53 EST 2022" starttimestamp="1645820509543" timestamp="179944193" />
  <DocumentChange __id="1638" _type="Insert" date="Sun Feb 27 17:20:54 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10959" docExpressionCount="1095" docLength="11627" length="1" offset="2958" starttimestamp="1645820509543" timestamp="179944694">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1639" _type="InsertStringCommand" date="Sun Feb 27 17:20:54 EST 2022" starttimestamp="1645820509543" timestamp="179944695" timestamp2="179944695">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1640" _type="InsertStringCommand" date="Sun Feb 27 17:20:54 EST 2022" starttimestamp="1645820509543" timestamp="179944696" timestamp2="179944696">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1641" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:20:54 EST 2022" starttimestamp="1645820509543" timestamp="179944937" />
  <Command __id="1642" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:20:54 EST 2022" starttimestamp="1645820509543" timestamp="179944937" />
  <DocumentChange __id="1643" _type="Insert" date="Sun Feb 27 17:20:54 EST 2022" docASTNodeCount="1565" docActiveCodeLength="10960" docExpressionCount="1095" docLength="11628" length="1" offset="2960" starttimestamp="1645820509543" timestamp="179945162">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1644" _type="InsertStringCommand" date="Sun Feb 27 17:20:54 EST 2022" starttimestamp="1645820509543" timestamp="179945166" timestamp2="179945166">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1645" _type="InsertStringCommand" date="Sun Feb 27 17:20:54 EST 2022" starttimestamp="1645820509543" timestamp="179945166" timestamp2="179945166">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="1646" _type="Insert" date="Sun Feb 27 17:20:54 EST 2022" docASTNodeCount="1493" docActiveCodeLength="10961" docExpressionCount="1045" docLength="11629" length="1" offset="2961" starttimestamp="1645820509543" timestamp="179945376">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <Command __id="1647" _type="InsertStringCommand" date="Sun Feb 27 17:20:54 EST 2022" starttimestamp="1645820509543" timestamp="179945379" timestamp2="179945379">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="1648" _type="InsertStringCommand" date="Sun Feb 27 17:20:54 EST 2022" starttimestamp="1645820509543" timestamp="179945379" timestamp2="179945379">
    <data><![CDATA[+]]></data>
  </Command>
  <DocumentChange __id="1649" _type="Insert" date="Sun Feb 27 17:20:55 EST 2022" docASTNodeCount="1493" docActiveCodeLength="10962" docExpressionCount="1045" docLength="11630" length="1" offset="2962" starttimestamp="1645820509543" timestamp="179945528">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1650" _type="InsertStringCommand" date="Sun Feb 27 17:20:55 EST 2022" starttimestamp="1645820509543" timestamp="179945530" timestamp2="179945530">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1651" _type="InsertStringCommand" date="Sun Feb 27 17:20:55 EST 2022" starttimestamp="1645820509543" timestamp="179945530" timestamp2="179945530">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="1652" _type="Insert" date="Sun Feb 27 17:20:55 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10963" docExpressionCount="1097" docLength="11631" length="1" offset="2963" starttimestamp="1645820509543" timestamp="179946069">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="1653" _type="InsertStringCommand" date="Sun Feb 27 17:20:55 EST 2022" starttimestamp="1645820509543" timestamp="179946071" timestamp2="179946071">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1654" _type="InsertStringCommand" date="Sun Feb 27 17:20:55 EST 2022" starttimestamp="1645820509543" timestamp="179946071" timestamp2="179946071">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="1655" _type="Insert" date="Sun Feb 27 17:20:55 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10964" docExpressionCount="1097" docLength="11632" length="1" offset="2964" starttimestamp="1645820509543" timestamp="179946212">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="1656" _type="InsertStringCommand" date="Sun Feb 27 17:20:55 EST 2022" starttimestamp="1645820509543" timestamp="179946214" timestamp2="179946214">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1657" _type="InsertStringCommand" date="Sun Feb 27 17:20:55 EST 2022" starttimestamp="1645820509543" timestamp="179946214" timestamp2="179946214">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="1658" _type="Insert" date="Sun Feb 27 17:20:55 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10965" docExpressionCount="1097" docLength="11633" length="1" offset="2965" starttimestamp="1645820509543" timestamp="179946340">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="1659" _type="InsertStringCommand" date="Sun Feb 27 17:20:55 EST 2022" starttimestamp="1645820509543" timestamp="179946343" timestamp2="179946343">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1660" _type="InsertStringCommand" date="Sun Feb 27 17:20:55 EST 2022" starttimestamp="1645820509543" timestamp="179946343" timestamp2="179946343">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1661" _type="Insert" date="Sun Feb 27 17:20:56 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10966" docExpressionCount="1097" docLength="11634" length="1" offset="2966" starttimestamp="1645820509543" timestamp="179946518">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1662" _type="InsertStringCommand" date="Sun Feb 27 17:20:56 EST 2022" starttimestamp="1645820509543" timestamp="179946521" timestamp2="179946521">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1663" _type="InsertStringCommand" date="Sun Feb 27 17:20:56 EST 2022" starttimestamp="1645820509543" timestamp="179946521" timestamp2="179946521">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1664" _type="Delete" date="Sun Feb 27 17:20:56 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10965" docExpressionCount="1097" docLength="11633" endLine="127" length="1" offset="2966" startLine="127" starttimestamp="1645820509543" timestamp="179946890">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1665" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:56 EST 2022" starttimestamp="1645820509543" timestamp="179946892" />
  <Command __id="1666" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:56 EST 2022" starttimestamp="1645820509543" timestamp="179946893" />
  <DocumentChange __id="1667" _type="Insert" date="Sun Feb 27 17:20:56 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10966" docExpressionCount="1097" docLength="11634" length="1" offset="2966" starttimestamp="1645820509543" timestamp="179946938">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="1668" _type="InsertStringCommand" date="Sun Feb 27 17:20:56 EST 2022" starttimestamp="1645820509543" timestamp="179946939" timestamp2="179946939">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1669" _type="InsertStringCommand" date="Sun Feb 27 17:20:56 EST 2022" starttimestamp="1645820509543" timestamp="179946939" timestamp2="179946939">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1670" _type="Insert" date="Sun Feb 27 17:20:56 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10967" docExpressionCount="1097" docLength="11635" length="1" offset="2967" starttimestamp="1645820509543" timestamp="179947023">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1671" _type="InsertStringCommand" date="Sun Feb 27 17:20:56 EST 2022" starttimestamp="1645820509543" timestamp="179947026" timestamp2="179947026">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1672" _type="InsertStringCommand" date="Sun Feb 27 17:20:56 EST 2022" starttimestamp="1645820509543" timestamp="179947027" timestamp2="179947027">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1673" _type="Insert" date="Sun Feb 27 17:20:56 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10968" docExpressionCount="1097" docLength="11636" length="1" offset="2968" starttimestamp="1645820509543" timestamp="179947140">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1674" _type="InsertStringCommand" date="Sun Feb 27 17:20:56 EST 2022" starttimestamp="1645820509543" timestamp="179947142" timestamp2="179947142">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1675" _type="InsertStringCommand" date="Sun Feb 27 17:20:56 EST 2022" starttimestamp="1645820509543" timestamp="179947142" timestamp2="179947142">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="1676" _type="Insert" date="Sun Feb 27 17:20:56 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10969" docExpressionCount="1097" docLength="11637" length="1" offset="2969" starttimestamp="1645820509543" timestamp="179947212">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="1677" _type="InsertStringCommand" date="Sun Feb 27 17:20:56 EST 2022" starttimestamp="1645820509543" timestamp="179947214" timestamp2="179947214">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1678" _type="InsertStringCommand" date="Sun Feb 27 17:20:56 EST 2022" starttimestamp="1645820509543" timestamp="179947214" timestamp2="179947214">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="1679" _type="Insert" date="Sun Feb 27 17:20:59 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10970" docExpressionCount="1097" docLength="11638" length="1" offset="2970" starttimestamp="1645820509543" timestamp="179949662">
    <text><![CDATA[K]]></text>
  </DocumentChange>
  <Command __id="1680" _type="InsertStringCommand" date="Sun Feb 27 17:20:59 EST 2022" starttimestamp="1645820509543" timestamp="179949664" timestamp2="179949664">
    <data><![CDATA[K]]></data>
  </Command>
  <Command __id="1681" _type="InsertStringCommand" date="Sun Feb 27 17:20:59 EST 2022" starttimestamp="1645820509543" timestamp="179949665" timestamp2="179949665">
    <data><![CDATA[K]]></data>
  </Command>
  <DocumentChange __id="1682" _type="Insert" date="Sun Feb 27 17:20:59 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10971" docExpressionCount="1097" docLength="11639" length="1" offset="2971" starttimestamp="1645820509543" timestamp="179949855">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1683" _type="InsertStringCommand" date="Sun Feb 27 17:20:59 EST 2022" starttimestamp="1645820509543" timestamp="179949857" timestamp2="179949857">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1684" _type="InsertStringCommand" date="Sun Feb 27 17:20:59 EST 2022" starttimestamp="1645820509543" timestamp="179949857" timestamp2="179949857">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="1685" _type="Insert" date="Sun Feb 27 17:20:59 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10972" docExpressionCount="1097" docLength="11640" length="1" offset="2972" starttimestamp="1645820509543" timestamp="179949998">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="1686" _type="InsertStringCommand" date="Sun Feb 27 17:20:59 EST 2022" starttimestamp="1645820509543" timestamp="179949999" timestamp2="179949999">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1687" _type="InsertStringCommand" date="Sun Feb 27 17:20:59 EST 2022" starttimestamp="1645820509543" timestamp="179949999" timestamp2="179949999">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="1688" _type="Delete" date="Sun Feb 27 17:20:59 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10971" docExpressionCount="1097" docLength="11639" endLine="127" length="1" offset="2972" startLine="127" starttimestamp="1645820509543" timestamp="179950263">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="1689" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:59 EST 2022" starttimestamp="1645820509543" timestamp="179950269" />
  <Command __id="1690" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:59 EST 2022" starttimestamp="1645820509543" timestamp="179950269" />
  <DocumentChange __id="1691" _type="Delete" date="Sun Feb 27 17:20:59 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10970" docExpressionCount="1097" docLength="11638" endLine="127" length="1" offset="2971" startLine="127" starttimestamp="1645820509543" timestamp="179950394">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1692" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:59 EST 2022" starttimestamp="1645820509543" timestamp="179950396" />
  <Command __id="1693" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:20:59 EST 2022" starttimestamp="1645820509543" timestamp="179950396" />
  <DocumentChange __id="1694" _type="Delete" date="Sun Feb 27 17:21:00 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10969" docExpressionCount="1097" docLength="11637" endLine="127" length="1" offset="2970" startLine="127" starttimestamp="1645820509543" timestamp="179950559">
    <text><![CDATA[K]]></text>
  </DocumentChange>
  <Command __id="1695" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:00 EST 2022" starttimestamp="1645820509543" timestamp="179950573" />
  <Command __id="1696" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:00 EST 2022" starttimestamp="1645820509543" timestamp="179950573" />
  <DocumentChange __id="1697" _type="Insert" date="Sun Feb 27 17:21:00 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10970" docExpressionCount="1097" docLength="11638" length="1" offset="2970" starttimestamp="1645820509543" timestamp="179950695">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="1698" _type="InsertStringCommand" date="Sun Feb 27 17:21:00 EST 2022" starttimestamp="1645820509543" timestamp="179950698" timestamp2="179950698">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1699" _type="InsertStringCommand" date="Sun Feb 27 17:21:00 EST 2022" starttimestamp="1645820509543" timestamp="179950699" timestamp2="179950699">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="1700" _type="Insert" date="Sun Feb 27 17:21:00 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10971" docExpressionCount="1097" docLength="11639" length="1" offset="2971" starttimestamp="1645820509543" timestamp="179950932">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <Command __id="1701" _type="InsertStringCommand" date="Sun Feb 27 17:21:00 EST 2022" starttimestamp="1645820509543" timestamp="179950934" timestamp2="179950934">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="1702" _type="InsertStringCommand" date="Sun Feb 27 17:21:00 EST 2022" starttimestamp="1645820509543" timestamp="179950934" timestamp2="179950934">
    <data><![CDATA[O]]></data>
  </Command>
  <DocumentChange __id="1703" _type="Delete" date="Sun Feb 27 17:21:00 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10970" docExpressionCount="1097" docLength="11638" endLine="127" length="1" offset="2971" startLine="127" starttimestamp="1645820509543" timestamp="179951294">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <Command __id="1704" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:00 EST 2022" starttimestamp="1645820509543" timestamp="179951301" />
  <Command __id="1705" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:00 EST 2022" starttimestamp="1645820509543" timestamp="179951301" />
  <DocumentChange __id="1706" _type="Delete" date="Sun Feb 27 17:21:00 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10969" docExpressionCount="1097" docLength="11637" endLine="127" length="1" offset="2970" startLine="127" starttimestamp="1645820509543" timestamp="179951450">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="1707" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:01 EST 2022" starttimestamp="1645820509543" timestamp="179951471" />
  <Command __id="1708" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:01 EST 2022" starttimestamp="1645820509543" timestamp="179951471" />
  <DocumentChange __id="1709" _type="Insert" date="Sun Feb 27 17:21:01 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10970" docExpressionCount="1097" docLength="11638" length="1" offset="2970" starttimestamp="1645820509543" timestamp="179951702">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <Command __id="1710" _type="InsertStringCommand" date="Sun Feb 27 17:21:01 EST 2022" starttimestamp="1645820509543" timestamp="179951706" timestamp2="179951706">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="1711" _type="InsertStringCommand" date="Sun Feb 27 17:21:01 EST 2022" starttimestamp="1645820509543" timestamp="179951706" timestamp2="179951706">
    <data><![CDATA[T]]></data>
  </Command>
  <DocumentChange __id="1712" _type="Insert" date="Sun Feb 27 17:21:01 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10971" docExpressionCount="1097" docLength="11639" length="1" offset="2971" starttimestamp="1645820509543" timestamp="179951989">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="1713" _type="InsertStringCommand" date="Sun Feb 27 17:21:01 EST 2022" starttimestamp="1645820509543" timestamp="179951991" timestamp2="179951991">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1714" _type="InsertStringCommand" date="Sun Feb 27 17:21:01 EST 2022" starttimestamp="1645820509543" timestamp="179951991" timestamp2="179951991">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="1715" _type="Insert" date="Sun Feb 27 17:21:01 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10972" docExpressionCount="1097" docLength="11640" length="1" offset="2972" starttimestamp="1645820509543" timestamp="179952218">
    <text><![CDATA[K]]></text>
  </DocumentChange>
  <Command __id="1716" _type="InsertStringCommand" date="Sun Feb 27 17:21:01 EST 2022" starttimestamp="1645820509543" timestamp="179952220" timestamp2="179952220">
    <data><![CDATA[K]]></data>
  </Command>
  <Command __id="1717" _type="InsertStringCommand" date="Sun Feb 27 17:21:01 EST 2022" starttimestamp="1645820509543" timestamp="179952221" timestamp2="179952221">
    <data><![CDATA[K]]></data>
  </Command>
  <DocumentChange __id="1718" _type="Insert" date="Sun Feb 27 17:21:01 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10973" docExpressionCount="1097" docLength="11641" length="1" offset="2973" starttimestamp="1645820509543" timestamp="179952341">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="1719" _type="InsertStringCommand" date="Sun Feb 27 17:21:01 EST 2022" starttimestamp="1645820509543" timestamp="179952344" timestamp2="179952344">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="1720" _type="InsertStringCommand" date="Sun Feb 27 17:21:01 EST 2022" starttimestamp="1645820509543" timestamp="179952344" timestamp2="179952344">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="1721" _type="Insert" date="Sun Feb 27 17:21:01 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10974" docExpressionCount="1097" docLength="11642" length="1" offset="2974" starttimestamp="1645820509543" timestamp="179952429">
    <text><![CDATA[N]]></text>
  </DocumentChange>
  <Command __id="1722" _type="InsertStringCommand" date="Sun Feb 27 17:21:01 EST 2022" starttimestamp="1645820509543" timestamp="179952431" timestamp2="179952431">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="1723" _type="InsertStringCommand" date="Sun Feb 27 17:21:01 EST 2022" starttimestamp="1645820509543" timestamp="179952431" timestamp2="179952431">
    <data><![CDATA[N]]></data>
  </Command>
  <DocumentChange __id="1724" _type="Insert" date="Sun Feb 27 17:21:02 EST 2022" docASTNodeCount="1493" docActiveCodeLength="10975" docExpressionCount="1045" docLength="11643" length="1" offset="2975" starttimestamp="1645820509543" timestamp="179952670">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="1725" _type="InsertStringCommand" date="Sun Feb 27 17:21:02 EST 2022" starttimestamp="1645820509543" timestamp="179952672" timestamp2="179952672">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1726" _type="InsertStringCommand" date="Sun Feb 27 17:21:02 EST 2022" starttimestamp="1645820509543" timestamp="179952672" timestamp2="179952672">
    <data><![CDATA[.]]></data>
  </Command>
  <DocumentChange __id="1727" _type="Insert" date="Sun Feb 27 17:21:02 EST 2022" docASTNodeCount="1493" docActiveCodeLength="10976" docExpressionCount="1045" docLength="11644" length="1" offset="2976" starttimestamp="1645820509543" timestamp="179952680">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="1728" _type="InsertStringCommand" date="Sun Feb 27 17:21:02 EST 2022" starttimestamp="1645820509543" timestamp="179952682" timestamp2="179952682">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="1729" _type="InsertStringCommand" date="Sun Feb 27 17:21:02 EST 2022" starttimestamp="1645820509543" timestamp="179952682" timestamp2="179952682">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="1730" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:21:02 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="179952685" />
  <DocumentChange __id="1731" _type="Delete" date="Sun Feb 27 17:21:02 EST 2022" docASTNodeCount="1493" docActiveCodeLength="10975" docExpressionCount="1045" docLength="11643" endLine="127" length="1" offset="2976" startLine="127" starttimestamp="1645820509543" timestamp="179952954">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="1732" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:21:02 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="179952999" />
  <DocumentChange __id="1733" _type="Delete" date="Sun Feb 27 17:21:02 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10974" docExpressionCount="1097" docLength="11642" endLine="127" length="1" offset="2975" startLine="127" starttimestamp="1645820509543" timestamp="179953078">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="1734" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:02 EST 2022" starttimestamp="1645820509543" timestamp="179953081" />
  <Command __id="1735" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:02 EST 2022" starttimestamp="1645820509543" timestamp="179953081" />
  <DocumentChange __id="1736" _type="Delete" date="Sun Feb 27 17:21:02 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10973" docExpressionCount="1097" docLength="11641" endLine="127" length="1" offset="2974" startLine="127" starttimestamp="1645820509543" timestamp="179953238">
    <text><![CDATA[N]]></text>
  </DocumentChange>
  <Command __id="1737" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:02 EST 2022" starttimestamp="1645820509543" timestamp="179953241" />
  <Command __id="1738" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:02 EST 2022" starttimestamp="1645820509543" timestamp="179953241" />
  <DocumentChange __id="1739" _type="Delete" date="Sun Feb 27 17:21:02 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10972" docExpressionCount="1097" docLength="11640" endLine="127" length="1" offset="2973" startLine="127" starttimestamp="1645820509543" timestamp="179953382">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="1740" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:02 EST 2022" starttimestamp="1645820509543" timestamp="179953385" />
  <Command __id="1741" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:02 EST 2022" starttimestamp="1645820509543" timestamp="179953385" />
  <DocumentChange __id="1742" _type="Insert" date="Sun Feb 27 17:21:03 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10973" docExpressionCount="1097" docLength="11641" length="1" offset="2973" starttimestamp="1645820509543" timestamp="179953597">
    <text><![CDATA[K]]></text>
  </DocumentChange>
  <Command __id="1743" _type="InsertStringCommand" date="Sun Feb 27 17:21:03 EST 2022" starttimestamp="1645820509543" timestamp="179953599" timestamp2="179953599">
    <data><![CDATA[K]]></data>
  </Command>
  <Command __id="1744" _type="InsertStringCommand" date="Sun Feb 27 17:21:03 EST 2022" starttimestamp="1645820509543" timestamp="179953599" timestamp2="179953599">
    <data><![CDATA[K]]></data>
  </Command>
  <DocumentChange __id="1745" _type="Delete" date="Sun Feb 27 17:21:03 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10972" docExpressionCount="1097" docLength="11640" endLine="127" length="1" offset="2973" startLine="127" starttimestamp="1645820509543" timestamp="179953891">
    <text><![CDATA[K]]></text>
  </DocumentChange>
  <Command __id="1746" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:03 EST 2022" starttimestamp="1645820509543" timestamp="179953894" />
  <Command __id="1747" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:03 EST 2022" starttimestamp="1645820509543" timestamp="179953894" />
  <DocumentChange __id="1748" _type="Delete" date="Sun Feb 27 17:21:03 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10971" docExpressionCount="1097" docLength="11639" endLine="127" length="1" offset="2972" startLine="127" starttimestamp="1645820509543" timestamp="179954014">
    <text><![CDATA[K]]></text>
  </DocumentChange>
  <Command __id="1749" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:03 EST 2022" starttimestamp="1645820509543" timestamp="179954018" />
  <Command __id="1750" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:03 EST 2022" starttimestamp="1645820509543" timestamp="179954018" />
  <DocumentChange __id="1751" _type="Insert" date="Sun Feb 27 17:21:03 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10972" docExpressionCount="1097" docLength="11640" length="1" offset="2972" starttimestamp="1645820509543" timestamp="179954314">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="1752" _type="InsertStringCommand" date="Sun Feb 27 17:21:03 EST 2022" starttimestamp="1645820509543" timestamp="179954316" timestamp2="179954316">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="1753" _type="InsertStringCommand" date="Sun Feb 27 17:21:03 EST 2022" starttimestamp="1645820509543" timestamp="179954316" timestamp2="179954316">
    <data><![CDATA[k]]></data>
  </Command>
  <DocumentChange __id="1754" _type="Insert" date="Sun Feb 27 17:21:03 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10973" docExpressionCount="1097" docLength="11641" length="1" offset="2973" starttimestamp="1645820509543" timestamp="179954434">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1755" _type="InsertStringCommand" date="Sun Feb 27 17:21:03 EST 2022" starttimestamp="1645820509543" timestamp="179954435" timestamp2="179954435">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1756" _type="InsertStringCommand" date="Sun Feb 27 17:21:03 EST 2022" starttimestamp="1645820509543" timestamp="179954435" timestamp2="179954435">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1757" _type="Insert" date="Sun Feb 27 17:21:04 EST 2022" docASTNodeCount="1567" docActiveCodeLength="10974" docExpressionCount="1097" docLength="11642" length="1" offset="2974" starttimestamp="1645820509543" timestamp="179954525">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1758" _type="InsertStringCommand" date="Sun Feb 27 17:21:04 EST 2022" starttimestamp="1645820509543" timestamp="179954527" timestamp2="179954527">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1759" _type="InsertStringCommand" date="Sun Feb 27 17:21:04 EST 2022" starttimestamp="1645820509543" timestamp="179954527" timestamp2="179954527">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1761" _type="InsertStringCommand" date="Sun Feb 27 17:21:04 EST 2022" starttimestamp="1645820509543" timestamp="179954743" timestamp2="179954743">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1762" _type="InsertStringCommand" date="Sun Feb 27 17:21:04 EST 2022" starttimestamp="1645820509543" timestamp="179954743" timestamp2="179954743">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1763" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:21:04 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="179954745" />
  <Command __id="1764" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:21:06 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="179956670" />
  <Command __id="1766" _type="InsertStringCommand" date="Sun Feb 27 17:21:06 EST 2022" starttimestamp="1645820509543" timestamp="179956681" timestamp2="179956681">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1767" _type="InsertStringCommand" date="Sun Feb 27 17:21:06 EST 2022" starttimestamp="1645820509543" timestamp="179956681" timestamp2="179956681">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1769" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:07 EST 2022" starttimestamp="1645820509543" timestamp="179957637" />
  <Command __id="1770" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:07 EST 2022" starttimestamp="1645820509543" timestamp="179957637" />
  <Command __id="1772" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:07 EST 2022" starttimestamp="1645820509543" timestamp="179957798" />
  <Command __id="1773" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:07 EST 2022" starttimestamp="1645820509543" timestamp="179957798" />
  <Command __id="1775" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:07 EST 2022" starttimestamp="1645820509543" timestamp="179957948" />
  <Command __id="1776" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:07 EST 2022" starttimestamp="1645820509543" timestamp="179957949" />
  <Command __id="1778" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:07 EST 2022" starttimestamp="1645820509543" timestamp="179958092" />
  <Command __id="1779" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:07 EST 2022" starttimestamp="1645820509543" timestamp="179958092" />
  <Command __id="1781" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:07 EST 2022" starttimestamp="1645820509543" timestamp="179958237" />
  <Command __id="1782" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:07 EST 2022" starttimestamp="1645820509543" timestamp="179958238" />
  <Command __id="1784" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:07 EST 2022" starttimestamp="1645820509543" timestamp="179958365" />
  <Command __id="1785" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:07 EST 2022" starttimestamp="1645820509543" timestamp="179958365" />
  <Command __id="1787" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:08 EST 2022" starttimestamp="1645820509543" timestamp="179958509" />
  <Command __id="1788" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:08 EST 2022" starttimestamp="1645820509543" timestamp="179958509" />
  <Command __id="1790" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:08 EST 2022" starttimestamp="1645820509543" timestamp="179958934" />
  <Command __id="1791" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:08 EST 2022" starttimestamp="1645820509543" timestamp="179958934" />
  <Command __id="1793" _type="InsertStringCommand" date="Sun Feb 27 17:21:08 EST 2022" starttimestamp="1645820509543" timestamp="179959218" timestamp2="179959218">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="1794" _type="InsertStringCommand" date="Sun Feb 27 17:21:08 EST 2022" starttimestamp="1645820509543" timestamp="179959218" timestamp2="179959218">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="1796" _type="InsertStringCommand" date="Sun Feb 27 17:21:08 EST 2022" starttimestamp="1645820509543" timestamp="179959407" timestamp2="179959407">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1797" _type="InsertStringCommand" date="Sun Feb 27 17:21:08 EST 2022" starttimestamp="1645820509543" timestamp="179959408" timestamp2="179959408">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1799" _type="InsertStringCommand" date="Sun Feb 27 17:21:08 EST 2022" starttimestamp="1645820509543" timestamp="179959418" timestamp2="179959418">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1800" _type="InsertStringCommand" date="Sun Feb 27 17:21:08 EST 2022" starttimestamp="1645820509543" timestamp="179959418" timestamp2="179959418">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1802" _type="InsertStringCommand" date="Sun Feb 27 17:21:09 EST 2022" starttimestamp="1645820509543" timestamp="179959649" timestamp2="179959649">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1803" _type="InsertStringCommand" date="Sun Feb 27 17:21:09 EST 2022" starttimestamp="1645820509543" timestamp="179959649" timestamp2="179959649">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1805" _type="InsertStringCommand" date="Sun Feb 27 17:21:09 EST 2022" starttimestamp="1645820509543" timestamp="179960011" timestamp2="179960011">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1806" _type="InsertStringCommand" date="Sun Feb 27 17:21:09 EST 2022" starttimestamp="1645820509543" timestamp="179960011" timestamp2="179960011">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1808" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:09 EST 2022" starttimestamp="1645820509543" timestamp="179960241" />
  <Command __id="1809" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:09 EST 2022" starttimestamp="1645820509543" timestamp="179960241" />
  <Command __id="1811" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:09 EST 2022" starttimestamp="1645820509543" timestamp="179960367" />
  <Command __id="1812" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:21:09 EST 2022" starttimestamp="1645820509543" timestamp="179960367" />
  <Command __id="1814" _type="InsertStringCommand" date="Sun Feb 27 17:21:09 EST 2022" starttimestamp="1645820509543" timestamp="179960451" timestamp2="179960451">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1815" _type="InsertStringCommand" date="Sun Feb 27 17:21:09 EST 2022" starttimestamp="1645820509543" timestamp="179960451" timestamp2="179960451">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="1760" _type="Insert" date="Sun Feb 27 17:21:04 EST 2022" docASTNodeCount="1493" docActiveCodeLength="10975" docExpressionCount="1045" docLength="11643" length="1" offset="2975" starttimestamp="1645820509543" timestamp="179954741">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="1765" _type="Insert" date="Sun Feb 27 17:21:06 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10983" docExpressionCount="1099" docLength="11651" length="8" offset="2976" starttimestamp="1645820509543" timestamp="179956677">
    <text><![CDATA[spelling]]></text>
  </DocumentChange>
  <DocumentChange __id="1768" _type="Delete" date="Sun Feb 27 17:21:07 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10982" docExpressionCount="1099" docLength="11650" endLine="127" length="1" offset="2983" startLine="127" starttimestamp="1645820509543" timestamp="179957635">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="1771" _type="Delete" date="Sun Feb 27 17:21:07 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10981" docExpressionCount="1099" docLength="11649" endLine="127" length="1" offset="2982" startLine="127" starttimestamp="1645820509543" timestamp="179957794">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1774" _type="Delete" date="Sun Feb 27 17:21:07 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10980" docExpressionCount="1099" docLength="11648" endLine="127" length="1" offset="2981" startLine="127" starttimestamp="1645820509543" timestamp="179957942">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1777" _type="Delete" date="Sun Feb 27 17:21:07 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10979" docExpressionCount="1099" docLength="11647" endLine="127" length="1" offset="2980" startLine="127" starttimestamp="1645820509543" timestamp="179958086">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="1780" _type="Delete" date="Sun Feb 27 17:21:07 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10978" docExpressionCount="1099" docLength="11646" endLine="127" length="1" offset="2979" startLine="127" starttimestamp="1645820509543" timestamp="179958234">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="1783" _type="Delete" date="Sun Feb 27 17:21:07 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10977" docExpressionCount="1099" docLength="11645" endLine="127" length="1" offset="2978" startLine="127" starttimestamp="1645820509543" timestamp="179958363">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1786" _type="Delete" date="Sun Feb 27 17:21:08 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10976" docExpressionCount="1099" docLength="11644" endLine="127" length="1" offset="2977" startLine="127" starttimestamp="1645820509543" timestamp="179958506">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="1789" _type="Delete" date="Sun Feb 27 17:21:08 EST 2022" docASTNodeCount="1493" docActiveCodeLength="10975" docExpressionCount="1045" docLength="11643" endLine="127" length="1" offset="2976" startLine="127" starttimestamp="1645820509543" timestamp="179958932">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="1792" _type="Insert" date="Sun Feb 27 17:21:08 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10976" docExpressionCount="1099" docLength="11644" length="1" offset="2976" starttimestamp="1645820509543" timestamp="179959217">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="1795" _type="Insert" date="Sun Feb 27 17:21:08 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10977" docExpressionCount="1099" docLength="11645" length="1" offset="2977" starttimestamp="1645820509543" timestamp="179959406">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="1798" _type="Insert" date="Sun Feb 27 17:21:08 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10978" docExpressionCount="1099" docLength="11646" length="1" offset="2978" starttimestamp="1645820509543" timestamp="179959417">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1801" _type="Insert" date="Sun Feb 27 17:21:09 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10979" docExpressionCount="1099" docLength="11647" length="1" offset="2979" starttimestamp="1645820509543" timestamp="179959645">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="1804" _type="Insert" date="Sun Feb 27 17:21:09 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10980" docExpressionCount="1099" docLength="11648" length="1" offset="2980" starttimestamp="1645820509543" timestamp="179960010">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="1807" _type="Delete" date="Sun Feb 27 17:21:09 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10979" docExpressionCount="1099" docLength="11647" endLine="127" length="1" offset="2980" startLine="127" starttimestamp="1645820509543" timestamp="179960238">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="1810" _type="Delete" date="Sun Feb 27 17:21:09 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10978" docExpressionCount="1099" docLength="11646" endLine="127" length="1" offset="2979" startLine="127" starttimestamp="1645820509543" timestamp="179960362">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="1813" _type="Insert" date="Sun Feb 27 17:21:09 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10979" docExpressionCount="1099" docLength="11647" length="1" offset="2979" starttimestamp="1645820509543" timestamp="179960450">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="1820" _type="Insert" date="Sun Feb 27 17:21:13 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10980" docExpressionCount="1099" docLength="11648" length="1" offset="2981" starttimestamp="1645820509543" timestamp="179963746">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="1826" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:21:15 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="179966222">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1828" _type="RunCommand" date="Sun Feb 27 17:21:17 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179967553" type="Run" />
  <Command __id="1829" _type="RunCommand" date="Sun Feb 27 17:21:17 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179967553" type="Run" />
  <Command __id="1830" _type="RunCommand" date="Sun Feb 27 17:21:17 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179967683" type="Run" />
  <Command __id="1831" _type="RunCommand" date="Sun Feb 27 17:21:17 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="179967683" type="Run" />
  <Command __id="1832" _type="EHExceptionCommand" date="Sun Feb 27 17:21:17 EST 2022" starttimestamp="1645820509543" timestamp="179967733" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
in here, BINOP
Parse error: parsing statement, in subcase ID, current token is: =
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="1834" _type="MoveCaretCommand" caretOffset="7706" date="Sun Feb 27 17:21:35 EST 2022" docOffset="7857" starttimestamp="1645820509543" timestamp="179986425" />
  <Command __id="1836" _type="ShellCommand" date="Sun Feb 27 17:21:38 EST 2022" starttimestamp="1645820509543" timestamp="179988537" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1837" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:21:41 EST 2022" forward="false" matchWord="true" offset="7857" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="179991571" wrapSearch="false">
    <searchString><![CDATA[BINOP]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1838" _type="ShellCommand" date="Sun Feb 27 17:21:43 EST 2022" starttimestamp="1645820509543" timestamp="179993574" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1833" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:21:35 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7785" docExpressionCount="669" docLength="8515" projectName="pa1" starttimestamp="1645820509543" timestamp="179986370">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1839" _type="MoveCaretCommand" caretOffset="5587" date="Sun Feb 27 17:22:10 EST 2022" docOffset="5738" starttimestamp="1645820509543" timestamp="180021011" />
  <Command __id="1840" _type="MoveCaretCommand" caretOffset="5587" date="Sun Feb 27 17:22:10 EST 2022" docOffset="5738" starttimestamp="1645820509543" timestamp="180021011" />
  <Command __id="1841" _type="SelectTextCommand" caretOffset="5591" date="Sun Feb 27 17:22:10 EST 2022" end="5591" start="5586" starttimestamp="1645820509543" timestamp="180021170" />
  <Command __id="1842" _type="SelectTextCommand" caretOffset="5591" date="Sun Feb 27 17:22:10 EST 2022" end="5591" start="5586" starttimestamp="1645820509543" timestamp="180021170" />
  <DocumentChange __id="1843" _type="Replace" date="Sun Feb 27 17:22:15 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7781" docExpressionCount="669" docLength="8511" endLine="242" insertionLength="1" int_docASTNodeCount="1078" int_docActiveCodeLength="7780" int_docExpressionCount="668" int_docLength="8510" length="5" offset="5737" startLine="242" starttimestamp="1645820509543" timestamp="180026041">
    <deletedText><![CDATA[BINOP]]></deletedText>
    <insertedText><![CDATA[W]]></insertedText>
  </DocumentChange>
  <Command __id="1844" _type="InsertStringCommand" date="Sun Feb 27 17:22:15 EST 2022" starttimestamp="1645820509543" timestamp="180026050" timestamp2="180026050">
    <data><![CDATA[W]]></data>
  </Command>
  <Command __id="1845" _type="InsertStringCommand" date="Sun Feb 27 17:22:15 EST 2022" starttimestamp="1645820509543" timestamp="180026051" timestamp2="180026051">
    <data><![CDATA[W]]></data>
  </Command>
  <DocumentChange __id="1846" _type="Insert" date="Sun Feb 27 17:22:15 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7782" docExpressionCount="669" docLength="8512" length="1" offset="5738" starttimestamp="1645820509543" timestamp="180026054">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="1847" _type="InsertStringCommand" date="Sun Feb 27 17:22:15 EST 2022" starttimestamp="1645820509543" timestamp="180026059" timestamp2="180026059">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="1848" _type="InsertStringCommand" date="Sun Feb 27 17:22:15 EST 2022" starttimestamp="1645820509543" timestamp="180026059" timestamp2="180026059">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="1849" _type="Delete" date="Sun Feb 27 17:22:16 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7781" docExpressionCount="669" docLength="8511" endLine="242" length="1" offset="5738" startLine="242" starttimestamp="1645820509543" timestamp="180026610">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="1850" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:22:16 EST 2022" starttimestamp="1645820509543" timestamp="180026616" />
  <Command __id="1851" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:22:16 EST 2022" starttimestamp="1645820509543" timestamp="180026618" />
  <DocumentChange __id="1852" _type="Delete" date="Sun Feb 27 17:22:16 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7780" docExpressionCount="668" docLength="8510" endLine="242" length="1" offset="5737" startLine="242" starttimestamp="1645820509543" timestamp="180026762">
    <text><![CDATA[W]]></text>
  </DocumentChange>
  <Command __id="1853" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:22:16 EST 2022" starttimestamp="1645820509543" timestamp="180026764" />
  <Command __id="1854" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:22:16 EST 2022" starttimestamp="1645820509543" timestamp="180026764" />
  <DocumentChange __id="1855" _type="Insert" date="Sun Feb 27 17:22:16 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7781" docExpressionCount="669" docLength="8511" length="1" offset="5737" starttimestamp="1645820509543" timestamp="180026806">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="1856" _type="InsertStringCommand" date="Sun Feb 27 17:22:16 EST 2022" starttimestamp="1645820509543" timestamp="180026812" timestamp2="180026812">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="1857" _type="InsertStringCommand" date="Sun Feb 27 17:22:16 EST 2022" starttimestamp="1645820509543" timestamp="180026812" timestamp2="180026812">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="1858" _type="Insert" date="Sun Feb 27 17:22:17 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7782" docExpressionCount="669" docLength="8512" length="1" offset="5738" starttimestamp="1645820509543" timestamp="180027705">
    <text><![CDATA[Q]]></text>
  </DocumentChange>
  <Command __id="1859" _type="InsertStringCommand" date="Sun Feb 27 17:22:17 EST 2022" starttimestamp="1645820509543" timestamp="180027709" timestamp2="180027709">
    <data><![CDATA[Q]]></data>
  </Command>
  <Command __id="1860" _type="InsertStringCommand" date="Sun Feb 27 17:22:17 EST 2022" starttimestamp="1645820509543" timestamp="180027709" timestamp2="180027709">
    <data><![CDATA[Q]]></data>
  </Command>
  <DocumentChange __id="1861" _type="Insert" date="Sun Feb 27 17:22:17 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7783" docExpressionCount="669" docLength="8513" length="1" offset="5739" starttimestamp="1645820509543" timestamp="180027833">
    <text><![CDATA[U]]></text>
  </DocumentChange>
  <Command __id="1862" _type="InsertStringCommand" date="Sun Feb 27 17:22:17 EST 2022" starttimestamp="1645820509543" timestamp="180027842" timestamp2="180027842">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="1863" _type="InsertStringCommand" date="Sun Feb 27 17:22:17 EST 2022" starttimestamp="1645820509543" timestamp="180027842" timestamp2="180027842">
    <data><![CDATA[U]]></data>
  </Command>
  <DocumentChange __id="1864" _type="Insert" date="Sun Feb 27 17:22:17 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7784" docExpressionCount="669" docLength="8514" length="1" offset="5740" starttimestamp="1645820509543" timestamp="180027938">
    <text><![CDATA[A]]></text>
  </DocumentChange>
  <Command __id="1865" _type="InsertStringCommand" date="Sun Feb 27 17:22:17 EST 2022" starttimestamp="1645820509543" timestamp="180027949" timestamp2="180027949">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="1866" _type="InsertStringCommand" date="Sun Feb 27 17:22:17 EST 2022" starttimestamp="1645820509543" timestamp="180027949" timestamp2="180027949">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="1868" _type="InsertStringCommand" date="Sun Feb 27 17:22:17 EST 2022" starttimestamp="1645820509543" timestamp="180028035" timestamp2="180028035">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="1869" _type="InsertStringCommand" date="Sun Feb 27 17:22:17 EST 2022" starttimestamp="1645820509543" timestamp="180028035" timestamp2="180028035">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="1870" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:22:19 EST 2022" starttimestamp="1645820509543" timestamp="180029813" />
  <Command __id="1871" _type="MoveCaretCommand" caretOffset="5592" date="Sun Feb 27 17:22:19 EST 2022" docOffset="5743" starttimestamp="1645820509543" timestamp="180030178" />
  <Command __id="1872" _type="MoveCaretCommand" caretOffset="5592" date="Sun Feb 27 17:22:19 EST 2022" docOffset="5743" starttimestamp="1645820509543" timestamp="180030178" />
  <Command __id="1873" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:22:20 EST 2022" starttimestamp="1645820509543" timestamp="180030537" />
  <Command __id="1874" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:22:20 EST 2022" starttimestamp="1645820509543" timestamp="180030555" />
  <Command __id="1876" _type="MoveCaretCommand" caretOffset="3123" date="Sun Feb 27 17:22:20 EST 2022" docOffset="3201" starttimestamp="1645820509543" timestamp="180031212" />
  <Command __id="1877" _type="MoveCaretCommand" caretOffset="3123" date="Sun Feb 27 17:22:20 EST 2022" docOffset="3201" starttimestamp="1645820509543" timestamp="180031262" />
  <Command __id="1878" _type="MoveCaretCommand" caretOffset="3851" date="Sun Feb 27 17:22:28 EST 2022" docOffset="3929" starttimestamp="1645820509543" timestamp="180038626" />
  <Command __id="1879" _type="MoveCaretCommand" caretOffset="3851" date="Sun Feb 27 17:22:28 EST 2022" docOffset="3929" starttimestamp="1645820509543" timestamp="180038627" />
  <Command __id="1881" _type="ShellCommand" date="Sun Feb 27 17:22:36 EST 2022" starttimestamp="1645820509543" timestamp="180047039" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1882" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:22:40 EST 2022" forward="false" matchWord="true" offset="3929" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180050683" wrapSearch="false">
    <searchString><![CDATA[BINOP]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1883" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:22:42 EST 2022" forward="false" matchWord="true" offset="3929" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180052580" wrapSearch="false">
    <searchString><![CDATA[BINOP]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1884" _type="ShellCommand" date="Sun Feb 27 17:22:42 EST 2022" starttimestamp="1645820509543" timestamp="180053351" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1885" _type="MoveCaretCommand" caretOffset="3843" date="Sun Feb 27 17:22:42 EST 2022" docOffset="3921" starttimestamp="1645820509543" timestamp="180053397" />
  <Command __id="1886" _type="MoveCaretCommand" caretOffset="3843" date="Sun Feb 27 17:22:42 EST 2022" docOffset="3921" starttimestamp="1645820509543" timestamp="180053397" />
  <Command __id="1887" _type="ShellCommand" date="Sun Feb 27 17:22:43 EST 2022" starttimestamp="1645820509543" timestamp="180054426" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1888" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:22:44 EST 2022" forward="false" matchWord="true" offset="3921" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180054476" wrapSearch="false">
    <searchString><![CDATA[BINOP]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1889" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:22:44 EST 2022" forward="false" matchWord="true" offset="3921" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180055245" wrapSearch="false">
    <searchString><![CDATA[BINOP]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1890" _type="ShellCommand" date="Sun Feb 27 17:22:47 EST 2022" starttimestamp="1645820509543" timestamp="180057496" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1891" _type="MoveCaretCommand" caretOffset="3828" date="Sun Feb 27 17:22:47 EST 2022" docOffset="3906" starttimestamp="1645820509543" timestamp="180057786" />
  <Command __id="1892" _type="MoveCaretCommand" caretOffset="3828" date="Sun Feb 27 17:22:47 EST 2022" docOffset="3906" starttimestamp="1645820509543" timestamp="180057786" />
  <Command __id="1894" _type="ShellCommand" date="Sun Feb 27 17:22:49 EST 2022" starttimestamp="1645820509543" timestamp="180060305" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1895" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:22:55 EST 2022" forward="true" matchWord="true" offset="3906" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180065518" wrapSearch="false">
    <searchString><![CDATA[BINOP]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1896" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:23:17 EST 2022" forward="true" matchWord="true" offset="8466" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180087547" wrapSearch="false">
    <searchString><![CDATA[BINOP]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1897" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:23:19 EST 2022" forward="false" matchWord="true" offset="8466" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180089758" wrapSearch="false">
    <searchString><![CDATA[BINOP]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <DocumentChange __id="1867" _type="Insert" date="Sun Feb 27 17:22:17 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7785" docExpressionCount="669" docLength="8515" length="1" offset="5741" starttimestamp="1645820509543" timestamp="180028030">
    <text><![CDATA[L]]></text>
  </DocumentChange>
  <Command __id="1875" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:22:20 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10980" docExpressionCount="1099" docLength="11648" projectName="pa1" starttimestamp="1645820509543" timestamp="180031191">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			"), Diff(INSERT,"System.out.println("in here, " + currentToken.kind);"), Diff(EQUAL,"¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶			"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.EQUAL);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶			¶			// in Reference¶			case EQUAL:¶			"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶			¶			case LPAREN:¶			"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"if (currentToken.kind == TokenKind.RPAREN) {¶				"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"} else {¶				"), Diff(INSERT,"	"), Diff(EQUAL,"parseArgumentList();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RPAREN);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"}¶			"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶			¶			// both¶			case LBRACKET: ¶			"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"// in Type¶			"), Diff(INSERT,"	"), Diff(EQUAL,"if (currentToken.kind == TokenKind.RBRACKET) {¶				"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.ID);¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.EQUAL);¶				"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"} else {¶				"), Diff(INSERT,"	"), Diff(EQUAL,"// in Reference¶				"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RBRACKET);¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.EQUAL);¶				"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"}¶			"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶			¶			case DOT:¶			"), Diff(INSERT,"	"), Diff(EQUAL,"while (currentToken.kind == TokenKind.DOT) {¶				"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.ID);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"}¶			"), Diff(INSERT,"	"), Diff(EQUAL,"switch (currentToken.kind) {¶			"), Diff(INSERT,"		"), Diff(EQUAL,"case EQUAL:¶				"), Diff(INSERT,"	"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶				"), Diff(INSERT,"		"), Diff(EQUAL,"parseExpression();¶				"), Diff(INSERT,"		"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶				"), Diff(INSERT,"	"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶			"), Diff(DELETE,"¶"), Diff(INSERT,"		¶		"), Diff(EQUAL,"			case LBRACKET: ¶				"), Diff(INSERT,"	"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶				"), Diff(INSERT,"		"), Diff(EQUAL,"parseExpression();¶				"), Diff(INSERT,"		"), Diff(EQUAL,"accept(TokenKind.RBRACKET);¶				"), Diff(INSERT,"	"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.EQUAL);¶				"), Diff(INSERT,"		"), Diff(EQUAL,"parseExpression();¶				"), Diff(INSERT,"		"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶				"), Diff(INSERT,"	"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶			"), Diff(INSERT,"		"), Diff(EQUAL,"¶			"), Diff(INSERT,"		"), Diff(EQUAL,"case LPAREN:¶				"), Diff(INSERT,"	"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶				"), Diff(INSERT,"		"), Diff(EQUAL,"if (currentToken.kind == TokenKind.RPAREN) {¶					"), Diff(INSERT,"		"), Diff(EQUAL,"acceptIt();¶				"), Diff(INSERT,"	"), Diff(INSERT,"	"), Diff(EQUAL,"} else {¶					"), Diff(INSERT,"		"), Diff(EQUAL,"parseArgumentList();¶					"), Diff(INSERT,"		"), Diff(EQUAL,"accept(TokenKind.RPAREN);¶				"), Diff(INSERT,"	"), Diff(INSERT,"	"), Diff(EQUAL,"}¶				"), Diff(INSERT,"		"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶				"), Diff(INSERT,"		"), Diff(EQUAL,"break;¶			"), Diff(INSERT,"	"), Diff(INSERT,"	"), Diff(EQUAL,"¶			"), Diff(INSERT,"		"), Diff(EQUAL,"default:¶				"), Diff(INSERT,"		"), Diff(EQUAL,"parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
			System.out.println("in here, " + currentToken.kind);
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="1901" _type="Insert" date="Sun Feb 27 17:23:22 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10981" docExpressionCount="1099" docLength="11649" length="1" offset="8506" starttimestamp="1645820509543" timestamp="180092892">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="1904" _type="Insert" date="Sun Feb 27 17:23:22 EST 2022" docASTNodeCount="1546" docActiveCodeLength="10982" docExpressionCount="1080" docLength="11650" length="1" offset="8507" starttimestamp="1645820509543" timestamp="180093207">
    <text><![CDATA[|]]></text>
  </DocumentChange>
  <DocumentChange __id="1907" _type="Insert" date="Sun Feb 27 17:23:22 EST 2022" docASTNodeCount="1546" docActiveCodeLength="10983" docExpressionCount="1080" docLength="11651" length="1" offset="8508" starttimestamp="1645820509543" timestamp="180093349">
    <text><![CDATA[|]]></text>
  </DocumentChange>
  <Command __id="1898" _type="ShellCommand" date="Sun Feb 27 17:23:20 EST 2022" starttimestamp="1645820509543" timestamp="180091101" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1899" _type="MoveCaretCommand" caretOffset="8428" date="Sun Feb 27 17:23:21 EST 2022" docOffset="8506" starttimestamp="1645820509543" timestamp="180092099" />
  <Command __id="1900" _type="MoveCaretCommand" caretOffset="8428" date="Sun Feb 27 17:23:21 EST 2022" docOffset="8506" starttimestamp="1645820509543" timestamp="180092099" />
  <Command __id="1902" _type="InsertStringCommand" date="Sun Feb 27 17:23:22 EST 2022" starttimestamp="1645820509543" timestamp="180092898" timestamp2="180092898">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1903" _type="InsertStringCommand" date="Sun Feb 27 17:23:22 EST 2022" starttimestamp="1645820509543" timestamp="180092898" timestamp2="180092898">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1905" _type="InsertStringCommand" date="Sun Feb 27 17:23:22 EST 2022" starttimestamp="1645820509543" timestamp="180093213" timestamp2="180093213">
    <data><![CDATA[|]]></data>
  </Command>
  <Command __id="1906" _type="InsertStringCommand" date="Sun Feb 27 17:23:22 EST 2022" starttimestamp="1645820509543" timestamp="180093213" timestamp2="180093213">
    <data><![CDATA[|]]></data>
  </Command>
  <Command __id="1908" _type="InsertStringCommand" date="Sun Feb 27 17:23:22 EST 2022" starttimestamp="1645820509543" timestamp="180093389" timestamp2="180093389">
    <data><![CDATA[|]]></data>
  </Command>
  <Command __id="1909" _type="InsertStringCommand" date="Sun Feb 27 17:23:22 EST 2022" starttimestamp="1645820509543" timestamp="180093389" timestamp2="180093389">
    <data><![CDATA[|]]></data>
  </Command>
  <Command __id="1911" _type="InsertStringCommand" date="Sun Feb 27 17:23:23 EST 2022" starttimestamp="1645820509543" timestamp="180094438" timestamp2="180094438">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1912" _type="InsertStringCommand" date="Sun Feb 27 17:23:23 EST 2022" starttimestamp="1645820509543" timestamp="180094438" timestamp2="180094438">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1914" _type="InsertStringCommand" date="Sun Feb 27 17:23:24 EST 2022" starttimestamp="1645820509543" timestamp="180094837" timestamp2="180094837">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1915" _type="InsertStringCommand" date="Sun Feb 27 17:23:24 EST 2022" starttimestamp="1645820509543" timestamp="180094837" timestamp2="180094837">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1917" _type="InsertStringCommand" date="Sun Feb 27 17:23:24 EST 2022" starttimestamp="1645820509543" timestamp="180095218" timestamp2="180095218">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1918" _type="InsertStringCommand" date="Sun Feb 27 17:23:24 EST 2022" starttimestamp="1645820509543" timestamp="180095218" timestamp2="180095218">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1920" _type="InsertStringCommand" date="Sun Feb 27 17:23:25 EST 2022" starttimestamp="1645820509543" timestamp="180095557" timestamp2="180095557">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1921" _type="InsertStringCommand" date="Sun Feb 27 17:23:25 EST 2022" starttimestamp="1645820509543" timestamp="180095557" timestamp2="180095557">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1923" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:23:25 EST 2022" starttimestamp="1645820509543" timestamp="180095814" />
  <Command __id="1924" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:23:25 EST 2022" starttimestamp="1645820509543" timestamp="180095814" />
  <Command __id="1926" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:23:25 EST 2022" starttimestamp="1645820509543" timestamp="180095980" />
  <Command __id="1927" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:23:25 EST 2022" starttimestamp="1645820509543" timestamp="180095980" />
  <Command __id="1928" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:23:26 EST 2022" starttimestamp="1645820509543" timestamp="180096567" />
  <Command __id="1929" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:23:26 EST 2022" starttimestamp="1645820509543" timestamp="180096567" />
  <Command __id="1930" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:23:26 EST 2022" starttimestamp="1645820509543" timestamp="180096740" />
  <Command __id="1931" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:23:26 EST 2022" starttimestamp="1645820509543" timestamp="180096740" />
  <Command __id="1932" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:23:26 EST 2022" starttimestamp="1645820509543" timestamp="180096894" />
  <Command __id="1933" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:23:26 EST 2022" starttimestamp="1645820509543" timestamp="180096895" />
  <Command __id="1934" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:23:26 EST 2022" starttimestamp="1645820509543" timestamp="180097052" />
  <Command __id="1935" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:23:26 EST 2022" starttimestamp="1645820509543" timestamp="180097052" />
  <Command __id="1937" _type="InsertStringCommand" date="Sun Feb 27 17:23:26 EST 2022" starttimestamp="1645820509543" timestamp="180097344" timestamp2="180097344">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1938" _type="InsertStringCommand" date="Sun Feb 27 17:23:26 EST 2022" starttimestamp="1645820509543" timestamp="180097344" timestamp2="180097344">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1939" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Sun Feb 27 17:23:27 EST 2022" starttimestamp="1645820509543" timestamp="180098122" />
  <Command __id="1940" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Sun Feb 27 17:23:27 EST 2022" starttimestamp="1645820509543" timestamp="180098122" />
  <Command __id="1941" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:23:27 EST 2022" starttimestamp="1645820509543" timestamp="180098252" />
  <Command __id="1942" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:23:27 EST 2022" starttimestamp="1645820509543" timestamp="180098252" />
  <Command __id="1943" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:23:27 EST 2022" starttimestamp="1645820509543" timestamp="180098421" />
  <Command __id="1944" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:23:27 EST 2022" starttimestamp="1645820509543" timestamp="180098422" />
  <Command __id="1945" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 17:23:28 EST 2022" starttimestamp="1645820509543" timestamp="180098557" />
  <Command __id="1946" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 17:23:28 EST 2022" starttimestamp="1645820509543" timestamp="180098557" />
  <Command __id="1947" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:23:28 EST 2022" starttimestamp="1645820509543" timestamp="180098710" />
  <Command __id="1948" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:23:28 EST 2022" starttimestamp="1645820509543" timestamp="180098710" />
  <Command __id="1949" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:23:28 EST 2022" starttimestamp="1645820509543" timestamp="180098825" />
  <Command __id="1950" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:23:28 EST 2022" starttimestamp="1645820509543" timestamp="180098825" />
  <Command __id="1951" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:23:28 EST 2022" starttimestamp="1645820509543" timestamp="180099004" />
  <Command __id="1952" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:23:28 EST 2022" starttimestamp="1645820509543" timestamp="180099004" />
  <Command __id="1953" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:23:28 EST 2022" starttimestamp="1645820509543" timestamp="180099268" />
  <Command __id="1954" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:23:28 EST 2022" starttimestamp="1645820509543" timestamp="180099268" />
  <Command __id="1956" _type="InsertStringCommand" date="Sun Feb 27 17:23:29 EST 2022" starttimestamp="1645820509543" timestamp="180099862" timestamp2="180099862">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1957" _type="InsertStringCommand" date="Sun Feb 27 17:23:29 EST 2022" starttimestamp="1645820509543" timestamp="180099862" timestamp2="180099862">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1959" _type="InsertStringCommand" date="Sun Feb 27 17:23:29 EST 2022" starttimestamp="1645820509543" timestamp="180099958" timestamp2="180099958">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1960" _type="InsertStringCommand" date="Sun Feb 27 17:23:29 EST 2022" starttimestamp="1645820509543" timestamp="180099959" timestamp2="180099959">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1962" _type="InsertStringCommand" date="Sun Feb 27 17:23:29 EST 2022" starttimestamp="1645820509543" timestamp="180100094" timestamp2="180100094">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1963" _type="InsertStringCommand" date="Sun Feb 27 17:23:29 EST 2022" starttimestamp="1645820509543" timestamp="180100094" timestamp2="180100094">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1965" _type="InsertStringCommand" date="Sun Feb 27 17:23:29 EST 2022" starttimestamp="1645820509543" timestamp="180100190" timestamp2="180100190">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1966" _type="InsertStringCommand" date="Sun Feb 27 17:23:29 EST 2022" starttimestamp="1645820509543" timestamp="180100190" timestamp2="180100190">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1968" _type="InsertStringCommand" date="Sun Feb 27 17:23:29 EST 2022" starttimestamp="1645820509543" timestamp="180100294" timestamp2="180100294">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1969" _type="InsertStringCommand" date="Sun Feb 27 17:23:29 EST 2022" starttimestamp="1645820509543" timestamp="180100294" timestamp2="180100294">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1971" _type="InsertStringCommand" date="Sun Feb 27 17:23:29 EST 2022" starttimestamp="1645820509543" timestamp="180100399" timestamp2="180100399">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1972" _type="InsertStringCommand" date="Sun Feb 27 17:23:29 EST 2022" starttimestamp="1645820509543" timestamp="180100399" timestamp2="180100399">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1974" _type="InsertStringCommand" date="Sun Feb 27 17:23:30 EST 2022" starttimestamp="1645820509543" timestamp="180100851" timestamp2="180100851">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="1975" _type="InsertStringCommand" date="Sun Feb 27 17:23:30 EST 2022" starttimestamp="1645820509543" timestamp="180100852" timestamp2="180100852">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="1977" _type="InsertStringCommand" date="Sun Feb 27 17:23:30 EST 2022" starttimestamp="1645820509543" timestamp="180100927" timestamp2="180100927">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1978" _type="InsertStringCommand" date="Sun Feb 27 17:23:30 EST 2022" starttimestamp="1645820509543" timestamp="180100927" timestamp2="180100927">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1980" _type="InsertStringCommand" date="Sun Feb 27 17:23:30 EST 2022" starttimestamp="1645820509543" timestamp="180101083" timestamp2="180101083">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="1981" _type="InsertStringCommand" date="Sun Feb 27 17:23:30 EST 2022" starttimestamp="1645820509543" timestamp="180101084" timestamp2="180101084">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="1983" _type="InsertStringCommand" date="Sun Feb 27 17:23:30 EST 2022" starttimestamp="1645820509543" timestamp="180101146" timestamp2="180101146">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1984" _type="InsertStringCommand" date="Sun Feb 27 17:23:30 EST 2022" starttimestamp="1645820509543" timestamp="180101146" timestamp2="180101146">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1986" _type="InsertStringCommand" date="Sun Feb 27 17:23:30 EST 2022" starttimestamp="1645820509543" timestamp="180101264" timestamp2="180101264">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1987" _type="InsertStringCommand" date="Sun Feb 27 17:23:30 EST 2022" starttimestamp="1645820509543" timestamp="180101264" timestamp2="180101264">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1989" _type="InsertStringCommand" date="Sun Feb 27 17:23:31 EST 2022" starttimestamp="1645820509543" timestamp="180101462" timestamp2="180101462">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="1990" _type="InsertStringCommand" date="Sun Feb 27 17:23:31 EST 2022" starttimestamp="1645820509543" timestamp="180101462" timestamp2="180101462">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="1992" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:23:31 EST 2022" starttimestamp="1645820509543" timestamp="180101843" />
  <DocumentChange __id="1910" _type="Insert" date="Sun Feb 27 17:23:23 EST 2022" docASTNodeCount="1546" docActiveCodeLength="10984" docExpressionCount="1080" docLength="11652" length="1" offset="8509" starttimestamp="1645820509543" timestamp="180094434">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="1913" _type="Insert" date="Sun Feb 27 17:23:24 EST 2022" docASTNodeCount="1571" docActiveCodeLength="10985" docExpressionCount="1101" docLength="11653" length="1" offset="8510" starttimestamp="1645820509543" timestamp="180094834">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="1916" _type="Insert" date="Sun Feb 27 17:23:24 EST 2022" docASTNodeCount="1571" docActiveCodeLength="10986" docExpressionCount="1101" docLength="11654" length="1" offset="8511" starttimestamp="1645820509543" timestamp="180095214">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="1919" _type="Insert" date="Sun Feb 27 17:23:25 EST 2022" docASTNodeCount="1571" docActiveCodeLength="10987" docExpressionCount="1101" docLength="11655" length="1" offset="8512" starttimestamp="1645820509543" timestamp="180095553">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1922" _type="Delete" date="Sun Feb 27 17:23:25 EST 2022" docASTNodeCount="1571" docActiveCodeLength="10986" docExpressionCount="1101" docLength="11654" endLine="381" length="1" offset="8512" startLine="381" starttimestamp="1645820509543" timestamp="180095810">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1925" _type="Delete" date="Sun Feb 27 17:23:25 EST 2022" docASTNodeCount="1571" docActiveCodeLength="10985" docExpressionCount="1101" docLength="11653" endLine="381" length="1" offset="8511" startLine="381" starttimestamp="1645820509543" timestamp="180095978">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="1936" _type="Insert" date="Sun Feb 27 17:23:26 EST 2022" docASTNodeCount="1571" docActiveCodeLength="10991" docExpressionCount="1101" docLength="11659" length="6" offset="8507" starttimestamp="1645820509543" timestamp="180097335">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="1955" _type="Insert" date="Sun Feb 27 17:23:29 EST 2022" docASTNodeCount="1571" docActiveCodeLength="10992" docExpressionCount="1101" docLength="11660" length="1" offset="8517" starttimestamp="1645820509543" timestamp="180099857">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="1958" _type="Insert" date="Sun Feb 27 17:23:29 EST 2022" docASTNodeCount="1571" docActiveCodeLength="10993" docExpressionCount="1101" docLength="11661" length="1" offset="8518" starttimestamp="1645820509543" timestamp="180099947">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1961" _type="Insert" date="Sun Feb 27 17:23:29 EST 2022" docASTNodeCount="1571" docActiveCodeLength="10994" docExpressionCount="1101" docLength="11662" length="1" offset="8519" starttimestamp="1645820509543" timestamp="180100082">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1964" _type="Insert" date="Sun Feb 27 17:23:29 EST 2022" docASTNodeCount="1571" docActiveCodeLength="10995" docExpressionCount="1101" docLength="11663" length="1" offset="8520" starttimestamp="1645820509543" timestamp="180100185">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1967" _type="Insert" date="Sun Feb 27 17:23:29 EST 2022" docASTNodeCount="1571" docActiveCodeLength="10996" docExpressionCount="1101" docLength="11664" length="1" offset="8521" starttimestamp="1645820509543" timestamp="180100289">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1970" _type="Insert" date="Sun Feb 27 17:23:29 EST 2022" docASTNodeCount="1571" docActiveCodeLength="10997" docExpressionCount="1101" docLength="11665" length="1" offset="8522" starttimestamp="1645820509543" timestamp="180100387">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="1973" _type="Insert" date="Sun Feb 27 17:23:30 EST 2022" docASTNodeCount="1571" docActiveCodeLength="10998" docExpressionCount="1101" docLength="11666" length="1" offset="8523" starttimestamp="1645820509543" timestamp="180100847">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <DocumentChange __id="1976" _type="Insert" date="Sun Feb 27 17:23:30 EST 2022" docASTNodeCount="1571" docActiveCodeLength="10999" docExpressionCount="1101" docLength="11667" length="1" offset="8524" starttimestamp="1645820509543" timestamp="180100919">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="1979" _type="Insert" date="Sun Feb 27 17:23:30 EST 2022" docASTNodeCount="1571" docActiveCodeLength="11000" docExpressionCount="1101" docLength="11668" length="1" offset="8525" starttimestamp="1645820509543" timestamp="180101078">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="1982" _type="Insert" date="Sun Feb 27 17:23:30 EST 2022" docASTNodeCount="1571" docActiveCodeLength="11001" docExpressionCount="1101" docLength="11669" length="1" offset="8526" starttimestamp="1645820509543" timestamp="180101141">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1985" _type="Insert" date="Sun Feb 27 17:23:30 EST 2022" docASTNodeCount="1571" docActiveCodeLength="11002" docExpressionCount="1101" docLength="11670" length="1" offset="8527" starttimestamp="1645820509543" timestamp="180101252">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="1988" _type="Insert" date="Sun Feb 27 17:23:31 EST 2022" docASTNodeCount="1571" docActiveCodeLength="11003" docExpressionCount="1101" docLength="11671" length="1" offset="8528" starttimestamp="1645820509543" timestamp="180101457">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="1991" _type="Delete" date="Sun Feb 27 17:23:31 EST 2022" docASTNodeCount="1571" docActiveCodeLength="11002" docExpressionCount="1101" docLength="11670" endLine="382" length="1" offset="8528" startLine="382" starttimestamp="1645820509543" timestamp="180101841">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="1994" _type="Insert" date="Sun Feb 27 17:23:31 EST 2022" docASTNodeCount="1573" docActiveCodeLength="11003" docExpressionCount="1102" docLength="11671" length="1" offset="8528" starttimestamp="1645820509543" timestamp="180102022">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="1998" _type="Insert" date="Sun Feb 27 17:23:31 EST 2022" docASTNodeCount="1573" docActiveCodeLength="11004" docExpressionCount="1103" docLength="11672" length="1" offset="8529" starttimestamp="1645820509543" timestamp="180102231">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="2000" _type="Replace" date="Sun Feb 27 17:23:32 EST 2022" docASTNodeCount="1573" docActiveCodeLength="11007" docExpressionCount="1103" docLength="11675" endLine="382" insertionLength="4" int_docASTNodeCount="1573" int_docActiveCodeLength="11003" int_docExpressionCount="1102" int_docLength="11671" length="1" offset="8529" startLine="382" starttimestamp="1645820509543" timestamp="180102724">
    <deletedText><![CDATA[k]]></deletedText>
    <insertedText><![CDATA[kind]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2003" _type="Insert" date="Sun Feb 27 17:23:32 EST 2022" docASTNodeCount="1573" docActiveCodeLength="11008" docExpressionCount="1103" docLength="11676" length="1" offset="8533" starttimestamp="1645820509543" timestamp="180102899">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1993" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:23:31 EST 2022" starttimestamp="1645820509543" timestamp="180101843" />
  <Command __id="1995" _type="InsertStringCommand" date="Sun Feb 27 17:23:31 EST 2022" starttimestamp="1645820509543" timestamp="180102027" timestamp2="180102027">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1996" _type="InsertStringCommand" date="Sun Feb 27 17:23:31 EST 2022" starttimestamp="1645820509543" timestamp="180102027" timestamp2="180102027">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1997" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:23:31 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="180102030" />
  <Command __id="1999" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:23:32 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="180102719" />
  <Command __id="2001" _type="InsertStringCommand" date="Sun Feb 27 17:23:32 EST 2022" starttimestamp="1645820509543" timestamp="180102731" timestamp2="180102731">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2002" _type="InsertStringCommand" date="Sun Feb 27 17:23:32 EST 2022" starttimestamp="1645820509543" timestamp="180102731" timestamp2="180102731">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2004" _type="InsertStringCommand" date="Sun Feb 27 17:23:32 EST 2022" starttimestamp="1645820509543" timestamp="180102908" timestamp2="180102908">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2005" _type="InsertStringCommand" date="Sun Feb 27 17:23:32 EST 2022" starttimestamp="1645820509543" timestamp="180102909" timestamp2="180102909">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2007" _type="InsertStringCommand" date="Sun Feb 27 17:23:32 EST 2022" starttimestamp="1645820509543" timestamp="180103014" timestamp2="180103014">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2008" _type="InsertStringCommand" date="Sun Feb 27 17:23:32 EST 2022" starttimestamp="1645820509543" timestamp="180103014" timestamp2="180103014">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2010" _type="InsertStringCommand" date="Sun Feb 27 17:23:32 EST 2022" starttimestamp="1645820509543" timestamp="180103165" timestamp2="180103165">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2011" _type="InsertStringCommand" date="Sun Feb 27 17:23:32 EST 2022" starttimestamp="1645820509543" timestamp="180103165" timestamp2="180103165">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2013" _type="InsertStringCommand" date="Sun Feb 27 17:23:32 EST 2022" starttimestamp="1645820509543" timestamp="180103327" timestamp2="180103327">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2014" _type="InsertStringCommand" date="Sun Feb 27 17:23:32 EST 2022" starttimestamp="1645820509543" timestamp="180103327" timestamp2="180103327">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2016" _type="InsertStringCommand" date="Sun Feb 27 17:23:33 EST 2022" starttimestamp="1645820509543" timestamp="180104123" timestamp2="180104123">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2017" _type="InsertStringCommand" date="Sun Feb 27 17:23:33 EST 2022" starttimestamp="1645820509543" timestamp="180104123" timestamp2="180104123">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2019" _type="InsertStringCommand" date="Sun Feb 27 17:23:33 EST 2022" starttimestamp="1645820509543" timestamp="180104265" timestamp2="180104265">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2020" _type="InsertStringCommand" date="Sun Feb 27 17:23:33 EST 2022" starttimestamp="1645820509543" timestamp="180104266" timestamp2="180104266">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2022" _type="InsertStringCommand" date="Sun Feb 27 17:23:33 EST 2022" starttimestamp="1645820509543" timestamp="180104425" timestamp2="180104425">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2023" _type="InsertStringCommand" date="Sun Feb 27 17:23:33 EST 2022" starttimestamp="1645820509543" timestamp="180104425" timestamp2="180104425">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2025" _type="InsertStringCommand" date="Sun Feb 27 17:23:34 EST 2022" starttimestamp="1645820509543" timestamp="180104473" timestamp2="180104473">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2026" _type="InsertStringCommand" date="Sun Feb 27 17:23:34 EST 2022" starttimestamp="1645820509543" timestamp="180104473" timestamp2="180104473">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2028" _type="InsertStringCommand" date="Sun Feb 27 17:23:34 EST 2022" starttimestamp="1645820509543" timestamp="180104577" timestamp2="180104577">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2029" _type="InsertStringCommand" date="Sun Feb 27 17:23:34 EST 2022" starttimestamp="1645820509543" timestamp="180104578" timestamp2="180104578">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2031" _type="InsertStringCommand" date="Sun Feb 27 17:23:34 EST 2022" starttimestamp="1645820509543" timestamp="180105359" timestamp2="180105359">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2032" _type="InsertStringCommand" date="Sun Feb 27 17:23:34 EST 2022" starttimestamp="1645820509543" timestamp="180105359" timestamp2="180105359">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2034" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:23:35 EST 2022" starttimestamp="1645820509543" timestamp="180105916" />
  <Command __id="2035" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:23:35 EST 2022" starttimestamp="1645820509543" timestamp="180105916" />
  <Command __id="2037" _type="InsertStringCommand" date="Sun Feb 27 17:23:35 EST 2022" starttimestamp="1645820509543" timestamp="180106137" timestamp2="180106137">
    <data><![CDATA[K]]></data>
  </Command>
  <Command __id="2038" _type="InsertStringCommand" date="Sun Feb 27 17:23:35 EST 2022" starttimestamp="1645820509543" timestamp="180106137" timestamp2="180106137">
    <data><![CDATA[K]]></data>
  </Command>
  <Command __id="2040" _type="InsertStringCommand" date="Sun Feb 27 17:23:36 EST 2022" starttimestamp="1645820509543" timestamp="180106703" timestamp2="180106703">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2041" _type="InsertStringCommand" date="Sun Feb 27 17:23:36 EST 2022" starttimestamp="1645820509543" timestamp="180106703" timestamp2="180106703">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2043" _type="InsertStringCommand" date="Sun Feb 27 17:23:36 EST 2022" starttimestamp="1645820509543" timestamp="180106830" timestamp2="180106830">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2044" _type="InsertStringCommand" date="Sun Feb 27 17:23:36 EST 2022" starttimestamp="1645820509543" timestamp="180106830" timestamp2="180106830">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2046" _type="InsertStringCommand" date="Sun Feb 27 17:23:36 EST 2022" starttimestamp="1645820509543" timestamp="180106938" timestamp2="180106938">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2047" _type="InsertStringCommand" date="Sun Feb 27 17:23:36 EST 2022" starttimestamp="1645820509543" timestamp="180106938" timestamp2="180106938">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2049" _type="InsertStringCommand" date="Sun Feb 27 17:23:36 EST 2022" starttimestamp="1645820509543" timestamp="180107140" timestamp2="180107140">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2050" _type="InsertStringCommand" date="Sun Feb 27 17:23:36 EST 2022" starttimestamp="1645820509543" timestamp="180107140" timestamp2="180107140">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2051" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:23:36 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="180107144" />
  <Command __id="2054" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:23:38 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="180109246" />
  <Command __id="2056" _type="InsertStringCommand" date="Sun Feb 27 17:23:38 EST 2022" starttimestamp="1645820509543" timestamp="180109259" timestamp2="180109259">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2057" _type="InsertStringCommand" date="Sun Feb 27 17:23:38 EST 2022" starttimestamp="1645820509543" timestamp="180109259" timestamp2="180109259">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2058" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:23:40 EST 2022" starttimestamp="1645820509543" timestamp="180111088" />
  <Command __id="2059" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:23:40 EST 2022" starttimestamp="1645820509543" timestamp="180111158" />
  <Command __id="2060" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:23:40 EST 2022" starttimestamp="1645820509543" timestamp="180111180" />
  <Command __id="2061" _type="MoveCaretCommand" caretOffset="8644" date="Sun Feb 27 17:23:41 EST 2022" docOffset="8722" starttimestamp="1645820509543" timestamp="180111531" />
  <Command __id="2062" _type="MoveCaretCommand" caretOffset="8644" date="Sun Feb 27 17:23:41 EST 2022" docOffset="8722" starttimestamp="1645820509543" timestamp="180111531" />
  <Command __id="2063" _type="MoveCaretCommand" caretOffset="8516" date="Sun Feb 27 17:23:41 EST 2022" docOffset="8594" starttimestamp="1645820509543" timestamp="180112002" />
  <Command __id="2064" _type="MoveCaretCommand" caretOffset="8516" date="Sun Feb 27 17:23:41 EST 2022" docOffset="8594" starttimestamp="1645820509543" timestamp="180112002" />
  <Command __id="2065" _type="MoveCaretCommand" caretOffset="9256" date="Sun Feb 27 17:25:03 EST 2022" docOffset="9334" starttimestamp="1645820509543" timestamp="180194410" />
  <Command __id="2066" _type="MoveCaretCommand" caretOffset="9256" date="Sun Feb 27 17:25:03 EST 2022" docOffset="9334" starttimestamp="1645820509543" timestamp="180194411" />
  <Command __id="2068" _type="ShellCommand" date="Sun Feb 27 17:25:04 EST 2022" starttimestamp="1645820509543" timestamp="180195404" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2069" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:25:07 EST 2022" forward="false" matchWord="true" offset="9334" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180197704" wrapSearch="false">
    <searchString><![CDATA[binop]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2070" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:25:08 EST 2022" forward="false" matchWord="true" offset="9334" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180198885" wrapSearch="false">
    <searchString><![CDATA[binop]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2071" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:25:09 EST 2022" forward="true" matchWord="true" offset="9334" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180200212" wrapSearch="false">
    <searchString><![CDATA[binop]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2072" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:25:10 EST 2022" forward="true" matchWord="true" offset="9334" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180200699" wrapSearch="false">
    <searchString><![CDATA[binop]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2073" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:25:10 EST 2022" forward="true" matchWord="true" offset="9334" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180201164" wrapSearch="false">
    <searchString><![CDATA[binop]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2074" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:25:14 EST 2022" forward="true" matchWord="true" offset="9334" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180205100" wrapSearch="false">
    <searchString><![CDATA[BINOP]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2075" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:25:15 EST 2022" forward="true" matchWord="true" offset="9334" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180205708" wrapSearch="false">
    <searchString><![CDATA[BINOP]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2076" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:25:16 EST 2022" forward="false" matchWord="true" offset="9334" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180206850" wrapSearch="false">
    <searchString><![CDATA[BINOP]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2077" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:25:17 EST 2022" forward="false" matchWord="true" offset="8466" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180207540" wrapSearch="false">
    <searchString><![CDATA[BINOP]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2078" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:25:17 EST 2022" forward="false" matchWord="true" offset="8466" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180207724" wrapSearch="false">
    <searchString><![CDATA[BINOP]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <DocumentChange __id="2006" _type="Insert" date="Sun Feb 27 17:23:32 EST 2022" docASTNodeCount="1573" docActiveCodeLength="11009" docExpressionCount="1103" docLength="11677" length="1" offset="8534" starttimestamp="1645820509543" timestamp="180103007">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="2009" _type="Insert" date="Sun Feb 27 17:23:32 EST 2022" docASTNodeCount="1546" docActiveCodeLength="11010" docExpressionCount="1080" docLength="11678" length="1" offset="8535" starttimestamp="1645820509543" timestamp="180103159">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="2012" _type="Insert" date="Sun Feb 27 17:23:32 EST 2022" docASTNodeCount="1546" docActiveCodeLength="11011" docExpressionCount="1080" docLength="11679" length="1" offset="8536" starttimestamp="1645820509543" timestamp="180103319">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2015" _type="Insert" date="Sun Feb 27 17:23:33 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11012" docExpressionCount="1105" docLength="11680" length="1" offset="8537" starttimestamp="1645820509543" timestamp="180104118">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <DocumentChange __id="2018" _type="Insert" date="Sun Feb 27 17:23:33 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11013" docExpressionCount="1105" docLength="11681" length="1" offset="8538" starttimestamp="1645820509543" timestamp="180104261">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2021" _type="Insert" date="Sun Feb 27 17:23:33 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11014" docExpressionCount="1105" docLength="11682" length="1" offset="8539" starttimestamp="1645820509543" timestamp="180104419">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="2024" _type="Insert" date="Sun Feb 27 17:23:34 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11015" docExpressionCount="1105" docLength="11683" length="1" offset="8540" starttimestamp="1645820509543" timestamp="180104469">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2027" _type="Insert" date="Sun Feb 27 17:23:34 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11016" docExpressionCount="1105" docLength="11684" length="1" offset="8541" starttimestamp="1645820509543" timestamp="180104573">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2030" _type="Insert" date="Sun Feb 27 17:23:34 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11017" docExpressionCount="1105" docLength="11685" length="1" offset="8542" starttimestamp="1645820509543" timestamp="180105353">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="2033" _type="Delete" date="Sun Feb 27 17:23:35 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11016" docExpressionCount="1105" docLength="11684" endLine="382" length="1" offset="8542" startLine="382" starttimestamp="1645820509543" timestamp="180105913">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="2036" _type="Insert" date="Sun Feb 27 17:23:35 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11017" docExpressionCount="1105" docLength="11685" length="1" offset="8542" starttimestamp="1645820509543" timestamp="180106132">
    <text><![CDATA[K]]></text>
  </DocumentChange>
  <DocumentChange __id="2039" _type="Insert" date="Sun Feb 27 17:23:36 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11018" docExpressionCount="1105" docLength="11686" length="1" offset="8543" starttimestamp="1645820509543" timestamp="180106698">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2042" _type="Insert" date="Sun Feb 27 17:23:36 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11019" docExpressionCount="1105" docLength="11687" length="1" offset="8544" starttimestamp="1645820509543" timestamp="180106818">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2045" _type="Insert" date="Sun Feb 27 17:23:36 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11020" docExpressionCount="1105" docLength="11688" length="1" offset="8545" starttimestamp="1645820509543" timestamp="180106934">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2048" _type="Insert" date="Sun Feb 27 17:23:36 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11021" docExpressionCount="1106" docLength="11689" length="1" offset="8546" starttimestamp="1645820509543" timestamp="180107135">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="2052" _type="Insert" date="Sun Feb 27 17:23:37 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11022" docExpressionCount="1107" docLength="11690" length="1" offset="8547" starttimestamp="1645820509543" timestamp="180108112">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2053" _type="Insert" date="Sun Feb 27 17:23:38 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11023" docExpressionCount="1107" docLength="11691" length="1" offset="8548" starttimestamp="1645820509543" timestamp="180108813">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <DocumentChange __id="2055" _type="Replace" date="Sun Feb 27 17:23:38 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11026" docExpressionCount="1107" docLength="11694" endLine="382" insertionLength="5" int_docASTNodeCount="1577" int_docActiveCodeLength="11021" int_docExpressionCount="1106" int_docLength="11689" length="2" offset="8547" startLine="382" starttimestamp="1645820509543" timestamp="180109252">
    <deletedText><![CDATA[eq]]></deletedText>
    <insertedText><![CDATA[EQUAL]]></insertedText>
  </DocumentChange>
  <Command __id="2079" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:25:18 EST 2022" forward="false" matchWord="true" offset="8466" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180209388" wrapSearch="false">
    <searchString><![CDATA[BINOP]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2080" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:25:19 EST 2022" forward="false" matchWord="true" offset="8466" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180209533" wrapSearch="false">
    <searchString><![CDATA[BINOP]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2081" _type="ShellCommand" date="Sun Feb 27 17:25:19 EST 2022" starttimestamp="1645820509543" timestamp="180210216" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2082" _type="MoveCaretCommand" caretOffset="8644" date="Sun Feb 27 17:25:20 EST 2022" docOffset="8722" starttimestamp="1645820509543" timestamp="180210570" />
  <Command __id="2083" _type="MoveCaretCommand" caretOffset="8644" date="Sun Feb 27 17:25:20 EST 2022" docOffset="8722" starttimestamp="1645820509543" timestamp="180210570" />
  <Command __id="2084" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:25:34 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="180224545">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2085" _type="MoveCaretCommand" caretOffset="219" date="Sun Feb 27 17:25:34 EST 2022" docOffset="219" starttimestamp="1645820509543" timestamp="180224641" />
  <Command __id="2086" _type="RunCommand" date="Sun Feb 27 17:25:34 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180225357" type="Run" />
  <Command __id="2087" _type="RunCommand" date="Sun Feb 27 17:25:34 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180225357" type="Run" />
  <Command __id="2088" _type="RunCommand" date="Sun Feb 27 17:25:35 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180225482" type="Run" />
  <Command __id="2089" _type="RunCommand" date="Sun Feb 27 17:25:35 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180225482" type="Run" />
  <Command __id="2090" _type="EHExceptionCommand" date="Sun Feb 27 17:25:35 EST 2022" starttimestamp="1645820509543" timestamp="180225537" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
in here, BINOP
Parse error: parsing statement, in subcase ID, current token is: =
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="2092" _type="MoveCaretCommand" caretOffset="5592" date="Sun Feb 27 17:25:46 EST 2022" docOffset="5743" starttimestamp="1645820509543" timestamp="180236855" />
  <Command __id="2091" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:25:46 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7785" docExpressionCount="669" docLength="8515" projectName="pa1" starttimestamp="1645820509543" timestamp="180236769">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind."), Diff(DELETE,"BINOP"), Diff(INSERT,"EQUAL"), Diff(EQUAL,";¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import java.io.IOException;
import java.io.InputStream;

import miniJava.ErrorReporter;
import miniJava.SyntacticAnalyzer.Token;
import miniJava.SyntacticAnalyzer.TokenKind;

public class Scanner {
	private boolean isComment;
	
//	comment state = 0 not comment
//			= 1 show /
//			= 2 show second /
//			= 12 show first *
//			= 13 show second *
//			= 3 show third /
//			= 4 show fourth / end of comment
//			= 14 show second / end of comment
	private int commentState;
	
	private InputStream inputStream;
	private ErrorReporter reporter;
	
	private char currentChar;
	private byte currentKind;
	private StringBuilder currentSpelling;
	
	// true when end of line is found
	private boolean eot = false; 
	
	public Scanner(InputStream inputStream, ErrorReporter reporter) {
		this.isComment = false;
		this.commentState = 0;
		this.inputStream = inputStream;
		this.reporter = reporter;

		// initialize scanner state
		readChar();
	}	
	
	/**
	 * skip whitespace and scan next token
	 */	
	
// ? SINGLE SLASH
//	comment state = 0 not comment
//	= 1 show /
//	= 2 show second /
//	= 12 show first *
//	= 13 show second *
//	= 14 show second / end of comment
	public void scanSeparator() {
		switch (commentState) {
			case 0:
				while (!eot && 
						(currentChar == ' ' ||
							currentChar == '\t' ||
								currentChar == '\n' ||
									currentChar == '\r')) {
					skipIt();
				}
				if (currentChar == '/') {
					commentState = 1;
					skipIt();
					scanSeparator();
				}
				break;
			
			case 1:
				if (currentChar == '/') {
					commentState = 2;
					isComment = true;
					skipIt();
					scanSeparator();
				} else if (currentChar == '*') {
					commentState = 12;
					isComment = true;
					skipIt();
					scanSeparator();
				} else {
					System.exit(4);
				}
				break;
			
			case 2:
				if (currentChar == '\r' || currentChar == '\n' || eot) {
					commentState = 0;
					isComment = false;
					scanSeparator();
				} else {
					skipIt();
					scanSeparator();		
				}
				break;
				
			case 12:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '*') {
					skipIt();
					scanSeparator();
				} else {
					commentState = 13;
					scanSeparator();
				}
				break;
			
			case 13:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '/') {
					skipIt();
					commentState = 12;
					scanSeparator();
				} else {
					commentState = 0;
					isComment = false;
					scanSeparator();
				}
				break;	
		}		
	}
	

	public Token scan() {
		// skip whitespace and comments
		scanSeparator();

		// start of a token: collect spelling and identify token kind
		currentSpelling = new StringBuilder();
		TokenKind kind = scanToken();
		String spelling = currentSpelling.toString();
		
		if (kind == TokenKind.ID) {
			switch (spelling) {
			case "class":
				kind = TokenKind.CLASS;
				break;
			case "public":
				kind = TokenKind.PUBLIC;
				break;
			case "private":
				kind = TokenKind.PRIVATE;
				break;
			case "static":
				kind = TokenKind.STATIC;
				break;
			case "int":
				kind = TokenKind.INT;
				break;
			case "boolean":
				kind = TokenKind.BOOLEAN;
				break;
			case "void":
				kind = TokenKind.VOID;
				break;
			case "this":
				kind = TokenKind.THIS;
				break;
			case "return":
				kind = TokenKind.RETURN;
				break;
			case "if":
				kind = TokenKind.IF;
				break;
			case "else":
				kind = TokenKind.ELSE;
				break;
			case "while":
				kind = TokenKind.WHILE;
				break;
			case "true":
				kind = TokenKind.TRUE;
				break;
			case "false":
				kind = TokenKind.FALSE;
				break;
			default:
				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};
				for (String s : ss) {
					if (spelling.toLowerCase().equals(s)) {
						reporter.reportError("Key word should not be used as identifiers.");
						System.exit(4);
					}
				}
				break;
			}
		}

		// return new token
		return new Token(kind, spelling);
	}

	
	/**
	 * determine token kind
	 */
	public TokenKind scanToken() {
		if (eot) {
			return TokenKind.EOT; 
		}
			
		switch (currentChar) {
			case 'a':  case 'b':  case 'c':  case 'd':
			case 'e':  case 'f':  case 'g':  case 'h':
			case 'i':  case 'j':  case 'k':  case 'l':
			case 'm':  case 'n':  case 'o':  case 'p':
			case 'q':  case 'r':  case 's':  case 't':
	        case 'u':  case 'v':  case 'w':  case 'x':
	        case 'y':  case 'z':
	        
	        case 'A':  case 'B':  case 'C':  case 'D':
	        case 'E':  case 'F':  case 'G':  case 'H':
	        case 'I':  case 'J':  case 'K':  case 'L':
	        case 'M':  case 'N':  case 'O':	 case 'P':
	        case 'Q':  case 'R':  case 'S':  case 'T':
	        case 'U':  case 'V':  case 'W':  case 'X':
	        case 'Y':  case 'Z':
	        	takeIt();
	        	while(Character.isLetter(currentChar) 
	        			|| Character.isDigit(currentChar)
	        				|| currentChar == '_') {
	        		takeIt();
	        	}
	        	return TokenKind.ID;
	        
	        case '0':  case '1':  case '2':  case '3':  case '4':
	        case '5':  case '6':  case '7':  case '8':  case '9':
	            takeIt();
	            while(Character.isDigit(currentChar)) {
	            	takeIt();
	            }
	            return TokenKind.NUM;
	        
	        case '>': case '<': case '=':
	            takeIt();
	            if(currentChar == '=') {
	                takeIt();
	                return TokenKind.EQUAL;
	            }
	            return TokenKind.BINOP;
	        
	        case '+': case '*': case '/':
	        	takeIt();
	        	return TokenKind.BINOP;
	        
	        case '&':
	            takeIt();
	            if(currentChar != '&') {
	                System.exit(4);
	            }
	            takeIt();
	            return TokenKind.BINOP;

	        case '|':
	            takeIt();
	            if(currentChar != '|')
	                System.exit(4);
	            takeIt();
	            return TokenKind.BINOP;
	        
	        case '!':
	            takeIt();
	            if(currentChar == '=') {
	                takeIt();
	                return TokenKind.BINOP;
	            }
	            return TokenKind.UNOP;
	            
	        case '-':
	            takeIt();
	            return TokenKind.MINUS;
	        
	        case '.':
	            takeIt();
	            return TokenKind.DOT;

	        case ',':
	            takeIt();
	            return TokenKind.COMMA;

	        case ';':
	            takeIt();
	            return TokenKind.SEMICOLON;

	        case '(':
	            takeIt();
	            return TokenKind.LPAREN;

	        case ')':
	            takeIt();
	            return TokenKind.RPAREN;

	        case '[':
	            takeIt();
	            return TokenKind.LBRACKET;

	        case ']':
	            takeIt();
	            return TokenKind.RBRACKET;

	        case '{':
	            takeIt();
	            return TokenKind.LCURLY;

	        case '}':
	            takeIt();
	            return TokenKind.RCURLY;
	        
	        default:
				scanError("Unrecognized character '" + currentChar + "' in input");
				return TokenKind.ERROR; 
		}
	}

	
	private void takeIt() {
		currentSpelling.append(currentChar);
		nextChar();
	}
	
	private void take(char expectedChar) {
		if (currentChar == expectedChar) {
			takeIt();
		}
	}

	private void skipIt() {
		nextChar();
	}


	private void scanError(String m) {
		reporter.reportError("Scan Error:  " + m);
	}


	private final static char eolUnix = '\n';
	private final static char eolWindows = '\r';

	/**
	 * advance to next char in inputstream
	 * detect end of file or end of line as end of input
	 */
	private void nextChar() {
		if (!eot)
			readChar();
	}

	private void readChar() {
		try {
			int c = inputStream.read();
			currentChar = (char) c;
			if (c == -1) {
				System.out.print("1" + (c == -1));
				System.out.print("2" + (currentChar == eolUnix ));
				System.out.print("3" + (currentChar == eolWindows));
				eot = true;
			}
		} catch (IOException e) {
			scanError("I/O Exception!");
			eot = true;
		}
	}
	


}
]]></snapshot>
  </Command>
  <Command __id="2093" _type="MoveCaretCommand" caretOffset="5589" date="Sun Feb 27 17:25:49 EST 2022" docOffset="5740" starttimestamp="1645820509543" timestamp="180239539" />
  <Command __id="2094" _type="MoveCaretCommand" caretOffset="5589" date="Sun Feb 27 17:25:49 EST 2022" docOffset="5740" starttimestamp="1645820509543" timestamp="180239539" />
  <Command __id="2095" _type="SelectTextCommand" caretOffset="5591" date="Sun Feb 27 17:25:49 EST 2022" end="5591" start="5586" starttimestamp="1645820509543" timestamp="180239706" />
  <Command __id="2096" _type="SelectTextCommand" caretOffset="5591" date="Sun Feb 27 17:25:49 EST 2022" end="5591" start="5586" starttimestamp="1645820509543" timestamp="180239706" />
  <DocumentChange __id="2097" _type="Replace" date="Sun Feb 27 17:25:51 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7781" docExpressionCount="669" docLength="8511" endLine="242" insertionLength="1" int_docASTNodeCount="1078" int_docActiveCodeLength="7780" int_docExpressionCount="668" int_docLength="8510" length="5" offset="5737" startLine="242" starttimestamp="1645820509543" timestamp="180242007">
    <deletedText><![CDATA[EQUAL]]></deletedText>
    <insertedText><![CDATA[B]]></insertedText>
  </DocumentChange>
  <Command __id="2098" _type="InsertStringCommand" date="Sun Feb 27 17:25:51 EST 2022" starttimestamp="1645820509543" timestamp="180242017" timestamp2="180242017">
    <data><![CDATA[B]]></data>
  </Command>
  <Command __id="2099" _type="InsertStringCommand" date="Sun Feb 27 17:25:51 EST 2022" starttimestamp="1645820509543" timestamp="180242017" timestamp2="180242017">
    <data><![CDATA[B]]></data>
  </Command>
  <DocumentChange __id="2100" _type="Insert" date="Sun Feb 27 17:25:51 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7782" docExpressionCount="669" docLength="8512" length="1" offset="5738" starttimestamp="1645820509543" timestamp="180242130">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <Command __id="2101" _type="InsertStringCommand" date="Sun Feb 27 17:25:51 EST 2022" starttimestamp="1645820509543" timestamp="180242142" timestamp2="180242142">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="2102" _type="InsertStringCommand" date="Sun Feb 27 17:25:51 EST 2022" starttimestamp="1645820509543" timestamp="180242142" timestamp2="180242142">
    <data><![CDATA[I]]></data>
  </Command>
  <DocumentChange __id="2103" _type="Insert" date="Sun Feb 27 17:25:51 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7783" docExpressionCount="669" docLength="8513" length="1" offset="5739" starttimestamp="1645820509543" timestamp="180242266">
    <text><![CDATA[N]]></text>
  </DocumentChange>
  <Command __id="2104" _type="InsertStringCommand" date="Sun Feb 27 17:25:51 EST 2022" starttimestamp="1645820509543" timestamp="180242273" timestamp2="180242273">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="2105" _type="InsertStringCommand" date="Sun Feb 27 17:25:51 EST 2022" starttimestamp="1645820509543" timestamp="180242273" timestamp2="180242273">
    <data><![CDATA[N]]></data>
  </Command>
  <DocumentChange __id="2106" _type="Insert" date="Sun Feb 27 17:25:51 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7784" docExpressionCount="669" docLength="8514" length="1" offset="5740" starttimestamp="1645820509543" timestamp="180242386">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <Command __id="2107" _type="InsertStringCommand" date="Sun Feb 27 17:25:51 EST 2022" starttimestamp="1645820509543" timestamp="180242398" timestamp2="180242398">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2108" _type="InsertStringCommand" date="Sun Feb 27 17:25:51 EST 2022" starttimestamp="1645820509543" timestamp="180242398" timestamp2="180242398">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2110" _type="InsertStringCommand" date="Sun Feb 27 17:25:52 EST 2022" starttimestamp="1645820509543" timestamp="180242693" timestamp2="180242693">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="2111" _type="InsertStringCommand" date="Sun Feb 27 17:25:52 EST 2022" starttimestamp="1645820509543" timestamp="180242693" timestamp2="180242693">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="2112" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:25:53 EST 2022" starttimestamp="1645820509543" timestamp="180243555" />
  <Command __id="2113" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:25:53 EST 2022" starttimestamp="1645820509543" timestamp="180243661" />
  <Command __id="2114" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:25:53 EST 2022" starttimestamp="1645820509543" timestamp="180243696" />
  <Command __id="2115" _type="MoveCaretCommand" caretOffset="5646" date="Sun Feb 27 17:25:53 EST 2022" docOffset="5797" starttimestamp="1645820509543" timestamp="180244162" />
  <Command __id="2116" _type="MoveCaretCommand" caretOffset="5646" date="Sun Feb 27 17:25:53 EST 2022" docOffset="5797" starttimestamp="1645820509543" timestamp="180244162" />
  <DocumentChange __id="2109" _type="Insert" date="Sun Feb 27 17:25:52 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7785" docExpressionCount="669" docLength="8515" length="1" offset="5741" starttimestamp="1645820509543" timestamp="180242688">
    <text><![CDATA[P]]></text>
  </DocumentChange>
  <DocumentChange __id="2119" _type="Insert" date="Sun Feb 27 17:26:03 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7797" docExpressionCount="669" docLength="8527" length="12" offset="5610" starttimestamp="1645820509543" timestamp="180253825">
    <text><![CDATA[
	        	]]></text>
  </DocumentChange>
  <DocumentChange __id="2122" _type="Insert" date="Sun Feb 27 17:26:03 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7798" docExpressionCount="670" docLength="8528" length="1" offset="5622" starttimestamp="1645820509543" timestamp="180254414">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2125" _type="Insert" date="Sun Feb 27 17:26:04 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7799" docExpressionCount="669" docLength="8529" length="1" offset="5623" starttimestamp="1645820509543" timestamp="180254539">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="2128" _type="Insert" date="Sun Feb 27 17:26:04 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7800" docExpressionCount="669" docLength="8530" length="1" offset="5624" starttimestamp="1645820509543" timestamp="180254778">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2131" _type="Insert" date="Sun Feb 27 17:26:06 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7802" docExpressionCount="670" docLength="8532" length="2" offset="5625" starttimestamp="1645820509543" timestamp="180256804">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="2134" _type="Insert" date="Sun Feb 27 17:26:07 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7803" docExpressionCount="670" docLength="8533" length="1" offset="5626" starttimestamp="1645820509543" timestamp="180257524">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="2137" _type="Insert" date="Sun Feb 27 17:26:07 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7804" docExpressionCount="670" docLength="8534" length="1" offset="5627" starttimestamp="1645820509543" timestamp="180257645">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="2140" _type="Delete" date="Sun Feb 27 17:26:07 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7803" docExpressionCount="670" docLength="8533" endLine="239" length="1" offset="5627" startLine="239" starttimestamp="1645820509543" timestamp="180258190">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="2143" _type="Delete" date="Sun Feb 27 17:26:07 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7802" docExpressionCount="670" docLength="8532" endLine="239" length="1" offset="5626" startLine="239" starttimestamp="1645820509543" timestamp="180258358">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="2146" _type="Delete" date="Sun Feb 27 17:26:08 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7801" docExpressionCount="669" docLength="8531" endLine="239" length="1" offset="5625" startLine="239" starttimestamp="1645820509543" timestamp="180258533">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="2147" _type="Delete" date="Sun Feb 27 17:26:08 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7800" docExpressionCount="669" docLength="8530" endLine="239" length="1" offset="5625" startLine="239" starttimestamp="1645820509543" timestamp="180258546">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="2150" _type="Delete" date="Sun Feb 27 17:26:08 EST 2022" docASTNodeCount="1078" docActiveCodeLength="7799" docExpressionCount="669" docLength="8529" endLine="239" length="1" offset="5624" startLine="239" starttimestamp="1645820509543" timestamp="180258721">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="2117" _type="MoveCaretCommand" caretOffset="5459" date="Sun Feb 27 17:26:02 EST 2022" docOffset="5610" starttimestamp="1645820509543" timestamp="180252850" />
  <Command __id="2118" _type="MoveCaretCommand" caretOffset="5459" date="Sun Feb 27 17:26:02 EST 2022" docOffset="5610" starttimestamp="1645820509543" timestamp="180252850" />
  <Command __id="2120" _type="InsertStringCommand" date="Sun Feb 27 17:26:03 EST 2022" starttimestamp="1645820509543" timestamp="180253831" timestamp2="180253831">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2121" _type="InsertStringCommand" date="Sun Feb 27 17:26:03 EST 2022" starttimestamp="1645820509543" timestamp="180253831" timestamp2="180253831">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2123" _type="InsertStringCommand" date="Sun Feb 27 17:26:03 EST 2022" starttimestamp="1645820509543" timestamp="180254418" timestamp2="180254418">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2124" _type="InsertStringCommand" date="Sun Feb 27 17:26:03 EST 2022" starttimestamp="1645820509543" timestamp="180254418" timestamp2="180254418">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2126" _type="InsertStringCommand" date="Sun Feb 27 17:26:04 EST 2022" starttimestamp="1645820509543" timestamp="180254548" timestamp2="180254548">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2127" _type="InsertStringCommand" date="Sun Feb 27 17:26:04 EST 2022" starttimestamp="1645820509543" timestamp="180254548" timestamp2="180254548">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2129" _type="InsertStringCommand" date="Sun Feb 27 17:26:04 EST 2022" starttimestamp="1645820509543" timestamp="180254781" timestamp2="180254781">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2130" _type="InsertStringCommand" date="Sun Feb 27 17:26:04 EST 2022" starttimestamp="1645820509543" timestamp="180254781" timestamp2="180254781">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2132" _type="InsertStringCommand" date="Sun Feb 27 17:26:06 EST 2022" starttimestamp="1645820509543" timestamp="180256807" timestamp2="180256807">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2133" _type="InsertStringCommand" date="Sun Feb 27 17:26:06 EST 2022" starttimestamp="1645820509543" timestamp="180256807" timestamp2="180256807">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2135" _type="InsertStringCommand" date="Sun Feb 27 17:26:07 EST 2022" starttimestamp="1645820509543" timestamp="180257532" timestamp2="180257532">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2136" _type="InsertStringCommand" date="Sun Feb 27 17:26:07 EST 2022" starttimestamp="1645820509543" timestamp="180257532" timestamp2="180257532">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2138" _type="InsertStringCommand" date="Sun Feb 27 17:26:07 EST 2022" starttimestamp="1645820509543" timestamp="180257646" timestamp2="180257646">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2139" _type="InsertStringCommand" date="Sun Feb 27 17:26:07 EST 2022" starttimestamp="1645820509543" timestamp="180257646" timestamp2="180257646">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2141" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:07 EST 2022" starttimestamp="1645820509543" timestamp="180258194" />
  <Command __id="2142" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:07 EST 2022" starttimestamp="1645820509543" timestamp="180258194" />
  <Command __id="2144" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:07 EST 2022" starttimestamp="1645820509543" timestamp="180258363" />
  <Command __id="2145" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:07 EST 2022" starttimestamp="1645820509543" timestamp="180258363" />
  <Command __id="2148" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:08 EST 2022" starttimestamp="1645820509543" timestamp="180258551" />
  <Command __id="2149" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:08 EST 2022" starttimestamp="1645820509543" timestamp="180258551" />
  <Command __id="2151" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:08 EST 2022" starttimestamp="1645820509543" timestamp="180258724" />
  <Command __id="2152" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:08 EST 2022" starttimestamp="1645820509543" timestamp="180258724" />
  <DocumentChange __id="2153" _type="Insert" date="Sun Feb 27 17:26:09 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7801" docExpressionCount="670" docLength="8531" length="2" offset="5624" starttimestamp="1645820509543" timestamp="180259739">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="2154" _type="InsertStringCommand" date="Sun Feb 27 17:26:09 EST 2022" starttimestamp="1645820509543" timestamp="180259747" timestamp2="180259747">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2155" _type="InsertStringCommand" date="Sun Feb 27 17:26:09 EST 2022" starttimestamp="1645820509543" timestamp="180259749" timestamp2="180259749">
    <data><![CDATA[(]]></data>
  </Command>
  <DocumentChange __id="2156" _type="Insert" date="Sun Feb 27 17:26:12 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7802" docExpressionCount="670" docLength="8532" length="1" offset="5625" starttimestamp="1645820509543" timestamp="180262780">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="2157" _type="InsertStringCommand" date="Sun Feb 27 17:26:12 EST 2022" starttimestamp="1645820509543" timestamp="180262785" timestamp2="180262785">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2158" _type="InsertStringCommand" date="Sun Feb 27 17:26:12 EST 2022" starttimestamp="1645820509543" timestamp="180262785" timestamp2="180262785">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="2159" _type="Insert" date="Sun Feb 27 17:26:12 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7803" docExpressionCount="670" docLength="8533" length="1" offset="5626" starttimestamp="1645820509543" timestamp="180262929">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="2160" _type="InsertStringCommand" date="Sun Feb 27 17:26:12 EST 2022" starttimestamp="1645820509543" timestamp="180262932" timestamp2="180262932">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2161" _type="InsertStringCommand" date="Sun Feb 27 17:26:12 EST 2022" starttimestamp="1645820509543" timestamp="180262933" timestamp2="180262933">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="2162" _type="Insert" date="Sun Feb 27 17:26:12 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7804" docExpressionCount="670" docLength="8534" length="1" offset="5627" starttimestamp="1645820509543" timestamp="180263083">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="2163" _type="InsertStringCommand" date="Sun Feb 27 17:26:12 EST 2022" starttimestamp="1645820509543" timestamp="180263085" timestamp2="180263085">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2164" _type="InsertStringCommand" date="Sun Feb 27 17:26:12 EST 2022" starttimestamp="1645820509543" timestamp="180263085" timestamp2="180263085">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="2165" _type="Insert" date="Sun Feb 27 17:26:12 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7805" docExpressionCount="670" docLength="8535" length="1" offset="5628" starttimestamp="1645820509543" timestamp="180263235">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="2166" _type="InsertStringCommand" date="Sun Feb 27 17:26:12 EST 2022" starttimestamp="1645820509543" timestamp="180263237" timestamp2="180263237">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2167" _type="InsertStringCommand" date="Sun Feb 27 17:26:12 EST 2022" starttimestamp="1645820509543" timestamp="180263237" timestamp2="180263237">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="2168" _type="Insert" date="Sun Feb 27 17:26:12 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7806" docExpressionCount="670" docLength="8536" length="1" offset="5629" starttimestamp="1645820509543" timestamp="180263308">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="2169" _type="InsertStringCommand" date="Sun Feb 27 17:26:12 EST 2022" starttimestamp="1645820509543" timestamp="180263310" timestamp2="180263310">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2170" _type="InsertStringCommand" date="Sun Feb 27 17:26:12 EST 2022" starttimestamp="1645820509543" timestamp="180263310" timestamp2="180263310">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="2171" _type="Insert" date="Sun Feb 27 17:26:13 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7807" docExpressionCount="670" docLength="8537" length="1" offset="5630" starttimestamp="1645820509543" timestamp="180263467">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="2172" _type="InsertStringCommand" date="Sun Feb 27 17:26:13 EST 2022" starttimestamp="1645820509543" timestamp="180263468" timestamp2="180263468">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2173" _type="InsertStringCommand" date="Sun Feb 27 17:26:13 EST 2022" starttimestamp="1645820509543" timestamp="180263469" timestamp2="180263469">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="2174" _type="Insert" date="Sun Feb 27 17:26:13 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7808" docExpressionCount="670" docLength="8538" length="1" offset="5631" starttimestamp="1645820509543" timestamp="180263545">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="2175" _type="InsertStringCommand" date="Sun Feb 27 17:26:13 EST 2022" starttimestamp="1645820509543" timestamp="180263546" timestamp2="180263546">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2176" _type="InsertStringCommand" date="Sun Feb 27 17:26:13 EST 2022" starttimestamp="1645820509543" timestamp="180263547" timestamp2="180263547">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="2177" _type="Insert" date="Sun Feb 27 17:26:13 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7809" docExpressionCount="670" docLength="8539" length="1" offset="5632" starttimestamp="1645820509543" timestamp="180264148">
    <text><![CDATA[C]]></text>
  </DocumentChange>
  <Command __id="2178" _type="InsertStringCommand" date="Sun Feb 27 17:26:13 EST 2022" starttimestamp="1645820509543" timestamp="180264149" timestamp2="180264149">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="2179" _type="InsertStringCommand" date="Sun Feb 27 17:26:13 EST 2022" starttimestamp="1645820509543" timestamp="180264149" timestamp2="180264149">
    <data><![CDATA[C]]></data>
  </Command>
  <DocumentChange __id="2180" _type="Insert" date="Sun Feb 27 17:26:14 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7810" docExpressionCount="670" docLength="8540" length="1" offset="5633" starttimestamp="1645820509543" timestamp="180264505">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <Command __id="2181" _type="InsertStringCommand" date="Sun Feb 27 17:26:14 EST 2022" starttimestamp="1645820509543" timestamp="180264507" timestamp2="180264507">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2182" _type="InsertStringCommand" date="Sun Feb 27 17:26:14 EST 2022" starttimestamp="1645820509543" timestamp="180264508" timestamp2="180264508">
    <data><![CDATA[h]]></data>
  </Command>
  <DocumentChange __id="2183" _type="Insert" date="Sun Feb 27 17:26:14 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7811" docExpressionCount="670" docLength="8541" length="1" offset="5634" starttimestamp="1645820509543" timestamp="180264609">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="2184" _type="InsertStringCommand" date="Sun Feb 27 17:26:14 EST 2022" starttimestamp="1645820509543" timestamp="180264612" timestamp2="180264612">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2185" _type="InsertStringCommand" date="Sun Feb 27 17:26:14 EST 2022" starttimestamp="1645820509543" timestamp="180264613" timestamp2="180264613">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="2186" _type="Insert" date="Sun Feb 27 17:26:14 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7812" docExpressionCount="670" docLength="8542" length="1" offset="5635" starttimestamp="1645820509543" timestamp="180264723">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="2187" _type="InsertStringCommand" date="Sun Feb 27 17:26:14 EST 2022" starttimestamp="1645820509543" timestamp="180264725" timestamp2="180264725">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2188" _type="InsertStringCommand" date="Sun Feb 27 17:26:14 EST 2022" starttimestamp="1645820509543" timestamp="180264725" timestamp2="180264725">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="2189" _type="Insert" date="Sun Feb 27 17:26:14 EST 2022" docASTNodeCount="1080" docActiveCodeLength="7813" docExpressionCount="670" docLength="8543" length="1" offset="5636" starttimestamp="1645820509543" timestamp="180265252">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="2190" _type="InsertStringCommand" date="Sun Feb 27 17:26:14 EST 2022" starttimestamp="1645820509543" timestamp="180265253" timestamp2="180265253">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2191" _type="InsertStringCommand" date="Sun Feb 27 17:26:14 EST 2022" starttimestamp="1645820509543" timestamp="180265253" timestamp2="180265253">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="2192" _type="Insert" date="Sun Feb 27 17:26:14 EST 2022" docASTNodeCount="1082" docActiveCodeLength="7814" docExpressionCount="672" docLength="8544" length="1" offset="5637" starttimestamp="1645820509543" timestamp="180265399">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="2193" _type="InsertStringCommand" date="Sun Feb 27 17:26:14 EST 2022" starttimestamp="1645820509543" timestamp="180265400" timestamp2="180265400">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2194" _type="InsertStringCommand" date="Sun Feb 27 17:26:14 EST 2022" starttimestamp="1645820509543" timestamp="180265400" timestamp2="180265400">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="2195" _type="Insert" date="Sun Feb 27 17:26:15 EST 2022" docASTNodeCount="878" docActiveCodeLength="7815" docExpressionCount="534" docLength="8545" length="1" offset="5638" starttimestamp="1645820509543" timestamp="180265556">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="2196" _type="InsertStringCommand" date="Sun Feb 27 17:26:15 EST 2022" starttimestamp="1645820509543" timestamp="180265558" timestamp2="180265558">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2197" _type="InsertStringCommand" date="Sun Feb 27 17:26:15 EST 2022" starttimestamp="1645820509543" timestamp="180265558" timestamp2="180265558">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2199" _type="InsertStringCommand" date="Sun Feb 27 17:26:15 EST 2022" starttimestamp="1645820509543" timestamp="180265716" timestamp2="180265716">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2200" _type="InsertStringCommand" date="Sun Feb 27 17:26:15 EST 2022" starttimestamp="1645820509543" timestamp="180265716" timestamp2="180265716">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2201" _type="InsertStringCommand" date="Sun Feb 27 17:26:17 EST 2022" starttimestamp="1645820509543" timestamp="180268341" timestamp2="180268341">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2202" _type="InsertStringCommand" date="Sun Feb 27 17:26:17 EST 2022" starttimestamp="1645820509543" timestamp="180268342" timestamp2="180268342">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2198" _type="Insert" date="Sun Feb 27 17:26:15 EST 2022" docASTNodeCount="878" docActiveCodeLength="7816" docExpressionCount="534" docLength="8546" length="1" offset="5639" starttimestamp="1645820509543" timestamp="180265714">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2205" _type="Insert" date="Sun Feb 27 17:26:19 EST 2022" docASTNodeCount="701" docActiveCodeLength="7818" docExpressionCount="435" docLength="8548" length="2" offset="5640" starttimestamp="1645820509543" timestamp="180270024">
    <text><![CDATA['']]></text>
  </DocumentChange>
  <Command __id="2203" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:26:18 EST 2022" starttimestamp="1645820509543" timestamp="180269357" />
  <Command __id="2204" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:26:18 EST 2022" starttimestamp="1645820509543" timestamp="180269358" />
  <Command __id="2206" _type="InsertStringCommand" date="Sun Feb 27 17:26:19 EST 2022" starttimestamp="1645820509543" timestamp="180270026" timestamp2="180270026">
    <data><![CDATA[']]></data>
  </Command>
  <Command __id="2207" _type="InsertStringCommand" date="Sun Feb 27 17:26:19 EST 2022" starttimestamp="1645820509543" timestamp="180270026" timestamp2="180270026">
    <data><![CDATA[']]></data>
  </Command>
  <Command __id="2209" _type="InsertStringCommand" date="Sun Feb 27 17:26:20 EST 2022" starttimestamp="1645820509543" timestamp="180271279" timestamp2="180271279">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2210" _type="InsertStringCommand" date="Sun Feb 27 17:26:20 EST 2022" starttimestamp="1645820509543" timestamp="180271279" timestamp2="180271279">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2212" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:21 EST 2022" starttimestamp="1645820509543" timestamp="180271660" />
  <Command __id="2213" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:21 EST 2022" starttimestamp="1645820509543" timestamp="180271660" />
  <Command __id="2215" _type="InsertStringCommand" date="Sun Feb 27 17:26:21 EST 2022" starttimestamp="1645820509543" timestamp="180271972" timestamp2="180271972">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2216" _type="InsertStringCommand" date="Sun Feb 27 17:26:21 EST 2022" starttimestamp="1645820509543" timestamp="180271973" timestamp2="180271973">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2217" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:26:21 EST 2022" starttimestamp="1645820509543" timestamp="180272273" />
  <Command __id="2218" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:26:21 EST 2022" starttimestamp="1645820509543" timestamp="180272273" />
  <Command __id="2220" _type="InsertStringCommand" date="Sun Feb 27 17:26:22 EST 2022" starttimestamp="1645820509543" timestamp="180272605" timestamp2="180272605">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2221" _type="InsertStringCommand" date="Sun Feb 27 17:26:22 EST 2022" starttimestamp="1645820509543" timestamp="180272606" timestamp2="180272606">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2223" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:22 EST 2022" starttimestamp="1645820509543" timestamp="180273116" />
  <Command __id="2224" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:22 EST 2022" starttimestamp="1645820509543" timestamp="180273116" />
  <Command __id="2225" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:26:23 EST 2022" starttimestamp="1645820509543" timestamp="180273502" />
  <Command __id="2226" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:26:23 EST 2022" starttimestamp="1645820509543" timestamp="180273502" />
  <Command __id="2228" _type="InsertStringCommand" date="Sun Feb 27 17:26:23 EST 2022" starttimestamp="1645820509543" timestamp="180273685" timestamp2="180273685">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2229" _type="InsertStringCommand" date="Sun Feb 27 17:26:23 EST 2022" starttimestamp="1645820509543" timestamp="180273685" timestamp2="180273685">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2231" _type="InsertStringCommand" date="Sun Feb 27 17:26:23 EST 2022" starttimestamp="1645820509543" timestamp="180274080" timestamp2="180274080">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="2232" _type="InsertStringCommand" date="Sun Feb 27 17:26:23 EST 2022" starttimestamp="1645820509543" timestamp="180274080" timestamp2="180274080">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="2234" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:23 EST 2022" starttimestamp="1645820509543" timestamp="180274404" />
  <Command __id="2235" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:23 EST 2022" starttimestamp="1645820509543" timestamp="180274404" />
  <DocumentChange __id="2208" _type="Insert" date="Sun Feb 27 17:26:20 EST 2022" docASTNodeCount="1082" docActiveCodeLength="7819" docExpressionCount="672" docLength="8549" length="1" offset="5641" starttimestamp="1645820509543" timestamp="180271277">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="2211" _type="Delete" date="Sun Feb 27 17:26:21 EST 2022" docASTNodeCount="701" docActiveCodeLength="7818" docExpressionCount="435" docLength="8548" endLine="239" length="1" offset="5641" startLine="239" starttimestamp="1645820509543" timestamp="180271656">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="2214" _type="Insert" date="Sun Feb 27 17:26:21 EST 2022" docASTNodeCount="1082" docActiveCodeLength="7819" docExpressionCount="672" docLength="8549" length="1" offset="5641" starttimestamp="1645820509543" timestamp="180271971">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="2219" _type="Insert" date="Sun Feb 27 17:26:22 EST 2022" docASTNodeCount="1082" docActiveCodeLength="7820" docExpressionCount="672" docLength="8550" length="1" offset="5643" starttimestamp="1645820509543" timestamp="180272602">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2222" _type="Delete" date="Sun Feb 27 17:26:22 EST 2022" docASTNodeCount="1082" docActiveCodeLength="7819" docExpressionCount="672" docLength="8549" endLine="239" length="1" offset="5643" startLine="239" starttimestamp="1645820509543" timestamp="180273113">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2227" _type="Insert" date="Sun Feb 27 17:26:23 EST 2022" docASTNodeCount="1082" docActiveCodeLength="7820" docExpressionCount="672" docLength="8550" length="1" offset="5644" starttimestamp="1645820509543" timestamp="180273680">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2230" _type="Insert" date="Sun Feb 27 17:26:23 EST 2022" docASTNodeCount="1084" docActiveCodeLength="7821" docExpressionCount="672" docLength="8551" length="1" offset="5645" starttimestamp="1645820509543" timestamp="180274074">
    <text><![CDATA[}]]></text>
  </DocumentChange>
  <DocumentChange __id="2233" _type="Delete" date="Sun Feb 27 17:26:23 EST 2022" docASTNodeCount="1082" docActiveCodeLength="7820" docExpressionCount="672" docLength="8550" endLine="239" length="1" offset="5645" startLine="239" starttimestamp="1645820509543" timestamp="180274401">
    <text><![CDATA[}]]></text>
  </DocumentChange>
  <DocumentChange __id="2236" _type="Insert" date="Sun Feb 27 17:26:24 EST 2022" docASTNodeCount="1083" docActiveCodeLength="7821" docExpressionCount="672" docLength="8551" length="1" offset="5645" starttimestamp="1645820509543" timestamp="180274559">
    <text><![CDATA[{]]></text>
  </DocumentChange>
  <DocumentChange __id="2239" _type="Insert" date="Sun Feb 27 17:26:24 EST 2022" docASTNodeCount="1083" docActiveCodeLength="7847" docExpressionCount="672" docLength="8577" length="26" offset="5646" starttimestamp="1645820509543" timestamp="180274768">
    <text><![CDATA[
	        		
	        	}]]></text>
  </DocumentChange>
  <Command __id="2237" _type="InsertStringCommand" date="Sun Feb 27 17:26:24 EST 2022" starttimestamp="1645820509543" timestamp="180274565" timestamp2="180274565">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="2238" _type="InsertStringCommand" date="Sun Feb 27 17:26:24 EST 2022" starttimestamp="1645820509543" timestamp="180274568" timestamp2="180274568">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="2240" _type="InsertStringCommand" date="Sun Feb 27 17:26:24 EST 2022" starttimestamp="1645820509543" timestamp="180274774" timestamp2="180274774">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2241" _type="InsertStringCommand" date="Sun Feb 27 17:26:24 EST 2022" starttimestamp="1645820509543" timestamp="180274774" timestamp2="180274774">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2243" _type="InsertStringCommand" date="Sun Feb 27 17:26:27 EST 2022" starttimestamp="1645820509543" timestamp="180277869" timestamp2="180277869">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2244" _type="InsertStringCommand" date="Sun Feb 27 17:26:27 EST 2022" starttimestamp="1645820509543" timestamp="180277869" timestamp2="180277869">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2246" _type="InsertStringCommand" date="Sun Feb 27 17:26:27 EST 2022" starttimestamp="1645820509543" timestamp="180277957" timestamp2="180277957">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2247" _type="InsertStringCommand" date="Sun Feb 27 17:26:27 EST 2022" starttimestamp="1645820509543" timestamp="180277957" timestamp2="180277957">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2249" _type="InsertStringCommand" date="Sun Feb 27 17:26:27 EST 2022" starttimestamp="1645820509543" timestamp="180278089" timestamp2="180278089">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2250" _type="InsertStringCommand" date="Sun Feb 27 17:26:27 EST 2022" starttimestamp="1645820509543" timestamp="180278089" timestamp2="180278089">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2252" _type="InsertStringCommand" date="Sun Feb 27 17:26:27 EST 2022" starttimestamp="1645820509543" timestamp="180278206" timestamp2="180278206">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2253" _type="InsertStringCommand" date="Sun Feb 27 17:26:27 EST 2022" starttimestamp="1645820509543" timestamp="180278207" timestamp2="180278207">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2255" _type="InsertStringCommand" date="Sun Feb 27 17:26:27 EST 2022" starttimestamp="1645820509543" timestamp="180278291" timestamp2="180278291">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2256" _type="InsertStringCommand" date="Sun Feb 27 17:26:27 EST 2022" starttimestamp="1645820509543" timestamp="180278292" timestamp2="180278292">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2258" _type="InsertStringCommand" date="Sun Feb 27 17:26:27 EST 2022" starttimestamp="1645820509543" timestamp="180278398" timestamp2="180278398">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2259" _type="InsertStringCommand" date="Sun Feb 27 17:26:27 EST 2022" starttimestamp="1645820509543" timestamp="180278398" timestamp2="180278398">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2261" _type="InsertStringCommand" date="Sun Feb 27 17:26:28 EST 2022" starttimestamp="1645820509543" timestamp="180279058" timestamp2="180279058">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2262" _type="InsertStringCommand" date="Sun Feb 27 17:26:28 EST 2022" starttimestamp="1645820509543" timestamp="180279058" timestamp2="180279058">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2264" _type="InsertStringCommand" date="Sun Feb 27 17:26:28 EST 2022" starttimestamp="1645820509543" timestamp="180279294" timestamp2="180279294">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2265" _type="InsertStringCommand" date="Sun Feb 27 17:26:28 EST 2022" starttimestamp="1645820509543" timestamp="180279294" timestamp2="180279294">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2267" _type="InsertStringCommand" date="Sun Feb 27 17:26:28 EST 2022" starttimestamp="1645820509543" timestamp="180279412" timestamp2="180279412">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2268" _type="InsertStringCommand" date="Sun Feb 27 17:26:28 EST 2022" starttimestamp="1645820509543" timestamp="180279412" timestamp2="180279412">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2270" _type="InsertStringCommand" date="Sun Feb 27 17:26:29 EST 2022" starttimestamp="1645820509543" timestamp="180279589" timestamp2="180279589">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2271" _type="InsertStringCommand" date="Sun Feb 27 17:26:29 EST 2022" starttimestamp="1645820509543" timestamp="180279589" timestamp2="180279589">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2273" _type="InsertStringCommand" date="Sun Feb 27 17:26:29 EST 2022" starttimestamp="1645820509543" timestamp="180279677" timestamp2="180279677">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2274" _type="InsertStringCommand" date="Sun Feb 27 17:26:29 EST 2022" starttimestamp="1645820509543" timestamp="180279679" timestamp2="180279679">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2276" _type="InsertStringCommand" date="Sun Feb 27 17:26:29 EST 2022" starttimestamp="1645820509543" timestamp="180279778" timestamp2="180279778">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2277" _type="InsertStringCommand" date="Sun Feb 27 17:26:29 EST 2022" starttimestamp="1645820509543" timestamp="180279778" timestamp2="180279778">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2279" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:29 EST 2022" starttimestamp="1645820509543" timestamp="180280218" />
  <Command __id="2280" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:29 EST 2022" starttimestamp="1645820509543" timestamp="180280218" />
  <Command __id="2282" _type="InsertStringCommand" date="Sun Feb 27 17:26:30 EST 2022" starttimestamp="1645820509543" timestamp="180280492" timestamp2="180280492">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2283" _type="InsertStringCommand" date="Sun Feb 27 17:26:30 EST 2022" starttimestamp="1645820509543" timestamp="180280493" timestamp2="180280493">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2285" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:30 EST 2022" starttimestamp="1645820509543" timestamp="180280860" />
  <Command __id="2286" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:26:30 EST 2022" starttimestamp="1645820509543" timestamp="180280860" />
  <Command __id="2288" _type="InsertStringCommand" date="Sun Feb 27 17:26:30 EST 2022" starttimestamp="1645820509543" timestamp="180281022" timestamp2="180281022">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2289" _type="InsertStringCommand" date="Sun Feb 27 17:26:30 EST 2022" starttimestamp="1645820509543" timestamp="180281022" timestamp2="180281022">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2291" _type="InsertStringCommand" date="Sun Feb 27 17:26:30 EST 2022" starttimestamp="1645820509543" timestamp="180281247" timestamp2="180281247">
    <data><![CDATA[K]]></data>
  </Command>
  <Command __id="2292" _type="InsertStringCommand" date="Sun Feb 27 17:26:30 EST 2022" starttimestamp="1645820509543" timestamp="180281247" timestamp2="180281247">
    <data><![CDATA[K]]></data>
  </Command>
  <Command __id="2294" _type="InsertStringCommand" date="Sun Feb 27 17:26:30 EST 2022" starttimestamp="1645820509543" timestamp="180281430" timestamp2="180281430">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2295" _type="InsertStringCommand" date="Sun Feb 27 17:26:30 EST 2022" starttimestamp="1645820509543" timestamp="180281430" timestamp2="180281430">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2297" _type="InsertStringCommand" date="Sun Feb 27 17:26:31 EST 2022" starttimestamp="1645820509543" timestamp="180281525" timestamp2="180281525">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2298" _type="InsertStringCommand" date="Sun Feb 27 17:26:31 EST 2022" starttimestamp="1645820509543" timestamp="180281525" timestamp2="180281525">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2300" _type="InsertStringCommand" date="Sun Feb 27 17:26:31 EST 2022" starttimestamp="1645820509543" timestamp="180281622" timestamp2="180281622">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2301" _type="InsertStringCommand" date="Sun Feb 27 17:26:31 EST 2022" starttimestamp="1645820509543" timestamp="180281622" timestamp2="180281622">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2303" _type="InsertStringCommand" date="Sun Feb 27 17:26:31 EST 2022" starttimestamp="1645820509543" timestamp="180281813" timestamp2="180281813">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2304" _type="InsertStringCommand" date="Sun Feb 27 17:26:31 EST 2022" starttimestamp="1645820509543" timestamp="180281813" timestamp2="180281813">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2305" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:26:31 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="180281817" />
  <Command __id="2308" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:26:32 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="180282975" />
  <DocumentChange __id="2242" _type="Insert" date="Sun Feb 27 17:26:27 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7848" docExpressionCount="673" docLength="8578" length="1" offset="5659" starttimestamp="1645820509543" timestamp="180277865">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2245" _type="Insert" date="Sun Feb 27 17:26:27 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7849" docExpressionCount="673" docLength="8579" length="1" offset="5660" starttimestamp="1645820509543" timestamp="180277953">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2248" _type="Insert" date="Sun Feb 27 17:26:27 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7850" docExpressionCount="673" docLength="8580" length="1" offset="5661" starttimestamp="1645820509543" timestamp="180278085">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2251" _type="Insert" date="Sun Feb 27 17:26:27 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7851" docExpressionCount="673" docLength="8581" length="1" offset="5662" starttimestamp="1645820509543" timestamp="180278195">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="2254" _type="Insert" date="Sun Feb 27 17:26:27 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7852" docExpressionCount="673" docLength="8582" length="1" offset="5663" starttimestamp="1645820509543" timestamp="180278287">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2257" _type="Insert" date="Sun Feb 27 17:26:27 EST 2022" docASTNodeCount="1084" docActiveCodeLength="7853" docExpressionCount="672" docLength="8583" length="1" offset="5664" starttimestamp="1645820509543" timestamp="180278394">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2260" _type="Insert" date="Sun Feb 27 17:26:28 EST 2022" docASTNodeCount="1084" docActiveCodeLength="7854" docExpressionCount="672" docLength="8584" length="1" offset="5665" starttimestamp="1645820509543" timestamp="180279053">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2263" _type="Insert" date="Sun Feb 27 17:26:28 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7855" docExpressionCount="673" docLength="8585" length="1" offset="5666" starttimestamp="1645820509543" timestamp="180279290">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <DocumentChange __id="2266" _type="Insert" date="Sun Feb 27 17:26:28 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7856" docExpressionCount="673" docLength="8586" length="1" offset="5667" starttimestamp="1645820509543" timestamp="180279404">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2269" _type="Insert" date="Sun Feb 27 17:26:29 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7857" docExpressionCount="673" docLength="8587" length="1" offset="5668" starttimestamp="1645820509543" timestamp="180279586">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="2272" _type="Insert" date="Sun Feb 27 17:26:29 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7858" docExpressionCount="673" docLength="8588" length="1" offset="5669" starttimestamp="1645820509543" timestamp="180279673">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2275" _type="Insert" date="Sun Feb 27 17:26:29 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7859" docExpressionCount="673" docLength="8589" length="1" offset="5670" starttimestamp="1645820509543" timestamp="180279774">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2278" _type="Delete" date="Sun Feb 27 17:26:29 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7858" docExpressionCount="673" docLength="8588" endLine="240" length="1" offset="5670" startLine="240" starttimestamp="1645820509543" timestamp="180280216">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2281" _type="Insert" date="Sun Feb 27 17:26:30 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7859" docExpressionCount="673" docLength="8589" length="1" offset="5670" starttimestamp="1645820509543" timestamp="180280489">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2284" _type="Delete" date="Sun Feb 27 17:26:30 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7858" docExpressionCount="673" docLength="8588" endLine="240" length="1" offset="5670" startLine="240" starttimestamp="1645820509543" timestamp="180280858">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2287" _type="Insert" date="Sun Feb 27 17:26:30 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7859" docExpressionCount="673" docLength="8589" length="1" offset="5670" starttimestamp="1645820509543" timestamp="180281019">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2290" _type="Insert" date="Sun Feb 27 17:26:30 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7860" docExpressionCount="673" docLength="8590" length="1" offset="5671" starttimestamp="1645820509543" timestamp="180281236">
    <text><![CDATA[K]]></text>
  </DocumentChange>
  <DocumentChange __id="2293" _type="Insert" date="Sun Feb 27 17:26:30 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7861" docExpressionCount="673" docLength="8591" length="1" offset="5672" starttimestamp="1645820509543" timestamp="180281420">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2296" _type="Insert" date="Sun Feb 27 17:26:31 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7862" docExpressionCount="673" docLength="8592" length="1" offset="5673" starttimestamp="1645820509543" timestamp="180281521">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2299" _type="Insert" date="Sun Feb 27 17:26:31 EST 2022" docASTNodeCount="1085" docActiveCodeLength="7863" docExpressionCount="673" docLength="8593" length="1" offset="5674" starttimestamp="1645820509543" timestamp="180281618">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2302" _type="Insert" date="Sun Feb 27 17:26:31 EST 2022" docASTNodeCount="1084" docActiveCodeLength="7864" docExpressionCount="673" docLength="8594" length="1" offset="5675" starttimestamp="1645820509543" timestamp="180281809">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="2306" _type="Insert" date="Sun Feb 27 17:26:31 EST 2022" docASTNodeCount="1087" docActiveCodeLength="7865" docExpressionCount="675" docLength="8595" length="1" offset="5676" starttimestamp="1645820509543" timestamp="180282246">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2307" _type="Insert" date="Sun Feb 27 17:26:32 EST 2022" docASTNodeCount="1087" docActiveCodeLength="7866" docExpressionCount="675" docLength="8596" length="1" offset="5677" starttimestamp="1645820509543" timestamp="180282525">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <DocumentChange __id="2309" _type="Replace" date="Sun Feb 27 17:26:32 EST 2022" docASTNodeCount="1087" docActiveCodeLength="7869" docExpressionCount="675" docLength="8599" endLine="240" insertionLength="5" int_docASTNodeCount="1084" int_docActiveCodeLength="7864" int_docExpressionCount="673" int_docLength="8594" length="2" offset="5676" startLine="240" starttimestamp="1645820509543" timestamp="180282980">
    <deletedText><![CDATA[eq]]></deletedText>
    <insertedText><![CDATA[EQUAL]]></insertedText>
  </DocumentChange>
  <Command __id="2310" _type="InsertStringCommand" date="Sun Feb 27 17:26:32 EST 2022" starttimestamp="1645820509543" timestamp="180282986" timestamp2="180282986">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2311" _type="InsertStringCommand" date="Sun Feb 27 17:26:32 EST 2022" starttimestamp="1645820509543" timestamp="180282988" timestamp2="180282988">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2312" _type="Insert" date="Sun Feb 27 17:26:33 EST 2022" docASTNodeCount="1087" docActiveCodeLength="7870" docExpressionCount="675" docLength="8600" length="1" offset="5681" starttimestamp="1645820509543" timestamp="180283865">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="2313" _type="InsertStringCommand" date="Sun Feb 27 17:26:33 EST 2022" starttimestamp="1645820509543" timestamp="180283876" timestamp2="180283876">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2314" _type="InsertStringCommand" date="Sun Feb 27 17:26:33 EST 2022" starttimestamp="1645820509543" timestamp="180283877" timestamp2="180283877">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2315" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:26:33 EST 2022" starttimestamp="1645820509543" timestamp="180284332" />
  <Command __id="2316" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:26:33 EST 2022" starttimestamp="1645820509543" timestamp="180284424" />
  <Command __id="2317" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:26:33 EST 2022" starttimestamp="1645820509543" timestamp="180284445" />
  <Command __id="2318" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:26:34 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11026" docExpressionCount="1107" docLength="11694" projectName="pa1" starttimestamp="1645820509543" timestamp="180285348">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			System.out.println("in here, " + currentToken.kind);¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS"), Diff(INSERT," ¶				|| currentToken.kind == TokenKind.EQUAL"), Diff(EQUAL,") {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
			System.out.println("in here, " + currentToken.kind);
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="2319" _type="MoveCaretCommand" caretOffset="8264" date="Sun Feb 27 17:26:34 EST 2022" docOffset="8342" starttimestamp="1645820509543" timestamp="180285414" />
  <Command __id="2323" _type="RunCommand" date="Sun Feb 27 17:26:39 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180290000" type="Run" />
  <Command __id="2324" _type="RunCommand" date="Sun Feb 27 17:26:39 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180290000" type="Run" />
  <Command __id="2325" _type="RunCommand" date="Sun Feb 27 17:26:39 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180290116" type="Run" />
  <Command __id="2326" _type="RunCommand" date="Sun Feb 27 17:26:39 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180290116" type="Run" />
  <Command __id="2327" _type="EHExceptionCommand" date="Sun Feb 27 17:26:39 EST 2022" starttimestamp="1645820509543" timestamp="180290167" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
in here, EQUAL

Parse error: parsing expression, current token is: miniJava.SyntacticAnalyzer.Token@15db9742
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="2329" _type="ShellCommand" date="Sun Feb 27 17:26:47 EST 2022" starttimestamp="1645820509543" timestamp="180298339" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2330" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:26:50 EST 2022" forward="false" matchWord="true" offset="219" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180301195" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2331" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:26:52 EST 2022" forward="true" matchWord="true" offset="219" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180302515" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2332" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:26:52 EST 2022" forward="true" matchWord="true" offset="219" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180303243" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2320" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:26:37 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="180288434">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="2321" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:26:38 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="180288747">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2333" _type="ShellCommand" date="Sun Feb 27 17:26:54 EST 2022" starttimestamp="1645820509543" timestamp="180305103" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2335" _type="MoveCaretCommand" caretOffset="2593" date="Sun Feb 27 17:27:13 EST 2022" docOffset="2671" starttimestamp="1645820509543" timestamp="180323892" />
  <Command __id="2336" _type="SelectTextCommand" caretOffset="2587" date="Sun Feb 27 17:27:14 EST 2022" end="2593" start="2587" starttimestamp="1645820509543" timestamp="180324539" />
  <Command __id="2337" _type="SelectTextCommand" caretOffset="2587" date="Sun Feb 27 17:27:14 EST 2022" end="2593" start="2587" starttimestamp="1645820509543" timestamp="180324539" />
  <Command __id="2338" _type="MoveCaretCommand" caretOffset="2590" date="Sun Feb 27 17:27:14 EST 2022" docOffset="2668" starttimestamp="1645820509543" timestamp="180324868" />
  <Command __id="2339" _type="MoveCaretCommand" caretOffset="2590" date="Sun Feb 27 17:27:14 EST 2022" docOffset="2668" starttimestamp="1645820509543" timestamp="180324868" />
  <Command __id="2341" _type="ShellCommand" date="Sun Feb 27 17:27:14 EST 2022" starttimestamp="1645820509543" timestamp="180325408" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2342" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:27:17 EST 2022" forward="true" matchWord="true" offset="2668" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180327703" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2343" _type="ShellCommand" date="Sun Feb 27 17:27:19 EST 2022" starttimestamp="1645820509543" timestamp="180329798" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2334" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:27:13 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11026" docExpressionCount="1107" docLength="11694" projectName="pa1" starttimestamp="1645820509543" timestamp="180323829">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶			System.out.println("in here, " + currentToken.kind);¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2344" _type="MoveCaretCommand" caretOffset="2904" date="Sun Feb 27 17:27:36 EST 2022" docOffset="2982" starttimestamp="1645820509543" timestamp="180346594" />
  <Command __id="2345" _type="MoveCaretCommand" caretOffset="2904" date="Sun Feb 27 17:27:36 EST 2022" docOffset="2982" starttimestamp="1645820509543" timestamp="180346594" />
  <Command __id="2347" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 17:27:38 EST 2022" starttimestamp="1645820509543" timestamp="180348515" />
  <Command __id="2348" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:27:38 EST 2022" starttimestamp="1645820509543" timestamp="180349036" />
  <Command __id="2349" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:27:38 EST 2022" starttimestamp="1645820509543" timestamp="180349133" />
  <Command __id="2350" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:27:38 EST 2022" starttimestamp="1645820509543" timestamp="180349171" />
  <Command __id="2351" _type="MoveCaretCommand" caretOffset="3084" date="Sun Feb 27 17:27:39 EST 2022" docOffset="3162" starttimestamp="1645820509543" timestamp="180349786" />
  <Command __id="2352" _type="MoveCaretCommand" caretOffset="3084" date="Sun Feb 27 17:27:39 EST 2022" docOffset="3162" starttimestamp="1645820509543" timestamp="180349786" />
  <Command __id="2353" _type="MoveCaretCommand" caretOffset="3142" date="Sun Feb 27 17:27:40 EST 2022" docOffset="3220" starttimestamp="1645820509543" timestamp="180350826" />
  <Command __id="2354" _type="MoveCaretCommand" caretOffset="3142" date="Sun Feb 27 17:27:40 EST 2022" docOffset="3220" starttimestamp="1645820509543" timestamp="180350826" />
  <Command __id="2355" _type="MoveCaretCommand" caretOffset="3162" date="Sun Feb 27 17:27:55 EST 2022" docOffset="3240" starttimestamp="1645820509543" timestamp="180365538" />
  <Command __id="2356" _type="MoveCaretCommand" caretOffset="3162" date="Sun Feb 27 17:27:55 EST 2022" docOffset="3240" starttimestamp="1645820509543" timestamp="180365539" />
  <Command __id="2357" _type="SelectTextCommand" caretOffset="3163" date="Sun Feb 27 17:27:55 EST 2022" end="3163" start="3148" starttimestamp="1645820509543" timestamp="180365651" />
  <Command __id="2358" _type="SelectTextCommand" caretOffset="3163" date="Sun Feb 27 17:27:55 EST 2022" end="3163" start="3148" starttimestamp="1645820509543" timestamp="180365651" />
  <Command __id="2359" _type="SelectTextCommand" caretOffset="3163" date="Sun Feb 27 17:27:56 EST 2022" end="3163" start="3148" starttimestamp="1645820509543" timestamp="180366490" />
  <Command __id="2360" _type="SelectTextCommand" caretOffset="3163" date="Sun Feb 27 17:27:56 EST 2022" end="3163" start="3148" starttimestamp="1645820509543" timestamp="180366490" />
  <Command __id="2361" _type="MoveCaretCommand" caretOffset="3159" date="Sun Feb 27 17:28:00 EST 2022" docOffset="3237" starttimestamp="1645820509543" timestamp="180370478" />
  <Command __id="2362" _type="MoveCaretCommand" caretOffset="3159" date="Sun Feb 27 17:28:00 EST 2022" docOffset="3237" starttimestamp="1645820509543" timestamp="180370478" />
  <Command __id="2363" _type="MoveCaretCommand" caretOffset="3159" date="Sun Feb 27 17:28:00 EST 2022" docOffset="3237" starttimestamp="1645820509543" timestamp="180371075" />
  <Command __id="2364" _type="MoveCaretCommand" caretOffset="3159" date="Sun Feb 27 17:28:00 EST 2022" docOffset="3237" starttimestamp="1645820509543" timestamp="180371075" />
  <DocumentChange __id="2346" _type="Insert" date="Sun Feb 27 17:27:38 EST 2022" docASTNodeCount="1566" docActiveCodeLength="10971" docExpressionCount="1097" docLength="11696" length="2" offset="2927" starttimestamp="1645820509543" timestamp="180348476">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="2366" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:28:09 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="180379589">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="2367" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:28:11 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="180382311">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2365" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sun Feb 27 17:28:01 EST 2022" starttimestamp="1645820509543" timestamp="180372166" />
  <Command __id="2368" _type="MoveCaretCommand" caretOffset="219" date="Sun Feb 27 17:28:11 EST 2022" docOffset="219" starttimestamp="1645820509543" timestamp="180382385" />
  <Command __id="2370" _type="MoveCaretCommand" caretOffset="6997" date="Sun Feb 27 17:28:21 EST 2022" docOffset="7075" starttimestamp="1645820509543" timestamp="180391894" />
  <Command __id="2371" _type="MoveCaretCommand" caretOffset="6997" date="Sun Feb 27 17:28:21 EST 2022" docOffset="7075" starttimestamp="1645820509543" timestamp="180391942" />
  <Command __id="2372" _type="MoveCaretCommand" caretOffset="7399" date="Sun Feb 27 17:28:29 EST 2022" docOffset="7477" starttimestamp="1645820509543" timestamp="180399459" />
  <Command __id="2373" _type="MoveCaretCommand" caretOffset="7399" date="Sun Feb 27 17:28:29 EST 2022" docOffset="7477" starttimestamp="1645820509543" timestamp="180399459" />
  <Command __id="2375" _type="InsertStringCommand" date="Sun Feb 27 17:28:29 EST 2022" starttimestamp="1645820509543" timestamp="180400177" timestamp2="180400177">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2376" _type="InsertStringCommand" date="Sun Feb 27 17:28:29 EST 2022" starttimestamp="1645820509543" timestamp="180400177" timestamp2="180400177">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2377" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:28:29 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="180400181" />
  <Command __id="2369" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:28:21 EST 2022" docASTNodeCount="1566" docActiveCodeLength="10971" docExpressionCount="1097" docLength="11696" projectName="pa1" starttimestamp="1645820509543" timestamp="180391866">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶"), Diff(INSERT,"//"), Diff(EQUAL,"			System.out.println("in here, " + currentToken.kind);¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
//			System.out.println("in here, " + currentToken.kind);
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="2374" _type="Insert" date="Sun Feb 27 17:28:29 EST 2022" docASTNodeCount="1568" docActiveCodeLength="10972" docExpressionCount="1098" docLength="11697" length="1" offset="7477" starttimestamp="1645820509543" timestamp="180400173">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="2379" _type="Insert" date="Sun Feb 27 17:28:31 EST 2022" docASTNodeCount="1568" docActiveCodeLength="10980" docExpressionCount="1099" docLength="11705" length="8" offset="7478" starttimestamp="1645820509543" timestamp="180401925">
    <text><![CDATA[spelling]]></text>
  </DocumentChange>
  <Command __id="2378" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:28:31 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="180401919" />
  <Command __id="2380" _type="InsertStringCommand" date="Sun Feb 27 17:28:31 EST 2022" starttimestamp="1645820509543" timestamp="180401932" timestamp2="180401932">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2381" _type="InsertStringCommand" date="Sun Feb 27 17:28:31 EST 2022" starttimestamp="1645820509543" timestamp="180401932" timestamp2="180401932">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2383" _type="InsertStringCommand" date="Sun Feb 27 17:28:33 EST 2022" starttimestamp="1645820509543" timestamp="180403562" timestamp2="180403562">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2384" _type="InsertStringCommand" date="Sun Feb 27 17:28:33 EST 2022" starttimestamp="1645820509543" timestamp="180403563" timestamp2="180403563">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2386" _type="InsertStringCommand" date="Sun Feb 27 17:28:34 EST 2022" starttimestamp="1645820509543" timestamp="180404569" timestamp2="180404569">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="2387" _type="InsertStringCommand" date="Sun Feb 27 17:28:34 EST 2022" starttimestamp="1645820509543" timestamp="180404569" timestamp2="180404569">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="2389" _type="InsertStringCommand" date="Sun Feb 27 17:28:34 EST 2022" starttimestamp="1645820509543" timestamp="180404728" timestamp2="180404728">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2390" _type="InsertStringCommand" date="Sun Feb 27 17:28:34 EST 2022" starttimestamp="1645820509543" timestamp="180404728" timestamp2="180404728">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2392" _type="InsertStringCommand" date="Sun Feb 27 17:28:34 EST 2022" starttimestamp="1645820509543" timestamp="180405138" timestamp2="180405138">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2393" _type="InsertStringCommand" date="Sun Feb 27 17:28:34 EST 2022" starttimestamp="1645820509543" timestamp="180405138" timestamp2="180405138">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2394" _type="InsertStringCommand" date="Sun Feb 27 17:28:35 EST 2022" starttimestamp="1645820509543" timestamp="180405798" timestamp2="180405798">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2395" _type="InsertStringCommand" date="Sun Feb 27 17:28:35 EST 2022" starttimestamp="1645820509543" timestamp="180405798" timestamp2="180405798">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2396" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:28:35 EST 2022" starttimestamp="1645820509543" timestamp="180406206" />
  <Command __id="2397" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:28:35 EST 2022" starttimestamp="1645820509543" timestamp="180406206" />
  <Command __id="2399" _type="InsertStringCommand" date="Sun Feb 27 17:28:36 EST 2022" starttimestamp="1645820509543" timestamp="180406519" timestamp2="180406519">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2400" _type="InsertStringCommand" date="Sun Feb 27 17:28:36 EST 2022" starttimestamp="1645820509543" timestamp="180406519" timestamp2="180406519">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2402" _type="InsertStringCommand" date="Sun Feb 27 17:28:36 EST 2022" starttimestamp="1645820509543" timestamp="180406678" timestamp2="180406678">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2403" _type="InsertStringCommand" date="Sun Feb 27 17:28:36 EST 2022" starttimestamp="1645820509543" timestamp="180406679" timestamp2="180406679">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2405" _type="InsertStringCommand" date="Sun Feb 27 17:28:36 EST 2022" starttimestamp="1645820509543" timestamp="180406822" timestamp2="180406822">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2406" _type="InsertStringCommand" date="Sun Feb 27 17:28:36 EST 2022" starttimestamp="1645820509543" timestamp="180406823" timestamp2="180406823">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2408" _type="InsertStringCommand" date="Sun Feb 27 17:28:36 EST 2022" starttimestamp="1645820509543" timestamp="180406966" timestamp2="180406966">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2409" _type="InsertStringCommand" date="Sun Feb 27 17:28:36 EST 2022" starttimestamp="1645820509543" timestamp="180406966" timestamp2="180406966">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2411" _type="InsertStringCommand" date="Sun Feb 27 17:28:36 EST 2022" starttimestamp="1645820509543" timestamp="180407380" timestamp2="180407380">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2412" _type="InsertStringCommand" date="Sun Feb 27 17:28:36 EST 2022" starttimestamp="1645820509543" timestamp="180407380" timestamp2="180407380">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2414" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:37 EST 2022" starttimestamp="1645820509543" timestamp="180407611" />
  <Command __id="2415" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:37 EST 2022" starttimestamp="1645820509543" timestamp="180407611" />
  <Command __id="2417" _type="InsertStringCommand" date="Sun Feb 27 17:28:37 EST 2022" starttimestamp="1645820509543" timestamp="180407838" timestamp2="180407838">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2418" _type="InsertStringCommand" date="Sun Feb 27 17:28:37 EST 2022" starttimestamp="1645820509543" timestamp="180407838" timestamp2="180407838">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2420" _type="InsertStringCommand" date="Sun Feb 27 17:28:37 EST 2022" starttimestamp="1645820509543" timestamp="180408052" timestamp2="180408052">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2421" _type="InsertStringCommand" date="Sun Feb 27 17:28:37 EST 2022" starttimestamp="1645820509543" timestamp="180408052" timestamp2="180408052">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2423" _type="InsertStringCommand" date="Sun Feb 27 17:28:37 EST 2022" starttimestamp="1645820509543" timestamp="180408265" timestamp2="180408265">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2424" _type="InsertStringCommand" date="Sun Feb 27 17:28:37 EST 2022" starttimestamp="1645820509543" timestamp="180408265" timestamp2="180408265">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2426" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:38 EST 2022" starttimestamp="1645820509543" timestamp="180408494" />
  <Command __id="2427" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:38 EST 2022" starttimestamp="1645820509543" timestamp="180408494" />
  <Command __id="2429" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:38 EST 2022" starttimestamp="1645820509543" timestamp="180408663" />
  <Command __id="2430" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:38 EST 2022" starttimestamp="1645820509543" timestamp="180408663" />
  <Command __id="2432" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:38 EST 2022" starttimestamp="1645820509543" timestamp="180408799" />
  <Command __id="2433" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:38 EST 2022" starttimestamp="1645820509543" timestamp="180408799" />
  <Command __id="2435" _type="InsertStringCommand" date="Sun Feb 27 17:28:38 EST 2022" starttimestamp="1645820509543" timestamp="180409023" timestamp2="180409023">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2436" _type="InsertStringCommand" date="Sun Feb 27 17:28:38 EST 2022" starttimestamp="1645820509543" timestamp="180409024" timestamp2="180409024">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2438" _type="InsertStringCommand" date="Sun Feb 27 17:28:38 EST 2022" starttimestamp="1645820509543" timestamp="180409050" timestamp2="180409050">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2439" _type="InsertStringCommand" date="Sun Feb 27 17:28:38 EST 2022" starttimestamp="1645820509543" timestamp="180409050" timestamp2="180409050">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2441" _type="InsertStringCommand" date="Sun Feb 27 17:28:38 EST 2022" starttimestamp="1645820509543" timestamp="180409144" timestamp2="180409144">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2442" _type="InsertStringCommand" date="Sun Feb 27 17:28:38 EST 2022" starttimestamp="1645820509543" timestamp="180409144" timestamp2="180409144">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2444" _type="InsertStringCommand" date="Sun Feb 27 17:28:38 EST 2022" starttimestamp="1645820509543" timestamp="180409275" timestamp2="180409275">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2445" _type="InsertStringCommand" date="Sun Feb 27 17:28:38 EST 2022" starttimestamp="1645820509543" timestamp="180409275" timestamp2="180409275">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2447" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:39 EST 2022" starttimestamp="1645820509543" timestamp="180409934" />
  <DocumentChange __id="2382" _type="Insert" date="Sun Feb 27 17:28:33 EST 2022" docASTNodeCount="1568" docActiveCodeLength="10981" docExpressionCount="1099" docLength="11706" length="1" offset="7486" starttimestamp="1645820509543" timestamp="180403558">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2385" _type="Insert" date="Sun Feb 27 17:28:34 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10982" docExpressionCount="1100" docLength="11707" length="1" offset="7487" starttimestamp="1645820509543" timestamp="180404562">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <DocumentChange __id="2388" _type="Insert" date="Sun Feb 27 17:28:34 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10983" docExpressionCount="1100" docLength="11708" length="1" offset="7488" starttimestamp="1645820509543" timestamp="180404718">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2391" _type="Insert" date="Sun Feb 27 17:28:34 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10985" docExpressionCount="1100" docLength="11710" length="2" offset="7489" starttimestamp="1645820509543" timestamp="180405132">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="2398" _type="Insert" date="Sun Feb 27 17:28:36 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10986" docExpressionCount="1100" docLength="11711" length="1" offset="7490" starttimestamp="1645820509543" timestamp="180406513">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2401" _type="Insert" date="Sun Feb 27 17:28:36 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10987" docExpressionCount="1100" docLength="11712" length="1" offset="7491" starttimestamp="1645820509543" timestamp="180406674">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2404" _type="Insert" date="Sun Feb 27 17:28:36 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10988" docExpressionCount="1100" docLength="11713" length="1" offset="7492" starttimestamp="1645820509543" timestamp="180406804">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2407" _type="Insert" date="Sun Feb 27 17:28:36 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10989" docExpressionCount="1100" docLength="11714" length="1" offset="7493" starttimestamp="1645820509543" timestamp="180406962">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2410" _type="Insert" date="Sun Feb 27 17:28:36 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10990" docExpressionCount="1100" docLength="11715" length="1" offset="7494" starttimestamp="1645820509543" timestamp="180407375">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2413" _type="Delete" date="Sun Feb 27 17:28:37 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10989" docExpressionCount="1100" docLength="11714" endLine="330" length="1" offset="7494" startLine="330" starttimestamp="1645820509543" timestamp="180407604">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2416" _type="Insert" date="Sun Feb 27 17:28:37 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10990" docExpressionCount="1100" docLength="11715" length="1" offset="7494" starttimestamp="1645820509543" timestamp="180407833">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="2419" _type="Insert" date="Sun Feb 27 17:28:37 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10991" docExpressionCount="1100" docLength="11716" length="1" offset="7495" starttimestamp="1645820509543" timestamp="180408046">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2422" _type="Insert" date="Sun Feb 27 17:28:37 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10992" docExpressionCount="1100" docLength="11717" length="1" offset="7496" starttimestamp="1645820509543" timestamp="180408257">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2425" _type="Delete" date="Sun Feb 27 17:28:38 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10991" docExpressionCount="1100" docLength="11716" endLine="330" length="1" offset="7496" startLine="330" starttimestamp="1645820509543" timestamp="180408490">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2428" _type="Delete" date="Sun Feb 27 17:28:38 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10990" docExpressionCount="1100" docLength="11715" endLine="330" length="1" offset="7495" startLine="330" starttimestamp="1645820509543" timestamp="180408659">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2431" _type="Delete" date="Sun Feb 27 17:28:38 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10989" docExpressionCount="1100" docLength="11714" endLine="330" length="1" offset="7494" startLine="330" starttimestamp="1645820509543" timestamp="180408794">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="2434" _type="Insert" date="Sun Feb 27 17:28:38 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10990" docExpressionCount="1100" docLength="11715" length="1" offset="7494" starttimestamp="1645820509543" timestamp="180409018">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2437" _type="Insert" date="Sun Feb 27 17:28:38 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10991" docExpressionCount="1100" docLength="11716" length="1" offset="7495" starttimestamp="1645820509543" timestamp="180409046">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2440" _type="Insert" date="Sun Feb 27 17:28:38 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10992" docExpressionCount="1100" docLength="11717" length="1" offset="7496" starttimestamp="1645820509543" timestamp="180409132">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2443" _type="Insert" date="Sun Feb 27 17:28:38 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10993" docExpressionCount="1100" docLength="11718" length="1" offset="7497" starttimestamp="1645820509543" timestamp="180409265">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2446" _type="Delete" date="Sun Feb 27 17:28:39 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10992" docExpressionCount="1100" docLength="11717" endLine="330" length="1" offset="7497" startLine="330" starttimestamp="1645820509543" timestamp="180409930">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2449" _type="Delete" date="Sun Feb 27 17:28:39 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10991" docExpressionCount="1100" docLength="11716" endLine="330" length="1" offset="7496" startLine="330" starttimestamp="1645820509543" timestamp="180410081">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2452" _type="Insert" date="Sun Feb 27 17:28:39 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10992" docExpressionCount="1100" docLength="11717" length="1" offset="7496" starttimestamp="1645820509543" timestamp="180410146">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2455" _type="Insert" date="Sun Feb 27 17:28:39 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10993" docExpressionCount="1100" docLength="11718" length="1" offset="7497" starttimestamp="1645820509543" timestamp="180410372">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="2448" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:39 EST 2022" starttimestamp="1645820509543" timestamp="180409934" />
  <Command __id="2450" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:39 EST 2022" starttimestamp="1645820509543" timestamp="180410087" />
  <Command __id="2451" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:39 EST 2022" starttimestamp="1645820509543" timestamp="180410087" />
  <Command __id="2453" _type="InsertStringCommand" date="Sun Feb 27 17:28:39 EST 2022" starttimestamp="1645820509543" timestamp="180410150" timestamp2="180410150">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2454" _type="InsertStringCommand" date="Sun Feb 27 17:28:39 EST 2022" starttimestamp="1645820509543" timestamp="180410150" timestamp2="180410150">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2456" _type="InsertStringCommand" date="Sun Feb 27 17:28:39 EST 2022" starttimestamp="1645820509543" timestamp="180410376" timestamp2="180410376">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2457" _type="InsertStringCommand" date="Sun Feb 27 17:28:39 EST 2022" starttimestamp="1645820509543" timestamp="180410376" timestamp2="180410376">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2459" _type="InsertStringCommand" date="Sun Feb 27 17:28:39 EST 2022" starttimestamp="1645820509543" timestamp="180410438" timestamp2="180410438">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2460" _type="InsertStringCommand" date="Sun Feb 27 17:28:39 EST 2022" starttimestamp="1645820509543" timestamp="180410438" timestamp2="180410438">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2462" _type="InsertStringCommand" date="Sun Feb 27 17:28:40 EST 2022" starttimestamp="1645820509543" timestamp="180410609" timestamp2="180410609">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2463" _type="InsertStringCommand" date="Sun Feb 27 17:28:40 EST 2022" starttimestamp="1645820509543" timestamp="180410609" timestamp2="180410609">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2465" _type="InsertStringCommand" date="Sun Feb 27 17:28:40 EST 2022" starttimestamp="1645820509543" timestamp="180410679" timestamp2="180410679">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2466" _type="InsertStringCommand" date="Sun Feb 27 17:28:40 EST 2022" starttimestamp="1645820509543" timestamp="180410679" timestamp2="180410679">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2468" _type="InsertStringCommand" date="Sun Feb 27 17:28:40 EST 2022" starttimestamp="1645820509543" timestamp="180410789" timestamp2="180410789">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2469" _type="InsertStringCommand" date="Sun Feb 27 17:28:40 EST 2022" starttimestamp="1645820509543" timestamp="180410789" timestamp2="180410789">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2471" _type="InsertStringCommand" date="Sun Feb 27 17:28:40 EST 2022" starttimestamp="1645820509543" timestamp="180410925" timestamp2="180410925">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2472" _type="InsertStringCommand" date="Sun Feb 27 17:28:40 EST 2022" starttimestamp="1645820509543" timestamp="180410926" timestamp2="180410926">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2474" _type="InsertStringCommand" date="Sun Feb 27 17:28:40 EST 2022" starttimestamp="1645820509543" timestamp="180411074" timestamp2="180411074">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2475" _type="InsertStringCommand" date="Sun Feb 27 17:28:40 EST 2022" starttimestamp="1645820509543" timestamp="180411074" timestamp2="180411074">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2477" _type="InsertStringCommand" date="Sun Feb 27 17:28:40 EST 2022" starttimestamp="1645820509543" timestamp="180411166" timestamp2="180411166">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2478" _type="InsertStringCommand" date="Sun Feb 27 17:28:40 EST 2022" starttimestamp="1645820509543" timestamp="180411198" timestamp2="180411198">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2480" _type="InsertStringCommand" date="Sun Feb 27 17:28:40 EST 2022" starttimestamp="1645820509543" timestamp="180411235" timestamp2="180411235">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2481" _type="InsertStringCommand" date="Sun Feb 27 17:28:40 EST 2022" starttimestamp="1645820509543" timestamp="180411236" timestamp2="180411236">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2483" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:41 EST 2022" starttimestamp="1645820509543" timestamp="180411640" />
  <DocumentChange __id="2458" _type="Insert" date="Sun Feb 27 17:28:39 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10994" docExpressionCount="1100" docLength="11719" length="1" offset="7498" starttimestamp="1645820509543" timestamp="180410431">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="2461" _type="Insert" date="Sun Feb 27 17:28:40 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10995" docExpressionCount="1100" docLength="11720" length="1" offset="7499" starttimestamp="1645820509543" timestamp="180410601">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2464" _type="Insert" date="Sun Feb 27 17:28:40 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10996" docExpressionCount="1100" docLength="11721" length="1" offset="7500" starttimestamp="1645820509543" timestamp="180410674">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2467" _type="Insert" date="Sun Feb 27 17:28:40 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10997" docExpressionCount="1100" docLength="11722" length="1" offset="7501" starttimestamp="1645820509543" timestamp="180410781">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2470" _type="Insert" date="Sun Feb 27 17:28:40 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10998" docExpressionCount="1100" docLength="11723" length="1" offset="7502" starttimestamp="1645820509543" timestamp="180410922">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2473" _type="Insert" date="Sun Feb 27 17:28:40 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10999" docExpressionCount="1100" docLength="11724" length="1" offset="7503" starttimestamp="1645820509543" timestamp="180411065">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2476" _type="Insert" date="Sun Feb 27 17:28:40 EST 2022" docASTNodeCount="1569" docActiveCodeLength="11000" docExpressionCount="1100" docLength="11725" length="1" offset="7504" starttimestamp="1645820509543" timestamp="180411162">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2479" _type="Insert" date="Sun Feb 27 17:28:40 EST 2022" docASTNodeCount="1569" docActiveCodeLength="11001" docExpressionCount="1100" docLength="11726" length="1" offset="7505" starttimestamp="1645820509543" timestamp="180411228">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2482" _type="Delete" date="Sun Feb 27 17:28:41 EST 2022" docASTNodeCount="1569" docActiveCodeLength="11000" docExpressionCount="1100" docLength="11725" endLine="330" length="1" offset="7505" startLine="330" starttimestamp="1645820509543" timestamp="180411638">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2485" _type="Delete" date="Sun Feb 27 17:28:41 EST 2022" docASTNodeCount="1569" docActiveCodeLength="10999" docExpressionCount="1100" docLength="11724" endLine="330" length="1" offset="7504" startLine="330" starttimestamp="1645820509543" timestamp="180411811">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2488" _type="Insert" date="Sun Feb 27 17:28:41 EST 2022" docASTNodeCount="1569" docActiveCodeLength="11000" docExpressionCount="1100" docLength="11725" length="1" offset="7504" starttimestamp="1645820509543" timestamp="180411892">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2491" _type="Insert" date="Sun Feb 27 17:28:42 EST 2022" docASTNodeCount="1569" docActiveCodeLength="11001" docExpressionCount="1100" docLength="11726" length="1" offset="7505" starttimestamp="1645820509543" timestamp="180413319">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <DocumentChange __id="2494" _type="Insert" date="Sun Feb 27 17:28:43 EST 2022" docASTNodeCount="1569" docActiveCodeLength="11002" docExpressionCount="1100" docLength="11727" length="1" offset="7506" starttimestamp="1645820509543" timestamp="180413473">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2499" _type="Insert" date="Sun Feb 27 17:28:43 EST 2022" docASTNodeCount="1569" docActiveCodeLength="11003" docExpressionCount="1100" docLength="11728" length="1" offset="7508" starttimestamp="1645820509543" timestamp="180414318">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2502" _type="Insert" date="Sun Feb 27 17:28:44 EST 2022" docASTNodeCount="1569" docActiveCodeLength="11004" docExpressionCount="1100" docLength="11729" length="1" offset="7509" starttimestamp="1645820509543" timestamp="180414610">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <DocumentChange __id="2505" _type="Insert" date="Sun Feb 27 17:28:44 EST 2022" docASTNodeCount="1569" docActiveCodeLength="11005" docExpressionCount="1100" docLength="11730" length="1" offset="7510" starttimestamp="1645820509543" timestamp="180414757">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="2484" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:41 EST 2022" starttimestamp="1645820509543" timestamp="180411640" />
  <Command __id="2486" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:41 EST 2022" starttimestamp="1645820509543" timestamp="180411818" />
  <Command __id="2487" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:28:41 EST 2022" starttimestamp="1645820509543" timestamp="180411819" />
  <Command __id="2489" _type="InsertStringCommand" date="Sun Feb 27 17:28:41 EST 2022" starttimestamp="1645820509543" timestamp="180411905" timestamp2="180411905">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2490" _type="InsertStringCommand" date="Sun Feb 27 17:28:41 EST 2022" starttimestamp="1645820509543" timestamp="180411905" timestamp2="180411905">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2492" _type="InsertStringCommand" date="Sun Feb 27 17:28:42 EST 2022" starttimestamp="1645820509543" timestamp="180413324" timestamp2="180413324">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="2493" _type="InsertStringCommand" date="Sun Feb 27 17:28:42 EST 2022" starttimestamp="1645820509543" timestamp="180413324" timestamp2="180413324">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="2495" _type="InsertStringCommand" date="Sun Feb 27 17:28:43 EST 2022" starttimestamp="1645820509543" timestamp="180413477" timestamp2="180413477">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2496" _type="InsertStringCommand" date="Sun Feb 27 17:28:43 EST 2022" starttimestamp="1645820509543" timestamp="180413477" timestamp2="180413477">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2497" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:28:43 EST 2022" starttimestamp="1645820509543" timestamp="180413792" />
  <Command __id="2498" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:28:43 EST 2022" starttimestamp="1645820509543" timestamp="180413792" />
  <Command __id="2500" _type="InsertStringCommand" date="Sun Feb 27 17:28:43 EST 2022" starttimestamp="1645820509543" timestamp="180414323" timestamp2="180414323">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2501" _type="InsertStringCommand" date="Sun Feb 27 17:28:43 EST 2022" starttimestamp="1645820509543" timestamp="180414323" timestamp2="180414323">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2503" _type="InsertStringCommand" date="Sun Feb 27 17:28:44 EST 2022" starttimestamp="1645820509543" timestamp="180414615" timestamp2="180414615">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="2504" _type="InsertStringCommand" date="Sun Feb 27 17:28:44 EST 2022" starttimestamp="1645820509543" timestamp="180414616" timestamp2="180414616">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="2506" _type="InsertStringCommand" date="Sun Feb 27 17:28:44 EST 2022" starttimestamp="1645820509543" timestamp="180414771" timestamp2="180414771">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2507" _type="InsertStringCommand" date="Sun Feb 27 17:28:44 EST 2022" starttimestamp="1645820509543" timestamp="180414771" timestamp2="180414771">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2509" _type="InsertStringCommand" date="Sun Feb 27 17:28:45 EST 2022" starttimestamp="1645820509543" timestamp="180415823" timestamp2="180415823">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2510" _type="InsertStringCommand" date="Sun Feb 27 17:28:45 EST 2022" starttimestamp="1645820509543" timestamp="180415823" timestamp2="180415823">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2512" _type="InsertStringCommand" date="Sun Feb 27 17:28:45 EST 2022" starttimestamp="1645820509543" timestamp="180416109" timestamp2="180416109">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2513" _type="InsertStringCommand" date="Sun Feb 27 17:28:45 EST 2022" starttimestamp="1645820509543" timestamp="180416109" timestamp2="180416109">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2515" _type="InsertStringCommand" date="Sun Feb 27 17:28:45 EST 2022" starttimestamp="1645820509543" timestamp="180416304" timestamp2="180416304">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2516" _type="InsertStringCommand" date="Sun Feb 27 17:28:45 EST 2022" starttimestamp="1645820509543" timestamp="180416304" timestamp2="180416304">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2518" _type="InsertStringCommand" date="Sun Feb 27 17:28:46 EST 2022" starttimestamp="1645820509543" timestamp="180416470" timestamp2="180416470">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2519" _type="InsertStringCommand" date="Sun Feb 27 17:28:46 EST 2022" starttimestamp="1645820509543" timestamp="180416470" timestamp2="180416470">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2521" _type="InsertStringCommand" date="Sun Feb 27 17:28:46 EST 2022" starttimestamp="1645820509543" timestamp="180416492" timestamp2="180416492">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2522" _type="InsertStringCommand" date="Sun Feb 27 17:28:46 EST 2022" starttimestamp="1645820509543" timestamp="180416492" timestamp2="180416492">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2524" _type="InsertStringCommand" date="Sun Feb 27 17:28:46 EST 2022" starttimestamp="1645820509543" timestamp="180417324" timestamp2="180417324">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2525" _type="InsertStringCommand" date="Sun Feb 27 17:28:46 EST 2022" starttimestamp="1645820509543" timestamp="180417324" timestamp2="180417324">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2527" _type="InsertStringCommand" date="Sun Feb 27 17:28:46 EST 2022" starttimestamp="1645820509543" timestamp="180417410" timestamp2="180417410">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2528" _type="InsertStringCommand" date="Sun Feb 27 17:28:46 EST 2022" starttimestamp="1645820509543" timestamp="180417410" timestamp2="180417410">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2530" _type="InsertStringCommand" date="Sun Feb 27 17:28:47 EST 2022" starttimestamp="1645820509543" timestamp="180417862" timestamp2="180417862">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2531" _type="InsertStringCommand" date="Sun Feb 27 17:28:47 EST 2022" starttimestamp="1645820509543" timestamp="180417862" timestamp2="180417862">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2533" _type="InsertStringCommand" date="Sun Feb 27 17:28:47 EST 2022" starttimestamp="1645820509543" timestamp="180417988" timestamp2="180417988">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2534" _type="InsertStringCommand" date="Sun Feb 27 17:28:47 EST 2022" starttimestamp="1645820509543" timestamp="180417988" timestamp2="180417988">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2536" _type="InsertStringCommand" date="Sun Feb 27 17:28:47 EST 2022" starttimestamp="1645820509543" timestamp="180418175" timestamp2="180418175">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2537" _type="InsertStringCommand" date="Sun Feb 27 17:28:47 EST 2022" starttimestamp="1645820509543" timestamp="180418175" timestamp2="180418175">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2539" _type="InsertStringCommand" date="Sun Feb 27 17:28:47 EST 2022" starttimestamp="1645820509543" timestamp="180418231" timestamp2="180418231">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2540" _type="InsertStringCommand" date="Sun Feb 27 17:28:47 EST 2022" starttimestamp="1645820509543" timestamp="180418231" timestamp2="180418231">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2542" _type="InsertStringCommand" date="Sun Feb 27 17:28:47 EST 2022" starttimestamp="1645820509543" timestamp="180418313" timestamp2="180418313">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2543" _type="InsertStringCommand" date="Sun Feb 27 17:28:47 EST 2022" starttimestamp="1645820509543" timestamp="180418313" timestamp2="180418313">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2545" _type="InsertStringCommand" date="Sun Feb 27 17:28:48 EST 2022" starttimestamp="1645820509543" timestamp="180418567" timestamp2="180418567">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="2546" _type="InsertStringCommand" date="Sun Feb 27 17:28:48 EST 2022" starttimestamp="1645820509543" timestamp="180418567" timestamp2="180418567">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="2548" _type="InsertStringCommand" date="Sun Feb 27 17:28:48 EST 2022" starttimestamp="1645820509543" timestamp="180418578" timestamp2="180418578">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2549" _type="InsertStringCommand" date="Sun Feb 27 17:28:48 EST 2022" starttimestamp="1645820509543" timestamp="180418578" timestamp2="180418578">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2550" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:28:48 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="180418581" />
  <Command __id="2554" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:28:48 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="180419402" />
  <Command __id="2556" _type="InsertStringCommand" date="Sun Feb 27 17:28:48 EST 2022" starttimestamp="1645820509543" timestamp="180419411" timestamp2="180419411">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2557" _type="InsertStringCommand" date="Sun Feb 27 17:28:48 EST 2022" starttimestamp="1645820509543" timestamp="180419411" timestamp2="180419411">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2558" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:28:48 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="180419416" />
  <DocumentChange __id="2508" _type="Insert" date="Sun Feb 27 17:28:45 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11006" docExpressionCount="1101" docLength="11731" length="1" offset="7511" starttimestamp="1645820509543" timestamp="180415817">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="2511" _type="Insert" date="Sun Feb 27 17:28:45 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11007" docExpressionCount="1101" docLength="11732" length="1" offset="7512" starttimestamp="1645820509543" timestamp="180416105">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="2514" _type="Insert" date="Sun Feb 27 17:28:45 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11008" docExpressionCount="1101" docLength="11733" length="1" offset="7513" starttimestamp="1645820509543" timestamp="180416297">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2517" _type="Insert" date="Sun Feb 27 17:28:46 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11009" docExpressionCount="1101" docLength="11734" length="1" offset="7514" starttimestamp="1645820509543" timestamp="180416466">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="2520" _type="Insert" date="Sun Feb 27 17:28:46 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11010" docExpressionCount="1101" docLength="11735" length="1" offset="7515" starttimestamp="1645820509543" timestamp="180416485">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2523" _type="Insert" date="Sun Feb 27 17:28:46 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11011" docExpressionCount="1101" docLength="11736" length="1" offset="7516" starttimestamp="1645820509543" timestamp="180417307">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2526" _type="Insert" date="Sun Feb 27 17:28:46 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11012" docExpressionCount="1101" docLength="11737" length="1" offset="7517" starttimestamp="1645820509543" timestamp="180417400">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2529" _type="Insert" date="Sun Feb 27 17:28:47 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11013" docExpressionCount="1101" docLength="11738" length="1" offset="7518" starttimestamp="1645820509543" timestamp="180417857">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <DocumentChange __id="2532" _type="Insert" date="Sun Feb 27 17:28:47 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11014" docExpressionCount="1101" docLength="11739" length="1" offset="7519" starttimestamp="1645820509543" timestamp="180417976">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2535" _type="Insert" date="Sun Feb 27 17:28:47 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11015" docExpressionCount="1101" docLength="11740" length="1" offset="7520" starttimestamp="1645820509543" timestamp="180418163">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="2538" _type="Insert" date="Sun Feb 27 17:28:47 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11016" docExpressionCount="1101" docLength="11741" length="1" offset="7521" starttimestamp="1645820509543" timestamp="180418223">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2541" _type="Insert" date="Sun Feb 27 17:28:47 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11017" docExpressionCount="1101" docLength="11742" length="1" offset="7522" starttimestamp="1645820509543" timestamp="180418305">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2544" _type="Insert" date="Sun Feb 27 17:28:48 EST 2022" docASTNodeCount="1571" docActiveCodeLength="11018" docExpressionCount="1102" docLength="11743" length="1" offset="7523" starttimestamp="1645820509543" timestamp="180418560">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="2547" _type="Insert" date="Sun Feb 27 17:28:48 EST 2022" docASTNodeCount="1571" docActiveCodeLength="11019" docExpressionCount="1102" docLength="11744" length="1" offset="7524" starttimestamp="1645820509543" timestamp="180418574">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="2551" _type="Delete" date="Sun Feb 27 17:28:48 EST 2022" docASTNodeCount="1571" docActiveCodeLength="11018" docExpressionCount="1102" docLength="11743" endLine="330" length="1" offset="7524" startLine="330" starttimestamp="1645820509543" timestamp="180419003">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="2552" _type="Delete" date="Sun Feb 27 17:28:48 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11017" docExpressionCount="1101" docLength="11742" endLine="330" length="1" offset="7523" startLine="330" starttimestamp="1645820509543" timestamp="180419153">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="2553" _type="Insert" date="Sun Feb 27 17:28:48 EST 2022" docASTNodeCount="1571" docActiveCodeLength="11018" docExpressionCount="1102" docLength="11743" length="1" offset="7523" starttimestamp="1645820509543" timestamp="180419382">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="2555" _type="Insert" date="Sun Feb 27 17:28:48 EST 2022" docASTNodeCount="1571" docActiveCodeLength="11019" docExpressionCount="1102" docLength="11744" length="1" offset="7524" starttimestamp="1645820509543" timestamp="180419406">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="2559" _type="Delete" date="Sun Feb 27 17:28:49 EST 2022" docASTNodeCount="1571" docActiveCodeLength="11018" docExpressionCount="1102" docLength="11743" endLine="330" length="1" offset="7524" startLine="330" starttimestamp="1645820509543" timestamp="180419886">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="2560" _type="Delete" date="Sun Feb 27 17:28:49 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11017" docExpressionCount="1101" docLength="11742" endLine="330" length="1" offset="7523" startLine="330" starttimestamp="1645820509543" timestamp="180420081">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="2562" _type="Replace" date="Sun Feb 27 17:28:51 EST 2022" docASTNodeCount="1572" docActiveCodeLength="11018" docExpressionCount="1102" docLength="11743" endLine="330" insertionLength="13" int_docASTNodeCount="1569" int_docActiveCodeLength="11005" int_docExpressionCount="1100" int_docLength="11730" length="12" offset="7511" startLine="330" starttimestamp="1645820509543" timestamp="180422411">
    <deletedText><![CDATA[currentToken]]></deletedText>
    <insertedText><![CDATA[currentToken.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2566" _type="Insert" date="Sun Feb 27 17:28:52 EST 2022" docASTNodeCount="1572" docActiveCodeLength="11019" docExpressionCount="1103" docLength="11744" length="1" offset="7524" starttimestamp="1645820509543" timestamp="180422679">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="2568" _type="Replace" date="Sun Feb 27 17:28:52 EST 2022" docASTNodeCount="1572" docActiveCodeLength="11022" docExpressionCount="1103" docLength="11747" endLine="330" insertionLength="4" int_docASTNodeCount="1572" int_docActiveCodeLength="11018" int_docExpressionCount="1102" int_docLength="11743" length="1" offset="7524" startLine="330" starttimestamp="1645820509543" timestamp="180423396">
    <deletedText><![CDATA[k]]></deletedText>
    <insertedText><![CDATA[kind]]></insertedText>
  </DocumentChange>
  <Command __id="2574" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:28:57 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="180428277">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2576" _type="RunCommand" date="Sun Feb 27 17:28:59 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180430223" type="Run" />
  <Command __id="2577" _type="RunCommand" date="Sun Feb 27 17:28:59 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180430224" type="Run" />
  <Command __id="2578" _type="RunCommand" date="Sun Feb 27 17:28:59 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180430338" type="Run" />
  <Command __id="2579" _type="RunCommand" date="Sun Feb 27 17:28:59 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180430338" type="Run" />
  <Command __id="2580" _type="EHExceptionCommand" date="Sun Feb 27 17:28:59 EST 2022" starttimestamp="1645820509543" timestamp="180430390" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors

Parse error: parsing expression, current token is: miniJava.SyntacticAnalyzer.Token@15db9742
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="2582" _type="MoveCaretCommand" caretOffset="7450" date="Sun Feb 27 17:29:06 EST 2022" docOffset="7528" starttimestamp="1645820509543" timestamp="180436462" />
  <Command __id="2583" _type="MoveCaretCommand" caretOffset="7343" date="Sun Feb 27 17:29:17 EST 2022" docOffset="7421" starttimestamp="1645820509543" timestamp="180447650" />
  <Command __id="2584" _type="MoveCaretCommand" caretOffset="7343" date="Sun Feb 27 17:29:17 EST 2022" docOffset="7421" starttimestamp="1645820509543" timestamp="180447650" />
  <Command __id="2586" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:29:17 EST 2022" starttimestamp="1645820509543" timestamp="180448275" />
  <Command __id="2587" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:29:17 EST 2022" starttimestamp="1645820509543" timestamp="180448275" />
  <Command __id="2588" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:29:19 EST 2022" starttimestamp="1645820509543" timestamp="180449623" />
  <Command __id="2589" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:29:19 EST 2022" starttimestamp="1645820509543" timestamp="180449725" />
  <Command __id="2590" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:29:19 EST 2022" starttimestamp="1645820509543" timestamp="180449747" />
  <Command __id="2591" _type="CopyCommand" date="Sun Feb 27 17:29:23 EST 2022" starttimestamp="1645820509543" timestamp="180454350" />
  <Command __id="2592" _type="MoveCaretCommand" caretOffset="7332" date="Sun Feb 27 17:29:24 EST 2022" docOffset="7410" starttimestamp="1645820509543" timestamp="180455005" />
  <Command __id="2593" _type="MoveCaretCommand" caretOffset="7332" date="Sun Feb 27 17:29:24 EST 2022" docOffset="7410" starttimestamp="1645820509543" timestamp="180455005" />
  <Command __id="2594" _type="MoveCaretCommand" caretOffset="7205" date="Sun Feb 27 17:29:27 EST 2022" docOffset="7283" starttimestamp="1645820509543" timestamp="180457575" />
  <Command __id="2595" _type="MoveCaretCommand" caretOffset="7205" date="Sun Feb 27 17:29:27 EST 2022" docOffset="7283" starttimestamp="1645820509543" timestamp="180457575" />
  <Command __id="2597" _type="ShellCommand" date="Sun Feb 27 17:29:27 EST 2022" starttimestamp="1645820509543" timestamp="180457886" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2598" _type="PasteCommand" date="Sun Feb 27 17:29:28 EST 2022" starttimestamp="1645820509543" timestamp="180458572" />
  <Command __id="2599" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:29:28 EST 2022" forward="true" matchWord="true" offset="7283" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="180459334" wrapSearch="false">
    <searchString><![CDATA[parsing expression, current token is]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2600" _type="ShellCommand" date="Sun Feb 27 17:29:39 EST 2022" starttimestamp="1645820509543" timestamp="180469693" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2601" _type="ShellCommand" date="Sun Feb 27 17:29:41 EST 2022" starttimestamp="1645820509543" timestamp="180472029" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2602" _type="ShellCommand" date="Sun Feb 27 17:29:41 EST 2022" starttimestamp="1645820509543" timestamp="180472110" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2603" _type="MoveCaretCommand" caretOffset="8371" date="Sun Feb 27 17:29:44 EST 2022" docOffset="8449" starttimestamp="1645820509543" timestamp="180475091" />
  <Command __id="2604" _type="MoveCaretCommand" caretOffset="8371" date="Sun Feb 27 17:29:44 EST 2022" docOffset="8449" starttimestamp="1645820509543" timestamp="180475091" />
  <Command __id="2605" _type="MoveCaretCommand" caretOffset="8389" date="Sun Feb 27 17:29:46 EST 2022" docOffset="8467" starttimestamp="1645820509543" timestamp="180476530" />
  <Command __id="2606" _type="MoveCaretCommand" caretOffset="8389" date="Sun Feb 27 17:29:46 EST 2022" docOffset="8467" starttimestamp="1645820509543" timestamp="180476530" />
  <Command __id="2607" _type="MoveCaretCommand" caretOffset="7376" date="Sun Feb 27 17:29:50 EST 2022" docOffset="7454" starttimestamp="1645820509543" timestamp="180480714" />
  <Command __id="2608" _type="MoveCaretCommand" caretOffset="7376" date="Sun Feb 27 17:29:50 EST 2022" docOffset="7454" starttimestamp="1645820509543" timestamp="180480714" />
  <Command __id="2609" _type="SelectTextCommand" caretOffset="7449" date="Sun Feb 27 17:29:53 EST 2022" end="7449" start="7384" starttimestamp="1645820509543" timestamp="180483778" />
  <Command __id="2610" _type="SelectTextCommand" caretOffset="7449" date="Sun Feb 27 17:29:53 EST 2022" end="7449" start="7384" starttimestamp="1645820509543" timestamp="180483778" />
  <Command __id="2611" _type="CopyCommand" date="Sun Feb 27 17:29:53 EST 2022" starttimestamp="1645820509543" timestamp="180484175" />
  <Command __id="2612" _type="SelectTextCommand" caretOffset="8283" date="Sun Feb 27 17:29:57 EST 2022" end="8283" start="8269" starttimestamp="1645820509543" timestamp="180488266" />
  <Command __id="2613" _type="SelectTextCommand" caretOffset="8283" date="Sun Feb 27 17:29:57 EST 2022" end="8283" start="8269" starttimestamp="1645820509543" timestamp="180488267" />
  <Command __id="2615" _type="PasteCommand" date="Sun Feb 27 17:29:57 EST 2022" starttimestamp="1645820509543" timestamp="180488369" />
  <Command __id="2581" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:29:05 EST 2022" docASTNodeCount="1572" docActiveCodeLength="11022" docExpressionCount="1103" docLength="11747" projectName="pa1" starttimestamp="1645820509543" timestamp="180436411">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶//			System.out.println("in here, " + currentToken.kind);¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken"), Diff(INSERT,".spelling + "and its kind is: " + currentToken.kind"), Diff(EQUAL,");¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
//			System.out.println("in here, " + currentToken.kind);
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expressiong, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="2585" _type="Delete" date="Sun Feb 27 17:29:17 EST 2022" docASTNodeCount="1572" docActiveCodeLength="11021" docExpressionCount="1103" docLength="11746" endLine="330" length="1" offset="7420" startLine="330" starttimestamp="1645820509543" timestamp="180448271">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="2614" _type="Replace" date="Sun Feb 27 17:29:57 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11072" docExpressionCount="1109" docLength="11797" endLine="374" insertionLength="65" int_docASTNodeCount="1570" int_docActiveCodeLength="11007" int_docExpressionCount="1101" int_docLength="11732" length="14" offset="8347" startLine="374" starttimestamp="1645820509543" timestamp="180488356">
    <deletedText><![CDATA[+ currentToken]]></deletedText>
    <insertedText><![CDATA[+ currentToken.spelling + "and its kind is: " + currentToken.kind]]></insertedText>
  </DocumentChange>
  <Command __id="2616" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:30:00 EST 2022" starttimestamp="1645820509543" timestamp="180490965" />
  <Command __id="2617" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:30:00 EST 2022" starttimestamp="1645820509543" timestamp="180491061" />
  <Command __id="2618" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:30:00 EST 2022" starttimestamp="1645820509543" timestamp="180491075" />
  <Command __id="2619" _type="MoveCaretCommand" caretOffset="8177" date="Sun Feb 27 17:30:00 EST 2022" docOffset="8255" starttimestamp="1645820509543" timestamp="180491386" />
  <Command __id="2620" _type="MoveCaretCommand" caretOffset="8177" date="Sun Feb 27 17:30:00 EST 2022" docOffset="8255" starttimestamp="1645820509543" timestamp="180491386" />
  <Command __id="2621" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:30:03 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="180493987">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="2622" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:30:04 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="180494858">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2624" _type="RunCommand" date="Sun Feb 27 17:30:05 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180496078" type="Run" />
  <Command __id="2625" _type="RunCommand" date="Sun Feb 27 17:30:05 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180496078" type="Run" />
  <Command __id="2626" _type="RunCommand" date="Sun Feb 27 17:30:05 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180496215" type="Run" />
  <Command __id="2627" _type="RunCommand" date="Sun Feb 27 17:30:05 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180496215" type="Run" />
  <Command __id="2628" _type="EHExceptionCommand" date="Sun Feb 27 17:30:05 EST 2022" starttimestamp="1645820509543" timestamp="180496266" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors

Parse error: parsing expression, current token is: miniJava.SyntacticAnalyzer.Token@15db9742
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="2630" _type="SelectTextCommand" caretOffset="8428" date="Sun Feb 27 17:30:19 EST 2022" end="8428" start="8426" starttimestamp="1645820509543" timestamp="180509525" />
  <Command __id="2638" _type="RunCommand" date="Sun Feb 27 17:30:23 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180514009" type="Run" />
  <Command __id="2639" _type="RunCommand" date="Sun Feb 27 17:30:23 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180514009" type="Run" />
  <Command __id="2640" _type="RunCommand" date="Sun Feb 27 17:30:23 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180514123" type="Run" />
  <Command __id="2641" _type="RunCommand" date="Sun Feb 27 17:30:23 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180514123" type="Run" />
  <Command __id="2642" _type="EHExceptionCommand" date="Sun Feb 27 17:30:23 EST 2022" starttimestamp="1645820509543" timestamp="180514162" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors

Parse error: parsing expression, current token is: and its kind is: EQUAL
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="2643" _type="MoveCaretCommand" caretOffset="3125" date="Sun Feb 27 17:30:45 EST 2022" docOffset="3203" starttimestamp="1645820509543" timestamp="180535618" />
  <Command __id="2644" _type="MoveCaretCommand" caretOffset="3125" date="Sun Feb 27 17:30:45 EST 2022" docOffset="3203" starttimestamp="1645820509543" timestamp="180535618" />
  <Command __id="2645" _type="MoveCaretCommand" caretOffset="3142" date="Sun Feb 27 17:30:45 EST 2022" docOffset="3220" starttimestamp="1645820509543" timestamp="180536298" />
  <Command __id="2646" _type="MoveCaretCommand" caretOffset="3142" date="Sun Feb 27 17:30:45 EST 2022" docOffset="3220" starttimestamp="1645820509543" timestamp="180536298" />
  <Command __id="2647" _type="MoveCaretCommand" caretOffset="3142" date="Sun Feb 27 17:30:50 EST 2022" docOffset="3220" starttimestamp="1645820509543" timestamp="180541034" />
  <Command __id="2648" _type="MoveCaretCommand" caretOffset="3142" date="Sun Feb 27 17:30:50 EST 2022" docOffset="3220" starttimestamp="1645820509543" timestamp="180541034" />
  <Command __id="2649" _type="ShellCommand" date="Sun Feb 27 17:30:54 EST 2022" starttimestamp="1645820509543" timestamp="180545001" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2650" _type="ShellCommand" date="Sun Feb 27 17:30:55 EST 2022" starttimestamp="1645820509543" timestamp="180546249" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2651" _type="MoveCaretCommand" caretOffset="3125" date="Sun Feb 27 17:30:55 EST 2022" docOffset="3203" starttimestamp="1645820509543" timestamp="180546314" />
  <Command __id="2652" _type="MoveCaretCommand" caretOffset="3125" date="Sun Feb 27 17:30:55 EST 2022" docOffset="3203" starttimestamp="1645820509543" timestamp="180546314" />
  <Command __id="2653" _type="MoveCaretCommand" caretOffset="3142" date="Sun Feb 27 17:30:56 EST 2022" docOffset="3220" starttimestamp="1645820509543" timestamp="180546779" />
  <Command __id="2654" _type="MoveCaretCommand" caretOffset="3142" date="Sun Feb 27 17:30:56 EST 2022" docOffset="3220" starttimestamp="1645820509543" timestamp="180546779" />
  <Command __id="2655" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 17:30:57 EST 2022" starttimestamp="1645820509543" timestamp="180548252" />
  <Command __id="2656" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 17:30:57 EST 2022" starttimestamp="1645820509543" timestamp="180548252" />
  <Command __id="2657" _type="MoveCaretCommand" caretOffset="3014" date="Sun Feb 27 17:31:18 EST 2022" docOffset="3092" starttimestamp="1645820509543" timestamp="180569027" />
  <Command __id="2658" _type="MoveCaretCommand" caretOffset="3014" date="Sun Feb 27 17:31:18 EST 2022" docOffset="3092" starttimestamp="1645820509543" timestamp="180569027" />
  <Command __id="2659" _type="MoveCaretCommand" caretOffset="3125" date="Sun Feb 27 17:31:26 EST 2022" docOffset="3203" starttimestamp="1645820509543" timestamp="180576890" />
  <Command __id="2660" _type="MoveCaretCommand" caretOffset="3125" date="Sun Feb 27 17:31:26 EST 2022" docOffset="3203" starttimestamp="1645820509543" timestamp="180576890" />
  <Command __id="2661" _type="MoveCaretCommand" caretOffset="2906" date="Sun Feb 27 17:31:27 EST 2022" docOffset="2984" starttimestamp="1645820509543" timestamp="180577602" />
  <Command __id="2662" _type="MoveCaretCommand" caretOffset="2906" date="Sun Feb 27 17:31:27 EST 2022" docOffset="2984" starttimestamp="1645820509543" timestamp="180577602" />
  <Command __id="2663" _type="MoveCaretCommand" caretOffset="2906" date="Sun Feb 27 17:31:27 EST 2022" docOffset="2984" starttimestamp="1645820509543" timestamp="180578210" />
  <Command __id="2664" _type="MoveCaretCommand" caretOffset="2906" date="Sun Feb 27 17:31:27 EST 2022" docOffset="2984" starttimestamp="1645820509543" timestamp="180578210" />
  <Command __id="2665" _type="MoveCaretCommand" caretOffset="2906" date="Sun Feb 27 17:31:28 EST 2022" docOffset="2984" starttimestamp="1645820509543" timestamp="180578482" />
  <Command __id="2666" _type="MoveCaretCommand" caretOffset="2906" date="Sun Feb 27 17:31:28 EST 2022" docOffset="2984" starttimestamp="1645820509543" timestamp="180578482" />
  <Command __id="2667" _type="SelectTextCommand" caretOffset="2908" date="Sun Feb 27 17:31:28 EST 2022" end="2908" start="2849" starttimestamp="1645820509543" timestamp="180578826" />
  <Command __id="2668" _type="SelectTextCommand" caretOffset="2908" date="Sun Feb 27 17:31:28 EST 2022" end="2908" start="2849" starttimestamp="1645820509543" timestamp="180578826" />
  <Command __id="2669" _type="CopyCommand" date="Sun Feb 27 17:31:29 EST 2022" starttimestamp="1645820509543" timestamp="180579620" />
  <Command __id="2670" _type="MoveCaretCommand" caretOffset="3166" date="Sun Feb 27 17:31:30 EST 2022" docOffset="3244" starttimestamp="1645820509543" timestamp="180580770" />
  <Command __id="2671" _type="MoveCaretCommand" caretOffset="3166" date="Sun Feb 27 17:31:30 EST 2022" docOffset="3244" starttimestamp="1645820509543" timestamp="180580771" />
  <Command __id="2672" _type="MoveCaretCommand" caretOffset="3234" date="Sun Feb 27 17:31:30 EST 2022" docOffset="3312" starttimestamp="1645820509543" timestamp="180581170" />
  <Command __id="2673" _type="MoveCaretCommand" caretOffset="3234" date="Sun Feb 27 17:31:30 EST 2022" docOffset="3312" starttimestamp="1645820509543" timestamp="180581170" />
  <Command __id="2674" _type="MoveCaretCommand" caretOffset="3166" date="Sun Feb 27 17:31:31 EST 2022" docOffset="3244" starttimestamp="1645820509543" timestamp="180581523" />
  <Command __id="2675" _type="MoveCaretCommand" caretOffset="3166" date="Sun Feb 27 17:31:31 EST 2022" docOffset="3244" starttimestamp="1645820509543" timestamp="180581523" />
  <Command __id="2629" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:30:18 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11072" docExpressionCount="1109" docLength="11797" projectName="pa1" starttimestamp="1645820509543" timestamp="180509446">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶//			System.out.println("in here, " + currentToken.kind);¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression"), Diff(DELETE,"g"), Diff(EQUAL,", in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken"), Diff(INSERT,".spelling + "and its kind is: " + currentToken.kind"), Diff(EQUAL,");¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
//			System.out.println("in here, " + currentToken.kind);
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="2633" _type="Replace" date="Sun Feb 27 17:30:21 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11123" docExpressionCount="1115" docLength="11848" endLine="379" insertionLength="65" int_docASTNodeCount="1576" int_docActiveCodeLength="11058" int_docExpressionCount="1107" int_docLength="11783" length="14" offset="8504" startLine="379" starttimestamp="1645820509543" timestamp="180511724">
    <deletedText><![CDATA[+ currentToken]]></deletedText>
    <insertedText><![CDATA[+ currentToken.spelling + "and its kind is: " + currentToken.kind]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2678" _type="Insert" date="Sun Feb 27 17:31:32 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11129" docExpressionCount="1115" docLength="11854" length="6" offset="3220" starttimestamp="1645820509543" timestamp="180582987">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="2681" _type="Replace" date="Sun Feb 27 17:31:32 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11127" docExpressionCount="1115" docLength="11910" endLine="140" insertionLength="60" int_docASTNodeCount="1584" int_docActiveCodeLength="11125" int_docExpressionCount="1115" int_docLength="11850" length="4" offset="3222" startLine="140" starttimestamp="1645820509543" timestamp="180583301">
    <deletedText><![CDATA[				]]></deletedText>
    <insertedText><![CDATA[//				System.out.println("in here, " + currentToken.kind);
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2683" _type="Delete" date="Sun Feb 27 17:31:34 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11125" docExpressionCount="1115" docLength="11908" endLine="141" length="2" offset="3280" startLine="140" starttimestamp="1645820509543" timestamp="180585051">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="2689" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:31:36 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="180586721">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="2690" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:31:37 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11125" docExpressionCount="1115" docLength="11908" projectName="pa1" starttimestamp="1645820509543" timestamp="180587841">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶//			System.out.println("in here, " + currentToken.kind);¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				acceptIt();¶"), Diff(INSERT,"//				System.out.println("in here, " + currentToken.kind);¶"), Diff(EQUAL,"				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken"), Diff(INSERT,".spelling + "and its kind is: " + currentToken.kind"), Diff(EQUAL,");¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
//			System.out.println("in here, " + currentToken.kind);
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
				acceptIt();
//				System.out.println("in here, " + currentToken.kind);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="2693" _type="Delete" date="Sun Feb 27 17:31:38 EST 2022" docASTNodeCount="1595" docActiveCodeLength="11181" docExpressionCount="1125" docLength="11906" endLine="140" length="2" offset="3222" startLine="140" starttimestamp="1645820509543" timestamp="180588490">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="2698" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:31:40 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="180590632">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2705" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:31:44 EST 2022" docASTNodeCount="1595" docActiveCodeLength="11181" docExpressionCount="1125" docLength="11906" projectName="pa1" starttimestamp="1645820509543" timestamp="180595322">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶//			System.out.println("in here, " + currentToken.kind);¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				acceptIt();¶"), Diff(DELETE,"//"), Diff(EQUAL,"				System.out.println("in here, " + currentToken.kind);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
//			System.out.println("in here, " + currentToken.kind);
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
				acceptIt();
				System.out.println("in here, " + currentToken.kind);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="2676" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 17:31:32 EST 2022" starttimestamp="1645820509543" timestamp="180582581" />
  <Command __id="2677" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 17:31:32 EST 2022" starttimestamp="1645820509543" timestamp="180582582" />
  <Command __id="2679" _type="InsertStringCommand" date="Sun Feb 27 17:31:32 EST 2022" starttimestamp="1645820509543" timestamp="180582994" timestamp2="180582994">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2680" _type="InsertStringCommand" date="Sun Feb 27 17:31:32 EST 2022" starttimestamp="1645820509543" timestamp="180582994" timestamp2="180582994">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2682" _type="PasteCommand" date="Sun Feb 27 17:31:32 EST 2022" starttimestamp="1645820509543" timestamp="180583308" />
  <Command __id="2684" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:31:34 EST 2022" starttimestamp="1645820509543" timestamp="180585059" />
  <Command __id="2685" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:31:34 EST 2022" starttimestamp="1645820509543" timestamp="180585059" />
  <Command __id="2686" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:31:34 EST 2022" starttimestamp="1645820509543" timestamp="180585372" />
  <Command __id="2687" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:31:35 EST 2022" starttimestamp="1645820509543" timestamp="180585471" />
  <Command __id="2688" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:31:35 EST 2022" starttimestamp="1645820509543" timestamp="180585486" />
  <Command __id="2691" _type="MoveCaretCommand" caretOffset="3202" date="Sun Feb 27 17:31:37 EST 2022" docOffset="3280" starttimestamp="1645820509543" timestamp="180587882" />
  <Command __id="2692" _type="MoveCaretCommand" caretOffset="3202" date="Sun Feb 27 17:31:37 EST 2022" docOffset="3280" starttimestamp="1645820509543" timestamp="180587906" />
  <Command __id="2694" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 17:31:38 EST 2022" starttimestamp="1645820509543" timestamp="180588509" />
  <Command __id="2695" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:31:38 EST 2022" starttimestamp="1645820509543" timestamp="180588915" />
  <Command __id="2696" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:31:38 EST 2022" starttimestamp="1645820509543" timestamp="180589009" />
  <Command __id="2697" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:31:38 EST 2022" starttimestamp="1645820509543" timestamp="180589031" />
  <Command __id="2699" _type="MoveCaretCommand" caretOffset="210" date="Sun Feb 27 17:31:40 EST 2022" docOffset="210" starttimestamp="1645820509543" timestamp="180590704" />
  <Command __id="2700" _type="RunCommand" date="Sun Feb 27 17:31:41 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180591472" type="Run" />
  <Command __id="2701" _type="RunCommand" date="Sun Feb 27 17:31:41 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180591473" type="Run" />
  <Command __id="2702" _type="RunCommand" date="Sun Feb 27 17:31:41 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180591590" type="Run" />
  <Command __id="2703" _type="RunCommand" date="Sun Feb 27 17:31:41 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180591590" type="Run" />
  <Command __id="2704" _type="EHExceptionCommand" date="Sun Feb 27 17:31:41 EST 2022" starttimestamp="1645820509543" timestamp="180591639" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors

in here, EQUAL
Parse error: parsing expression, current token is: and its kind is: EQUAL
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="2706" _type="MoveCaretCommand" caretOffset="3125" date="Sun Feb 27 17:31:44 EST 2022" docOffset="3203" starttimestamp="1645820509543" timestamp="180595379" />
  <Command __id="2707" _type="MoveCaretCommand" caretOffset="3125" date="Sun Feb 27 17:31:44 EST 2022" docOffset="3203" starttimestamp="1645820509543" timestamp="180595384" />
  <DocumentChange __id="2708" _type="Insert" date="Sun Feb 27 17:31:45 EST 2022" docASTNodeCount="1595" docActiveCodeLength="11187" docExpressionCount="1125" docLength="11912" length="6" offset="3203" starttimestamp="1645820509543" timestamp="180596450">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <Command __id="2709" _type="InsertStringCommand" date="Sun Feb 27 17:31:46 EST 2022" starttimestamp="1645820509543" timestamp="180596457" timestamp2="180596457">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2710" _type="InsertStringCommand" date="Sun Feb 27 17:31:46 EST 2022" starttimestamp="1645820509543" timestamp="180596457" timestamp2="180596457">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2711" _type="Replace" date="Sun Feb 27 17:31:46 EST 2022" docASTNodeCount="1595" docActiveCodeLength="11185" docExpressionCount="1125" docLength="11968" endLine="139" insertionLength="60" int_docASTNodeCount="1595" int_docActiveCodeLength="11183" int_docExpressionCount="1125" int_docLength="11908" length="4" offset="3205" startLine="139" starttimestamp="1645820509543" timestamp="180596709">
    <deletedText><![CDATA[				]]></deletedText>
    <insertedText><![CDATA[//				System.out.println("in here, " + currentToken.kind);
]]></insertedText>
  </DocumentChange>
  <Command __id="2712" _type="PasteCommand" date="Sun Feb 27 17:31:46 EST 2022" starttimestamp="1645820509543" timestamp="180596715" />
  <DocumentChange __id="2713" _type="Delete" date="Sun Feb 27 17:31:47 EST 2022" docASTNodeCount="1595" docActiveCodeLength="11183" docExpressionCount="1125" docLength="11966" endLine="140" length="2" offset="3263" startLine="139" starttimestamp="1645820509543" timestamp="180598229">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="2714" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:31:47 EST 2022" starttimestamp="1645820509543" timestamp="180598234" />
  <Command __id="2715" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:31:47 EST 2022" starttimestamp="1645820509543" timestamp="180598234" />
  <DocumentChange __id="2716" _type="Delete" date="Sun Feb 27 17:31:48 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11239" docExpressionCount="1135" docLength="11964" endLine="139" length="2" offset="3205" startLine="139" starttimestamp="1645820509543" timestamp="180599186">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="2726" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:31:55 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="180605760">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="2727" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:32:03 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="180613465">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2729" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:32:03 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="180614255">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="2721" _type="RunCommand" date="Sun Feb 27 17:31:51 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180601458" type="Run" />
  <Command __id="2722" _type="RunCommand" date="Sun Feb 27 17:31:51 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180601458" type="Run" />
  <Command __id="2723" _type="RunCommand" date="Sun Feb 27 17:31:51 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180601572" type="Run" />
  <Command __id="2724" _type="RunCommand" date="Sun Feb 27 17:31:51 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180601572" type="Run" />
  <Command __id="2725" _type="EHExceptionCommand" date="Sun Feb 27 17:31:51 EST 2022" starttimestamp="1645820509543" timestamp="180601615" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
in here, EQUAL

in here, EQUAL
Parse error: parsing expression, current token is: and its kind is: EQUAL
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="2728" _type="MoveCaretCommand" caretOffset="210" date="Sun Feb 27 17:32:03 EST 2022" docOffset="210" starttimestamp="1645820509543" timestamp="180613550" />
  <Command __id="2731" _type="MoveCaretCommand" caretOffset="3183" date="Sun Feb 27 17:33:24 EST 2022" docOffset="3261" starttimestamp="1645820509543" timestamp="180695365" />
  <Command __id="2732" _type="SelectTextCommand" caretOffset="5037" date="Sun Feb 27 17:34:31 EST 2022" end="5037" start="2944" starttimestamp="1645820509543" timestamp="180762186" />
  <Command __id="2733" _type="SelectTextCommand" caretOffset="5037" date="Sun Feb 27 17:34:31 EST 2022" end="5037" start="2944" starttimestamp="1645820509543" timestamp="180762186" />
  <Command __id="2730" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:33:24 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11239" docExpressionCount="1135" docLength="11964" projectName="pa1" starttimestamp="1645820509543" timestamp="180695234">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶//			System.out.println("in here, " + currentToken.kind);¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				"), Diff(INSERT,"System.out.println("in here, " + currentToken.kind);¶				"), Diff(EQUAL,"acceptIt();¶				System.out.println("in here, " + currentToken.kind);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
//			System.out.println("in here, " + currentToken.kind);
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
				System.out.println("in here, " + currentToken.kind);
				acceptIt();
				System.out.println("in here, " + currentToken.kind);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="2734" _type="MoveCaretCommand" caretOffset="5026" date="Sun Feb 27 17:34:38 EST 2022" docOffset="5104" starttimestamp="1645820509543" timestamp="180768947" />
  <Command __id="2735" _type="MoveCaretCommand" caretOffset="5026" date="Sun Feb 27 17:34:38 EST 2022" docOffset="5104" starttimestamp="1645820509543" timestamp="180768947" />
  <Command __id="2736" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:34:57 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="180787999">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2737" _type="MoveCaretCommand" caretOffset="210" date="Sun Feb 27 17:34:57 EST 2022" docOffset="210" starttimestamp="1645820509543" timestamp="180788088" />
  <Command __id="2738" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:34:59 EST 2022" docASTNodeCount="1087" docActiveCodeLength="7870" docExpressionCount="675" docLength="8600" projectName="pa1" starttimestamp="1645820509543" timestamp="180789586">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	"), Diff(INSERT,"        	if(currentChar == '=') {¶	        		return TokenKind.EQUAL;¶	        	}¶	"), Diff(EQUAL,"            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind."), Diff(DELETE,"EQUAL"), Diff(INSERT,"BINOP"), Diff(EQUAL,";¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import java.io.IOException;
import java.io.InputStream;

import miniJava.ErrorReporter;
import miniJava.SyntacticAnalyzer.Token;
import miniJava.SyntacticAnalyzer.TokenKind;

public class Scanner {
	private boolean isComment;
	
//	comment state = 0 not comment
//			= 1 show /
//			= 2 show second /
//			= 12 show first *
//			= 13 show second *
//			= 3 show third /
//			= 4 show fourth / end of comment
//			= 14 show second / end of comment
	private int commentState;
	
	private InputStream inputStream;
	private ErrorReporter reporter;
	
	private char currentChar;
	private byte currentKind;
	private StringBuilder currentSpelling;
	
	// true when end of line is found
	private boolean eot = false; 
	
	public Scanner(InputStream inputStream, ErrorReporter reporter) {
		this.isComment = false;
		this.commentState = 0;
		this.inputStream = inputStream;
		this.reporter = reporter;

		// initialize scanner state
		readChar();
	}	
	
	/**
	 * skip whitespace and scan next token
	 */	
	
// ? SINGLE SLASH
//	comment state = 0 not comment
//	= 1 show /
//	= 2 show second /
//	= 12 show first *
//	= 13 show second *
//	= 14 show second / end of comment
	public void scanSeparator() {
		switch (commentState) {
			case 0:
				while (!eot && 
						(currentChar == ' ' ||
							currentChar == '\t' ||
								currentChar == '\n' ||
									currentChar == '\r')) {
					skipIt();
				}
				if (currentChar == '/') {
					commentState = 1;
					skipIt();
					scanSeparator();
				}
				break;
			
			case 1:
				if (currentChar == '/') {
					commentState = 2;
					isComment = true;
					skipIt();
					scanSeparator();
				} else if (currentChar == '*') {
					commentState = 12;
					isComment = true;
					skipIt();
					scanSeparator();
				} else {
					System.exit(4);
				}
				break;
			
			case 2:
				if (currentChar == '\r' || currentChar == '\n' || eot) {
					commentState = 0;
					isComment = false;
					scanSeparator();
				} else {
					skipIt();
					scanSeparator();		
				}
				break;
				
			case 12:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '*') {
					skipIt();
					scanSeparator();
				} else {
					commentState = 13;
					scanSeparator();
				}
				break;
			
			case 13:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '/') {
					skipIt();
					commentState = 12;
					scanSeparator();
				} else {
					commentState = 0;
					isComment = false;
					scanSeparator();
				}
				break;	
		}		
	}
	

	public Token scan() {
		// skip whitespace and comments
		scanSeparator();

		// start of a token: collect spelling and identify token kind
		currentSpelling = new StringBuilder();
		TokenKind kind = scanToken();
		String spelling = currentSpelling.toString();
		
		if (kind == TokenKind.ID) {
			switch (spelling) {
			case "class":
				kind = TokenKind.CLASS;
				break;
			case "public":
				kind = TokenKind.PUBLIC;
				break;
			case "private":
				kind = TokenKind.PRIVATE;
				break;
			case "static":
				kind = TokenKind.STATIC;
				break;
			case "int":
				kind = TokenKind.INT;
				break;
			case "boolean":
				kind = TokenKind.BOOLEAN;
				break;
			case "void":
				kind = TokenKind.VOID;
				break;
			case "this":
				kind = TokenKind.THIS;
				break;
			case "return":
				kind = TokenKind.RETURN;
				break;
			case "if":
				kind = TokenKind.IF;
				break;
			case "else":
				kind = TokenKind.ELSE;
				break;
			case "while":
				kind = TokenKind.WHILE;
				break;
			case "true":
				kind = TokenKind.TRUE;
				break;
			case "false":
				kind = TokenKind.FALSE;
				break;
			default:
				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};
				for (String s : ss) {
					if (spelling.toLowerCase().equals(s)) {
						reporter.reportError("Key word should not be used as identifiers.");
						System.exit(4);
					}
				}
				break;
			}
		}

		// return new token
		return new Token(kind, spelling);
	}

	
	/**
	 * determine token kind
	 */
	public TokenKind scanToken() {
		if (eot) {
			return TokenKind.EOT; 
		}
			
		switch (currentChar) {
			case 'a':  case 'b':  case 'c':  case 'd':
			case 'e':  case 'f':  case 'g':  case 'h':
			case 'i':  case 'j':  case 'k':  case 'l':
			case 'm':  case 'n':  case 'o':  case 'p':
			case 'q':  case 'r':  case 's':  case 't':
	        case 'u':  case 'v':  case 'w':  case 'x':
	        case 'y':  case 'z':
	        
	        case 'A':  case 'B':  case 'C':  case 'D':
	        case 'E':  case 'F':  case 'G':  case 'H':
	        case 'I':  case 'J':  case 'K':  case 'L':
	        case 'M':  case 'N':  case 'O':	 case 'P':
	        case 'Q':  case 'R':  case 'S':  case 'T':
	        case 'U':  case 'V':  case 'W':  case 'X':
	        case 'Y':  case 'Z':
	        	takeIt();
	        	while(Character.isLetter(currentChar) 
	        			|| Character.isDigit(currentChar)
	        				|| currentChar == '_') {
	        		takeIt();
	        	}
	        	return TokenKind.ID;
	        
	        case '0':  case '1':  case '2':  case '3':  case '4':
	        case '5':  case '6':  case '7':  case '8':  case '9':
	            takeIt();
	            while(Character.isDigit(currentChar)) {
	            	takeIt();
	            }
	            return TokenKind.NUM;
	        
	        case '>': case '<': case '=':
	        	if(currentChar == '=') {
	        		return TokenKind.EQUAL;
	        	}
	            takeIt();
	            if(currentChar == '=') {
	                takeIt();
	                return TokenKind.BINOP;
	            }
	            return TokenKind.BINOP;
	        
	        case '+': case '*': case '/':
	        	takeIt();
	        	return TokenKind.BINOP;
	        
	        case '&':
	            takeIt();
	            if(currentChar != '&') {
	                System.exit(4);
	            }
	            takeIt();
	            return TokenKind.BINOP;

	        case '|':
	            takeIt();
	            if(currentChar != '|')
	                System.exit(4);
	            takeIt();
	            return TokenKind.BINOP;
	        
	        case '!':
	            takeIt();
	            if(currentChar == '=') {
	                takeIt();
	                return TokenKind.BINOP;
	            }
	            return TokenKind.UNOP;
	            
	        case '-':
	            takeIt();
	            return TokenKind.MINUS;
	        
	        case '.':
	            takeIt();
	            return TokenKind.DOT;

	        case ',':
	            takeIt();
	            return TokenKind.COMMA;

	        case ';':
	            takeIt();
	            return TokenKind.SEMICOLON;

	        case '(':
	            takeIt();
	            return TokenKind.LPAREN;

	        case ')':
	            takeIt();
	            return TokenKind.RPAREN;

	        case '[':
	            takeIt();
	            return TokenKind.LBRACKET;

	        case ']':
	            takeIt();
	            return TokenKind.RBRACKET;

	        case '{':
	            takeIt();
	            return TokenKind.LCURLY;

	        case '}':
	            takeIt();
	            return TokenKind.RCURLY;
	        
	        default:
				scanError("Unrecognized character '" + currentChar + "' in input");
				return TokenKind.ERROR; 
		}
	}

	
	private void takeIt() {
		currentSpelling.append(currentChar);
		nextChar();
	}
	
	private void take(char expectedChar) {
		if (currentChar == expectedChar) {
			takeIt();
		}
	}

	private void skipIt() {
		nextChar();
	}


	private void scanError(String m) {
		reporter.reportError("Scan Error:  " + m);
	}


	private final static char eolUnix = '\n';
	private final static char eolWindows = '\r';

	/**
	 * advance to next char in inputstream
	 * detect end of file or end of line as end of input
	 */
	private void nextChar() {
		if (!eot)
			readChar();
	}

	private void readChar() {
		try {
			int c = inputStream.read();
			currentChar = (char) c;
			if (c == -1) {
				System.out.print("1" + (c == -1));
				System.out.print("2" + (currentChar == eolUnix ));
				System.out.print("3" + (currentChar == eolWindows));
				eot = true;
			}
		} catch (IOException e) {
			scanError("I/O Exception!");
			eot = true;
		}
	}
	


}
]]></snapshot>
  </Command>
  <Command __id="2739" _type="MoveCaretCommand" caretOffset="5531" date="Sun Feb 27 17:34:59 EST 2022" docOffset="5682" starttimestamp="1645820509543" timestamp="180789650" />
  <Command __id="2740" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:35:04 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="180794496">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2742" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:35:04 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="180795281">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="2741" _type="MoveCaretCommand" caretOffset="210" date="Sun Feb 27 17:35:04 EST 2022" docOffset="210" starttimestamp="1645820509543" timestamp="180794586" />
  <Command __id="2744" _type="MoveCaretCommand" caretOffset="5026" date="Sun Feb 27 17:35:14 EST 2022" docOffset="5104" starttimestamp="1645820509543" timestamp="180804663" />
  <Command __id="2745" _type="MoveCaretCommand" caretOffset="5026" date="Sun Feb 27 17:35:14 EST 2022" docOffset="5104" starttimestamp="1645820509543" timestamp="180804819" />
  <Command __id="2746" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sun Feb 27 17:35:15 EST 2022" starttimestamp="1645820509543" timestamp="180806305" />
  <Command __id="2747" _type="MoveCaretCommand" caretOffset="3194" date="Sun Feb 27 17:35:17 EST 2022" docOffset="3272" starttimestamp="1645820509543" timestamp="180808139" />
  <Command __id="2748" _type="MoveCaretCommand" caretOffset="3194" date="Sun Feb 27 17:35:17 EST 2022" docOffset="3272" starttimestamp="1645820509543" timestamp="180808139" />
  <Command __id="2749" _type="MoveCaretCommand" caretOffset="3194" date="Sun Feb 27 17:35:18 EST 2022" docOffset="3272" starttimestamp="1645820509543" timestamp="180808474" />
  <Command __id="2750" _type="MoveCaretCommand" caretOffset="3194" date="Sun Feb 27 17:35:18 EST 2022" docOffset="3272" starttimestamp="1645820509543" timestamp="180808474" />
  <Command __id="2751" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sun Feb 27 17:35:19 EST 2022" starttimestamp="1645820509543" timestamp="180809776" />
  <Command __id="2752" _type="SelectTextCommand" caretOffset="11305" date="Sun Feb 27 17:35:34 EST 2022" end="11467" start="11305" starttimestamp="1645820509543" timestamp="180824930" />
  <Command __id="2753" _type="SelectTextCommand" caretOffset="11305" date="Sun Feb 27 17:35:34 EST 2022" end="11467" start="11305" starttimestamp="1645820509543" timestamp="180824930" />
  <Command __id="2754" _type="MoveCaretCommand" caretOffset="11439" date="Sun Feb 27 17:35:35 EST 2022" docOffset="11517" starttimestamp="1645820509543" timestamp="180825610" />
  <Command __id="2755" _type="MoveCaretCommand" caretOffset="11439" date="Sun Feb 27 17:35:35 EST 2022" docOffset="11517" starttimestamp="1645820509543" timestamp="180825610" />
  <Command __id="2756" _type="MoveCaretCommand" caretOffset="2847" date="Sun Feb 27 17:35:41 EST 2022" docOffset="2925" starttimestamp="1645820509543" timestamp="180832003" />
  <Command __id="2757" _type="MoveCaretCommand" caretOffset="2847" date="Sun Feb 27 17:35:41 EST 2022" docOffset="2925" starttimestamp="1645820509543" timestamp="180832003" />
  <Command __id="2758" _type="MoveCaretCommand" caretOffset="2842" date="Sun Feb 27 17:35:41 EST 2022" docOffset="2920" starttimestamp="1645820509543" timestamp="180832395" />
  <Command __id="2759" _type="MoveCaretCommand" caretOffset="2842" date="Sun Feb 27 17:35:41 EST 2022" docOffset="2920" starttimestamp="1645820509543" timestamp="180832395" />
  <Command __id="2760" _type="MoveCaretCommand" caretOffset="2855" date="Sun Feb 27 17:35:42 EST 2022" docOffset="2933" starttimestamp="1645820509543" timestamp="180832739" />
  <Command __id="2761" _type="MoveCaretCommand" caretOffset="2855" date="Sun Feb 27 17:35:42 EST 2022" docOffset="2933" starttimestamp="1645820509543" timestamp="180832739" />
  <Command __id="2762" _type="MoveCaretCommand" caretOffset="2843" date="Sun Feb 27 17:35:42 EST 2022" docOffset="2921" starttimestamp="1645820509543" timestamp="180833068" />
  <Command __id="2763" _type="MoveCaretCommand" caretOffset="2843" date="Sun Feb 27 17:35:42 EST 2022" docOffset="2921" starttimestamp="1645820509543" timestamp="180833068" />
  <Command __id="2764" _type="SelectTextCommand" caretOffset="2837" date="Sun Feb 27 17:35:44 EST 2022" end="2847" start="2837" starttimestamp="1645820509543" timestamp="180835098" />
  <Command __id="2765" _type="SelectTextCommand" caretOffset="2837" date="Sun Feb 27 17:35:44 EST 2022" end="2847" start="2837" starttimestamp="1645820509543" timestamp="180835099" />
  <Command __id="2767" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:35:45 EST 2022" starttimestamp="1645820509543" timestamp="180835912" />
  <Command __id="2768" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:35:45 EST 2022" starttimestamp="1645820509543" timestamp="180835912" />
  <Command __id="2770" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:35:45 EST 2022" starttimestamp="1645820509543" timestamp="180836063" />
  <Command __id="2771" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:35:45 EST 2022" starttimestamp="1645820509543" timestamp="180836063" />
  <Command __id="2773" _type="InsertStringCommand" date="Sun Feb 27 17:35:45 EST 2022" starttimestamp="1645820509543" timestamp="180836229" timestamp2="180836229">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2774" _type="InsertStringCommand" date="Sun Feb 27 17:35:45 EST 2022" starttimestamp="1645820509543" timestamp="180836229" timestamp2="180836229">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2776" _type="InsertStringCommand" date="Sun Feb 27 17:35:45 EST 2022" starttimestamp="1645820509543" timestamp="180836454" timestamp2="180836454">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2777" _type="InsertStringCommand" date="Sun Feb 27 17:35:45 EST 2022" starttimestamp="1645820509543" timestamp="180836454" timestamp2="180836454">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2779" _type="InsertStringCommand" date="Sun Feb 27 17:35:46 EST 2022" starttimestamp="1645820509543" timestamp="180836607" timestamp2="180836607">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2780" _type="InsertStringCommand" date="Sun Feb 27 17:35:46 EST 2022" starttimestamp="1645820509543" timestamp="180836607" timestamp2="180836607">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2782" _type="InsertStringCommand" date="Sun Feb 27 17:35:46 EST 2022" starttimestamp="1645820509543" timestamp="180837213" timestamp2="180837213">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2783" _type="InsertStringCommand" date="Sun Feb 27 17:35:46 EST 2022" starttimestamp="1645820509543" timestamp="180837213" timestamp2="180837213">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2785" _type="InsertStringCommand" date="Sun Feb 27 17:35:46 EST 2022" starttimestamp="1645820509543" timestamp="180837387" timestamp2="180837387">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="2786" _type="InsertStringCommand" date="Sun Feb 27 17:35:46 EST 2022" starttimestamp="1645820509543" timestamp="180837387" timestamp2="180837387">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="2788" _type="InsertStringCommand" date="Sun Feb 27 17:35:47 EST 2022" starttimestamp="1645820509543" timestamp="180837861" timestamp2="180837861">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2789" _type="InsertStringCommand" date="Sun Feb 27 17:35:47 EST 2022" starttimestamp="1645820509543" timestamp="180837861" timestamp2="180837861">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2791" _type="InsertStringCommand" date="Sun Feb 27 17:35:47 EST 2022" starttimestamp="1645820509543" timestamp="180838223" timestamp2="180838223">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="2792" _type="InsertStringCommand" date="Sun Feb 27 17:35:47 EST 2022" starttimestamp="1645820509543" timestamp="180838223" timestamp2="180838223">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="2794" _type="InsertStringCommand" date="Sun Feb 27 17:35:48 EST 2022" starttimestamp="1645820509543" timestamp="180838524" timestamp2="180838524">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2795" _type="InsertStringCommand" date="Sun Feb 27 17:35:48 EST 2022" starttimestamp="1645820509543" timestamp="180838524" timestamp2="180838524">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2797" _type="InsertStringCommand" date="Sun Feb 27 17:35:48 EST 2022" starttimestamp="1645820509543" timestamp="180838935" timestamp2="180838935">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="2798" _type="InsertStringCommand" date="Sun Feb 27 17:35:48 EST 2022" starttimestamp="1645820509543" timestamp="180838935" timestamp2="180838935">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="2800" _type="InsertStringCommand" date="Sun Feb 27 17:35:48 EST 2022" starttimestamp="1645820509543" timestamp="180838982" timestamp2="180838982">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2801" _type="InsertStringCommand" date="Sun Feb 27 17:35:48 EST 2022" starttimestamp="1645820509543" timestamp="180838984" timestamp2="180838984">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2804" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:35:48 EST 2022" starttimestamp="1645820509543" timestamp="180839345" />
  <Command __id="2805" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:35:48 EST 2022" starttimestamp="1645820509543" timestamp="180839346" />
  <Command __id="2807" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:35:49 EST 2022" starttimestamp="1645820509543" timestamp="180839485" />
  <Command __id="2808" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:35:49 EST 2022" starttimestamp="1645820509543" timestamp="180839485" />
  <Command __id="2810" _type="InsertStringCommand" date="Sun Feb 27 17:35:49 EST 2022" starttimestamp="1645820509543" timestamp="180839657" timestamp2="180839657">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2811" _type="InsertStringCommand" date="Sun Feb 27 17:35:49 EST 2022" starttimestamp="1645820509543" timestamp="180839657" timestamp2="180839657">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2812" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:35:49 EST 2022" starttimestamp="1645820509543" timestamp="180840276" />
  <Command __id="2813" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:35:49 EST 2022" starttimestamp="1645820509543" timestamp="180840276" />
  <Command __id="2815" _type="InsertStringCommand" date="Sun Feb 27 17:35:50 EST 2022" starttimestamp="1645820509543" timestamp="180840695" timestamp2="180840695">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2816" _type="InsertStringCommand" date="Sun Feb 27 17:35:50 EST 2022" starttimestamp="1645820509543" timestamp="180840695" timestamp2="180840695">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2743" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:35:14 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11239" docExpressionCount="1135" docLength="11964" projectName="pa1" starttimestamp="1645820509543" timestamp="180804609">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶//			System.out.println("in here, " + currentToken.kind);¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				System.out.println("in here, " + currentToken.kind);¶				acceptIt();¶				System.out.println("in here, " + currentToken.kind);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2766" _type="Delete" date="Sun Feb 27 17:35:45 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11229" docExpressionCount="1134" docLength="11954" endLine="126" length="10" offset="2915" startLine="126" starttimestamp="1645820509543" timestamp="180835906">
    <text><![CDATA[cceptIt();]]></text>
  </DocumentChange>
  <DocumentChange __id="2769" _type="Delete" date="Sun Feb 27 17:35:45 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11228" docExpressionCount="1133" docLength="11953" endLine="126" length="1" offset="2914" startLine="126" starttimestamp="1645820509543" timestamp="180836061">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2772" _type="Insert" date="Sun Feb 27 17:35:45 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11229" docExpressionCount="1134" docLength="11954" length="1" offset="2914" starttimestamp="1645820509543" timestamp="180836226">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2775" _type="Insert" date="Sun Feb 27 17:35:45 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11230" docExpressionCount="1134" docLength="11955" length="1" offset="2915" starttimestamp="1645820509543" timestamp="180836451">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="2778" _type="Insert" date="Sun Feb 27 17:35:46 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11231" docExpressionCount="1134" docLength="11956" length="1" offset="2916" starttimestamp="1645820509543" timestamp="180836603">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="2781" _type="Insert" date="Sun Feb 27 17:35:46 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11232" docExpressionCount="1134" docLength="11957" length="1" offset="2917" starttimestamp="1645820509543" timestamp="180837209">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2784" _type="Insert" date="Sun Feb 27 17:35:46 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11233" docExpressionCount="1134" docLength="11958" length="1" offset="2918" starttimestamp="1645820509543" timestamp="180837384">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="2787" _type="Insert" date="Sun Feb 27 17:35:47 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11234" docExpressionCount="1134" docLength="11959" length="1" offset="2919" starttimestamp="1645820509543" timestamp="180837858">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2790" _type="Insert" date="Sun Feb 27 17:35:47 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11235" docExpressionCount="1134" docLength="11960" length="1" offset="2920" starttimestamp="1645820509543" timestamp="180838219">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="2793" _type="Insert" date="Sun Feb 27 17:35:48 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11236" docExpressionCount="1134" docLength="11961" length="1" offset="2921" starttimestamp="1645820509543" timestamp="180838519">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2796" _type="Insert" date="Sun Feb 27 17:35:48 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11237" docExpressionCount="1134" docLength="11962" length="1" offset="2922" starttimestamp="1645820509543" timestamp="180838931">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="2799" _type="Insert" date="Sun Feb 27 17:35:48 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11239" docExpressionCount="1135" docLength="11964" length="2" offset="2923" starttimestamp="1645820509543" timestamp="180838979">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="2802" _type="Delete" date="Sun Feb 27 17:35:48 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11238" docExpressionCount="1133" docLength="11963" endLine="126" length="1" offset="2923" startLine="126" starttimestamp="1645820509543" timestamp="180839338">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="2803" _type="Delete" date="Sun Feb 27 17:35:48 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11237" docExpressionCount="1134" docLength="11962" endLine="126" length="1" offset="2923" startLine="126" starttimestamp="1645820509543" timestamp="180839344">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="2806" _type="Delete" date="Sun Feb 27 17:35:49 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11236" docExpressionCount="1134" docLength="11961" endLine="126" length="1" offset="2922" startLine="126" starttimestamp="1645820509543" timestamp="180839483">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="2809" _type="Insert" date="Sun Feb 27 17:35:49 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11238" docExpressionCount="1135" docLength="11963" length="2" offset="2922" starttimestamp="1645820509543" timestamp="180839652">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="2814" _type="Insert" date="Sun Feb 27 17:35:50 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11239" docExpressionCount="1135" docLength="11964" length="1" offset="2924" starttimestamp="1645820509543" timestamp="180840689">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="2817" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:35:51 EST 2022" starttimestamp="1645820509543" timestamp="180841834" />
  <Command __id="2818" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:35:51 EST 2022" starttimestamp="1645820509543" timestamp="180841933" />
  <Command __id="2819" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:35:51 EST 2022" starttimestamp="1645820509543" timestamp="180841964" />
  <Command __id="2820" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:36:40 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="180890804">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2821" _type="MoveCaretCommand" caretOffset="210" date="Sun Feb 27 17:36:40 EST 2022" docOffset="210" starttimestamp="1645820509543" timestamp="180890912" />
  <Command __id="2822" _type="RunCommand" date="Sun Feb 27 17:36:41 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180891863" type="Run" />
  <Command __id="2823" _type="RunCommand" date="Sun Feb 27 17:36:41 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180891863" type="Run" />
  <Command __id="2824" _type="RunCommand" date="Sun Feb 27 17:36:41 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180891980" type="Run" />
  <Command __id="2825" _type="RunCommand" date="Sun Feb 27 17:36:41 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180891980" type="Run" />
  <Command __id="2826" _type="EHExceptionCommand" date="Sun Feb 27 17:36:41 EST 2022" starttimestamp="1645820509543" timestamp="180892020" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
in here, EQUAL

in here, EQUAL
Parse error: parsing expression, current token is: and its kind is: EQUAL
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="2828" _type="MoveCaretCommand" caretOffset="5531" date="Sun Feb 27 17:37:02 EST 2022" docOffset="5682" starttimestamp="1645820509543" timestamp="180913425" />
  <Command __id="2827" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:37:02 EST 2022" docASTNodeCount="1087" docActiveCodeLength="7870" docExpressionCount="675" docLength="8600" projectName="pa1" starttimestamp="1645820509543" timestamp="180913361">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	        	if(currentChar == '=') {¶	        		return TokenKind.EQUAL;¶	        	}¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2829" _type="MoveCaretCommand" caretOffset="5529" date="Sun Feb 27 17:37:04 EST 2022" docOffset="5680" starttimestamp="1645820509543" timestamp="180914746" />
  <Command __id="2830" _type="MoveCaretCommand" caretOffset="5529" date="Sun Feb 27 17:37:04 EST 2022" docOffset="5680" starttimestamp="1645820509543" timestamp="180914746" />
  <Command __id="2832" _type="MoveCaretCommand" caretOffset="3200" date="Sun Feb 27 17:37:43 EST 2022" docOffset="3278" starttimestamp="1645820509543" timestamp="180953788" />
  <Command __id="2833" _type="MoveCaretCommand" caretOffset="3200" date="Sun Feb 27 17:37:43 EST 2022" docOffset="3278" starttimestamp="1645820509543" timestamp="180953811" />
  <Command __id="2834" _type="SelectTextCommand" caretOffset="3196" date="Sun Feb 27 17:37:50 EST 2022" end="3197" start="3196" starttimestamp="1645820509543" timestamp="180960459" />
  <Command __id="2835" _type="SelectTextCommand" caretOffset="3196" date="Sun Feb 27 17:37:50 EST 2022" end="3197" start="3196" starttimestamp="1645820509543" timestamp="180960459" />
  <Command __id="2837" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:50 EST 2022" starttimestamp="1645820509543" timestamp="180961005" />
  <Command __id="2838" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:50 EST 2022" starttimestamp="1645820509543" timestamp="180961005" />
  <Command __id="2840" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:50 EST 2022" starttimestamp="1645820509543" timestamp="180961122" />
  <Command __id="2841" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:50 EST 2022" starttimestamp="1645820509543" timestamp="180961122" />
  <Command __id="2842" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:37:50 EST 2022" starttimestamp="1645820509543" timestamp="180961420" />
  <Command __id="2843" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:37:50 EST 2022" starttimestamp="1645820509543" timestamp="180961420" />
  <Command __id="2845" _type="InsertStringCommand" date="Sun Feb 27 17:37:51 EST 2022" starttimestamp="1645820509543" timestamp="180962088" timestamp2="180962088">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2846" _type="InsertStringCommand" date="Sun Feb 27 17:37:51 EST 2022" starttimestamp="1645820509543" timestamp="180962088" timestamp2="180962088">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2848" _type="InsertStringCommand" date="Sun Feb 27 17:37:51 EST 2022" starttimestamp="1645820509543" timestamp="180962263" timestamp2="180962263">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2849" _type="InsertStringCommand" date="Sun Feb 27 17:37:51 EST 2022" starttimestamp="1645820509543" timestamp="180962263" timestamp2="180962263">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2851" _type="InsertStringCommand" date="Sun Feb 27 17:37:51 EST 2022" starttimestamp="1645820509543" timestamp="180962273" timestamp2="180962273">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2852" _type="InsertStringCommand" date="Sun Feb 27 17:37:51 EST 2022" starttimestamp="1645820509543" timestamp="180962273" timestamp2="180962273">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2854" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:52 EST 2022" starttimestamp="1645820509543" timestamp="180962643" />
  <Command __id="2855" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:52 EST 2022" starttimestamp="1645820509543" timestamp="180962643" />
  <Command __id="2857" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:52 EST 2022" starttimestamp="1645820509543" timestamp="180962776" />
  <Command __id="2858" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:52 EST 2022" starttimestamp="1645820509543" timestamp="180962777" />
  <Command __id="2860" _type="InsertStringCommand" date="Sun Feb 27 17:37:52 EST 2022" starttimestamp="1645820509543" timestamp="180963014" timestamp2="180963014">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2861" _type="InsertStringCommand" date="Sun Feb 27 17:37:52 EST 2022" starttimestamp="1645820509543" timestamp="180963014" timestamp2="180963014">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2863" _type="InsertStringCommand" date="Sun Feb 27 17:37:52 EST 2022" starttimestamp="1645820509543" timestamp="180963091" timestamp2="180963091">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2864" _type="InsertStringCommand" date="Sun Feb 27 17:37:52 EST 2022" starttimestamp="1645820509543" timestamp="180963091" timestamp2="180963091">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2866" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:53 EST 2022" starttimestamp="1645820509543" timestamp="180963474" />
  <Command __id="2867" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:53 EST 2022" starttimestamp="1645820509543" timestamp="180963474" />
  <Command __id="2869" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:53 EST 2022" starttimestamp="1645820509543" timestamp="180963640" />
  <Command __id="2870" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:53 EST 2022" starttimestamp="1645820509543" timestamp="180963641" />
  <Command __id="2872" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:53 EST 2022" starttimestamp="1645820509543" timestamp="180963867" />
  <Command __id="2873" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:53 EST 2022" starttimestamp="1645820509543" timestamp="180963867" />
  <Command __id="2875" _type="InsertStringCommand" date="Sun Feb 27 17:37:53 EST 2022" starttimestamp="1645820509543" timestamp="180964373" timestamp2="180964373">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2876" _type="InsertStringCommand" date="Sun Feb 27 17:37:53 EST 2022" starttimestamp="1645820509543" timestamp="180964373" timestamp2="180964373">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2878" _type="InsertStringCommand" date="Sun Feb 27 17:37:54 EST 2022" starttimestamp="1645820509543" timestamp="180964476" timestamp2="180964476">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2879" _type="InsertStringCommand" date="Sun Feb 27 17:37:54 EST 2022" starttimestamp="1645820509543" timestamp="180964476" timestamp2="180964476">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2881" _type="InsertStringCommand" date="Sun Feb 27 17:37:54 EST 2022" starttimestamp="1645820509543" timestamp="180964686" timestamp2="180964686">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2882" _type="InsertStringCommand" date="Sun Feb 27 17:37:54 EST 2022" starttimestamp="1645820509543" timestamp="180964686" timestamp2="180964686">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2884" _type="InsertStringCommand" date="Sun Feb 27 17:37:54 EST 2022" starttimestamp="1645820509543" timestamp="180964792" timestamp2="180964792">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2885" _type="InsertStringCommand" date="Sun Feb 27 17:37:54 EST 2022" starttimestamp="1645820509543" timestamp="180964792" timestamp2="180964792">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2887" _type="InsertStringCommand" date="Sun Feb 27 17:37:54 EST 2022" starttimestamp="1645820509543" timestamp="180964894" timestamp2="180964894">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2888" _type="InsertStringCommand" date="Sun Feb 27 17:37:54 EST 2022" starttimestamp="1645820509543" timestamp="180964894" timestamp2="180964894">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2890" _type="InsertStringCommand" date="Sun Feb 27 17:37:54 EST 2022" starttimestamp="1645820509543" timestamp="180965153" timestamp2="180965153">
    <data><![CDATA[K]]></data>
  </Command>
  <Command __id="2891" _type="InsertStringCommand" date="Sun Feb 27 17:37:54 EST 2022" starttimestamp="1645820509543" timestamp="180965154" timestamp2="180965154">
    <data><![CDATA[K]]></data>
  </Command>
  <Command __id="2893" _type="InsertStringCommand" date="Sun Feb 27 17:37:54 EST 2022" starttimestamp="1645820509543" timestamp="180965343" timestamp2="180965343">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2894" _type="InsertStringCommand" date="Sun Feb 27 17:37:54 EST 2022" starttimestamp="1645820509543" timestamp="180965343" timestamp2="180965343">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2896" _type="InsertStringCommand" date="Sun Feb 27 17:37:54 EST 2022" starttimestamp="1645820509543" timestamp="180965413" timestamp2="180965413">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2897" _type="InsertStringCommand" date="Sun Feb 27 17:37:54 EST 2022" starttimestamp="1645820509543" timestamp="180965413" timestamp2="180965413">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2899" _type="InsertStringCommand" date="Sun Feb 27 17:37:55 EST 2022" starttimestamp="1645820509543" timestamp="180965502" timestamp2="180965502">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2900" _type="InsertStringCommand" date="Sun Feb 27 17:37:55 EST 2022" starttimestamp="1645820509543" timestamp="180965503" timestamp2="180965503">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2902" _type="InsertStringCommand" date="Sun Feb 27 17:37:55 EST 2022" starttimestamp="1645820509543" timestamp="180965686" timestamp2="180965686">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2903" _type="InsertStringCommand" date="Sun Feb 27 17:37:55 EST 2022" starttimestamp="1645820509543" timestamp="180965686" timestamp2="180965686">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2831" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:37:43 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11239" docExpressionCount="1135" docLength="11964" projectName="pa1" starttimestamp="1645820509543" timestamp="180953743">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶//			System.out.println("in here, " + currentToken.kind);¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				System.out.println("in here, " + currentToken.kind);¶				acceptIt();¶				System.out.println("in here, " + currentToken.kind);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2836" _type="Delete" date="Sun Feb 27 17:37:50 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11238" docExpressionCount="1135" docLength="11963" endLine="140" length="1" offset="3274" startLine="140" starttimestamp="1645820509543" timestamp="180960998">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2839" _type="Delete" date="Sun Feb 27 17:37:50 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11237" docExpressionCount="1135" docLength="11962" endLine="140" length="1" offset="3273" startLine="140" starttimestamp="1645820509543" timestamp="180961119">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="2844" _type="Insert" date="Sun Feb 27 17:37:51 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11238" docExpressionCount="1136" docLength="11963" length="1" offset="3274" starttimestamp="1645820509543" timestamp="180962078">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <DocumentChange __id="2847" _type="Insert" date="Sun Feb 27 17:37:51 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11239" docExpressionCount="1136" docLength="11964" length="1" offset="3275" starttimestamp="1645820509543" timestamp="180962251">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2850" _type="Insert" date="Sun Feb 27 17:37:51 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11240" docExpressionCount="1136" docLength="11965" length="1" offset="3276" starttimestamp="1645820509543" timestamp="180962269">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2853" _type="Delete" date="Sun Feb 27 17:37:52 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11239" docExpressionCount="1136" docLength="11964" endLine="140" length="1" offset="3276" startLine="140" starttimestamp="1645820509543" timestamp="180962641">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2856" _type="Delete" date="Sun Feb 27 17:37:52 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11238" docExpressionCount="1136" docLength="11963" endLine="140" length="1" offset="3275" startLine="140" starttimestamp="1645820509543" timestamp="180962770">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2859" _type="Insert" date="Sun Feb 27 17:37:52 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11239" docExpressionCount="1136" docLength="11964" length="1" offset="3275" starttimestamp="1645820509543" timestamp="180963003">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2862" _type="Insert" date="Sun Feb 27 17:37:52 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11240" docExpressionCount="1136" docLength="11965" length="1" offset="3276" starttimestamp="1645820509543" timestamp="180963086">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2865" _type="Delete" date="Sun Feb 27 17:37:53 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11239" docExpressionCount="1136" docLength="11964" endLine="140" length="1" offset="3276" startLine="140" starttimestamp="1645820509543" timestamp="180963470">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2868" _type="Delete" date="Sun Feb 27 17:37:53 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11238" docExpressionCount="1136" docLength="11963" endLine="140" length="1" offset="3275" startLine="140" starttimestamp="1645820509543" timestamp="180963638">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2871" _type="Delete" date="Sun Feb 27 17:37:53 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11237" docExpressionCount="1135" docLength="11962" endLine="140" length="1" offset="3274" startLine="140" starttimestamp="1645820509543" timestamp="180963862">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <DocumentChange __id="2874" _type="Insert" date="Sun Feb 27 17:37:53 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11238" docExpressionCount="1136" docLength="11963" length="1" offset="3274" starttimestamp="1645820509543" timestamp="180964355">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <DocumentChange __id="2877" _type="Insert" date="Sun Feb 27 17:37:54 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11239" docExpressionCount="1136" docLength="11964" length="1" offset="3275" starttimestamp="1645820509543" timestamp="180964469">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2880" _type="Insert" date="Sun Feb 27 17:37:54 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11240" docExpressionCount="1136" docLength="11965" length="1" offset="3276" starttimestamp="1645820509543" timestamp="180964682">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="2883" _type="Insert" date="Sun Feb 27 17:37:54 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11241" docExpressionCount="1136" docLength="11966" length="1" offset="3277" starttimestamp="1645820509543" timestamp="180964779">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2886" _type="Insert" date="Sun Feb 27 17:37:54 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11242" docExpressionCount="1136" docLength="11967" length="1" offset="3278" starttimestamp="1645820509543" timestamp="180964882">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2889" _type="Insert" date="Sun Feb 27 17:37:54 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11243" docExpressionCount="1136" docLength="11968" length="1" offset="3279" starttimestamp="1645820509543" timestamp="180965149">
    <text><![CDATA[K]]></text>
  </DocumentChange>
  <DocumentChange __id="2892" _type="Insert" date="Sun Feb 27 17:37:54 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11244" docExpressionCount="1136" docLength="11969" length="1" offset="3280" starttimestamp="1645820509543" timestamp="180965331">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="2895" _type="Insert" date="Sun Feb 27 17:37:54 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11245" docExpressionCount="1136" docLength="11970" length="1" offset="3281" starttimestamp="1645820509543" timestamp="180965406">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2898" _type="Insert" date="Sun Feb 27 17:37:55 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11246" docExpressionCount="1136" docLength="11971" length="1" offset="3282" starttimestamp="1645820509543" timestamp="180965491">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2901" _type="Insert" date="Sun Feb 27 17:37:55 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11247" docExpressionCount="1137" docLength="11972" length="1" offset="3283" starttimestamp="1645820509543" timestamp="180965682">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="2905" _type="Insert" date="Sun Feb 27 17:37:55 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11248" docExpressionCount="1138" docLength="11973" length="1" offset="3284" starttimestamp="1645820509543" timestamp="180966103">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <Command __id="2904" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:37:55 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="180965689" />
  <Command __id="2912" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:37:57 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="180967677" />
  <Command __id="2914" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:57 EST 2022" starttimestamp="1645820509543" timestamp="180968162" />
  <Command __id="2915" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:57 EST 2022" starttimestamp="1645820509543" timestamp="180968162" />
  <Command __id="2917" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:57 EST 2022" starttimestamp="1645820509543" timestamp="180968345" />
  <Command __id="2918" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:57 EST 2022" starttimestamp="1645820509543" timestamp="180968345" />
  <Command __id="2920" _type="InsertStringCommand" date="Sun Feb 27 17:37:58 EST 2022" starttimestamp="1645820509543" timestamp="180968501" timestamp2="180968501">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="2921" _type="InsertStringCommand" date="Sun Feb 27 17:37:58 EST 2022" starttimestamp="1645820509543" timestamp="180968501" timestamp2="180968501">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="2923" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:58 EST 2022" starttimestamp="1645820509543" timestamp="180968761" />
  <Command __id="2924" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:58 EST 2022" starttimestamp="1645820509543" timestamp="180968761" />
  <Command __id="2926" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:58 EST 2022" starttimestamp="1645820509543" timestamp="180968925" />
  <Command __id="2927" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:58 EST 2022" starttimestamp="1645820509543" timestamp="180968926" />
  <Command __id="2929" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:58 EST 2022" starttimestamp="1645820509543" timestamp="180969144" />
  <Command __id="2930" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:37:58 EST 2022" starttimestamp="1645820509543" timestamp="180969144" />
  <Command __id="2932" _type="InsertStringCommand" date="Sun Feb 27 17:37:59 EST 2022" starttimestamp="1645820509543" timestamp="180969656" timestamp2="180969656">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2933" _type="InsertStringCommand" date="Sun Feb 27 17:37:59 EST 2022" starttimestamp="1645820509543" timestamp="180969656" timestamp2="180969656">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2934" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:37:59 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="180969660" />
  <Command __id="2939" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:38:00 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="180970944" />
  <Command __id="2941" _type="InsertStringCommand" date="Sun Feb 27 17:38:00 EST 2022" starttimestamp="1645820509543" timestamp="180970954" timestamp2="180970954">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2942" _type="InsertStringCommand" date="Sun Feb 27 17:38:00 EST 2022" starttimestamp="1645820509543" timestamp="180970955" timestamp2="180970955">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2943" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:38:01 EST 2022" starttimestamp="1645820509543" timestamp="180971853" />
  <Command __id="2944" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:38:01 EST 2022" starttimestamp="1645820509543" timestamp="180971951" />
  <Command __id="2945" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:38:01 EST 2022" starttimestamp="1645820509543" timestamp="180971982" />
  <Command __id="2946" _type="MoveCaretCommand" caretOffset="3125" date="Sun Feb 27 17:38:01 EST 2022" docOffset="3203" starttimestamp="1645820509543" timestamp="180972427" />
  <DocumentChange __id="2906" _type="Insert" date="Sun Feb 27 17:37:55 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11249" docExpressionCount="1138" docLength="11974" length="1" offset="3285" starttimestamp="1645820509543" timestamp="180966127">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2907" _type="Delete" date="Sun Feb 27 17:37:56 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11248" docExpressionCount="1138" docLength="11973" endLine="140" length="1" offset="3285" startLine="140" starttimestamp="1645820509543" timestamp="180966494">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2908" _type="Delete" date="Sun Feb 27 17:37:56 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11247" docExpressionCount="1137" docLength="11972" endLine="140" length="1" offset="3284" startLine="140" starttimestamp="1645820509543" timestamp="180966629">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <DocumentChange __id="2909" _type="Insert" date="Sun Feb 27 17:37:56 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11248" docExpressionCount="1138" docLength="11973" length="1" offset="3284" starttimestamp="1645820509543" timestamp="180966650">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2910" _type="Insert" date="Sun Feb 27 17:37:57 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11249" docExpressionCount="1138" docLength="11974" length="1" offset="3285" starttimestamp="1645820509543" timestamp="180967639">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <DocumentChange __id="2911" _type="Insert" date="Sun Feb 27 17:37:57 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11250" docExpressionCount="1138" docLength="11975" length="1" offset="3286" starttimestamp="1645820509543" timestamp="180967658">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <DocumentChange __id="2913" _type="Delete" date="Sun Feb 27 17:37:57 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11249" docExpressionCount="1138" docLength="11974" endLine="140" length="1" offset="3286" startLine="140" starttimestamp="1645820509543" timestamp="180968155">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <DocumentChange __id="2916" _type="Delete" date="Sun Feb 27 17:37:57 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11248" docExpressionCount="1138" docLength="11973" endLine="140" length="1" offset="3285" startLine="140" starttimestamp="1645820509543" timestamp="180968342">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <DocumentChange __id="2919" _type="Insert" date="Sun Feb 27 17:37:58 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11249" docExpressionCount="1138" docLength="11974" length="1" offset="3285" starttimestamp="1645820509543" timestamp="180968497">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <DocumentChange __id="2922" _type="Delete" date="Sun Feb 27 17:37:58 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11248" docExpressionCount="1138" docLength="11973" endLine="140" length="1" offset="3285" startLine="140" starttimestamp="1645820509543" timestamp="180968755">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <DocumentChange __id="2925" _type="Delete" date="Sun Feb 27 17:37:58 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11247" docExpressionCount="1137" docLength="11972" endLine="140" length="1" offset="3284" startLine="140" starttimestamp="1645820509543" timestamp="180968922">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2928" _type="Delete" date="Sun Feb 27 17:37:58 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11246" docExpressionCount="1136" docLength="11971" endLine="140" length="1" offset="3283" startLine="140" starttimestamp="1645820509543" timestamp="180969142">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="2931" _type="Insert" date="Sun Feb 27 17:37:59 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11247" docExpressionCount="1137" docLength="11972" length="1" offset="3283" starttimestamp="1645820509543" timestamp="180969650">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="2935" _type="Insert" date="Sun Feb 27 17:37:59 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11248" docExpressionCount="1138" docLength="11973" length="1" offset="3284" starttimestamp="1645820509543" timestamp="180969734">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2936" _type="Insert" date="Sun Feb 27 17:37:59 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11249" docExpressionCount="1138" docLength="11974" length="1" offset="3285" starttimestamp="1645820509543" timestamp="180969861">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <DocumentChange __id="2937" _type="Delete" date="Sun Feb 27 17:37:59 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11248" docExpressionCount="1138" docLength="11973" endLine="140" length="1" offset="3285" startLine="140" starttimestamp="1645820509543" timestamp="180970146">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <DocumentChange __id="2938" _type="Insert" date="Sun Feb 27 17:38:00 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11249" docExpressionCount="1138" docLength="11974" length="1" offset="3285" starttimestamp="1645820509543" timestamp="180970463">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <DocumentChange __id="2940" _type="Replace" date="Sun Feb 27 17:38:00 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11252" docExpressionCount="1138" docLength="11977" endLine="140" insertionLength="5" int_docASTNodeCount="1609" int_docActiveCodeLength="11247" int_docExpressionCount="1137" int_docLength="11972" length="2" offset="3284" startLine="140" starttimestamp="1645820509543" timestamp="180970949">
    <deletedText><![CDATA[eq]]></deletedText>
    <insertedText><![CDATA[EQUAL]]></insertedText>
  </DocumentChange>
  <Command __id="2947" _type="MoveCaretCommand" caretOffset="3125" date="Sun Feb 27 17:38:01 EST 2022" docOffset="3203" starttimestamp="1645820509543" timestamp="180972427" />
  <Command __id="2948" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:38:03 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="180973582">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="2949" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:38:03 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="180974356">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2950" _type="MoveCaretCommand" caretOffset="210" date="Sun Feb 27 17:38:03 EST 2022" docOffset="210" starttimestamp="1645820509543" timestamp="180974449" />
  <Command __id="2951" _type="RunCommand" date="Sun Feb 27 17:38:04 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180975428" type="Run" />
  <Command __id="2952" _type="RunCommand" date="Sun Feb 27 17:38:04 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180975428" type="Run" />
  <Command __id="2953" _type="RunCommand" date="Sun Feb 27 17:38:05 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180975548" type="Run" />
  <Command __id="2954" _type="RunCommand" date="Sun Feb 27 17:38:05 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="180975548" type="Run" />
  <Command __id="2955" _type="EHExceptionCommand" date="Sun Feb 27 17:38:05 EST 2022" starttimestamp="1645820509543" timestamp="180975598" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
in here, EQUAL

in here, EQUAL
Parse error: parsing expression, current token is: and its kind is: EQUAL
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="2956" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:38:19 EST 2022" docASTNodeCount="1087" docActiveCodeLength="7870" docExpressionCount="675" docLength="8600" projectName="pa1" starttimestamp="1645820509543" timestamp="180989705">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	        	if(currentChar == '=') {¶	        		return TokenKind.EQUAL;¶	        	}¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2957" _type="MoveCaretCommand" caretOffset="5529" date="Sun Feb 27 17:38:19 EST 2022" docOffset="5680" starttimestamp="1645820509543" timestamp="180989789" />
  <Command __id="2958" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:38:19 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="180990153">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2959" _type="MoveCaretCommand" caretOffset="210" date="Sun Feb 27 17:38:19 EST 2022" docOffset="210" starttimestamp="1645820509543" timestamp="180990211" />
  <Command __id="2960" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:38:20 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="180990686">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="2961" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:38:20 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="180991001">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2962" _type="MoveCaretCommand" caretOffset="210" date="Sun Feb 27 17:38:20 EST 2022" docOffset="210" starttimestamp="1645820509543" timestamp="180991080" />
  <Command __id="2963" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:38:21 EST 2022" docASTNodeCount="1087" docActiveCodeLength="7870" docExpressionCount="675" docLength="8600" projectName="pa1" starttimestamp="1645820509543" timestamp="180992186">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	        	if(currentChar == '=') {¶	        		return TokenKind.EQUAL;¶	        	}¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2964" _type="MoveCaretCommand" caretOffset="5529" date="Sun Feb 27 17:38:21 EST 2022" docOffset="5680" starttimestamp="1645820509543" timestamp="180992257" />
  <Command __id="2965" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:38:23 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="180993487">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2967" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:38:23 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="180994351">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="2968" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:38:26 EST 2022" starttimestamp="1645820509543" timestamp="180997453" />
  <Command __id="2969" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:38:27 EST 2022" starttimestamp="1645820509543" timestamp="180997471" />
  <Command __id="2971" _type="MoveCaretCommand" caretOffset="3213" date="Sun Feb 27 17:38:28 EST 2022" docOffset="3291" starttimestamp="1645820509543" timestamp="180999446" />
  <Command __id="2972" _type="MoveCaretCommand" caretOffset="3213" date="Sun Feb 27 17:38:29 EST 2022" docOffset="3291" starttimestamp="1645820509543" timestamp="180999486" />
  <Command __id="2973" _type="SelectTextCommand" caretOffset="3189" date="Sun Feb 27 17:38:30 EST 2022" end="3213" start="3189" starttimestamp="1645820509543" timestamp="181000962" />
  <Command __id="2974" _type="SelectTextCommand" caretOffset="3189" date="Sun Feb 27 17:38:30 EST 2022" end="3213" start="3189" starttimestamp="1645820509543" timestamp="181000962" />
  <Command __id="2976" _type="InsertStringCommand" date="Sun Feb 27 17:38:30 EST 2022" starttimestamp="1645820509543" timestamp="181001182" timestamp2="181001182">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2977" _type="InsertStringCommand" date="Sun Feb 27 17:38:30 EST 2022" starttimestamp="1645820509543" timestamp="181001182" timestamp2="181001182">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2979" _type="InsertStringCommand" date="Sun Feb 27 17:38:30 EST 2022" starttimestamp="1645820509543" timestamp="181001381" timestamp2="181001381">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2980" _type="InsertStringCommand" date="Sun Feb 27 17:38:30 EST 2022" starttimestamp="1645820509543" timestamp="181001381" timestamp2="181001381">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2982" _type="InsertStringCommand" date="Sun Feb 27 17:38:31 EST 2022" starttimestamp="1645820509543" timestamp="181001532" timestamp2="181001532">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2983" _type="InsertStringCommand" date="Sun Feb 27 17:38:31 EST 2022" starttimestamp="1645820509543" timestamp="181001532" timestamp2="181001532">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2985" _type="InsertStringCommand" date="Sun Feb 27 17:38:31 EST 2022" starttimestamp="1645820509543" timestamp="181001722" timestamp2="181001722">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2986" _type="InsertStringCommand" date="Sun Feb 27 17:38:31 EST 2022" starttimestamp="1645820509543" timestamp="181001722" timestamp2="181001722">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2988" _type="InsertStringCommand" date="Sun Feb 27 17:38:31 EST 2022" starttimestamp="1645820509543" timestamp="181002067" timestamp2="181002067">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="2989" _type="InsertStringCommand" date="Sun Feb 27 17:38:31 EST 2022" starttimestamp="1645820509543" timestamp="181002067" timestamp2="181002067">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="2991" _type="InsertStringCommand" date="Sun Feb 27 17:38:31 EST 2022" starttimestamp="1645820509543" timestamp="181002342" timestamp2="181002342">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2992" _type="InsertStringCommand" date="Sun Feb 27 17:38:31 EST 2022" starttimestamp="1645820509543" timestamp="181002342" timestamp2="181002342">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2994" _type="InsertStringCommand" date="Sun Feb 27 17:38:32 EST 2022" starttimestamp="1645820509543" timestamp="181002871" timestamp2="181002871">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="2995" _type="InsertStringCommand" date="Sun Feb 27 17:38:32 EST 2022" starttimestamp="1645820509543" timestamp="181002871" timestamp2="181002871">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="2997" _type="InsertStringCommand" date="Sun Feb 27 17:38:32 EST 2022" starttimestamp="1645820509543" timestamp="181003040" timestamp2="181003040">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2998" _type="InsertStringCommand" date="Sun Feb 27 17:38:32 EST 2022" starttimestamp="1645820509543" timestamp="181003040" timestamp2="181003040">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3000" _type="InsertStringCommand" date="Sun Feb 27 17:38:32 EST 2022" starttimestamp="1645820509543" timestamp="181003294" timestamp2="181003294">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="3001" _type="InsertStringCommand" date="Sun Feb 27 17:38:32 EST 2022" starttimestamp="1645820509543" timestamp="181003294" timestamp2="181003294">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="3003" _type="InsertStringCommand" date="Sun Feb 27 17:38:32 EST 2022" starttimestamp="1645820509543" timestamp="181003333" timestamp2="181003333">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="3004" _type="InsertStringCommand" date="Sun Feb 27 17:38:32 EST 2022" starttimestamp="1645820509543" timestamp="181003334" timestamp2="181003334">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="3007" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:38:33 EST 2022" starttimestamp="1645820509543" timestamp="181003665" />
  <Command __id="3008" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:38:33 EST 2022" starttimestamp="1645820509543" timestamp="181003666" />
  <Command __id="3042" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:38:37 EST 2022" starttimestamp="1645820509543" timestamp="181007860" />
  <Command __id="3043" _type="MoveCaretCommand" caretOffset="3282" date="Sun Feb 27 17:38:38 EST 2022" docOffset="3360" starttimestamp="1645820509543" timestamp="181008475" />
  <Command __id="3044" _type="MoveCaretCommand" caretOffset="3282" date="Sun Feb 27 17:38:38 EST 2022" docOffset="3360" starttimestamp="1645820509543" timestamp="181008475" />
  <Command __id="3045" _type="MoveCaretCommand" caretOffset="3181" date="Sun Feb 27 17:38:51 EST 2022" docOffset="3259" starttimestamp="1645820509543" timestamp="181022411" />
  <Command __id="3046" _type="MoveCaretCommand" caretOffset="3181" date="Sun Feb 27 17:38:51 EST 2022" docOffset="3259" starttimestamp="1645820509543" timestamp="181022411" />
  <Command __id="3047" _type="SelectTextCommand" caretOffset="3162" date="Sun Feb 27 17:39:00 EST 2022" end="3181" start="3162" starttimestamp="1645820509543" timestamp="181030715" />
  <Command __id="3048" _type="SelectTextCommand" caretOffset="3162" date="Sun Feb 27 17:39:00 EST 2022" end="3181" start="3162" starttimestamp="1645820509543" timestamp="181030715" />
  <Command __id="3050" _type="PasteCommand" date="Sun Feb 27 17:39:00 EST 2022" starttimestamp="1645820509543" timestamp="181030826" />
  <Command __id="3052" _type="UndoCommand" date="Sun Feb 27 17:39:01 EST 2022" starttimestamp="1645820509543" timestamp="181031790" />
  <Command __id="2970" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:38:28 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11252" docExpressionCount="1138" docLength="11977" projectName="pa1" starttimestamp="1645820509543" timestamp="180999413">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶//			System.out.println("in here, " + currentToken.kind);¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				System.out.println("in here, " + currentToken.kind);¶				accept"), Diff(DELETE,"It("), Diff(INSERT,"(TokenKind.EQUAL"), Diff(EQUAL,");¶				System.out.println("in here, " + currentToken.kind);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
//			System.out.println("in here, " + currentToken.kind);
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
				System.out.println("in here, " + currentToken.kind);
				accept(TokenKind.EQUAL);
				System.out.println("in here, " + currentToken.kind);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="2975" _type="Replace" date="Sun Feb 27 17:38:30 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11229" docExpressionCount="1133" docLength="11954" endLine="140" insertionLength="1" int_docASTNodeCount="1603" int_docActiveCodeLength="11228" int_docExpressionCount="1133" int_docLength="11953" length="24" offset="3267" startLine="140" starttimestamp="1645820509543" timestamp="181001172">
    <deletedText><![CDATA[accept(TokenKind.EQUAL);]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2978" _type="Insert" date="Sun Feb 27 17:38:30 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11230" docExpressionCount="1133" docLength="11955" length="1" offset="3268" starttimestamp="1645820509543" timestamp="181001376">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="2981" _type="Insert" date="Sun Feb 27 17:38:31 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11231" docExpressionCount="1133" docLength="11956" length="1" offset="3269" starttimestamp="1645820509543" timestamp="181001526">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="2984" _type="Insert" date="Sun Feb 27 17:38:31 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11232" docExpressionCount="1133" docLength="11957" length="1" offset="3270" starttimestamp="1645820509543" timestamp="181001718">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2987" _type="Insert" date="Sun Feb 27 17:38:31 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11233" docExpressionCount="1133" docLength="11958" length="1" offset="3271" starttimestamp="1645820509543" timestamp="181002062">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="2990" _type="Insert" date="Sun Feb 27 17:38:31 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11234" docExpressionCount="1133" docLength="11959" length="1" offset="3272" starttimestamp="1645820509543" timestamp="181002339">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2993" _type="Insert" date="Sun Feb 27 17:38:32 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11235" docExpressionCount="1133" docLength="11960" length="1" offset="3273" starttimestamp="1645820509543" timestamp="181002863">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="2996" _type="Insert" date="Sun Feb 27 17:38:32 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11236" docExpressionCount="1133" docLength="11961" length="1" offset="3274" starttimestamp="1645820509543" timestamp="181003035">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2999" _type="Insert" date="Sun Feb 27 17:38:32 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11237" docExpressionCount="1135" docLength="11962" length="1" offset="3275" starttimestamp="1645820509543" timestamp="181003291">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="3002" _type="Insert" date="Sun Feb 27 17:38:32 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11239" docExpressionCount="1135" docLength="11964" length="2" offset="3276" starttimestamp="1645820509543" timestamp="181003330">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="3005" _type="Delete" date="Sun Feb 27 17:38:33 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11238" docExpressionCount="1133" docLength="11963" endLine="140" length="1" offset="3276" startLine="140" starttimestamp="1645820509543" timestamp="181003659">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="3006" _type="Delete" date="Sun Feb 27 17:38:33 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11237" docExpressionCount="1135" docLength="11962" endLine="140" length="1" offset="3276" startLine="140" starttimestamp="1645820509543" timestamp="181003663">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="3009" _type="Delete" date="Sun Feb 27 17:38:33 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11236" docExpressionCount="1133" docLength="11961" endLine="140" length="1" offset="3275" startLine="140" starttimestamp="1645820509543" timestamp="181003798">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="3012" _type="Insert" date="Sun Feb 27 17:38:33 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11238" docExpressionCount="1135" docLength="11963" length="2" offset="3275" starttimestamp="1645820509543" timestamp="181003949">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="3017" _type="Insert" date="Sun Feb 27 17:38:34 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11239" docExpressionCount="1136" docLength="11964" length="1" offset="3277" starttimestamp="1645820509543" timestamp="181004802">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="3020" _type="Insert" date="Sun Feb 27 17:38:34 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11240" docExpressionCount="1137" docLength="11965" length="1" offset="3278" starttimestamp="1645820509543" timestamp="181004814">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="3025" _type="Delete" date="Sun Feb 27 17:38:35 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11239" docExpressionCount="1136" docLength="11964" endLine="140" length="1" offset="3278" startLine="140" starttimestamp="1645820509543" timestamp="181005494">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="3028" _type="Delete" date="Sun Feb 27 17:38:35 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11238" docExpressionCount="1135" docLength="11963" endLine="140" length="1" offset="3277" startLine="140" starttimestamp="1645820509543" timestamp="181005794">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="3031" _type="Insert" date="Sun Feb 27 17:38:35 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11239" docExpressionCount="1136" docLength="11964" length="1" offset="3277" starttimestamp="1645820509543" timestamp="181005983">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="3034" _type="Delete" date="Sun Feb 27 17:38:36 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11238" docExpressionCount="1135" docLength="11963" endLine="140" length="1" offset="3277" startLine="140" starttimestamp="1645820509543" timestamp="181006902">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="3037" _type="Insert" date="Sun Feb 27 17:38:36 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11239" docExpressionCount="1135" docLength="11964" length="1" offset="3277" starttimestamp="1645820509543" timestamp="181007150">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="3049" _type="Replace" date="Sun Feb 27 17:39:00 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11222" docExpressionCount="1131" docLength="12004" endLine="139" insertionLength="59" int_docASTNodeCount="1602" int_docActiveCodeLength="11220" int_docExpressionCount="1131" int_docLength="11945" length="19" offset="3240" startLine="139" starttimestamp="1645820509543" timestamp="181030813">
    <deletedText><![CDATA[+ currentToken.kind]]></deletedText>
    <insertedText><![CDATA[//			System.out.println("in here, " + currentToken.kind);
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3051" _type="Replace" date="Sun Feb 27 17:39:01 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11239" docExpressionCount="1135" docLength="11964" endLine="140" insertionLength="19" int_docASTNodeCount="1602" int_docActiveCodeLength="11220" int_docExpressionCount="1131" int_docLength="11945" length="59" offset="3240" startLine="139" starttimestamp="1645820509543" timestamp="181031773">
    <deletedText><![CDATA[//			System.out.println("in here, " + currentToken.kind);
]]></deletedText>
    <insertedText><![CDATA[+ currentToken.kind]]></insertedText>
  </DocumentChange>
  <Command __id="3053" _type="MoveCaretCommand" caretOffset="3182" date="Sun Feb 27 17:39:02 EST 2022" docOffset="3260" starttimestamp="1645820509543" timestamp="181032851" />
  <Command __id="3054" _type="MoveCaretCommand" caretOffset="3182" date="Sun Feb 27 17:39:02 EST 2022" docOffset="3260" starttimestamp="1645820509543" timestamp="181032851" />
  <Command __id="3055" _type="MoveCaretCommand" caretOffset="3180" date="Sun Feb 27 17:39:03 EST 2022" docOffset="3258" starttimestamp="1645820509543" timestamp="181033626" />
  <Command __id="3056" _type="MoveCaretCommand" caretOffset="3180" date="Sun Feb 27 17:39:03 EST 2022" docOffset="3258" starttimestamp="1645820509543" timestamp="181033626" />
  <Command __id="3057" _type="MoveCaretCommand" caretOffset="3181" date="Sun Feb 27 17:39:03 EST 2022" docOffset="3259" starttimestamp="1645820509543" timestamp="181034123" />
  <Command __id="3058" _type="MoveCaretCommand" caretOffset="3181" date="Sun Feb 27 17:39:03 EST 2022" docOffset="3259" starttimestamp="1645820509543" timestamp="181034123" />
  <DocumentChange __id="3059" _type="Insert" date="Sun Feb 27 17:39:04 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11240" docExpressionCount="1135" docLength="11965" length="1" offset="3259" starttimestamp="1645820509543" timestamp="181034956">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3060" _type="InsertStringCommand" date="Sun Feb 27 17:39:04 EST 2022" starttimestamp="1645820509543" timestamp="181034962" timestamp2="181034962">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3061" _type="InsertStringCommand" date="Sun Feb 27 17:39:04 EST 2022" starttimestamp="1645820509543" timestamp="181034963" timestamp2="181034963">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3062" _type="Insert" date="Sun Feb 27 17:39:04 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11241" docExpressionCount="1136" docLength="11966" length="1" offset="3260" starttimestamp="1645820509543" timestamp="181035251">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <Command __id="3063" _type="InsertStringCommand" date="Sun Feb 27 17:39:04 EST 2022" starttimestamp="1645820509543" timestamp="181035255" timestamp2="181035255">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="3064" _type="InsertStringCommand" date="Sun Feb 27 17:39:04 EST 2022" starttimestamp="1645820509543" timestamp="181035256" timestamp2="181035256">
    <data><![CDATA[+]]></data>
  </Command>
  <DocumentChange __id="3065" _type="Insert" date="Sun Feb 27 17:39:04 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11242" docExpressionCount="1136" docLength="11967" length="1" offset="3261" starttimestamp="1645820509543" timestamp="181035391">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3066" _type="InsertStringCommand" date="Sun Feb 27 17:39:04 EST 2022" starttimestamp="1645820509543" timestamp="181035400" timestamp2="181035400">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3067" _type="InsertStringCommand" date="Sun Feb 27 17:39:04 EST 2022" starttimestamp="1645820509543" timestamp="181035400" timestamp2="181035400">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3068" _type="Insert" date="Sun Feb 27 17:39:05 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11244" docExpressionCount="1136" docLength="11969" length="2" offset="3262" starttimestamp="1645820509543" timestamp="181036250">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <Command __id="3069" _type="InsertStringCommand" date="Sun Feb 27 17:39:05 EST 2022" starttimestamp="1645820509543" timestamp="181036255" timestamp2="181036255">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3070" _type="InsertStringCommand" date="Sun Feb 27 17:39:05 EST 2022" starttimestamp="1645820509543" timestamp="181036255" timestamp2="181036255">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3071" _type="InsertStringCommand" date="Sun Feb 27 17:39:05 EST 2022" starttimestamp="1645820509543" timestamp="181036398" timestamp2="181036398">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3072" _type="InsertStringCommand" date="Sun Feb 27 17:39:05 EST 2022" starttimestamp="1645820509543" timestamp="181036398" timestamp2="181036398">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3073" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:39:06 EST 2022" starttimestamp="1645820509543" timestamp="181036745" />
  <Command __id="3074" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:39:06 EST 2022" starttimestamp="1645820509543" timestamp="181036745" />
  <DocumentChange __id="3075" _type="Insert" date="Sun Feb 27 17:39:06 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11245" docExpressionCount="1136" docLength="11970" length="1" offset="3263" starttimestamp="1645820509543" timestamp="181037208">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3076" _type="InsertStringCommand" date="Sun Feb 27 17:39:06 EST 2022" starttimestamp="1645820509543" timestamp="181037214" timestamp2="181037214">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3077" _type="InsertStringCommand" date="Sun Feb 27 17:39:06 EST 2022" starttimestamp="1645820509543" timestamp="181037214" timestamp2="181037214">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3078" _type="Insert" date="Sun Feb 27 17:39:08 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11246" docExpressionCount="1136" docLength="11971" length="1" offset="3264" starttimestamp="1645820509543" timestamp="181038969">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="3079" _type="InsertStringCommand" date="Sun Feb 27 17:39:08 EST 2022" starttimestamp="1645820509543" timestamp="181038974" timestamp2="181038974">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3080" _type="InsertStringCommand" date="Sun Feb 27 17:39:08 EST 2022" starttimestamp="1645820509543" timestamp="181038975" timestamp2="181038975">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="3081" _type="Insert" date="Sun Feb 27 17:39:08 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11247" docExpressionCount="1136" docLength="11972" length="1" offset="3265" starttimestamp="1645820509543" timestamp="181039046">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="3082" _type="InsertStringCommand" date="Sun Feb 27 17:39:08 EST 2022" starttimestamp="1645820509543" timestamp="181039050" timestamp2="181039050">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3083" _type="InsertStringCommand" date="Sun Feb 27 17:39:08 EST 2022" starttimestamp="1645820509543" timestamp="181039050" timestamp2="181039050">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3085" _type="InsertStringCommand" date="Sun Feb 27 17:39:08 EST 2022" starttimestamp="1645820509543" timestamp="181039294" timestamp2="181039294">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3086" _type="InsertStringCommand" date="Sun Feb 27 17:39:08 EST 2022" starttimestamp="1645820509543" timestamp="181039294" timestamp2="181039294">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3084" _type="Insert" date="Sun Feb 27 17:39:08 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11248" docExpressionCount="1136" docLength="11973" length="1" offset="3266" starttimestamp="1645820509543" timestamp="181039284">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3087" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:39:11 EST 2022" starttimestamp="1645820509543" timestamp="181041505" />
  <Command __id="3088" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:39:11 EST 2022" starttimestamp="1645820509543" timestamp="181041505" />
  <DocumentChange __id="3089" _type="Insert" date="Sun Feb 27 17:39:12 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11249" docExpressionCount="1136" docLength="11974" length="1" offset="3268" starttimestamp="1645820509543" timestamp="181042625">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3090" _type="InsertStringCommand" date="Sun Feb 27 17:39:12 EST 2022" starttimestamp="1645820509543" timestamp="181042630" timestamp2="181042630">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3091" _type="InsertStringCommand" date="Sun Feb 27 17:39:12 EST 2022" starttimestamp="1645820509543" timestamp="181042630" timestamp2="181042630">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3092" _type="Insert" date="Sun Feb 27 17:39:12 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11250" docExpressionCount="1136" docLength="11975" length="1" offset="3269" starttimestamp="1645820509543" timestamp="181042931">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <Command __id="3093" _type="InsertStringCommand" date="Sun Feb 27 17:39:12 EST 2022" starttimestamp="1645820509543" timestamp="181042935" timestamp2="181042935">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="3094" _type="InsertStringCommand" date="Sun Feb 27 17:39:12 EST 2022" starttimestamp="1645820509543" timestamp="181042935" timestamp2="181042935">
    <data><![CDATA[+]]></data>
  </Command>
  <DocumentChange __id="3095" _type="Insert" date="Sun Feb 27 17:39:12 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11251" docExpressionCount="1136" docLength="11976" length="1" offset="3270" starttimestamp="1645820509543" timestamp="181043062">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3096" _type="InsertStringCommand" date="Sun Feb 27 17:39:12 EST 2022" starttimestamp="1645820509543" timestamp="181043068" timestamp2="181043068">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3097" _type="InsertStringCommand" date="Sun Feb 27 17:39:12 EST 2022" starttimestamp="1645820509543" timestamp="181043068" timestamp2="181043068">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3098" _type="Insert" date="Sun Feb 27 17:39:12 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11252" docExpressionCount="1137" docLength="11977" length="1" offset="3271" starttimestamp="1645820509543" timestamp="181043433">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="3099" _type="InsertStringCommand" date="Sun Feb 27 17:39:12 EST 2022" starttimestamp="1645820509543" timestamp="181043438" timestamp2="181043438">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3100" _type="InsertStringCommand" date="Sun Feb 27 17:39:12 EST 2022" starttimestamp="1645820509543" timestamp="181043438" timestamp2="181043438">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="3101" _type="Insert" date="Sun Feb 27 17:39:13 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11253" docExpressionCount="1137" docLength="11978" length="1" offset="3272" starttimestamp="1645820509543" timestamp="181043610">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="3102" _type="InsertStringCommand" date="Sun Feb 27 17:39:13 EST 2022" starttimestamp="1645820509543" timestamp="181043614" timestamp2="181043614">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="3103" _type="InsertStringCommand" date="Sun Feb 27 17:39:13 EST 2022" starttimestamp="1645820509543" timestamp="181043615" timestamp2="181043615">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="3104" _type="Insert" date="Sun Feb 27 17:39:13 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11254" docExpressionCount="1137" docLength="11979" length="1" offset="3273" starttimestamp="1645820509543" timestamp="181043734">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="3105" _type="InsertStringCommand" date="Sun Feb 27 17:39:13 EST 2022" starttimestamp="1645820509543" timestamp="181043740" timestamp2="181043740">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3106" _type="InsertStringCommand" date="Sun Feb 27 17:39:13 EST 2022" starttimestamp="1645820509543" timestamp="181043740" timestamp2="181043740">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="3107" _type="Insert" date="Sun Feb 27 17:39:13 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11255" docExpressionCount="1137" docLength="11980" length="1" offset="3274" starttimestamp="1645820509543" timestamp="181043899">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="3108" _type="InsertStringCommand" date="Sun Feb 27 17:39:13 EST 2022" starttimestamp="1645820509543" timestamp="181043906" timestamp2="181043906">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3109" _type="InsertStringCommand" date="Sun Feb 27 17:39:13 EST 2022" starttimestamp="1645820509543" timestamp="181043906" timestamp2="181043906">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="3110" _type="Insert" date="Sun Feb 27 17:39:13 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11256" docExpressionCount="1137" docLength="11981" length="1" offset="3275" starttimestamp="1645820509543" timestamp="181043996">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="3111" _type="InsertStringCommand" date="Sun Feb 27 17:39:13 EST 2022" starttimestamp="1645820509543" timestamp="181044007" timestamp2="181044007">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3112" _type="InsertStringCommand" date="Sun Feb 27 17:39:13 EST 2022" starttimestamp="1645820509543" timestamp="181044007" timestamp2="181044007">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="3113" _type="Insert" date="Sun Feb 27 17:39:13 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11257" docExpressionCount="1137" docLength="11982" length="1" offset="3276" starttimestamp="1645820509543" timestamp="181044120">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="3114" _type="InsertStringCommand" date="Sun Feb 27 17:39:13 EST 2022" starttimestamp="1645820509543" timestamp="181044124" timestamp2="181044124">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3115" _type="InsertStringCommand" date="Sun Feb 27 17:39:13 EST 2022" starttimestamp="1645820509543" timestamp="181044124" timestamp2="181044124">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="3116" _type="Insert" date="Sun Feb 27 17:39:13 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11258" docExpressionCount="1137" docLength="11983" length="1" offset="3277" starttimestamp="1645820509543" timestamp="181044188">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="3117" _type="InsertStringCommand" date="Sun Feb 27 17:39:13 EST 2022" starttimestamp="1645820509543" timestamp="181044200" timestamp2="181044200">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3118" _type="InsertStringCommand" date="Sun Feb 27 17:39:13 EST 2022" starttimestamp="1645820509543" timestamp="181044200" timestamp2="181044200">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="3119" _type="Insert" date="Sun Feb 27 17:39:14 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11259" docExpressionCount="1137" docLength="11984" length="1" offset="3278" starttimestamp="1645820509543" timestamp="181044742">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <Command __id="3120" _type="InsertStringCommand" date="Sun Feb 27 17:39:14 EST 2022" starttimestamp="1645820509543" timestamp="181044746" timestamp2="181044746">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="3121" _type="InsertStringCommand" date="Sun Feb 27 17:39:14 EST 2022" starttimestamp="1645820509543" timestamp="181044746" timestamp2="181044746">
    <data><![CDATA[T]]></data>
  </Command>
  <DocumentChange __id="3122" _type="Insert" date="Sun Feb 27 17:39:14 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11260" docExpressionCount="1137" docLength="11985" length="1" offset="3279" starttimestamp="1645820509543" timestamp="181045290">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="3123" _type="InsertStringCommand" date="Sun Feb 27 17:39:14 EST 2022" starttimestamp="1645820509543" timestamp="181045295" timestamp2="181045295">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3124" _type="InsertStringCommand" date="Sun Feb 27 17:39:14 EST 2022" starttimestamp="1645820509543" timestamp="181045295" timestamp2="181045295">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="3125" _type="Insert" date="Sun Feb 27 17:39:15 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11261" docExpressionCount="1137" docLength="11986" length="1" offset="3280" starttimestamp="1645820509543" timestamp="181045499">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="3126" _type="InsertStringCommand" date="Sun Feb 27 17:39:15 EST 2022" starttimestamp="1645820509543" timestamp="181045512" timestamp2="181045512">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="3127" _type="InsertStringCommand" date="Sun Feb 27 17:39:15 EST 2022" starttimestamp="1645820509543" timestamp="181045512" timestamp2="181045512">
    <data><![CDATA[k]]></data>
  </Command>
  <DocumentChange __id="3128" _type="Insert" date="Sun Feb 27 17:39:15 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11262" docExpressionCount="1137" docLength="11987" length="1" offset="3281" starttimestamp="1645820509543" timestamp="181045609">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="3129" _type="InsertStringCommand" date="Sun Feb 27 17:39:15 EST 2022" starttimestamp="1645820509543" timestamp="181045614" timestamp2="181045614">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3130" _type="InsertStringCommand" date="Sun Feb 27 17:39:15 EST 2022" starttimestamp="1645820509543" timestamp="181045614" timestamp2="181045614">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="3131" _type="Insert" date="Sun Feb 27 17:39:15 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11263" docExpressionCount="1137" docLength="11988" length="1" offset="3282" starttimestamp="1645820509543" timestamp="181045669">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="3132" _type="InsertStringCommand" date="Sun Feb 27 17:39:15 EST 2022" starttimestamp="1645820509543" timestamp="181045673" timestamp2="181045673">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3133" _type="InsertStringCommand" date="Sun Feb 27 17:39:15 EST 2022" starttimestamp="1645820509543" timestamp="181045673" timestamp2="181045673">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="3134" _type="Insert" date="Sun Feb 27 17:39:15 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11264" docExpressionCount="1138" docLength="11989" length="1" offset="3283" starttimestamp="1645820509543" timestamp="181045930">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="3135" _type="InsertStringCommand" date="Sun Feb 27 17:39:15 EST 2022" starttimestamp="1645820509543" timestamp="181045934" timestamp2="181045934">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="3136" _type="InsertStringCommand" date="Sun Feb 27 17:39:15 EST 2022" starttimestamp="1645820509543" timestamp="181045934" timestamp2="181045934">
    <data><![CDATA[,]]></data>
  </Command>
  <DocumentChange __id="3137" _type="Delete" date="Sun Feb 27 17:39:15 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11263" docExpressionCount="1137" docLength="11988" endLine="139" length="1" offset="3283" startLine="139" starttimestamp="1645820509543" timestamp="181046377">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="3138" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:39:15 EST 2022" starttimestamp="1645820509543" timestamp="181046380" />
  <Command __id="3139" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:39:15 EST 2022" starttimestamp="1645820509543" timestamp="181046380" />
  <DocumentChange __id="3140" _type="Insert" date="Sun Feb 27 17:39:16 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11264" docExpressionCount="1138" docLength="11989" length="1" offset="3283" starttimestamp="1645820509543" timestamp="181046567">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="3141" _type="InsertStringCommand" date="Sun Feb 27 17:39:16 EST 2022" starttimestamp="1645820509543" timestamp="181046572" timestamp2="181046572">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3142" _type="InsertStringCommand" date="Sun Feb 27 17:39:16 EST 2022" starttimestamp="1645820509543" timestamp="181046572" timestamp2="181046572">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3143" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:39:16 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="181046575" />
  <DocumentChange __id="3144" _type="Insert" date="Sun Feb 27 17:39:16 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11265" docExpressionCount="1139" docLength="11990" length="1" offset="3284" starttimestamp="1645820509543" timestamp="181046702">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="3145" _type="Insert" date="Sun Feb 27 17:39:16 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11266" docExpressionCount="1139" docLength="11991" length="1" offset="3285" starttimestamp="1645820509543" timestamp="181046867">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="3146" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:39:16 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="181046887" />
  <DocumentChange __id="3147" _type="Delete" date="Sun Feb 27 17:39:16 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11265" docExpressionCount="1139" docLength="11990" endLine="139" length="1" offset="3285" startLine="139" starttimestamp="1645820509543" timestamp="181047291">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="3148" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:39:16 EST 2022" starttimestamp="1645820509543" timestamp="181047298" />
  <Command __id="3149" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:39:16 EST 2022" starttimestamp="1645820509543" timestamp="181047298" />
  <DocumentChange __id="3150" _type="Delete" date="Sun Feb 27 17:39:16 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11264" docExpressionCount="1138" docLength="11989" endLine="139" length="1" offset="3284" startLine="139" starttimestamp="1645820509543" timestamp="181047431">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="3151" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:39:16 EST 2022" starttimestamp="1645820509543" timestamp="181047433" />
  <Command __id="3152" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:39:16 EST 2022" starttimestamp="1645820509543" timestamp="181047433" />
  <DocumentChange __id="3153" _type="Insert" date="Sun Feb 27 17:39:17 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11265" docExpressionCount="1139" docLength="11990" length="1" offset="3284" starttimestamp="1645820509543" timestamp="181047478">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="3154" _type="InsertStringCommand" date="Sun Feb 27 17:39:17 EST 2022" starttimestamp="1645820509543" timestamp="181047483" timestamp2="181047483">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3155" _type="InsertStringCommand" date="Sun Feb 27 17:39:17 EST 2022" starttimestamp="1645820509543" timestamp="181047483" timestamp2="181047483">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="3156" _type="Insert" date="Sun Feb 27 17:39:17 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11266" docExpressionCount="1139" docLength="11991" length="1" offset="3285" starttimestamp="1645820509543" timestamp="181047666">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="3157" _type="InsertStringCommand" date="Sun Feb 27 17:39:17 EST 2022" starttimestamp="1645820509543" timestamp="181047670" timestamp2="181047670">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="3158" _type="InsertStringCommand" date="Sun Feb 27 17:39:17 EST 2022" starttimestamp="1645820509543" timestamp="181047670" timestamp2="181047670">
    <data><![CDATA[p]]></data>
  </Command>
  <DocumentChange __id="3159" _type="Delete" date="Sun Feb 27 17:39:17 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11265" docExpressionCount="1139" docLength="11990" endLine="139" length="1" offset="3285" startLine="139" starttimestamp="1645820509543" timestamp="181048425">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="3160" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:39:17 EST 2022" starttimestamp="1645820509543" timestamp="181048427" />
  <Command __id="3161" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:39:17 EST 2022" starttimestamp="1645820509543" timestamp="181048427" />
  <DocumentChange __id="3162" _type="Delete" date="Sun Feb 27 17:39:18 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11264" docExpressionCount="1138" docLength="11989" endLine="139" length="1" offset="3284" startLine="139" starttimestamp="1645820509543" timestamp="181048582">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="3163" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:39:18 EST 2022" starttimestamp="1645820509543" timestamp="181048587" />
  <Command __id="3164" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:39:18 EST 2022" starttimestamp="1645820509543" timestamp="181048587" />
  <DocumentChange __id="3165" _type="Delete" date="Sun Feb 27 17:39:18 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11263" docExpressionCount="1137" docLength="11988" endLine="139" length="1" offset="3283" startLine="139" starttimestamp="1645820509543" timestamp="181048729">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="3166" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:39:18 EST 2022" starttimestamp="1645820509543" timestamp="181048731" />
  <Command __id="3167" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:39:18 EST 2022" starttimestamp="1645820509543" timestamp="181048731" />
  <DocumentChange __id="3168" _type="Insert" date="Sun Feb 27 17:39:18 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11264" docExpressionCount="1138" docLength="11989" length="1" offset="3283" starttimestamp="1645820509543" timestamp="181048932">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="3169" _type="InsertStringCommand" date="Sun Feb 27 17:39:18 EST 2022" starttimestamp="1645820509543" timestamp="181048937" timestamp2="181048937">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3170" _type="InsertStringCommand" date="Sun Feb 27 17:39:18 EST 2022" starttimestamp="1645820509543" timestamp="181048937" timestamp2="181048937">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3171" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:39:18 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="181048939" />
  <DocumentChange __id="3172" _type="Insert" date="Sun Feb 27 17:39:18 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11265" docExpressionCount="1139" docLength="11990" length="1" offset="3284" starttimestamp="1645820509543" timestamp="181049046">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="3173" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:39:19 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="181049663" />
  <Command __id="3175" _type="InsertStringCommand" date="Sun Feb 27 17:39:19 EST 2022" starttimestamp="1645820509543" timestamp="181049675" timestamp2="181049675">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3176" _type="InsertStringCommand" date="Sun Feb 27 17:39:19 EST 2022" starttimestamp="1645820509543" timestamp="181049675" timestamp2="181049675">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="3174" _type="Replace" date="Sun Feb 27 17:39:19 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11272" docExpressionCount="1139" docLength="11997" endLine="139" insertionLength="8" int_docASTNodeCount="1610" int_docActiveCodeLength="11264" int_docExpressionCount="1138" int_docLength="11989" length="1" offset="3284" startLine="139" starttimestamp="1645820509543" timestamp="181049669">
    <deletedText><![CDATA[s]]></deletedText>
    <insertedText><![CDATA[spelling]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3182" _type="Insert" date="Sun Feb 27 17:39:23 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11273" docExpressionCount="1139" docLength="11998" length="1" offset="3368" starttimestamp="1645820509543" timestamp="181054062">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3177" _type="SelectTextCommand" caretOffset="3214" date="Sun Feb 27 17:39:22 EST 2022" end="3214" start="3182" starttimestamp="1645820509543" timestamp="181052787" />
  <Command __id="3178" _type="SelectTextCommand" caretOffset="3214" date="Sun Feb 27 17:39:22 EST 2022" end="3214" start="3182" starttimestamp="1645820509543" timestamp="181052787" />
  <Command __id="3179" _type="CopyCommand" date="Sun Feb 27 17:39:22 EST 2022" starttimestamp="1645820509543" timestamp="181052921" />
  <Command __id="3180" _type="MoveCaretCommand" caretOffset="3290" date="Sun Feb 27 17:39:23 EST 2022" docOffset="3368" starttimestamp="1645820509543" timestamp="181053747" />
  <Command __id="3181" _type="MoveCaretCommand" caretOffset="3290" date="Sun Feb 27 17:39:23 EST 2022" docOffset="3368" starttimestamp="1645820509543" timestamp="181053747" />
  <Command __id="3183" _type="InsertStringCommand" date="Sun Feb 27 17:39:23 EST 2022" starttimestamp="1645820509543" timestamp="181054068" timestamp2="181054068">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3184" _type="InsertStringCommand" date="Sun Feb 27 17:39:23 EST 2022" starttimestamp="1645820509543" timestamp="181054068" timestamp2="181054068">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3186" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:39:24 EST 2022" starttimestamp="1645820509543" timestamp="181055084" />
  <Command __id="3187" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:39:24 EST 2022" starttimestamp="1645820509543" timestamp="181055084" />
  <Command __id="3188" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:39:24 EST 2022" starttimestamp="1645820509543" timestamp="181055382" />
  <Command __id="3189" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:39:24 EST 2022" starttimestamp="1645820509543" timestamp="181055383" />
  <Command __id="3191" _type="PasteCommand" date="Sun Feb 27 17:39:25 EST 2022" starttimestamp="1645820509543" timestamp="181055724" />
  <DocumentChange __id="3185" _type="Delete" date="Sun Feb 27 17:39:24 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11272" docExpressionCount="1139" docLength="11997" endLine="141" length="1" offset="3368" startLine="141" starttimestamp="1645820509543" timestamp="181055079">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3190" _type="Insert" date="Sun Feb 27 17:39:25 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11304" docExpressionCount="1143" docLength="12029" length="32" offset="3367" starttimestamp="1645820509543" timestamp="181055718">
    <text><![CDATA[+ " is " + currentToken.spelling]]></text>
  </DocumentChange>
  <DocumentChange __id="3194" _type="Insert" date="Sun Feb 27 17:39:27 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11305" docExpressionCount="1143" docLength="12030" length="1" offset="3367" starttimestamp="1645820509543" timestamp="181058023">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3200" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:39:43 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="181073578">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="3202" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:39:45 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11305" docExpressionCount="1143" docLength="12030" projectName="pa1" starttimestamp="1645820509543" timestamp="181075539">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶//			System.out.println("in here, " + currentToken.kind);¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				System.out.println("in here, " + currentToken.kind"), Diff(DELETE,");¶				accept(TokenKind.EQUAL"), Diff(INSERT," + " is " + currentToken.spelling);¶				acceptIt("), Diff(EQUAL,");¶				System.out.println("in here, " + currentToken.kind"), Diff(INSERT," + " is " + currentToken.spelling"), Diff(EQUAL,");¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
//			System.out.println("in here, " + currentToken.kind);
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
				System.out.println("in here, " + currentToken.kind + " is " + currentToken.spelling);
				acceptIt();
				System.out.println("in here, " + currentToken.kind + " is " + currentToken.spelling);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="3203" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:39:45 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="181075578">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="3206" _type="RunCommand" date="Sun Feb 27 17:39:47 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181077522" type="Run" />
  <Command __id="3207" _type="RunCommand" date="Sun Feb 27 17:39:47 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181077523" type="Run" />
  <Command __id="3208" _type="RunCommand" date="Sun Feb 27 17:39:47 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181077643" type="Run" />
  <Command __id="3209" _type="RunCommand" date="Sun Feb 27 17:39:47 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181077643" type="Run" />
  <Command __id="3210" _type="EHExceptionCommand" date="Sun Feb 27 17:39:47 EST 2022" starttimestamp="1645820509543" timestamp="181077690" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
in here, EQUAL is 

in here, EQUAL is 
Parse error: parsing expression, current token is: and its kind is: EQUAL
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="3212" _type="MoveCaretCommand" caretOffset="3188" date="Sun Feb 27 17:40:05 EST 2022" docOffset="3266" starttimestamp="1645820509543" timestamp="181096011" />
  <Command __id="3213" _type="MoveCaretCommand" caretOffset="3188" date="Sun Feb 27 17:40:05 EST 2022" docOffset="3266" starttimestamp="1645820509543" timestamp="181096029" />
  <Command __id="3211" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:40:05 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11305" docExpressionCount="1143" docLength="12030" projectName="pa1" starttimestamp="1645820509543" timestamp="181095958">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶//			System.out.println("in here, " + currentToken.kind);¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				System.out.println("in here, " + currentToken.kind + " is " + currentToken.spelling);¶				acceptIt();¶				System.out.println("in here, " + currentToken.kind + " is " + currentToken.spelling);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="3216" _type="Delete" date="Sun Feb 27 17:40:07 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11304" docExpressionCount="1143" docLength="12029" endLine="139" length="1" offset="3266" startLine="139" starttimestamp="1645820509543" timestamp="181097784">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3219" _type="Insert" date="Sun Feb 27 17:40:08 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11305" docExpressionCount="1143" docLength="12030" length="1" offset="3266" starttimestamp="1645820509543" timestamp="181098894">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <DocumentChange __id="3222" _type="Delete" date="Sun Feb 27 17:40:08 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11304" docExpressionCount="1143" docLength="12029" endLine="139" length="1" offset="3266" startLine="139" starttimestamp="1645820509543" timestamp="181099289">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <Command __id="3214" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:40:06 EST 2022" starttimestamp="1645820509543" timestamp="181097140" />
  <Command __id="3215" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:40:06 EST 2022" starttimestamp="1645820509543" timestamp="181097140" />
  <Command __id="3217" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:40:07 EST 2022" starttimestamp="1645820509543" timestamp="181097789" />
  <Command __id="3218" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:40:07 EST 2022" starttimestamp="1645820509543" timestamp="181097789" />
  <Command __id="3220" _type="InsertStringCommand" date="Sun Feb 27 17:40:08 EST 2022" starttimestamp="1645820509543" timestamp="181098906" timestamp2="181098906">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="3221" _type="InsertStringCommand" date="Sun Feb 27 17:40:08 EST 2022" starttimestamp="1645820509543" timestamp="181098906" timestamp2="181098906">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="3223" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:40:08 EST 2022" starttimestamp="1645820509543" timestamp="181099293" />
  <Command __id="3224" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:40:08 EST 2022" starttimestamp="1645820509543" timestamp="181099293" />
  <Command __id="3226" _type="InsertStringCommand" date="Sun Feb 27 17:40:13 EST 2022" starttimestamp="1645820509543" timestamp="181103636" timestamp2="181103636">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="3227" _type="InsertStringCommand" date="Sun Feb 27 17:40:13 EST 2022" starttimestamp="1645820509543" timestamp="181103636" timestamp2="181103636">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="3228" _type="MoveCaretCommand" caretOffset="3214" date="Sun Feb 27 17:40:17 EST 2022" docOffset="3292" starttimestamp="1645820509543" timestamp="181108050" />
  <Command __id="3229" _type="MoveCaretCommand" caretOffset="3214" date="Sun Feb 27 17:40:17 EST 2022" docOffset="3292" starttimestamp="1645820509543" timestamp="181108051" />
  <Command __id="3231" _type="InsertStringCommand" date="Sun Feb 27 17:40:18 EST 2022" starttimestamp="1645820509543" timestamp="181108594" timestamp2="181108594">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3232" _type="InsertStringCommand" date="Sun Feb 27 17:40:18 EST 2022" starttimestamp="1645820509543" timestamp="181108594" timestamp2="181108594">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3234" _type="InsertStringCommand" date="Sun Feb 27 17:40:18 EST 2022" starttimestamp="1645820509543" timestamp="181108904" timestamp2="181108904">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="3235" _type="InsertStringCommand" date="Sun Feb 27 17:40:18 EST 2022" starttimestamp="1645820509543" timestamp="181108904" timestamp2="181108904">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="3237" _type="InsertStringCommand" date="Sun Feb 27 17:40:18 EST 2022" starttimestamp="1645820509543" timestamp="181109007" timestamp2="181109007">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3238" _type="InsertStringCommand" date="Sun Feb 27 17:40:18 EST 2022" starttimestamp="1645820509543" timestamp="181109007" timestamp2="181109007">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3240" _type="InsertStringCommand" date="Sun Feb 27 17:40:19 EST 2022" starttimestamp="1645820509543" timestamp="181109517" timestamp2="181109517">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3241" _type="InsertStringCommand" date="Sun Feb 27 17:40:19 EST 2022" starttimestamp="1645820509543" timestamp="181109517" timestamp2="181109517">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3242" _type="InsertStringCommand" date="Sun Feb 27 17:40:19 EST 2022" starttimestamp="1645820509543" timestamp="181109666" timestamp2="181109666">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3243" _type="InsertStringCommand" date="Sun Feb 27 17:40:19 EST 2022" starttimestamp="1645820509543" timestamp="181109667" timestamp2="181109667">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3244" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:40:19 EST 2022" starttimestamp="1645820509543" timestamp="181110369" />
  <Command __id="3245" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:40:19 EST 2022" starttimestamp="1645820509543" timestamp="181110369" />
  <Command __id="3246" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:40:20 EST 2022" starttimestamp="1645820509543" timestamp="181110873" />
  <Command __id="3247" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:40:20 EST 2022" starttimestamp="1645820509543" timestamp="181110874" />
  <Command __id="3248" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:40:20 EST 2022" starttimestamp="1645820509543" timestamp="181111137" />
  <Command __id="3249" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:40:20 EST 2022" starttimestamp="1645820509543" timestamp="181111138" />
  <Command __id="3250" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:40:21 EST 2022" starttimestamp="1645820509543" timestamp="181111801" />
  <Command __id="3251" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:40:21 EST 2022" starttimestamp="1645820509543" timestamp="181111801" />
  <Command __id="3252" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:40:21 EST 2022" starttimestamp="1645820509543" timestamp="181111937" />
  <Command __id="3253" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:40:21 EST 2022" starttimestamp="1645820509543" timestamp="181111937" />
  <Command __id="3254" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:40:21 EST 2022" starttimestamp="1645820509543" timestamp="181112142" />
  <Command __id="3255" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:40:21 EST 2022" starttimestamp="1645820509543" timestamp="181112142" />
  <DocumentChange __id="3225" _type="Insert" date="Sun Feb 27 17:40:13 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11305" docExpressionCount="1143" docLength="12030" length="1" offset="3266" starttimestamp="1645820509543" timestamp="181103631">
    <text><![CDATA[*]]></text>
  </DocumentChange>
  <DocumentChange __id="3230" _type="Insert" date="Sun Feb 27 17:40:18 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11306" docExpressionCount="1143" docLength="12031" length="1" offset="3292" starttimestamp="1645820509543" timestamp="181108590">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3233" _type="Insert" date="Sun Feb 27 17:40:18 EST 2022" docASTNodeCount="1615" docActiveCodeLength="11307" docExpressionCount="1144" docLength="12032" length="1" offset="3293" starttimestamp="1645820509543" timestamp="181108895">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <DocumentChange __id="3236" _type="Insert" date="Sun Feb 27 17:40:18 EST 2022" docASTNodeCount="1615" docActiveCodeLength="11308" docExpressionCount="1144" docLength="12033" length="1" offset="3294" starttimestamp="1645820509543" timestamp="181109002">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3239" _type="Insert" date="Sun Feb 27 17:40:19 EST 2022" docASTNodeCount="1615" docActiveCodeLength="11310" docExpressionCount="1144" docLength="12035" length="2" offset="3295" starttimestamp="1645820509543" timestamp="181109514">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <Command __id="3256" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:40:21 EST 2022" starttimestamp="1645820509543" timestamp="181112354" />
  <Command __id="3257" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:40:21 EST 2022" starttimestamp="1645820509543" timestamp="181112358" />
  <Command __id="3259" _type="InsertStringCommand" date="Sun Feb 27 17:40:22 EST 2022" starttimestamp="1645820509543" timestamp="181113407" timestamp2="181113407">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="3260" _type="InsertStringCommand" date="Sun Feb 27 17:40:22 EST 2022" starttimestamp="1645820509543" timestamp="181113407" timestamp2="181113407">
    <data><![CDATA[*]]></data>
  </Command>
  <DocumentChange __id="3258" _type="Insert" date="Sun Feb 27 17:40:22 EST 2022" docASTNodeCount="1615" docActiveCodeLength="11311" docExpressionCount="1144" docLength="12036" length="1" offset="3296" starttimestamp="1645820509543" timestamp="181113402">
    <text><![CDATA[*]]></text>
  </DocumentChange>
  <Command __id="3261" _type="SelectTextCommand" caretOffset="3302" date="Sun Feb 27 17:40:25 EST 2022" end="3303" start="3302" starttimestamp="1645820509543" timestamp="181116450" />
  <Command __id="3262" _type="SelectTextCommand" caretOffset="3302" date="Sun Feb 27 17:40:25 EST 2022" end="3303" start="3302" starttimestamp="1645820509543" timestamp="181116450" />
  <Command __id="3264" _type="InsertStringCommand" date="Sun Feb 27 17:40:27 EST 2022" starttimestamp="1645820509543" timestamp="181117886" timestamp2="181117886">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="3265" _type="InsertStringCommand" date="Sun Feb 27 17:40:27 EST 2022" starttimestamp="1645820509543" timestamp="181117887" timestamp2="181117887">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="3281" _type="RunCommand" date="Sun Feb 27 17:40:35 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181125849" type="Run" />
  <Command __id="3282" _type="RunCommand" date="Sun Feb 27 17:40:35 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181125850" type="Run" />
  <Command __id="3283" _type="RunCommand" date="Sun Feb 27 17:40:35 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181125971" type="Run" />
  <Command __id="3284" _type="RunCommand" date="Sun Feb 27 17:40:35 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181125971" type="Run" />
  <Command __id="3285" _type="EHExceptionCommand" date="Sun Feb 27 17:40:35 EST 2022" starttimestamp="1645820509543" timestamp="181126010" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
in here, EQUAL is**

in here, EQUAL is**
Parse error: parsing expression, current token is: and its kind is: EQUAL
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <DocumentChange __id="3263" _type="Replace" date="Sun Feb 27 17:40:27 EST 2022" docASTNodeCount="1615" docActiveCodeLength="11311" docExpressionCount="1144" docLength="12036" endLine="141" insertionLength="1" int_docASTNodeCount="1615" int_docActiveCodeLength="11310" int_docExpressionCount="1144" int_docLength="12035" length="1" offset="3380" startLine="141" starttimestamp="1645820509543" timestamp="181117874">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[*]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3273" _type="Insert" date="Sun Feb 27 17:40:31 EST 2022" docASTNodeCount="1615" docActiveCodeLength="11312" docExpressionCount="1144" docLength="12037" length="1" offset="3406" starttimestamp="1645820509543" timestamp="181122071">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3276" _type="Insert" date="Sun Feb 27 17:40:32 EST 2022" docASTNodeCount="1616" docActiveCodeLength="11317" docExpressionCount="1145" docLength="12042" length="5" offset="3407" starttimestamp="1645820509543" timestamp="181122591">
    <text><![CDATA[+ "*"]]></text>
  </DocumentChange>
  <Command __id="3286" _type="MoveCaretCommand" caretOffset="3125" date="Sun Feb 27 17:40:37 EST 2022" docOffset="3203" starttimestamp="1645820509543" timestamp="181127803" />
  <Command __id="3287" _type="MoveCaretCommand" caretOffset="3125" date="Sun Feb 27 17:40:37 EST 2022" docOffset="3203" starttimestamp="1645820509543" timestamp="181127803" />
  <Command __id="3288" _type="MoveCaretCommand" caretOffset="3239" date="Sun Feb 27 17:40:37 EST 2022" docOffset="3317" starttimestamp="1645820509543" timestamp="181128194" />
  <Command __id="3289" _type="MoveCaretCommand" caretOffset="3239" date="Sun Feb 27 17:40:37 EST 2022" docOffset="3317" starttimestamp="1645820509543" timestamp="181128194" />
  <Command __id="3291" _type="MoveCaretCommand" caretOffset="5529" date="Sun Feb 27 17:40:45 EST 2022" docOffset="5680" starttimestamp="1645820509543" timestamp="181135691" />
  <Command __id="3292" _type="MoveCaretCommand" caretOffset="5356" date="Sun Feb 27 17:40:45 EST 2022" docOffset="5507" starttimestamp="1645820509543" timestamp="181136115" />
  <Command __id="3293" _type="MoveCaretCommand" caretOffset="5356" date="Sun Feb 27 17:40:45 EST 2022" docOffset="5507" starttimestamp="1645820509543" timestamp="181136115" />
  <Command __id="3294" _type="MoveCaretCommand" caretOffset="5459" date="Sun Feb 27 17:40:46 EST 2022" docOffset="5610" starttimestamp="1645820509543" timestamp="181136683" />
  <Command __id="3295" _type="MoveCaretCommand" caretOffset="5459" date="Sun Feb 27 17:40:46 EST 2022" docOffset="5610" starttimestamp="1645820509543" timestamp="181136683" />
  <Command __id="3296" _type="MoveCaretCommand" caretOffset="5531" date="Sun Feb 27 17:40:46 EST 2022" docOffset="5682" starttimestamp="1645820509543" timestamp="181137010" />
  <Command __id="3297" _type="MoveCaretCommand" caretOffset="5531" date="Sun Feb 27 17:40:46 EST 2022" docOffset="5682" starttimestamp="1645820509543" timestamp="181137011" />
  <Command __id="3298" _type="MoveCaretCommand" caretOffset="5419" date="Sun Feb 27 17:40:47 EST 2022" docOffset="5570" starttimestamp="1645820509543" timestamp="181138259" />
  <Command __id="3299" _type="MoveCaretCommand" caretOffset="5419" date="Sun Feb 27 17:40:47 EST 2022" docOffset="5570" starttimestamp="1645820509543" timestamp="181138259" />
  <Command __id="3301" _type="ShellCommand" date="Sun Feb 27 17:40:48 EST 2022" starttimestamp="1645820509543" timestamp="181139355" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3302" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:40:51 EST 2022" forward="true" matchWord="true" offset="5570" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181141625" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3303" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:40:52 EST 2022" forward="true" matchWord="true" offset="5570" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181142804" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3304" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:40:53 EST 2022" forward="false" matchWord="true" offset="5570" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181144037" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3305" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:40:54 EST 2022" forward="false" matchWord="true" offset="5681" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181144732" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3306" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:40:54 EST 2022" forward="false" matchWord="true" offset="5681" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181145380" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3307" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:40:55 EST 2022" forward="false" matchWord="true" offset="5681" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181145757" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3308" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:40:55 EST 2022" forward="false" matchWord="true" offset="5681" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181145924" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3309" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:40:55 EST 2022" forward="false" matchWord="true" offset="5681" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181146100" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3310" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:40:55 EST 2022" forward="false" matchWord="true" offset="5681" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181146244" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3311" _type="ShellCommand" date="Sun Feb 27 17:41:28 EST 2022" starttimestamp="1645820509543" timestamp="181178584" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3290" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:40:45 EST 2022" docASTNodeCount="1087" docActiveCodeLength="7870" docExpressionCount="675" docLength="8600" projectName="pa1" starttimestamp="1645820509543" timestamp="181135609">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	        	if(currentChar == '=') {¶	        		return TokenKind.EQUAL;¶	        	}¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3312" _type="MoveCaretCommand" caretOffset="5495" date="Sun Feb 27 17:41:36 EST 2022" docOffset="5646" starttimestamp="1645820509543" timestamp="181187258" />
  <Command __id="3313" _type="MoveCaretCommand" caretOffset="5495" date="Sun Feb 27 17:41:36 EST 2022" docOffset="5646" starttimestamp="1645820509543" timestamp="181187258" />
  <DocumentChange __id="3314" _type="Insert" date="Sun Feb 27 17:41:37 EST 2022" docASTNodeCount="1087" docActiveCodeLength="7883" docExpressionCount="675" docLength="8613" length="13" offset="5646" starttimestamp="1645820509543" timestamp="181188346">
    <text><![CDATA[
	        		]]></text>
  </DocumentChange>
  <Command __id="3315" _type="InsertStringCommand" date="Sun Feb 27 17:41:37 EST 2022" starttimestamp="1645820509543" timestamp="181188356" timestamp2="181188356">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3316" _type="InsertStringCommand" date="Sun Feb 27 17:41:37 EST 2022" starttimestamp="1645820509543" timestamp="181188356" timestamp2="181188356">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="3317" _type="Insert" date="Sun Feb 27 17:41:39 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7884" docExpressionCount="676" docLength="8614" length="1" offset="5659" starttimestamp="1645820509543" timestamp="181190041">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="3318" _type="InsertStringCommand" date="Sun Feb 27 17:41:39 EST 2022" starttimestamp="1645820509543" timestamp="181190044" timestamp2="181190044">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3319" _type="InsertStringCommand" date="Sun Feb 27 17:41:39 EST 2022" starttimestamp="1645820509543" timestamp="181190044" timestamp2="181190044">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="3320" _type="Delete" date="Sun Feb 27 17:41:39 EST 2022" docASTNodeCount="1087" docActiveCodeLength="7883" docExpressionCount="675" docLength="8613" endLine="240" length="1" offset="5659" startLine="240" starttimestamp="1645820509543" timestamp="181190378">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="3321" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:39 EST 2022" starttimestamp="1645820509543" timestamp="181190380" />
  <Command __id="3322" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:39 EST 2022" starttimestamp="1645820509543" timestamp="181190380" />
  <DocumentChange __id="3323" _type="Insert" date="Sun Feb 27 17:41:40 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7884" docExpressionCount="676" docLength="8614" length="1" offset="5659" starttimestamp="1645820509543" timestamp="181190626">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="3324" _type="InsertStringCommand" date="Sun Feb 27 17:41:40 EST 2022" starttimestamp="1645820509543" timestamp="181190630" timestamp2="181190630">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="3325" _type="InsertStringCommand" date="Sun Feb 27 17:41:40 EST 2022" starttimestamp="1645820509543" timestamp="181190630" timestamp2="181190630">
    <data><![CDATA[S]]></data>
  </Command>
  <DocumentChange __id="3326" _type="Insert" date="Sun Feb 27 17:41:40 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7885" docExpressionCount="676" docLength="8615" length="1" offset="5660" starttimestamp="1645820509543" timestamp="181190780">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="3327" _type="InsertStringCommand" date="Sun Feb 27 17:41:40 EST 2022" starttimestamp="1645820509543" timestamp="181190789" timestamp2="181190789">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="3328" _type="InsertStringCommand" date="Sun Feb 27 17:41:40 EST 2022" starttimestamp="1645820509543" timestamp="181190790" timestamp2="181190790">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="3329" _type="Insert" date="Sun Feb 27 17:41:40 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7886" docExpressionCount="676" docLength="8616" length="1" offset="5661" starttimestamp="1645820509543" timestamp="181190897">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="3330" _type="InsertStringCommand" date="Sun Feb 27 17:41:40 EST 2022" starttimestamp="1645820509543" timestamp="181190901" timestamp2="181190901">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3331" _type="InsertStringCommand" date="Sun Feb 27 17:41:40 EST 2022" starttimestamp="1645820509543" timestamp="181190901" timestamp2="181190901">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="3332" _type="Insert" date="Sun Feb 27 17:41:40 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7887" docExpressionCount="676" docLength="8617" length="1" offset="5662" starttimestamp="1645820509543" timestamp="181191115">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="3333" _type="InsertStringCommand" date="Sun Feb 27 17:41:40 EST 2022" starttimestamp="1645820509543" timestamp="181191126" timestamp2="181191126">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3334" _type="InsertStringCommand" date="Sun Feb 27 17:41:40 EST 2022" starttimestamp="1645820509543" timestamp="181191126" timestamp2="181191126">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="3335" _type="Insert" date="Sun Feb 27 17:41:40 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7888" docExpressionCount="676" docLength="8618" length="1" offset="5663" starttimestamp="1645820509543" timestamp="181191233">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="3336" _type="InsertStringCommand" date="Sun Feb 27 17:41:40 EST 2022" starttimestamp="1645820509543" timestamp="181191236" timestamp2="181191236">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3337" _type="InsertStringCommand" date="Sun Feb 27 17:41:40 EST 2022" starttimestamp="1645820509543" timestamp="181191236" timestamp2="181191236">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="3338" _type="Insert" date="Sun Feb 27 17:41:40 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7889" docExpressionCount="676" docLength="8619" length="1" offset="5664" starttimestamp="1645820509543" timestamp="181191324">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="3339" _type="InsertStringCommand" date="Sun Feb 27 17:41:40 EST 2022" starttimestamp="1645820509543" timestamp="181191335" timestamp2="181191335">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="3340" _type="InsertStringCommand" date="Sun Feb 27 17:41:40 EST 2022" starttimestamp="1645820509543" timestamp="181191335" timestamp2="181191335">
    <data><![CDATA[,]]></data>
  </Command>
  <DocumentChange __id="3341" _type="Delete" date="Sun Feb 27 17:41:41 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7888" docExpressionCount="676" docLength="8618" endLine="240" length="1" offset="5664" startLine="240" starttimestamp="1645820509543" timestamp="181191825">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="3342" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:41 EST 2022" starttimestamp="1645820509543" timestamp="181191827" />
  <Command __id="3343" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:41 EST 2022" starttimestamp="1645820509543" timestamp="181191827" />
  <DocumentChange __id="3344" _type="Insert" date="Sun Feb 27 17:41:41 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7889" docExpressionCount="676" docLength="8619" length="1" offset="5664" starttimestamp="1645820509543" timestamp="181191998">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="3345" _type="InsertStringCommand" date="Sun Feb 27 17:41:41 EST 2022" starttimestamp="1645820509543" timestamp="181192003" timestamp2="181192003">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="3346" _type="InsertStringCommand" date="Sun Feb 27 17:41:41 EST 2022" starttimestamp="1645820509543" timestamp="181192003" timestamp2="181192003">
    <data><![CDATA[,]]></data>
  </Command>
  <DocumentChange __id="3347" _type="Insert" date="Sun Feb 27 17:41:41 EST 2022" docASTNodeCount="1087" docActiveCodeLength="7890" docExpressionCount="675" docLength="8620" length="1" offset="5665" starttimestamp="1645820509543" timestamp="181192206">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="3348" _type="InsertStringCommand" date="Sun Feb 27 17:41:41 EST 2022" starttimestamp="1645820509543" timestamp="181192216" timestamp2="181192216">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="3349" _type="InsertStringCommand" date="Sun Feb 27 17:41:41 EST 2022" starttimestamp="1645820509543" timestamp="181192216" timestamp2="181192216">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="3350" _type="Delete" date="Sun Feb 27 17:41:42 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7889" docExpressionCount="676" docLength="8619" endLine="240" length="1" offset="5665" startLine="240" starttimestamp="1645820509543" timestamp="181192462">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="3351" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:42 EST 2022" starttimestamp="1645820509543" timestamp="181192464" />
  <Command __id="3352" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:42 EST 2022" starttimestamp="1645820509543" timestamp="181192465" />
  <DocumentChange __id="3353" _type="Delete" date="Sun Feb 27 17:41:42 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7888" docExpressionCount="676" docLength="8618" endLine="240" length="1" offset="5664" startLine="240" starttimestamp="1645820509543" timestamp="181192610">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="3354" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:42 EST 2022" starttimestamp="1645820509543" timestamp="181192612" />
  <Command __id="3355" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:42 EST 2022" starttimestamp="1645820509543" timestamp="181192612" />
  <DocumentChange __id="3356" _type="Insert" date="Sun Feb 27 17:41:42 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7889" docExpressionCount="676" docLength="8619" length="1" offset="5664" starttimestamp="1645820509543" timestamp="181193204">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="3357" _type="InsertStringCommand" date="Sun Feb 27 17:41:42 EST 2022" starttimestamp="1645820509543" timestamp="181193210" timestamp2="181193210">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3358" _type="InsertStringCommand" date="Sun Feb 27 17:41:42 EST 2022" starttimestamp="1645820509543" timestamp="181193210" timestamp2="181193210">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="3359" _type="Insert" date="Sun Feb 27 17:41:43 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7890" docExpressionCount="676" docLength="8620" length="1" offset="5665" starttimestamp="1645820509543" timestamp="181193834">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="3360" _type="InsertStringCommand" date="Sun Feb 27 17:41:43 EST 2022" starttimestamp="1645820509543" timestamp="181193838" timestamp2="181193838">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="3361" _type="InsertStringCommand" date="Sun Feb 27 17:41:43 EST 2022" starttimestamp="1645820509543" timestamp="181193838" timestamp2="181193838">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="3362" _type="Insert" date="Sun Feb 27 17:41:43 EST 2022" docASTNodeCount="914" docActiveCodeLength="7891" docExpressionCount="560" docLength="8621" length="1" offset="5666" starttimestamp="1645820509543" timestamp="181194078">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="3363" _type="InsertStringCommand" date="Sun Feb 27 17:41:43 EST 2022" starttimestamp="1645820509543" timestamp="181194082" timestamp2="181194082">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3364" _type="InsertStringCommand" date="Sun Feb 27 17:41:43 EST 2022" starttimestamp="1645820509543" timestamp="181194082" timestamp2="181194082">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="3365" _type="Delete" date="Sun Feb 27 17:41:43 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7890" docExpressionCount="676" docLength="8620" endLine="240" length="1" offset="5666" startLine="240" starttimestamp="1645820509543" timestamp="181194362">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="3366" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:43 EST 2022" starttimestamp="1645820509543" timestamp="181194366" />
  <Command __id="3367" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:43 EST 2022" starttimestamp="1645820509543" timestamp="181194366" />
  <DocumentChange __id="3368" _type="Delete" date="Sun Feb 27 17:41:44 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7889" docExpressionCount="676" docLength="8619" endLine="240" length="1" offset="5665" startLine="240" starttimestamp="1645820509543" timestamp="181194505">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="3369" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:44 EST 2022" starttimestamp="1645820509543" timestamp="181194509" />
  <Command __id="3370" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:44 EST 2022" starttimestamp="1645820509543" timestamp="181194509" />
  <DocumentChange __id="3371" _type="Insert" date="Sun Feb 27 17:41:44 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7890" docExpressionCount="676" docLength="8620" length="1" offset="5665" starttimestamp="1645820509543" timestamp="181194733">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="3372" _type="InsertStringCommand" date="Sun Feb 27 17:41:44 EST 2022" starttimestamp="1645820509543" timestamp="181194738" timestamp2="181194738">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="3373" _type="InsertStringCommand" date="Sun Feb 27 17:41:44 EST 2022" starttimestamp="1645820509543" timestamp="181194738" timestamp2="181194738">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="3374" _type="Insert" date="Sun Feb 27 17:41:44 EST 2022" docASTNodeCount="1056" docActiveCodeLength="7891" docExpressionCount="663" docLength="8621" length="1" offset="5666" starttimestamp="1645820509543" timestamp="181194762">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="3375" _type="InsertStringCommand" date="Sun Feb 27 17:41:44 EST 2022" starttimestamp="1645820509543" timestamp="181194766" timestamp2="181194766">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3376" _type="InsertStringCommand" date="Sun Feb 27 17:41:44 EST 2022" starttimestamp="1645820509543" timestamp="181194766" timestamp2="181194766">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3377" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:41:44 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="181194769" />
  <DocumentChange __id="3378" _type="Delete" date="Sun Feb 27 17:41:44 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7890" docExpressionCount="676" docLength="8620" endLine="240" length="1" offset="5666" startLine="240" starttimestamp="1645820509543" timestamp="181195118">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="3379" _type="Delete" date="Sun Feb 27 17:41:44 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7889" docExpressionCount="676" docLength="8619" endLine="240" length="1" offset="5665" startLine="240" starttimestamp="1645820509543" timestamp="181195294">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="3380" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:41:45 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="181195484" />
  <DocumentChange __id="3381" _type="Replace" date="Sun Feb 27 17:41:45 EST 2022" docASTNodeCount="1089" docActiveCodeLength="7890" docExpressionCount="676" docLength="8620" endLine="240" insertionLength="7" int_docASTNodeCount="1087" int_docActiveCodeLength="7883" int_docExpressionCount="675" int_docLength="8613" length="6" offset="5659" startLine="240" starttimestamp="1645820509543" timestamp="181195497">
    <deletedText><![CDATA[System]]></deletedText>
    <insertedText><![CDATA[System.]]></insertedText>
  </DocumentChange>
  <Command __id="3382" _type="InsertStringCommand" date="Sun Feb 27 17:41:45 EST 2022" starttimestamp="1645820509543" timestamp="181195508" timestamp2="181195508">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3383" _type="InsertStringCommand" date="Sun Feb 27 17:41:45 EST 2022" starttimestamp="1645820509543" timestamp="181195508" timestamp2="181195508">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3384" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:41:45 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="181195515" />
  <DocumentChange __id="3385" _type="Insert" date="Sun Feb 27 17:41:45 EST 2022" docASTNodeCount="1091" docActiveCodeLength="7891" docExpressionCount="678" docLength="8621" length="1" offset="5666" starttimestamp="1645820509543" timestamp="181195791">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="3386" _type="Insert" date="Sun Feb 27 17:41:45 EST 2022" docASTNodeCount="1091" docActiveCodeLength="7892" docExpressionCount="678" docLength="8622" length="1" offset="5667" starttimestamp="1645820509543" timestamp="181195971">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="3387" _type="Insert" date="Sun Feb 27 17:41:45 EST 2022" docASTNodeCount="1091" docActiveCodeLength="7893" docExpressionCount="678" docLength="8623" length="1" offset="5668" starttimestamp="1645820509543" timestamp="181196137">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="3388" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:41:46 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="181197271" />
  <DocumentChange __id="3389" _type="Replace" date="Sun Feb 27 17:41:46 EST 2022" docASTNodeCount="1087" docActiveCodeLength="7894" docExpressionCount="675" docLength="8624" endLine="240" insertionLength="4" int_docASTNodeCount="1089" int_docActiveCodeLength="7890" int_docExpressionCount="676" int_docLength="8620" length="3" offset="5666" startLine="240" starttimestamp="1645820509543" timestamp="181197276">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <Command __id="3390" _type="InsertStringCommand" date="Sun Feb 27 17:41:46 EST 2022" starttimestamp="1645820509543" timestamp="181197283" timestamp2="181197283">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3391" _type="InsertStringCommand" date="Sun Feb 27 17:41:46 EST 2022" starttimestamp="1645820509543" timestamp="181197283" timestamp2="181197283">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3392" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:41:46 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="181197289" />
  <DocumentChange __id="3393" _type="Insert" date="Sun Feb 27 17:41:47 EST 2022" docASTNodeCount="1093" docActiveCodeLength="7895" docExpressionCount="680" docLength="8625" length="1" offset="5670" starttimestamp="1645820509543" timestamp="181197496">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="3394" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:41:47 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="181198189" />
  <Command __id="3396" _type="InsertStringCommand" date="Sun Feb 27 17:41:47 EST 2022" starttimestamp="1645820509543" timestamp="181198243" timestamp2="181198243">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3397" _type="InsertStringCommand" date="Sun Feb 27 17:41:47 EST 2022" starttimestamp="1645820509543" timestamp="181198243" timestamp2="181198243">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3398" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:48 EST 2022" starttimestamp="1645820509543" timestamp="181199266" />
  <Command __id="3399" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:48 EST 2022" starttimestamp="1645820509543" timestamp="181199266" />
  <Command __id="3400" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:49 EST 2022" starttimestamp="1645820509543" timestamp="181199508" />
  <Command __id="3401" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:49 EST 2022" starttimestamp="1645820509543" timestamp="181199508" />
  <Command __id="3402" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:49 EST 2022" starttimestamp="1645820509543" timestamp="181199722" />
  <Command __id="3403" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:49 EST 2022" starttimestamp="1645820509543" timestamp="181199722" />
  <Command __id="3404" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:41:49 EST 2022" starttimestamp="1645820509543" timestamp="181199934" />
  <Command __id="3405" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:41:49 EST 2022" starttimestamp="1645820509543" timestamp="181199934" />
  <Command __id="3407" _type="InsertStringCommand" date="Sun Feb 27 17:41:50 EST 2022" starttimestamp="1645820509543" timestamp="181200497" timestamp2="181200497">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3408" _type="InsertStringCommand" date="Sun Feb 27 17:41:50 EST 2022" starttimestamp="1645820509543" timestamp="181200497" timestamp2="181200497">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3410" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:50 EST 2022" starttimestamp="1645820509543" timestamp="181200851" />
  <Command __id="3411" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:50 EST 2022" starttimestamp="1645820509543" timestamp="181200851" />
  <Command __id="3413" _type="InsertStringCommand" date="Sun Feb 27 17:41:50 EST 2022" starttimestamp="1645820509543" timestamp="181201107" timestamp2="181201107">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3414" _type="InsertStringCommand" date="Sun Feb 27 17:41:50 EST 2022" starttimestamp="1645820509543" timestamp="181201107" timestamp2="181201107">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3416" _type="InsertStringCommand" date="Sun Feb 27 17:41:50 EST 2022" starttimestamp="1645820509543" timestamp="181201245" timestamp2="181201245">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3417" _type="InsertStringCommand" date="Sun Feb 27 17:41:50 EST 2022" starttimestamp="1645820509543" timestamp="181201245" timestamp2="181201245">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3419" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:51 EST 2022" starttimestamp="1645820509543" timestamp="181201590" />
  <Command __id="3420" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:51 EST 2022" starttimestamp="1645820509543" timestamp="181201590" />
  <Command __id="3422" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:51 EST 2022" starttimestamp="1645820509543" timestamp="181201748" />
  <Command __id="3423" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:51 EST 2022" starttimestamp="1645820509543" timestamp="181201748" />
  <Command __id="3424" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:51 EST 2022" starttimestamp="1645820509543" timestamp="181202434" />
  <Command __id="3425" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:51 EST 2022" starttimestamp="1645820509543" timestamp="181202435" />
  <Command __id="3426" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:52 EST 2022" starttimestamp="1645820509543" timestamp="181202596" />
  <Command __id="3427" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:52 EST 2022" starttimestamp="1645820509543" timestamp="181202596" />
  <Command __id="3428" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:52 EST 2022" starttimestamp="1645820509543" timestamp="181202789" />
  <Command __id="3429" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:52 EST 2022" starttimestamp="1645820509543" timestamp="181202791" />
  <Command __id="3430" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:52 EST 2022" starttimestamp="1645820509543" timestamp="181203109" />
  <Command __id="3431" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:52 EST 2022" starttimestamp="1645820509543" timestamp="181203109" />
  <Command __id="3433" _type="InsertStringCommand" date="Sun Feb 27 17:41:53 EST 2022" starttimestamp="1645820509543" timestamp="181203843" timestamp2="181203843">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3434" _type="InsertStringCommand" date="Sun Feb 27 17:41:53 EST 2022" starttimestamp="1645820509543" timestamp="181203843" timestamp2="181203843">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3436" _type="InsertStringCommand" date="Sun Feb 27 17:41:53 EST 2022" starttimestamp="1645820509543" timestamp="181203996" timestamp2="181203996">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3437" _type="InsertStringCommand" date="Sun Feb 27 17:41:53 EST 2022" starttimestamp="1645820509543" timestamp="181203996" timestamp2="181203996">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3438" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:41:53 EST 2022" starttimestamp="1645820509543" timestamp="181204334" />
  <Command __id="3439" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:41:53 EST 2022" starttimestamp="1645820509543" timestamp="181204334" />
  <Command __id="3440" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:41:54 EST 2022" starttimestamp="1645820509543" timestamp="181204501" />
  <Command __id="3441" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:41:54 EST 2022" starttimestamp="1645820509543" timestamp="181204502" />
  <Command __id="3442" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:41:54 EST 2022" starttimestamp="1645820509543" timestamp="181205269" />
  <Command __id="3443" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:41:54 EST 2022" starttimestamp="1645820509543" timestamp="181205270" />
  <Command __id="3444" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:55 EST 2022" starttimestamp="1645820509543" timestamp="181205958" />
  <Command __id="3445" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:55 EST 2022" starttimestamp="1645820509543" timestamp="181205959" />
  <Command __id="3447" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:55 EST 2022" starttimestamp="1645820509543" timestamp="181206287" />
  <Command __id="3448" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:55 EST 2022" starttimestamp="1645820509543" timestamp="181206287" />
  <Command __id="3450" _type="InsertStringCommand" date="Sun Feb 27 17:41:56 EST 2022" starttimestamp="1645820509543" timestamp="181206846" timestamp2="181206846">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3451" _type="InsertStringCommand" date="Sun Feb 27 17:41:56 EST 2022" starttimestamp="1645820509543" timestamp="181206846" timestamp2="181206846">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3452" _type="InsertStringCommand" date="Sun Feb 27 17:41:56 EST 2022" starttimestamp="1645820509543" timestamp="181206964" timestamp2="181206964">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3453" _type="InsertStringCommand" date="Sun Feb 27 17:41:56 EST 2022" starttimestamp="1645820509543" timestamp="181206964" timestamp2="181206964">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3454" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:56 EST 2022" starttimestamp="1645820509543" timestamp="181207233" />
  <Command __id="3455" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:56 EST 2022" starttimestamp="1645820509543" timestamp="181207234" />
  <Command __id="3457" _type="InsertStringCommand" date="Sun Feb 27 17:41:57 EST 2022" starttimestamp="1645820509543" timestamp="181207718" timestamp2="181207718">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3458" _type="InsertStringCommand" date="Sun Feb 27 17:41:57 EST 2022" starttimestamp="1645820509543" timestamp="181207720" timestamp2="181207720">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3460" _type="InsertStringCommand" date="Sun Feb 27 17:41:57 EST 2022" starttimestamp="1645820509543" timestamp="181207932" timestamp2="181207932">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3461" _type="InsertStringCommand" date="Sun Feb 27 17:41:57 EST 2022" starttimestamp="1645820509543" timestamp="181207932" timestamp2="181207932">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3463" _type="InsertStringCommand" date="Sun Feb 27 17:41:57 EST 2022" starttimestamp="1645820509543" timestamp="181208221" timestamp2="181208221">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3464" _type="InsertStringCommand" date="Sun Feb 27 17:41:57 EST 2022" starttimestamp="1645820509543" timestamp="181208221" timestamp2="181208221">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3466" _type="InsertStringCommand" date="Sun Feb 27 17:41:57 EST 2022" starttimestamp="1645820509543" timestamp="181208381" timestamp2="181208381">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3467" _type="InsertStringCommand" date="Sun Feb 27 17:41:57 EST 2022" starttimestamp="1645820509543" timestamp="181208381" timestamp2="181208381">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3469" _type="InsertStringCommand" date="Sun Feb 27 17:41:58 EST 2022" starttimestamp="1645820509543" timestamp="181208676" timestamp2="181208676">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3470" _type="InsertStringCommand" date="Sun Feb 27 17:41:58 EST 2022" starttimestamp="1645820509543" timestamp="181208676" timestamp2="181208676">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3472" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:58 EST 2022" starttimestamp="1645820509543" timestamp="181208923" />
  <Command __id="3473" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:41:58 EST 2022" starttimestamp="1645820509543" timestamp="181208923" />
  <Command __id="3475" _type="InsertStringCommand" date="Sun Feb 27 17:41:58 EST 2022" starttimestamp="1645820509543" timestamp="181208979" timestamp2="181208979">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3476" _type="InsertStringCommand" date="Sun Feb 27 17:41:58 EST 2022" starttimestamp="1645820509543" timestamp="181208980" timestamp2="181208980">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3478" _type="InsertStringCommand" date="Sun Feb 27 17:41:58 EST 2022" starttimestamp="1645820509543" timestamp="181209082" timestamp2="181209082">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3479" _type="InsertStringCommand" date="Sun Feb 27 17:41:58 EST 2022" starttimestamp="1645820509543" timestamp="181209082" timestamp2="181209082">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3481" _type="InsertStringCommand" date="Sun Feb 27 17:41:58 EST 2022" starttimestamp="1645820509543" timestamp="181209268" timestamp2="181209268">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3482" _type="InsertStringCommand" date="Sun Feb 27 17:41:58 EST 2022" starttimestamp="1645820509543" timestamp="181209268" timestamp2="181209268">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3484" _type="InsertStringCommand" date="Sun Feb 27 17:41:58 EST 2022" starttimestamp="1645820509543" timestamp="181209422" timestamp2="181209422">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3485" _type="InsertStringCommand" date="Sun Feb 27 17:41:58 EST 2022" starttimestamp="1645820509543" timestamp="181209423" timestamp2="181209423">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3487" _type="InsertStringCommand" date="Sun Feb 27 17:41:59 EST 2022" starttimestamp="1645820509543" timestamp="181209526" timestamp2="181209526">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3488" _type="InsertStringCommand" date="Sun Feb 27 17:41:59 EST 2022" starttimestamp="1645820509543" timestamp="181209527" timestamp2="181209527">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3490" _type="InsertStringCommand" date="Sun Feb 27 17:41:59 EST 2022" starttimestamp="1645820509543" timestamp="181209607" timestamp2="181209607">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3491" _type="InsertStringCommand" date="Sun Feb 27 17:41:59 EST 2022" starttimestamp="1645820509543" timestamp="181209608" timestamp2="181209608">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="3395" _type="Replace" date="Sun Feb 27 17:41:47 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7903" docExpressionCount="681" docLength="8633" endLine="240" insertionLength="9" int_docASTNodeCount="1087" int_docActiveCodeLength="7894" int_docExpressionCount="675" int_docLength="8624" length="1" offset="5670" startLine="240" starttimestamp="1645820509543" timestamp="181198193">
    <deletedText><![CDATA[p]]></deletedText>
    <insertedText><![CDATA[print(b);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3406" _type="Insert" date="Sun Feb 27 17:41:50 EST 2022" docASTNodeCount="1095" docActiveCodeLength="7904" docExpressionCount="681" docLength="8634" length="1" offset="5679" starttimestamp="1645820509543" timestamp="181200493">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="3409" _type="Delete" date="Sun Feb 27 17:41:50 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7903" docExpressionCount="681" docLength="8633" endLine="240" length="1" offset="5679" startLine="240" starttimestamp="1645820509543" timestamp="181200849">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="3412" _type="Insert" date="Sun Feb 27 17:41:50 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7904" docExpressionCount="682" docLength="8634" length="1" offset="5679" starttimestamp="1645820509543" timestamp="181201103">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="3415" _type="Insert" date="Sun Feb 27 17:41:50 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7905" docExpressionCount="682" docLength="8635" length="1" offset="5680" starttimestamp="1645820509543" timestamp="181201241">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="3418" _type="Delete" date="Sun Feb 27 17:41:51 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7904" docExpressionCount="682" docLength="8634" endLine="240" length="1" offset="5680" startLine="240" starttimestamp="1645820509543" timestamp="181201587">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="3421" _type="Delete" date="Sun Feb 27 17:41:51 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7903" docExpressionCount="681" docLength="8633" endLine="240" length="1" offset="5679" startLine="240" starttimestamp="1645820509543" timestamp="181201745">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="3432" _type="Insert" date="Sun Feb 27 17:41:53 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7904" docExpressionCount="681" docLength="8634" length="1" offset="5675" starttimestamp="1645820509543" timestamp="181203825">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="3435" _type="Insert" date="Sun Feb 27 17:41:53 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7905" docExpressionCount="681" docLength="8635" length="1" offset="5676" starttimestamp="1645820509543" timestamp="181203978">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="3446" _type="Delete" date="Sun Feb 27 17:41:55 EST 2022" docASTNodeCount="1093" docActiveCodeLength="7904" docExpressionCount="680" docLength="8634" endLine="240" length="1" offset="5678" startLine="240" starttimestamp="1645820509543" timestamp="181206281">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="3449" _type="Insert" date="Sun Feb 27 17:41:56 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7906" docExpressionCount="681" docLength="8636" length="2" offset="5678" starttimestamp="1645820509543" timestamp="181206843">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="3456" _type="Insert" date="Sun Feb 27 17:41:57 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7907" docExpressionCount="681" docLength="8637" length="1" offset="5679" starttimestamp="1645820509543" timestamp="181207714">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="3459" _type="Insert" date="Sun Feb 27 17:41:57 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7908" docExpressionCount="681" docLength="8638" length="1" offset="5680" starttimestamp="1645820509543" timestamp="181207929">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="3462" _type="Insert" date="Sun Feb 27 17:41:57 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7909" docExpressionCount="681" docLength="8639" length="1" offset="5681" starttimestamp="1645820509543" timestamp="181208215">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3465" _type="Insert" date="Sun Feb 27 17:41:57 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7910" docExpressionCount="681" docLength="8640" length="1" offset="5682" starttimestamp="1645820509543" timestamp="181208377">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="3468" _type="Insert" date="Sun Feb 27 17:41:58 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7911" docExpressionCount="681" docLength="8641" length="1" offset="5683" starttimestamp="1645820509543" timestamp="181208666">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="3471" _type="Delete" date="Sun Feb 27 17:41:58 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7910" docExpressionCount="681" docLength="8640" endLine="240" length="1" offset="5683" startLine="240" starttimestamp="1645820509543" timestamp="181208921">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="3474" _type="Insert" date="Sun Feb 27 17:41:58 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7911" docExpressionCount="681" docLength="8641" length="1" offset="5683" starttimestamp="1645820509543" timestamp="181208955">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="3477" _type="Insert" date="Sun Feb 27 17:41:58 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7912" docExpressionCount="681" docLength="8642" length="1" offset="5684" starttimestamp="1645820509543" timestamp="181209077">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="3480" _type="Insert" date="Sun Feb 27 17:41:58 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7913" docExpressionCount="681" docLength="8643" length="1" offset="5685" starttimestamp="1645820509543" timestamp="181209265">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="3483" _type="Insert" date="Sun Feb 27 17:41:58 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7914" docExpressionCount="681" docLength="8644" length="1" offset="5686" starttimestamp="1645820509543" timestamp="181209418">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="3486" _type="Insert" date="Sun Feb 27 17:41:59 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7915" docExpressionCount="681" docLength="8645" length="1" offset="5687" starttimestamp="1645820509543" timestamp="181209515">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="3489" _type="Insert" date="Sun Feb 27 17:41:59 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7916" docExpressionCount="681" docLength="8646" length="1" offset="5688" starttimestamp="1645820509543" timestamp="181209595">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="3496" _type="Insert" date="Sun Feb 27 17:42:00 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7917" docExpressionCount="681" docLength="8647" length="1" offset="5689" starttimestamp="1645820509543" timestamp="181210565">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3492" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:41:59 EST 2022" starttimestamp="1645820509543" timestamp="181209994" />
  <Command __id="3493" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:41:59 EST 2022" starttimestamp="1645820509543" timestamp="181209998" />
  <Command __id="3494" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:59 EST 2022" starttimestamp="1645820509543" timestamp="181210377" />
  <Command __id="3495" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:41:59 EST 2022" starttimestamp="1645820509543" timestamp="181210377" />
  <Command __id="3497" _type="InsertStringCommand" date="Sun Feb 27 17:42:00 EST 2022" starttimestamp="1645820509543" timestamp="181210571" timestamp2="181210571">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3498" _type="InsertStringCommand" date="Sun Feb 27 17:42:00 EST 2022" starttimestamp="1645820509543" timestamp="181210571" timestamp2="181210571">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3499" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:42:00 EST 2022" starttimestamp="1645820509543" timestamp="181211302" />
  <Command __id="3500" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:42:00 EST 2022" starttimestamp="1645820509543" timestamp="181211302" />
  <Command __id="3502" _type="InsertStringCommand" date="Sun Feb 27 17:42:01 EST 2022" starttimestamp="1645820509543" timestamp="181212205" timestamp2="181212205">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3503" _type="InsertStringCommand" date="Sun Feb 27 17:42:01 EST 2022" starttimestamp="1645820509543" timestamp="181212205" timestamp2="181212205">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3505" _type="InsertStringCommand" date="Sun Feb 27 17:42:02 EST 2022" starttimestamp="1645820509543" timestamp="181212486" timestamp2="181212486">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="3506" _type="InsertStringCommand" date="Sun Feb 27 17:42:02 EST 2022" starttimestamp="1645820509543" timestamp="181212486" timestamp2="181212486">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="3508" _type="InsertStringCommand" date="Sun Feb 27 17:42:02 EST 2022" starttimestamp="1645820509543" timestamp="181212609" timestamp2="181212609">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3509" _type="InsertStringCommand" date="Sun Feb 27 17:42:02 EST 2022" starttimestamp="1645820509543" timestamp="181212609" timestamp2="181212609">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3511" _type="InsertStringCommand" date="Sun Feb 27 17:42:03 EST 2022" starttimestamp="1645820509543" timestamp="181213573" timestamp2="181213573">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3512" _type="InsertStringCommand" date="Sun Feb 27 17:42:03 EST 2022" starttimestamp="1645820509543" timestamp="181213573" timestamp2="181213573">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3514" _type="InsertStringCommand" date="Sun Feb 27 17:42:03 EST 2022" starttimestamp="1645820509543" timestamp="181213584" timestamp2="181213584">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3515" _type="InsertStringCommand" date="Sun Feb 27 17:42:03 EST 2022" starttimestamp="1645820509543" timestamp="181213584" timestamp2="181213584">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3517" _type="InsertStringCommand" date="Sun Feb 27 17:42:03 EST 2022" starttimestamp="1645820509543" timestamp="181214381" timestamp2="181214381">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="3518" _type="InsertStringCommand" date="Sun Feb 27 17:42:03 EST 2022" starttimestamp="1645820509543" timestamp="181214382" timestamp2="181214382">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="3520" _type="InsertStringCommand" date="Sun Feb 27 17:42:04 EST 2022" starttimestamp="1645820509543" timestamp="181214678" timestamp2="181214678">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3521" _type="InsertStringCommand" date="Sun Feb 27 17:42:04 EST 2022" starttimestamp="1645820509543" timestamp="181214678" timestamp2="181214678">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3523" _type="InsertStringCommand" date="Sun Feb 27 17:42:04 EST 2022" starttimestamp="1645820509543" timestamp="181214841" timestamp2="181214841">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3524" _type="InsertStringCommand" date="Sun Feb 27 17:42:04 EST 2022" starttimestamp="1645820509543" timestamp="181214842" timestamp2="181214842">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3526" _type="InsertStringCommand" date="Sun Feb 27 17:42:04 EST 2022" starttimestamp="1645820509543" timestamp="181214905" timestamp2="181214905">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3527" _type="InsertStringCommand" date="Sun Feb 27 17:42:04 EST 2022" starttimestamp="1645820509543" timestamp="181214907" timestamp2="181214907">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3529" _type="InsertStringCommand" date="Sun Feb 27 17:42:04 EST 2022" starttimestamp="1645820509543" timestamp="181215092" timestamp2="181215092">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3530" _type="InsertStringCommand" date="Sun Feb 27 17:42:04 EST 2022" starttimestamp="1645820509543" timestamp="181215092" timestamp2="181215092">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3532" _type="InsertStringCommand" date="Sun Feb 27 17:42:04 EST 2022" starttimestamp="1645820509543" timestamp="181215107" timestamp2="181215107">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3533" _type="InsertStringCommand" date="Sun Feb 27 17:42:04 EST 2022" starttimestamp="1645820509543" timestamp="181215107" timestamp2="181215107">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3535" _type="InsertStringCommand" date="Sun Feb 27 17:42:05 EST 2022" starttimestamp="1645820509543" timestamp="181215723" timestamp2="181215723">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3536" _type="InsertStringCommand" date="Sun Feb 27 17:42:05 EST 2022" starttimestamp="1645820509543" timestamp="181215723" timestamp2="181215723">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3538" _type="InsertStringCommand" date="Sun Feb 27 17:42:05 EST 2022" starttimestamp="1645820509543" timestamp="181216021" timestamp2="181216021">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="3539" _type="InsertStringCommand" date="Sun Feb 27 17:42:05 EST 2022" starttimestamp="1645820509543" timestamp="181216022" timestamp2="181216022">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="3541" _type="InsertStringCommand" date="Sun Feb 27 17:42:05 EST 2022" starttimestamp="1645820509543" timestamp="181216190" timestamp2="181216190">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3542" _type="InsertStringCommand" date="Sun Feb 27 17:42:05 EST 2022" starttimestamp="1645820509543" timestamp="181216190" timestamp2="181216190">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3544" _type="InsertStringCommand" date="Sun Feb 27 17:42:05 EST 2022" starttimestamp="1645820509543" timestamp="181216349" timestamp2="181216349">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3545" _type="InsertStringCommand" date="Sun Feb 27 17:42:05 EST 2022" starttimestamp="1645820509543" timestamp="181216350" timestamp2="181216350">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3546" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:42:06 EST 2022" starttimestamp="1645820509543" timestamp="181217145" />
  <Command __id="3547" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:42:06 EST 2022" starttimestamp="1645820509543" timestamp="181217238" />
  <Command __id="3548" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:42:06 EST 2022" starttimestamp="1645820509543" timestamp="181217257" />
  <Command __id="3551" _type="RunCommand" date="Sun Feb 27 17:42:12 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181223200" type="Run" />
  <Command __id="3552" _type="RunCommand" date="Sun Feb 27 17:42:12 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181223200" type="Run" />
  <Command __id="3553" _type="RunCommand" date="Sun Feb 27 17:42:12 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181223332" type="Run" />
  <Command __id="3554" _type="RunCommand" date="Sun Feb 27 17:42:12 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181223332" type="Run" />
  <Command __id="3555" _type="EHExceptionCommand" date="Sun Feb 27 17:42:12 EST 2022" starttimestamp="1645820509543" timestamp="181223382" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
In scanner =
in here, EQUAL is**

In scanner =
in here, EQUAL is**
Parse error: parsing expression, current token is: and its kind is: EQUAL
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <DocumentChange __id="3501" _type="Insert" date="Sun Feb 27 17:42:01 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7918" docExpressionCount="681" docLength="8648" length="1" offset="5691" starttimestamp="1645820509543" timestamp="181212200">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3504" _type="Insert" date="Sun Feb 27 17:42:02 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7919" docExpressionCount="681" docLength="8649" length="1" offset="5692" starttimestamp="1645820509543" timestamp="181212481">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <DocumentChange __id="3507" _type="Insert" date="Sun Feb 27 17:42:02 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7920" docExpressionCount="681" docLength="8650" length="1" offset="5693" starttimestamp="1645820509543" timestamp="181212606">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3510" _type="Insert" date="Sun Feb 27 17:42:03 EST 2022" docASTNodeCount="1094" docActiveCodeLength="7921" docExpressionCount="681" docLength="8651" length="1" offset="5694" starttimestamp="1645820509543" timestamp="181213569">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3513" _type="Insert" date="Sun Feb 27 17:42:03 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7922" docExpressionCount="683" docLength="8652" length="1" offset="5695" starttimestamp="1645820509543" timestamp="181213578">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="3516" _type="Insert" date="Sun Feb 27 17:42:03 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7923" docExpressionCount="683" docLength="8653" length="1" offset="5696" starttimestamp="1645820509543" timestamp="181214370">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="3519" _type="Insert" date="Sun Feb 27 17:42:04 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7924" docExpressionCount="683" docLength="8654" length="1" offset="5697" starttimestamp="1645820509543" timestamp="181214672">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="3522" _type="Insert" date="Sun Feb 27 17:42:04 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7925" docExpressionCount="683" docLength="8655" length="1" offset="5698" starttimestamp="1645820509543" timestamp="181214837">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="3525" _type="Insert" date="Sun Feb 27 17:42:04 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7926" docExpressionCount="683" docLength="8656" length="1" offset="5699" starttimestamp="1645820509543" timestamp="181214901">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="3528" _type="Insert" date="Sun Feb 27 17:42:04 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7927" docExpressionCount="683" docLength="8657" length="1" offset="5700" starttimestamp="1645820509543" timestamp="181215086">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="3531" _type="Insert" date="Sun Feb 27 17:42:04 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7928" docExpressionCount="683" docLength="8658" length="1" offset="5701" starttimestamp="1645820509543" timestamp="181215102">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="3534" _type="Insert" date="Sun Feb 27 17:42:05 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7929" docExpressionCount="683" docLength="8659" length="1" offset="5702" starttimestamp="1645820509543" timestamp="181215701">
    <text><![CDATA[C]]></text>
  </DocumentChange>
  <DocumentChange __id="3537" _type="Insert" date="Sun Feb 27 17:42:05 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7930" docExpressionCount="683" docLength="8660" length="1" offset="5703" starttimestamp="1645820509543" timestamp="181216010">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <DocumentChange __id="3540" _type="Insert" date="Sun Feb 27 17:42:05 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7931" docExpressionCount="683" docLength="8661" length="1" offset="5704" starttimestamp="1645820509543" timestamp="181216185">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="3543" _type="Insert" date="Sun Feb 27 17:42:05 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7932" docExpressionCount="683" docLength="8662" length="1" offset="5705" starttimestamp="1645820509543" timestamp="181216345">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="3556" _type="MoveCaretCommand" caretOffset="5630" date="Sun Feb 27 17:42:16 EST 2022" docOffset="5781" starttimestamp="1645820509543" timestamp="181226677" />
  <Command __id="3557" _type="MoveCaretCommand" caretOffset="5630" date="Sun Feb 27 17:42:16 EST 2022" docOffset="5781" starttimestamp="1645820509543" timestamp="181226677" />
  <Command __id="3558" _type="MoveCaretCommand" caretOffset="5557" date="Sun Feb 27 17:42:16 EST 2022" docOffset="5708" starttimestamp="1645820509543" timestamp="181227179" />
  <Command __id="3559" _type="MoveCaretCommand" caretOffset="5557" date="Sun Feb 27 17:42:16 EST 2022" docOffset="5708" starttimestamp="1645820509543" timestamp="181227179" />
  <Command __id="3560" _type="MoveCaretCommand" caretOffset="5606" date="Sun Feb 27 17:42:17 EST 2022" docOffset="5757" starttimestamp="1645820509543" timestamp="181227498" />
  <Command __id="3561" _type="MoveCaretCommand" caretOffset="5606" date="Sun Feb 27 17:42:17 EST 2022" docOffset="5757" starttimestamp="1645820509543" timestamp="181227498" />
  <Command __id="3562" _type="MoveCaretCommand" caretOffset="5606" date="Sun Feb 27 17:42:17 EST 2022" docOffset="5757" starttimestamp="1645820509543" timestamp="181227820" />
  <Command __id="3563" _type="MoveCaretCommand" caretOffset="5606" date="Sun Feb 27 17:42:17 EST 2022" docOffset="5757" starttimestamp="1645820509543" timestamp="181227820" />
  <Command __id="3564" _type="MoveCaretCommand" caretOffset="5524" date="Sun Feb 27 17:42:17 EST 2022" docOffset="5675" starttimestamp="1645820509543" timestamp="181228315" />
  <Command __id="3565" _type="MoveCaretCommand" caretOffset="5524" date="Sun Feb 27 17:42:17 EST 2022" docOffset="5675" starttimestamp="1645820509543" timestamp="181228315" />
  <Command __id="3566" _type="MoveCaretCommand" caretOffset="5593" date="Sun Feb 27 17:42:18 EST 2022" docOffset="5744" starttimestamp="1645820509543" timestamp="181228826" />
  <Command __id="3567" _type="MoveCaretCommand" caretOffset="5593" date="Sun Feb 27 17:42:18 EST 2022" docOffset="5744" starttimestamp="1645820509543" timestamp="181228826" />
  <Command __id="3568" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:42:32 EST 2022" docASTNodeCount="1616" docActiveCodeLength="11317" docExpressionCount="1145" docLength="12042" projectName="pa1" starttimestamp="1645820509543" timestamp="181243288">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶//			System.out.println("in here, " + currentToken.kind);¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				System.out.println("in here, " + currentToken.kind + " is"), Diff(DELETE," "), Diff(INSERT,"*"), Diff(EQUAL,"" + currentToken.spelling"), Diff(INSERT," + "*""), Diff(EQUAL,");¶				acceptIt();¶				System.out.println("in here, " + currentToken.kind + " is"), Diff(DELETE," "), Diff(INSERT,"*"), Diff(EQUAL,"" + currentToken.spelling"), Diff(INSERT," + "*""), Diff(EQUAL,");¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
//			System.out.println("in here, " + currentToken.kind);
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
				System.out.println("in here, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				acceptIt();
				System.out.println("in here, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="3569" _type="MoveCaretCommand" caretOffset="3239" date="Sun Feb 27 17:42:32 EST 2022" docOffset="3317" starttimestamp="1645820509543" timestamp="181243348" />
  <Command __id="3570" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:42:52 EST 2022" docASTNodeCount="72" docActiveCodeLength="316" docExpressionCount="36" docLength="316" projectName="pa1" starttimestamp="1645820509543" timestamp="181263129">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\TokenKind.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶public enum TokenKind {NUM, CLASS, ID, LBRACKET, RBRACKET, VOID, LPAREN, RPAREN, EOT, EQUAL, THIS,¶							PUBLIC, PRIVATE, STATIC, INT, BOOLEAN, COMMA, DOT, RETURN, SEMICOLON,¶								IF, ELSE, WHILE, UNOP, BINOP, MINUS, TRUE, FALSE, NEW, LCURLY, RCURLY,¶									ERROR}¶¶")]]]></diff>
  </Command>
  <Command __id="3571" _type="MoveCaretCommand" caretOffset="260" date="Sun Feb 27 17:42:52 EST 2022" docOffset="260" starttimestamp="1645820509543" timestamp="181263204" />
  <Command __id="3572" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:42:53 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7932" docExpressionCount="683" docLength="8662" projectName="pa1" starttimestamp="1645820509543" timestamp="181263945">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	        	if(currentChar == '=') {¶	        		"), Diff(INSERT,"System.out.println("In scanner " +  currentChar);¶	        		"), Diff(EQUAL,"return TokenKind.EQUAL;¶	        	}¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import java.io.IOException;
import java.io.InputStream;

import miniJava.ErrorReporter;
import miniJava.SyntacticAnalyzer.Token;
import miniJava.SyntacticAnalyzer.TokenKind;

public class Scanner {
	private boolean isComment;
	
//	comment state = 0 not comment
//			= 1 show /
//			= 2 show second /
//			= 12 show first *
//			= 13 show second *
//			= 3 show third /
//			= 4 show fourth / end of comment
//			= 14 show second / end of comment
	private int commentState;
	
	private InputStream inputStream;
	private ErrorReporter reporter;
	
	private char currentChar;
	private byte currentKind;
	private StringBuilder currentSpelling;
	
	// true when end of line is found
	private boolean eot = false; 
	
	public Scanner(InputStream inputStream, ErrorReporter reporter) {
		this.isComment = false;
		this.commentState = 0;
		this.inputStream = inputStream;
		this.reporter = reporter;

		// initialize scanner state
		readChar();
	}	
	
	/**
	 * skip whitespace and scan next token
	 */	
	
// ? SINGLE SLASH
//	comment state = 0 not comment
//	= 1 show /
//	= 2 show second /
//	= 12 show first *
//	= 13 show second *
//	= 14 show second / end of comment
	public void scanSeparator() {
		switch (commentState) {
			case 0:
				while (!eot && 
						(currentChar == ' ' ||
							currentChar == '\t' ||
								currentChar == '\n' ||
									currentChar == '\r')) {
					skipIt();
				}
				if (currentChar == '/') {
					commentState = 1;
					skipIt();
					scanSeparator();
				}
				break;
			
			case 1:
				if (currentChar == '/') {
					commentState = 2;
					isComment = true;
					skipIt();
					scanSeparator();
				} else if (currentChar == '*') {
					commentState = 12;
					isComment = true;
					skipIt();
					scanSeparator();
				} else {
					System.exit(4);
				}
				break;
			
			case 2:
				if (currentChar == '\r' || currentChar == '\n' || eot) {
					commentState = 0;
					isComment = false;
					scanSeparator();
				} else {
					skipIt();
					scanSeparator();		
				}
				break;
				
			case 12:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '*') {
					skipIt();
					scanSeparator();
				} else {
					commentState = 13;
					scanSeparator();
				}
				break;
			
			case 13:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '/') {
					skipIt();
					commentState = 12;
					scanSeparator();
				} else {
					commentState = 0;
					isComment = false;
					scanSeparator();
				}
				break;	
		}		
	}
	

	public Token scan() {
		// skip whitespace and comments
		scanSeparator();

		// start of a token: collect spelling and identify token kind
		currentSpelling = new StringBuilder();
		TokenKind kind = scanToken();
		String spelling = currentSpelling.toString();
		
		if (kind == TokenKind.ID) {
			switch (spelling) {
			case "class":
				kind = TokenKind.CLASS;
				break;
			case "public":
				kind = TokenKind.PUBLIC;
				break;
			case "private":
				kind = TokenKind.PRIVATE;
				break;
			case "static":
				kind = TokenKind.STATIC;
				break;
			case "int":
				kind = TokenKind.INT;
				break;
			case "boolean":
				kind = TokenKind.BOOLEAN;
				break;
			case "void":
				kind = TokenKind.VOID;
				break;
			case "this":
				kind = TokenKind.THIS;
				break;
			case "return":
				kind = TokenKind.RETURN;
				break;
			case "if":
				kind = TokenKind.IF;
				break;
			case "else":
				kind = TokenKind.ELSE;
				break;
			case "while":
				kind = TokenKind.WHILE;
				break;
			case "true":
				kind = TokenKind.TRUE;
				break;
			case "false":
				kind = TokenKind.FALSE;
				break;
			default:
				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};
				for (String s : ss) {
					if (spelling.toLowerCase().equals(s)) {
						reporter.reportError("Key word should not be used as identifiers.");
						System.exit(4);
					}
				}
				break;
			}
		}

		// return new token
		return new Token(kind, spelling);
	}

	
	/**
	 * determine token kind
	 */
	public TokenKind scanToken() {
		if (eot) {
			return TokenKind.EOT; 
		}
			
		switch (currentChar) {
			case 'a':  case 'b':  case 'c':  case 'd':
			case 'e':  case 'f':  case 'g':  case 'h':
			case 'i':  case 'j':  case 'k':  case 'l':
			case 'm':  case 'n':  case 'o':  case 'p':
			case 'q':  case 'r':  case 's':  case 't':
	        case 'u':  case 'v':  case 'w':  case 'x':
	        case 'y':  case 'z':
	        
	        case 'A':  case 'B':  case 'C':  case 'D':
	        case 'E':  case 'F':  case 'G':  case 'H':
	        case 'I':  case 'J':  case 'K':  case 'L':
	        case 'M':  case 'N':  case 'O':	 case 'P':
	        case 'Q':  case 'R':  case 'S':  case 'T':
	        case 'U':  case 'V':  case 'W':  case 'X':
	        case 'Y':  case 'Z':
	        	takeIt();
	        	while(Character.isLetter(currentChar) 
	        			|| Character.isDigit(currentChar)
	        				|| currentChar == '_') {
	        		takeIt();
	        	}
	        	return TokenKind.ID;
	        
	        case '0':  case '1':  case '2':  case '3':  case '4':
	        case '5':  case '6':  case '7':  case '8':  case '9':
	            takeIt();
	            while(Character.isDigit(currentChar)) {
	            	takeIt();
	            }
	            return TokenKind.NUM;
	        
	        case '>': case '<': case '=':
	        	if(currentChar == '=') {
	        		System.out.println("In scanner " +  currentChar);
	        		return TokenKind.EQUAL;
	        	}
	            takeIt();
	            if(currentChar == '=') {
	                takeIt();
	                return TokenKind.BINOP;
	            }
	            return TokenKind.BINOP;
	        
	        case '+': case '*': case '/':
	        	takeIt();
	        	return TokenKind.BINOP;
	        
	        case '&':
	            takeIt();
	            if(currentChar != '&') {
	                System.exit(4);
	            }
	            takeIt();
	            return TokenKind.BINOP;

	        case '|':
	            takeIt();
	            if(currentChar != '|')
	                System.exit(4);
	            takeIt();
	            return TokenKind.BINOP;
	        
	        case '!':
	            takeIt();
	            if(currentChar == '=') {
	                takeIt();
	                return TokenKind.BINOP;
	            }
	            return TokenKind.UNOP;
	            
	        case '-':
	            takeIt();
	            return TokenKind.MINUS;
	        
	        case '.':
	            takeIt();
	            return TokenKind.DOT;

	        case ',':
	            takeIt();
	            return TokenKind.COMMA;

	        case ';':
	            takeIt();
	            return TokenKind.SEMICOLON;

	        case '(':
	            takeIt();
	            return TokenKind.LPAREN;

	        case ')':
	            takeIt();
	            return TokenKind.RPAREN;

	        case '[':
	            takeIt();
	            return TokenKind.LBRACKET;

	        case ']':
	            takeIt();
	            return TokenKind.RBRACKET;

	        case '{':
	            takeIt();
	            return TokenKind.LCURLY;

	        case '}':
	            takeIt();
	            return TokenKind.RCURLY;
	        
	        default:
				scanError("Unrecognized character '" + currentChar + "' in input");
				return TokenKind.ERROR; 
		}
	}

	
	private void takeIt() {
		currentSpelling.append(currentChar);
		nextChar();
	}
	
	private void take(char expectedChar) {
		if (currentChar == expectedChar) {
			takeIt();
		}
	}

	private void skipIt() {
		nextChar();
	}


	private void scanError(String m) {
		reporter.reportError("Scan Error:  " + m);
	}


	private final static char eolUnix = '\n';
	private final static char eolWindows = '\r';

	/**
	 * advance to next char in inputstream
	 * detect end of file or end of line as end of input
	 */
	private void nextChar() {
		if (!eot)
			readChar();
	}

	private void readChar() {
		try {
			int c = inputStream.read();
			currentChar = (char) c;
			if (c == -1) {
				System.out.print("1" + (c == -1));
				System.out.print("2" + (currentChar == eolUnix ));
				System.out.print("3" + (currentChar == eolWindows));
				eot = true;
			}
		} catch (IOException e) {
			scanError("I/O Exception!");
			eot = true;
		}
	}
	


}
]]></snapshot>
  </Command>
  <Command __id="3574" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:42:56 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="181266487">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="3575" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:42:58 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="181269344">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="3577" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:43:00 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="181270638">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="3573" _type="MoveCaretCommand" caretOffset="5593" date="Sun Feb 27 17:42:53 EST 2022" docOffset="5744" starttimestamp="1645820509543" timestamp="181264014" />
  <Command __id="3576" _type="MoveCaretCommand" caretOffset="0" date="Sun Feb 27 17:42:58 EST 2022" docOffset="0" starttimestamp="1645820509543" timestamp="181269415" />
  <Command __id="3579" _type="MoveCaretCommand" caretOffset="2847" date="Sun Feb 27 17:43:02 EST 2022" docOffset="2925" starttimestamp="1645820509543" timestamp="181272666" />
  <Command __id="3580" _type="MoveCaretCommand" caretOffset="2847" date="Sun Feb 27 17:43:02 EST 2022" docOffset="2925" starttimestamp="1645820509543" timestamp="181272700" />
  <Command __id="3578" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:43:02 EST 2022" docASTNodeCount="1616" docActiveCodeLength="11317" docExpressionCount="1145" docLength="12042" projectName="pa1" starttimestamp="1645820509543" timestamp="181272625">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶//			System.out.println("in here, " + currentToken.kind);¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				System.out.println("in here, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				acceptIt();¶				System.out.println("in here, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3581" _type="MoveCaretCommand" caretOffset="2906" date="Sun Feb 27 17:43:06 EST 2022" docOffset="2984" starttimestamp="1645820509543" timestamp="181277395" />
  <Command __id="3582" _type="MoveCaretCommand" caretOffset="2906" date="Sun Feb 27 17:43:06 EST 2022" docOffset="2984" starttimestamp="1645820509543" timestamp="181277395" />
  <DocumentChange __id="3583" _type="Delete" date="Sun Feb 27 17:43:08 EST 2022" docASTNodeCount="1627" docActiveCodeLength="11372" docExpressionCount="1155" docLength="12040" endLine="127" length="2" offset="2927" startLine="127" starttimestamp="1645820509543" timestamp="181278550">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="3584" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 17:43:08 EST 2022" starttimestamp="1645820509543" timestamp="181278574" />
  <Command __id="3585" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:08 EST 2022" starttimestamp="1645820509543" timestamp="181279094" />
  <Command __id="3586" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:08 EST 2022" starttimestamp="1645820509543" timestamp="181279094" />
  <Command __id="3587" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:08 EST 2022" starttimestamp="1645820509543" timestamp="181279244" />
  <Command __id="3588" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:08 EST 2022" starttimestamp="1645820509543" timestamp="181279244" />
  <DocumentChange __id="3589" _type="Insert" date="Sun Feb 27 17:43:09 EST 2022" docASTNodeCount="1627" docActiveCodeLength="11373" docExpressionCount="1155" docLength="12041" length="1" offset="2980" starttimestamp="1645820509543" timestamp="181280186">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3590" _type="InsertStringCommand" date="Sun Feb 27 17:43:09 EST 2022" starttimestamp="1645820509543" timestamp="181280189" timestamp2="181280189">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3591" _type="InsertStringCommand" date="Sun Feb 27 17:43:09 EST 2022" starttimestamp="1645820509543" timestamp="181280189" timestamp2="181280189">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3592" _type="Insert" date="Sun Feb 27 17:43:10 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11374" docExpressionCount="1156" docLength="12042" length="1" offset="2981" starttimestamp="1645820509543" timestamp="181281139">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <Command __id="3593" _type="InsertStringCommand" date="Sun Feb 27 17:43:10 EST 2022" starttimestamp="1645820509543" timestamp="181281144" timestamp2="181281144">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="3594" _type="InsertStringCommand" date="Sun Feb 27 17:43:10 EST 2022" starttimestamp="1645820509543" timestamp="181281145" timestamp2="181281145">
    <data><![CDATA[+]]></data>
  </Command>
  <DocumentChange __id="3595" _type="Insert" date="Sun Feb 27 17:43:10 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11375" docExpressionCount="1156" docLength="12043" length="1" offset="2982" starttimestamp="1645820509543" timestamp="181281275">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3596" _type="InsertStringCommand" date="Sun Feb 27 17:43:10 EST 2022" starttimestamp="1645820509543" timestamp="181281280" timestamp2="181281280">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3597" _type="InsertStringCommand" date="Sun Feb 27 17:43:10 EST 2022" starttimestamp="1645820509543" timestamp="181281280" timestamp2="181281280">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3598" _type="Insert" date="Sun Feb 27 17:43:11 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11377" docExpressionCount="1156" docLength="12045" length="2" offset="2983" starttimestamp="1645820509543" timestamp="181282140">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <Command __id="3599" _type="InsertStringCommand" date="Sun Feb 27 17:43:11 EST 2022" starttimestamp="1645820509543" timestamp="181282143" timestamp2="181282143">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3600" _type="InsertStringCommand" date="Sun Feb 27 17:43:11 EST 2022" starttimestamp="1645820509543" timestamp="181282143" timestamp2="181282143">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3601" _type="InsertStringCommand" date="Sun Feb 27 17:43:11 EST 2022" starttimestamp="1645820509543" timestamp="181282322" timestamp2="181282322">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3602" _type="InsertStringCommand" date="Sun Feb 27 17:43:11 EST 2022" starttimestamp="1645820509543" timestamp="181282323" timestamp2="181282323">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3603" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:12 EST 2022" starttimestamp="1645820509543" timestamp="181282658" />
  <Command __id="3604" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:12 EST 2022" starttimestamp="1645820509543" timestamp="181282659" />
  <DocumentChange __id="3605" _type="Insert" date="Sun Feb 27 17:43:13 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11378" docExpressionCount="1156" docLength="12046" length="1" offset="2984" starttimestamp="1645820509543" timestamp="181283642">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="3606" _type="InsertStringCommand" date="Sun Feb 27 17:43:13 EST 2022" starttimestamp="1645820509543" timestamp="181283647" timestamp2="181283647">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3607" _type="InsertStringCommand" date="Sun Feb 27 17:43:13 EST 2022" starttimestamp="1645820509543" timestamp="181283648" timestamp2="181283648">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="3608" _type="Delete" date="Sun Feb 27 17:43:14 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11377" docExpressionCount="1156" docLength="12045" endLine="127" length="1" offset="2984" startLine="127" starttimestamp="1645820509543" timestamp="181285119">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="3609" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:14 EST 2022" starttimestamp="1645820509543" timestamp="181285122" />
  <Command __id="3610" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:14 EST 2022" starttimestamp="1645820509543" timestamp="181285123" />
  <DocumentChange __id="3611" _type="Insert" date="Sun Feb 27 17:43:14 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11378" docExpressionCount="1156" docLength="12046" length="1" offset="2984" starttimestamp="1645820509543" timestamp="181285334">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="3612" _type="InsertStringCommand" date="Sun Feb 27 17:43:14 EST 2022" starttimestamp="1645820509543" timestamp="181285338" timestamp2="181285338">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3613" _type="InsertStringCommand" date="Sun Feb 27 17:43:14 EST 2022" starttimestamp="1645820509543" timestamp="181285338" timestamp2="181285338">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="3614" _type="Insert" date="Sun Feb 27 17:43:14 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11379" docExpressionCount="1156" docLength="12047" length="1" offset="2985" starttimestamp="1645820509543" timestamp="181285420">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="3615" _type="InsertStringCommand" date="Sun Feb 27 17:43:14 EST 2022" starttimestamp="1645820509543" timestamp="181285431" timestamp2="181285431">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3616" _type="InsertStringCommand" date="Sun Feb 27 17:43:14 EST 2022" starttimestamp="1645820509543" timestamp="181285431" timestamp2="181285431">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="3617" _type="Insert" date="Sun Feb 27 17:43:15 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11380" docExpressionCount="1156" docLength="12048" length="1" offset="2986" starttimestamp="1645820509543" timestamp="181285784">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3618" _type="InsertStringCommand" date="Sun Feb 27 17:43:15 EST 2022" starttimestamp="1645820509543" timestamp="181285790" timestamp2="181285790">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3619" _type="InsertStringCommand" date="Sun Feb 27 17:43:15 EST 2022" starttimestamp="1645820509543" timestamp="181285790" timestamp2="181285790">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3620" _type="Insert" date="Sun Feb 27 17:43:15 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11381" docExpressionCount="1156" docLength="12049" length="1" offset="2987" starttimestamp="1645820509543" timestamp="181285900">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="3621" _type="InsertStringCommand" date="Sun Feb 27 17:43:15 EST 2022" starttimestamp="1645820509543" timestamp="181285913" timestamp2="181285913">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3622" _type="InsertStringCommand" date="Sun Feb 27 17:43:15 EST 2022" starttimestamp="1645820509543" timestamp="181285913" timestamp2="181285913">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="3623" _type="Insert" date="Sun Feb 27 17:43:15 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11382" docExpressionCount="1156" docLength="12050" length="1" offset="2988" starttimestamp="1645820509543" timestamp="181286079">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="3624" _type="InsertStringCommand" date="Sun Feb 27 17:43:15 EST 2022" starttimestamp="1645820509543" timestamp="181286086" timestamp2="181286086">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3625" _type="InsertStringCommand" date="Sun Feb 27 17:43:15 EST 2022" starttimestamp="1645820509543" timestamp="181286086" timestamp2="181286086">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="3626" _type="Insert" date="Sun Feb 27 17:43:15 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11383" docExpressionCount="1156" docLength="12051" length="1" offset="2989" starttimestamp="1645820509543" timestamp="181286238">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="3627" _type="InsertStringCommand" date="Sun Feb 27 17:43:15 EST 2022" starttimestamp="1645820509543" timestamp="181286242" timestamp2="181286242">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3628" _type="InsertStringCommand" date="Sun Feb 27 17:43:15 EST 2022" starttimestamp="1645820509543" timestamp="181286243" timestamp2="181286243">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="3629" _type="Delete" date="Sun Feb 27 17:43:15 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11382" docExpressionCount="1156" docLength="12050" endLine="127" length="1" offset="2989" startLine="127" starttimestamp="1645820509543" timestamp="181286410">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="3630" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:15 EST 2022" starttimestamp="1645820509543" timestamp="181286412" />
  <Command __id="3631" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:15 EST 2022" starttimestamp="1645820509543" timestamp="181286413" />
  <DocumentChange __id="3632" _type="Delete" date="Sun Feb 27 17:43:16 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11381" docExpressionCount="1156" docLength="12049" endLine="127" length="1" offset="2988" startLine="127" starttimestamp="1645820509543" timestamp="181286617">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="3633" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:16 EST 2022" starttimestamp="1645820509543" timestamp="181286619" />
  <Command __id="3634" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:16 EST 2022" starttimestamp="1645820509543" timestamp="181286620" />
  <DocumentChange __id="3635" _type="Delete" date="Sun Feb 27 17:43:16 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11380" docExpressionCount="1156" docLength="12048" endLine="127" length="1" offset="2987" startLine="127" starttimestamp="1645820509543" timestamp="181286803">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="3636" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:16 EST 2022" starttimestamp="1645820509543" timestamp="181286806" />
  <Command __id="3637" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:16 EST 2022" starttimestamp="1645820509543" timestamp="181286806" />
  <DocumentChange __id="3638" _type="Insert" date="Sun Feb 27 17:43:16 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11381" docExpressionCount="1156" docLength="12049" length="1" offset="2987" starttimestamp="1645820509543" timestamp="181286994">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <Command __id="3639" _type="InsertStringCommand" date="Sun Feb 27 17:43:16 EST 2022" starttimestamp="1645820509543" timestamp="181286997" timestamp2="181286997">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="3640" _type="InsertStringCommand" date="Sun Feb 27 17:43:16 EST 2022" starttimestamp="1645820509543" timestamp="181286998" timestamp2="181286998">
    <data><![CDATA[-]]></data>
  </Command>
  <DocumentChange __id="3641" _type="Insert" date="Sun Feb 27 17:43:16 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11382" docExpressionCount="1156" docLength="12050" length="1" offset="2988" starttimestamp="1645820509543" timestamp="181287141">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <Command __id="3642" _type="InsertStringCommand" date="Sun Feb 27 17:43:16 EST 2022" starttimestamp="1645820509543" timestamp="181287147" timestamp2="181287147">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="3643" _type="InsertStringCommand" date="Sun Feb 27 17:43:16 EST 2022" starttimestamp="1645820509543" timestamp="181287148" timestamp2="181287148">
    <data><![CDATA[-]]></data>
  </Command>
  <DocumentChange __id="3644" _type="Insert" date="Sun Feb 27 17:43:16 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11383" docExpressionCount="1156" docLength="12051" length="1" offset="2989" starttimestamp="1645820509543" timestamp="181287300">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <Command __id="3645" _type="InsertStringCommand" date="Sun Feb 27 17:43:16 EST 2022" starttimestamp="1645820509543" timestamp="181287307" timestamp2="181287307">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="3646" _type="InsertStringCommand" date="Sun Feb 27 17:43:16 EST 2022" starttimestamp="1645820509543" timestamp="181287307" timestamp2="181287307">
    <data><![CDATA[-]]></data>
  </Command>
  <DocumentChange __id="3647" _type="Delete" date="Sun Feb 27 17:43:17 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11382" docExpressionCount="1156" docLength="12050" endLine="127" length="1" offset="2989" startLine="127" starttimestamp="1645820509543" timestamp="181287482">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <Command __id="3648" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:17 EST 2022" starttimestamp="1645820509543" timestamp="181287484" />
  <Command __id="3649" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:17 EST 2022" starttimestamp="1645820509543" timestamp="181287484" />
  <DocumentChange __id="3650" _type="Delete" date="Sun Feb 27 17:43:17 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11381" docExpressionCount="1156" docLength="12049" endLine="127" length="1" offset="2988" startLine="127" starttimestamp="1645820509543" timestamp="181287644">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <Command __id="3651" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:17 EST 2022" starttimestamp="1645820509543" timestamp="181287650" />
  <Command __id="3652" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:17 EST 2022" starttimestamp="1645820509543" timestamp="181287651" />
  <DocumentChange __id="3653" _type="Delete" date="Sun Feb 27 17:43:17 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11380" docExpressionCount="1156" docLength="12048" endLine="127" length="1" offset="2987" startLine="127" starttimestamp="1645820509543" timestamp="181287801">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <Command __id="3654" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:17 EST 2022" starttimestamp="1645820509543" timestamp="181287804" />
  <Command __id="3655" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:17 EST 2022" starttimestamp="1645820509543" timestamp="181287804" />
  <DocumentChange __id="3656" _type="Delete" date="Sun Feb 27 17:43:17 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11379" docExpressionCount="1156" docLength="12047" endLine="127" length="1" offset="2986" startLine="127" starttimestamp="1645820509543" timestamp="181288001">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3657" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:17 EST 2022" starttimestamp="1645820509543" timestamp="181288004" />
  <Command __id="3658" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:17 EST 2022" starttimestamp="1645820509543" timestamp="181288004" />
  <DocumentChange __id="3659" _type="Insert" date="Sun Feb 27 17:43:18 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11380" docExpressionCount="1156" docLength="12048" length="1" offset="2986" starttimestamp="1645820509543" timestamp="181289210">
    <text><![CDATA[*]]></text>
  </DocumentChange>
  <Command __id="3660" _type="InsertStringCommand" date="Sun Feb 27 17:43:18 EST 2022" starttimestamp="1645820509543" timestamp="181289222" timestamp2="181289222">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="3661" _type="InsertStringCommand" date="Sun Feb 27 17:43:18 EST 2022" starttimestamp="1645820509543" timestamp="181289222" timestamp2="181289222">
    <data><![CDATA[*]]></data>
  </Command>
  <DocumentChange __id="3662" _type="Insert" date="Sun Feb 27 17:43:18 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11381" docExpressionCount="1156" docLength="12049" length="1" offset="2987" starttimestamp="1645820509543" timestamp="181289377">
    <text><![CDATA[*]]></text>
  </DocumentChange>
  <Command __id="3663" _type="InsertStringCommand" date="Sun Feb 27 17:43:18 EST 2022" starttimestamp="1645820509543" timestamp="181289381" timestamp2="181289381">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="3664" _type="InsertStringCommand" date="Sun Feb 27 17:43:18 EST 2022" starttimestamp="1645820509543" timestamp="181289381" timestamp2="181289381">
    <data><![CDATA[*]]></data>
  </Command>
  <DocumentChange __id="3665" _type="Insert" date="Sun Feb 27 17:43:19 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11382" docExpressionCount="1156" docLength="12050" length="1" offset="2988" starttimestamp="1645820509543" timestamp="181289513">
    <text><![CDATA[*]]></text>
  </DocumentChange>
  <Command __id="3666" _type="InsertStringCommand" date="Sun Feb 27 17:43:19 EST 2022" starttimestamp="1645820509543" timestamp="181289519" timestamp2="181289519">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="3667" _type="InsertStringCommand" date="Sun Feb 27 17:43:19 EST 2022" starttimestamp="1645820509543" timestamp="181289519" timestamp2="181289519">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="3668" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:43:19 EST 2022" starttimestamp="1645820509543" timestamp="181290258" />
  <Command __id="3669" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:43:19 EST 2022" starttimestamp="1645820509543" timestamp="181290259" />
  <DocumentChange __id="3670" _type="Insert" date="Sun Feb 27 17:43:20 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11383" docExpressionCount="1156" docLength="12051" length="1" offset="2990" starttimestamp="1645820509543" timestamp="181291104">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3671" _type="InsertStringCommand" date="Sun Feb 27 17:43:20 EST 2022" starttimestamp="1645820509543" timestamp="181291109" timestamp2="181291109">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3672" _type="InsertStringCommand" date="Sun Feb 27 17:43:20 EST 2022" starttimestamp="1645820509543" timestamp="181291109" timestamp2="181291109">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3673" _type="Insert" date="Sun Feb 27 17:43:20 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11384" docExpressionCount="1156" docLength="12052" length="1" offset="2991" starttimestamp="1645820509543" timestamp="181291363">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <Command __id="3674" _type="InsertStringCommand" date="Sun Feb 27 17:43:20 EST 2022" starttimestamp="1645820509543" timestamp="181291368" timestamp2="181291368">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="3675" _type="InsertStringCommand" date="Sun Feb 27 17:43:20 EST 2022" starttimestamp="1645820509543" timestamp="181291368" timestamp2="181291368">
    <data><![CDATA[+]]></data>
  </Command>
  <DocumentChange __id="3676" _type="Insert" date="Sun Feb 27 17:43:21 EST 2022" docASTNodeCount="1628" docActiveCodeLength="11385" docExpressionCount="1156" docLength="12053" length="1" offset="2992" starttimestamp="1645820509543" timestamp="181291505">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3677" _type="InsertStringCommand" date="Sun Feb 27 17:43:21 EST 2022" starttimestamp="1645820509543" timestamp="181291515" timestamp2="181291515">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3678" _type="InsertStringCommand" date="Sun Feb 27 17:43:21 EST 2022" starttimestamp="1645820509543" timestamp="181291515" timestamp2="181291515">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3680" _type="InsertStringCommand" date="Sun Feb 27 17:43:21 EST 2022" starttimestamp="1645820509543" timestamp="181292368" timestamp2="181292368">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3681" _type="InsertStringCommand" date="Sun Feb 27 17:43:21 EST 2022" starttimestamp="1645820509543" timestamp="181292368" timestamp2="181292368">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3682" _type="InsertStringCommand" date="Sun Feb 27 17:43:22 EST 2022" starttimestamp="1645820509543" timestamp="181292501" timestamp2="181292501">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3683" _type="InsertStringCommand" date="Sun Feb 27 17:43:22 EST 2022" starttimestamp="1645820509543" timestamp="181292501" timestamp2="181292501">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3684" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:22 EST 2022" starttimestamp="1645820509543" timestamp="181292918" />
  <Command __id="3685" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:22 EST 2022" starttimestamp="1645820509543" timestamp="181292918" />
  <Command __id="3686" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:22 EST 2022" starttimestamp="1645820509543" timestamp="181293116" />
  <Command __id="3687" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:22 EST 2022" starttimestamp="1645820509543" timestamp="181293116" />
  <DocumentChange __id="3679" _type="Insert" date="Sun Feb 27 17:43:21 EST 2022" docASTNodeCount="1629" docActiveCodeLength="11387" docExpressionCount="1157" docLength="12055" length="2" offset="2993" starttimestamp="1645820509543" timestamp="181292365">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <Command __id="3688" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:43:23 EST 2022" starttimestamp="1645820509543" timestamp="181294230" />
  <Command __id="3689" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:43:23 EST 2022" starttimestamp="1645820509543" timestamp="181294231" />
  <DocumentChange __id="3690" _type="Insert" date="Sun Feb 27 17:43:24 EST 2022" docASTNodeCount="1629" docActiveCodeLength="11388" docExpressionCount="1157" docLength="12056" length="1" offset="2994" starttimestamp="1645820509543" timestamp="181295313">
    <text><![CDATA[*]]></text>
  </DocumentChange>
  <Command __id="3691" _type="InsertStringCommand" date="Sun Feb 27 17:43:24 EST 2022" starttimestamp="1645820509543" timestamp="181295318" timestamp2="181295318">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="3692" _type="InsertStringCommand" date="Sun Feb 27 17:43:24 EST 2022" starttimestamp="1645820509543" timestamp="181295318" timestamp2="181295318">
    <data><![CDATA[*]]></data>
  </Command>
  <DocumentChange __id="3693" _type="Insert" date="Sun Feb 27 17:43:24 EST 2022" docASTNodeCount="1629" docActiveCodeLength="11389" docExpressionCount="1157" docLength="12057" length="1" offset="2995" starttimestamp="1645820509543" timestamp="181295422">
    <text><![CDATA[*]]></text>
  </DocumentChange>
  <Command __id="3694" _type="InsertStringCommand" date="Sun Feb 27 17:43:24 EST 2022" starttimestamp="1645820509543" timestamp="181295428" timestamp2="181295428">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="3695" _type="InsertStringCommand" date="Sun Feb 27 17:43:24 EST 2022" starttimestamp="1645820509543" timestamp="181295428" timestamp2="181295428">
    <data><![CDATA[*]]></data>
  </Command>
  <DocumentChange __id="3696" _type="Insert" date="Sun Feb 27 17:43:25 EST 2022" docASTNodeCount="1629" docActiveCodeLength="11390" docExpressionCount="1157" docLength="12058" length="1" offset="2996" starttimestamp="1645820509543" timestamp="181295572">
    <text><![CDATA[*]]></text>
  </DocumentChange>
  <Command __id="3697" _type="InsertStringCommand" date="Sun Feb 27 17:43:25 EST 2022" starttimestamp="1645820509543" timestamp="181295585" timestamp2="181295585">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="3698" _type="InsertStringCommand" date="Sun Feb 27 17:43:25 EST 2022" starttimestamp="1645820509543" timestamp="181295585" timestamp2="181295585">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="3699" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:25 EST 2022" starttimestamp="1645820509543" timestamp="181296118" />
  <Command __id="3700" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:25 EST 2022" starttimestamp="1645820509543" timestamp="181296118" />
  <Command __id="3701" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:25 EST 2022" starttimestamp="1645820509543" timestamp="181296276" />
  <Command __id="3702" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:25 EST 2022" starttimestamp="1645820509543" timestamp="181296276" />
  <Command __id="3703" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:25 EST 2022" starttimestamp="1645820509543" timestamp="181296438" />
  <Command __id="3704" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:25 EST 2022" starttimestamp="1645820509543" timestamp="181296438" />
  <Command __id="3705" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:26 EST 2022" starttimestamp="1645820509543" timestamp="181296671" />
  <Command __id="3706" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:26 EST 2022" starttimestamp="1645820509543" timestamp="181296671" />
  <Command __id="3707" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:26 EST 2022" starttimestamp="1645820509543" timestamp="181296854" />
  <Command __id="3708" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:26 EST 2022" starttimestamp="1645820509543" timestamp="181296854" />
  <Command __id="3709" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:26 EST 2022" starttimestamp="1645820509543" timestamp="181297030" />
  <Command __id="3710" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:26 EST 2022" starttimestamp="1645820509543" timestamp="181297030" />
  <Command __id="3711" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:26 EST 2022" starttimestamp="1645820509543" timestamp="181297196" />
  <Command __id="3712" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 17:43:26 EST 2022" starttimestamp="1645820509543" timestamp="181297196" />
  <DocumentChange __id="3713" _type="Insert" date="Sun Feb 27 17:43:27 EST 2022" docASTNodeCount="1629" docActiveCodeLength="11391" docExpressionCount="1157" docLength="12059" length="1" offset="2990" starttimestamp="1645820509543" timestamp="181297938">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3714" _type="InsertStringCommand" date="Sun Feb 27 17:43:27 EST 2022" starttimestamp="1645820509543" timestamp="181297943" timestamp2="181297943">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3715" _type="InsertStringCommand" date="Sun Feb 27 17:43:27 EST 2022" starttimestamp="1645820509543" timestamp="181297943" timestamp2="181297943">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3716" _type="Insert" date="Sun Feb 27 17:43:27 EST 2022" docASTNodeCount="1631" docActiveCodeLength="11392" docExpressionCount="1159" docLength="12060" length="1" offset="2991" starttimestamp="1645820509543" timestamp="181298203">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="3717" _type="InsertStringCommand" date="Sun Feb 27 17:43:27 EST 2022" starttimestamp="1645820509543" timestamp="181298208" timestamp2="181298208">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3718" _type="InsertStringCommand" date="Sun Feb 27 17:43:27 EST 2022" starttimestamp="1645820509543" timestamp="181298208" timestamp2="181298208">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="3719" _type="Delete" date="Sun Feb 27 17:43:28 EST 2022" docASTNodeCount="1629" docActiveCodeLength="11391" docExpressionCount="1157" docLength="12059" endLine="127" length="1" offset="2991" startLine="127" starttimestamp="1645820509543" timestamp="181298627">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="3720" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:28 EST 2022" starttimestamp="1645820509543" timestamp="181298633" />
  <Command __id="3721" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:43:28 EST 2022" starttimestamp="1645820509543" timestamp="181298634" />
  <DocumentChange __id="3722" _type="Insert" date="Sun Feb 27 17:43:28 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11392" docExpressionCount="1158" docLength="12060" length="1" offset="2991" starttimestamp="1645820509543" timestamp="181298916">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <DocumentChange __id="3723" _type="Insert" date="Sun Feb 27 17:43:28 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11393" docExpressionCount="1158" docLength="12061" length="1" offset="2992" starttimestamp="1645820509543" timestamp="181299166">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3724" _type="InsertStringCommand" date="Sun Feb 27 17:43:28 EST 2022" starttimestamp="1645820509543" timestamp="181299171" timestamp2="181299171">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3725" _type="InsertStringCommand" date="Sun Feb 27 17:43:28 EST 2022" starttimestamp="1645820509543" timestamp="181299171" timestamp2="181299171">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3726" _type="Insert" date="Sun Feb 27 17:43:29 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11394" docExpressionCount="1158" docLength="12062" length="1" offset="2993" starttimestamp="1645820509543" timestamp="181300121">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3727" _type="Replace" date="Sun Feb 27 17:43:29 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11394" docExpressionCount="1158" docLength="12062" endLine="127" insertionLength="1" int_docASTNodeCount="1630" int_docActiveCodeLength="11393" int_docExpressionCount="1158" int_docLength="12061" length="1" offset="2993" startLine="127" starttimestamp="1645820509543" timestamp="181300198">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3728" _type="Replace" date="Sun Feb 27 17:43:29 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11394" docExpressionCount="1158" docLength="12062" endLine="127" insertionLength="1" int_docASTNodeCount="1630" int_docActiveCodeLength="11393" int_docExpressionCount="1158" int_docLength="12061" length="1" offset="2993" startLine="127" starttimestamp="1645820509543" timestamp="181300393">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3729" _type="Replace" date="Sun Feb 27 17:43:30 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11394" docExpressionCount="1158" docLength="12062" endLine="127" insertionLength="1" int_docASTNodeCount="1630" int_docActiveCodeLength="11393" int_docExpressionCount="1158" int_docLength="12061" length="1" offset="2993" startLine="127" starttimestamp="1645820509543" timestamp="181300538">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3730" _type="Replace" date="Sun Feb 27 17:43:30 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11394" docExpressionCount="1158" docLength="12062" endLine="127" insertionLength="1" int_docASTNodeCount="1630" int_docActiveCodeLength="11393" int_docExpressionCount="1158" int_docLength="12061" length="1" offset="2993" startLine="127" starttimestamp="1645820509543" timestamp="181300603">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3731" _type="Replace" date="Sun Feb 27 17:43:30 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11394" docExpressionCount="1158" docLength="12062" endLine="127" insertionLength="1" int_docASTNodeCount="1630" int_docActiveCodeLength="11393" int_docExpressionCount="1158" int_docLength="12061" length="1" offset="2993" startLine="127" starttimestamp="1645820509543" timestamp="181300752">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3732" _type="Replace" date="Sun Feb 27 17:43:30 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11394" docExpressionCount="1158" docLength="12062" endLine="127" insertionLength="1" int_docASTNodeCount="1630" int_docActiveCodeLength="11393" int_docExpressionCount="1158" int_docLength="12061" length="1" offset="2993" startLine="127" starttimestamp="1645820509543" timestamp="181300772">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3733" _type="Delete" date="Sun Feb 27 17:43:30 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11393" docExpressionCount="1158" docLength="12061" endLine="127" length="1" offset="2993" startLine="127" starttimestamp="1645820509543" timestamp="181301054">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3734" _type="Insert" date="Sun Feb 27 17:43:30 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11394" docExpressionCount="1158" docLength="12062" length="1" offset="2993" starttimestamp="1645820509543" timestamp="181301064">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="3735" _type="Insert" date="Sun Feb 27 17:43:30 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11395" docExpressionCount="1158" docLength="12063" length="1" offset="2994" starttimestamp="1645820509543" timestamp="181301090">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="3736" _type="Insert" date="Sun Feb 27 17:43:30 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11396" docExpressionCount="1158" docLength="12064" length="1" offset="2995" starttimestamp="1645820509543" timestamp="181301097">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="3737" _type="Insert" date="Sun Feb 27 17:43:30 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11397" docExpressionCount="1158" docLength="12065" length="1" offset="2996" starttimestamp="1645820509543" timestamp="181301103">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="3738" _type="Insert" date="Sun Feb 27 17:43:30 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11398" docExpressionCount="1158" docLength="12066" length="1" offset="2997" starttimestamp="1645820509543" timestamp="181301110">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="3739" _type="Insert" date="Sun Feb 27 17:43:30 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11399" docExpressionCount="1158" docLength="12067" length="1" offset="2998" starttimestamp="1645820509543" timestamp="181301117">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="3740" _type="Insert" date="Sun Feb 27 17:43:30 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11400" docExpressionCount="1158" docLength="12068" length="1" offset="2999" starttimestamp="1645820509543" timestamp="181301124">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="3741" _type="Insert" date="Sun Feb 27 17:43:31 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11401" docExpressionCount="1158" docLength="12069" length="1" offset="3000" starttimestamp="1645820509543" timestamp="181301663">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <Command __id="3742" _type="InsertStringCommand" date="Sun Feb 27 17:43:31 EST 2022" starttimestamp="1645820509543" timestamp="181301667" timestamp2="181301667">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="3743" _type="InsertStringCommand" date="Sun Feb 27 17:43:31 EST 2022" starttimestamp="1645820509543" timestamp="181301668" timestamp2="181301668">
    <data><![CDATA[T]]></data>
  </Command>
  <DocumentChange __id="3744" _type="Insert" date="Sun Feb 27 17:43:31 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11402" docExpressionCount="1158" docLength="12070" length="1" offset="3001" starttimestamp="1645820509543" timestamp="181301850">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="3745" _type="InsertStringCommand" date="Sun Feb 27 17:43:31 EST 2022" starttimestamp="1645820509543" timestamp="181301867" timestamp2="181301867">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3746" _type="InsertStringCommand" date="Sun Feb 27 17:43:31 EST 2022" starttimestamp="1645820509543" timestamp="181301867" timestamp2="181301867">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="3747" _type="Insert" date="Sun Feb 27 17:43:31 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11403" docExpressionCount="1158" docLength="12071" length="1" offset="3002" starttimestamp="1645820509543" timestamp="181302042">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="3748" _type="InsertStringCommand" date="Sun Feb 27 17:43:31 EST 2022" starttimestamp="1645820509543" timestamp="181302046" timestamp2="181302046">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="3749" _type="InsertStringCommand" date="Sun Feb 27 17:43:31 EST 2022" starttimestamp="1645820509543" timestamp="181302046" timestamp2="181302046">
    <data><![CDATA[k]]></data>
  </Command>
  <DocumentChange __id="3750" _type="Insert" date="Sun Feb 27 17:43:31 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11404" docExpressionCount="1158" docLength="12072" length="1" offset="3003" starttimestamp="1645820509543" timestamp="181302095">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="3751" _type="InsertStringCommand" date="Sun Feb 27 17:43:31 EST 2022" starttimestamp="1645820509543" timestamp="181302101" timestamp2="181302101">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3752" _type="InsertStringCommand" date="Sun Feb 27 17:43:31 EST 2022" starttimestamp="1645820509543" timestamp="181302101" timestamp2="181302101">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="3753" _type="Insert" date="Sun Feb 27 17:43:31 EST 2022" docASTNodeCount="1630" docActiveCodeLength="11405" docExpressionCount="1158" docLength="12073" length="1" offset="3004" starttimestamp="1645820509543" timestamp="181302220">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="3754" _type="InsertStringCommand" date="Sun Feb 27 17:43:31 EST 2022" starttimestamp="1645820509543" timestamp="181302232" timestamp2="181302232">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3755" _type="InsertStringCommand" date="Sun Feb 27 17:43:31 EST 2022" starttimestamp="1645820509543" timestamp="181302232" timestamp2="181302232">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="3756" _type="Insert" date="Sun Feb 27 17:43:32 EST 2022" docASTNodeCount="1631" docActiveCodeLength="11406" docExpressionCount="1159" docLength="12074" length="1" offset="3005" starttimestamp="1645820509543" timestamp="181302700">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="3757" _type="InsertStringCommand" date="Sun Feb 27 17:43:32 EST 2022" starttimestamp="1645820509543" timestamp="181302704" timestamp2="181302704">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3758" _type="InsertStringCommand" date="Sun Feb 27 17:43:32 EST 2022" starttimestamp="1645820509543" timestamp="181302704" timestamp2="181302704">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3759" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:43:32 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="181302707" />
  <DocumentChange __id="3760" _type="Insert" date="Sun Feb 27 17:43:32 EST 2022" docASTNodeCount="1632" docActiveCodeLength="11407" docExpressionCount="1160" docLength="12075" length="1" offset="3006" starttimestamp="1645820509543" timestamp="181303265">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="3761" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:43:33 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="181303583" />
  <Command __id="3763" _type="InsertStringCommand" date="Sun Feb 27 17:43:33 EST 2022" starttimestamp="1645820509543" timestamp="181303594" timestamp2="181303594">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3764" _type="InsertStringCommand" date="Sun Feb 27 17:43:33 EST 2022" starttimestamp="1645820509543" timestamp="181303594" timestamp2="181303594">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3765" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:43:33 EST 2022" starttimestamp="1645820509543" timestamp="181304277" />
  <Command __id="3766" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:43:33 EST 2022" starttimestamp="1645820509543" timestamp="181304370" />
  <Command __id="3767" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:43:33 EST 2022" starttimestamp="1645820509543" timestamp="181304401" />
  <DocumentChange __id="3762" _type="Replace" date="Sun Feb 27 17:43:33 EST 2022" docASTNodeCount="1632" docActiveCodeLength="11414" docExpressionCount="1160" docLength="12082" endLine="127" insertionLength="8" int_docASTNodeCount="1631" int_docActiveCodeLength="11406" int_docExpressionCount="1159" int_docLength="12074" length="1" offset="3006" startLine="127" starttimestamp="1645820509543" timestamp="181303588">
    <deletedText><![CDATA[s]]></deletedText>
    <insertedText><![CDATA[spelling]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3774" _type="Insert" date="Sun Feb 27 17:43:37 EST 2022" docASTNodeCount="1632" docActiveCodeLength="11415" docExpressionCount="1160" docLength="12083" length="1" offset="2957" starttimestamp="1645820509543" timestamp="181307535">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <DocumentChange __id="3781" _type="Insert" date="Sun Feb 27 17:43:38 EST 2022" docASTNodeCount="1632" docActiveCodeLength="11416" docExpressionCount="1160" docLength="12084" length="1" offset="3277" starttimestamp="1645820509543" timestamp="181308705">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="3786" _type="Insert" date="Sun Feb 27 17:43:38 EST 2022" docASTNodeCount="1632" docActiveCodeLength="11417" docExpressionCount="1160" docLength="12085" length="1" offset="3392" starttimestamp="1645820509543" timestamp="181309439">
    <text><![CDATA[3]]></text>
  </DocumentChange>
  <Command __id="3794" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:43:40 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="181311090">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="3796" _type="RunCommand" date="Sun Feb 27 17:43:41 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181312061" type="Run" />
  <Command __id="3797" _type="RunCommand" date="Sun Feb 27 17:43:41 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181312062" type="Run" />
  <Command __id="3798" _type="RunCommand" date="Sun Feb 27 17:43:41 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181312180" type="Run" />
  <Command __id="3799" _type="RunCommand" date="Sun Feb 27 17:43:41 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181312180" type="Run" />
  <Command __id="3800" _type="EHExceptionCommand" date="Sun Feb 27 17:43:41 EST 2022" starttimestamp="1645820509543" timestamp="181312217" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
In scanner =
in here1, EQUALis******
in here2, EQUAL is**

In scanner =
in here3, EQUAL is**
Parse error: parsing expression, current token is: and its kind is: EQUAL
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="3801" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:43:47 EST 2022" docASTNodeCount="1632" docActiveCodeLength="11417" docExpressionCount="1160" docLength="12085" projectName="pa1" starttimestamp="1645820509543" timestamp="181318205">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:¶			acceptIt();¶"), Diff(DELETE,"//"), Diff(EQUAL,"			System.out.println("in here"), Diff(INSERT,"1"), Diff(EQUAL,", " + currentToken.kind"), Diff(INSERT," + "is***" + currentToken.spelling + "***""), Diff(EQUAL,");¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				System.out.println("in here"), Diff(INSERT,"2"), Diff(EQUAL,", " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				acceptIt();¶				System.out.println("in here"), Diff(INSERT,"3"), Diff(EQUAL,", " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:
			acceptIt();
			System.out.println("in here1, " + currentToken.kind + "is***" + currentToken.spelling + "***");
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				acceptIt();
				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="3802" _type="MoveCaretCommand" caretOffset="2907" date="Sun Feb 27 17:43:47 EST 2022" docOffset="2985" starttimestamp="1645820509543" timestamp="181318236" />
  <Command __id="3803" _type="MoveCaretCommand" caretOffset="2907" date="Sun Feb 27 17:43:47 EST 2022" docOffset="2985" starttimestamp="1645820509543" timestamp="181318269" />
  <Command __id="3805" _type="InsertStringCommand" date="Sun Feb 27 17:43:48 EST 2022" starttimestamp="1645820509543" timestamp="181318893" timestamp2="181318893">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3806" _type="InsertStringCommand" date="Sun Feb 27 17:43:48 EST 2022" starttimestamp="1645820509543" timestamp="181318893" timestamp2="181318893">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3807" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:43:49 EST 2022" starttimestamp="1645820509543" timestamp="181319567" />
  <Command __id="3808" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:43:49 EST 2022" starttimestamp="1645820509543" timestamp="181319669" />
  <Command __id="3809" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:43:49 EST 2022" starttimestamp="1645820509543" timestamp="181319708" />
  <Command __id="3810" _type="MoveCaretCommand" caretOffset="3114" date="Sun Feb 27 17:43:49 EST 2022" docOffset="3192" starttimestamp="1645820509543" timestamp="181320018" />
  <Command __id="3811" _type="MoveCaretCommand" caretOffset="3114" date="Sun Feb 27 17:43:49 EST 2022" docOffset="3192" starttimestamp="1645820509543" timestamp="181320018" />
  <Command __id="3812" _type="MoveCaretCommand" caretOffset="2831" date="Sun Feb 27 17:43:51 EST 2022" docOffset="2909" starttimestamp="1645820509543" timestamp="181322194" />
  <Command __id="3813" _type="MoveCaretCommand" caretOffset="2831" date="Sun Feb 27 17:43:51 EST 2022" docOffset="2909" starttimestamp="1645820509543" timestamp="181322194" />
  <Command __id="3814" _type="MoveCaretCommand" caretOffset="2852" date="Sun Feb 27 17:44:14 EST 2022" docOffset="2930" starttimestamp="1645820509543" timestamp="181344762" />
  <Command __id="3815" _type="MoveCaretCommand" caretOffset="2852" date="Sun Feb 27 17:44:14 EST 2022" docOffset="2930" starttimestamp="1645820509543" timestamp="181344762" />
  <Command __id="3816" _type="MoveCaretCommand" caretOffset="2842" date="Sun Feb 27 17:44:16 EST 2022" docOffset="2920" starttimestamp="1645820509543" timestamp="181347083" />
  <Command __id="3817" _type="MoveCaretCommand" caretOffset="2842" date="Sun Feb 27 17:44:16 EST 2022" docOffset="2920" starttimestamp="1645820509543" timestamp="181347083" />
  <Command __id="3818" _type="MoveCaretCommand" caretOffset="2831" date="Sun Feb 27 17:44:17 EST 2022" docOffset="2909" starttimestamp="1645820509543" timestamp="181347466" />
  <Command __id="3819" _type="MoveCaretCommand" caretOffset="2831" date="Sun Feb 27 17:44:17 EST 2022" docOffset="2909" starttimestamp="1645820509543" timestamp="181347466" />
  <Command __id="3821" _type="InsertStringCommand" date="Sun Feb 27 17:44:17 EST 2022" starttimestamp="1645820509543" timestamp="181348040" timestamp2="181348040">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3822" _type="InsertStringCommand" date="Sun Feb 27 17:44:17 EST 2022" starttimestamp="1645820509543" timestamp="181348040" timestamp2="181348040">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3824" _type="PasteCommand" date="Sun Feb 27 17:44:17 EST 2022" starttimestamp="1645820509543" timestamp="181348223" />
  <Command __id="3826" _type="UndoCommand" date="Sun Feb 27 17:44:18 EST 2022" starttimestamp="1645820509543" timestamp="181348952" />
  <Command __id="3827" _type="SelectTextCommand" caretOffset="2859" date="Sun Feb 27 17:44:19 EST 2022" end="2860" start="2859" starttimestamp="1645820509543" timestamp="181349842" />
  <Command __id="3828" _type="SelectTextCommand" caretOffset="2859" date="Sun Feb 27 17:44:19 EST 2022" end="2860" start="2859" starttimestamp="1645820509543" timestamp="181349842" />
  <Command __id="3829" _type="MoveCaretCommand" caretOffset="2858" date="Sun Feb 27 17:44:19 EST 2022" docOffset="2936" starttimestamp="1645820509543" timestamp="181350122" />
  <Command __id="3830" _type="MoveCaretCommand" caretOffset="2858" date="Sun Feb 27 17:44:19 EST 2022" docOffset="2936" starttimestamp="1645820509543" timestamp="181350122" />
  <Command __id="3831" _type="SelectTextCommand" caretOffset="2863" date="Sun Feb 27 17:44:19 EST 2022" end="2863" start="2857" starttimestamp="1645820509543" timestamp="181350298" />
  <Command __id="3832" _type="SelectTextCommand" caretOffset="2863" date="Sun Feb 27 17:44:19 EST 2022" end="2863" start="2857" starttimestamp="1645820509543" timestamp="181350298" />
  <Command __id="3833" _type="SelectTextCommand" caretOffset="2955" date="Sun Feb 27 17:44:20 EST 2022" end="2955" start="2854" starttimestamp="1645820509543" timestamp="181350603" />
  <Command __id="3834" _type="SelectTextCommand" caretOffset="2955" date="Sun Feb 27 17:44:20 EST 2022" end="2955" start="2854" starttimestamp="1645820509543" timestamp="181350603" />
  <Command __id="3835" _type="CopyCommand" date="Sun Feb 27 17:44:20 EST 2022" starttimestamp="1645820509543" timestamp="181351411" />
  <Command __id="3836" _type="MoveCaretCommand" caretOffset="2836" date="Sun Feb 27 17:44:21 EST 2022" docOffset="2914" starttimestamp="1645820509543" timestamp="181352002" />
  <Command __id="3837" _type="MoveCaretCommand" caretOffset="2836" date="Sun Feb 27 17:44:21 EST 2022" docOffset="2914" starttimestamp="1645820509543" timestamp="181352002" />
  <Command __id="3838" _type="MoveCaretCommand" caretOffset="2831" date="Sun Feb 27 17:44:22 EST 2022" docOffset="2909" starttimestamp="1645820509543" timestamp="181352698" />
  <Command __id="3839" _type="MoveCaretCommand" caretOffset="2831" date="Sun Feb 27 17:44:22 EST 2022" docOffset="2909" starttimestamp="1645820509543" timestamp="181352698" />
  <Command __id="3841" _type="PasteCommand" date="Sun Feb 27 17:44:22 EST 2022" starttimestamp="1645820509543" timestamp="181353229" />
  <Command __id="3842" _type="SelectTextCommand" caretOffset="2834" date="Sun Feb 27 17:44:23 EST 2022" end="2835" start="2834" starttimestamp="1645820509543" timestamp="181354306" />
  <Command __id="3843" _type="SelectTextCommand" caretOffset="2834" date="Sun Feb 27 17:44:23 EST 2022" end="2835" start="2834" starttimestamp="1645820509543" timestamp="181354307" />
  <Command __id="3844" _type="MoveCaretCommand" caretOffset="2834" date="Sun Feb 27 17:44:24 EST 2022" docOffset="2912" starttimestamp="1645820509543" timestamp="181354571" />
  <Command __id="3845" _type="MoveCaretCommand" caretOffset="2834" date="Sun Feb 27 17:44:24 EST 2022" docOffset="2912" starttimestamp="1645820509543" timestamp="181354571" />
  <Command __id="3847" _type="InsertStringCommand" date="Sun Feb 27 17:44:24 EST 2022" starttimestamp="1645820509543" timestamp="181355248" timestamp2="181355248">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3848" _type="InsertStringCommand" date="Sun Feb 27 17:44:24 EST 2022" starttimestamp="1645820509543" timestamp="181355248" timestamp2="181355248">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3849" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Sun Feb 27 17:44:25 EST 2022" starttimestamp="1645820509543" timestamp="181355714" />
  <Command __id="3850" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Sun Feb 27 17:44:25 EST 2022" starttimestamp="1645820509543" timestamp="181355714" />
  <Command __id="3852" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Sun Feb 27 17:44:25 EST 2022" starttimestamp="1645820509543" timestamp="181356284" />
  <Command __id="3854" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Sun Feb 27 17:44:26 EST 2022" starttimestamp="1645820509543" timestamp="181356657" />
  <Command __id="3855" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 17:44:26 EST 2022" starttimestamp="1645820509543" timestamp="181356986" />
  <Command __id="3856" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 17:44:26 EST 2022" starttimestamp="1645820509543" timestamp="181356986" />
  <Command __id="3857" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:26 EST 2022" starttimestamp="1645820509543" timestamp="181357180" />
  <Command __id="3858" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:26 EST 2022" starttimestamp="1645820509543" timestamp="181357180" />
  <Command __id="3859" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357691" />
  <Command __id="3860" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357691" />
  <Command __id="3861" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357723" />
  <Command __id="3862" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357724" />
  <Command __id="3863" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357755" />
  <Command __id="3864" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357756" />
  <Command __id="3865" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357785" />
  <Command __id="3866" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357785" />
  <Command __id="3867" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357818" />
  <Command __id="3868" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357818" />
  <Command __id="3869" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357850" />
  <Command __id="3870" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357855" />
  <Command __id="3871" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357881" />
  <Command __id="3872" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357881" />
  <Command __id="3873" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357928" />
  <Command __id="3874" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357928" />
  <Command __id="3875" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357959" />
  <Command __id="3876" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357959" />
  <Command __id="3877" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357990" />
  <Command __id="3878" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181357990" />
  <Command __id="3879" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358020" />
  <Command __id="3880" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358020" />
  <Command __id="3881" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358051" />
  <Command __id="3882" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358052" />
  <Command __id="3883" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358079" />
  <Command __id="3884" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358079" />
  <Command __id="3885" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358111" />
  <Command __id="3886" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358112" />
  <Command __id="3887" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358159" />
  <Command __id="3888" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358159" />
  <Command __id="3889" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358190" />
  <Command __id="3890" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358191" />
  <Command __id="3891" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358223" />
  <Command __id="3892" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358223" />
  <Command __id="3893" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358249" />
  <Command __id="3894" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358251" />
  <Command __id="3895" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358282" />
  <Command __id="3896" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358282" />
  <Command __id="3897" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358311" />
  <Command __id="3898" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358311" />
  <Command __id="3899" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358344" />
  <Command __id="3900" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358344" />
  <Command __id="3901" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358390" />
  <Command __id="3902" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358390" />
  <Command __id="3903" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358421" />
  <Command __id="3904" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358421" />
  <Command __id="3905" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358451" />
  <Command __id="3906" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:27 EST 2022" starttimestamp="1645820509543" timestamp="181358452" />
  <Command __id="3907" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:28 EST 2022" starttimestamp="1645820509543" timestamp="181358630" />
  <Command __id="3908" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:28 EST 2022" starttimestamp="1645820509543" timestamp="181358630" />
  <Command __id="3909" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:28 EST 2022" starttimestamp="1645820509543" timestamp="181358807" />
  <Command __id="3910" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:28 EST 2022" starttimestamp="1645820509543" timestamp="181358807" />
  <Command __id="3911" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:28 EST 2022" starttimestamp="1645820509543" timestamp="181358957" />
  <Command __id="3912" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:44:28 EST 2022" starttimestamp="1645820509543" timestamp="181358957" />
  <Command __id="3914" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:44:29 EST 2022" starttimestamp="1645820509543" timestamp="181359566" />
  <Command __id="3915" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:44:29 EST 2022" starttimestamp="1645820509543" timestamp="181359566" />
  <Command __id="3917" _type="InsertStringCommand" date="Sun Feb 27 17:44:29 EST 2022" starttimestamp="1645820509543" timestamp="181359871" timestamp2="181359871">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="3918" _type="InsertStringCommand" date="Sun Feb 27 17:44:29 EST 2022" starttimestamp="1645820509543" timestamp="181359871" timestamp2="181359871">
    <data><![CDATA[0]]></data>
  </Command>
  <DocumentChange __id="3804" _type="Insert" date="Sun Feb 27 17:43:48 EST 2022" docASTNodeCount="1632" docActiveCodeLength="11418" docExpressionCount="1160" docLength="12086" length="1" offset="2985" starttimestamp="1645820509543" timestamp="181318888">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3820" _type="Insert" date="Sun Feb 27 17:44:17 EST 2022" docASTNodeCount="1632" docActiveCodeLength="11423" docExpressionCount="1160" docLength="12091" length="5" offset="2909" starttimestamp="1645820509543" timestamp="181348034">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="3823" _type="Replace" date="Sun Feb 27 17:44:17 EST 2022" docASTNodeCount="1632" docActiveCodeLength="11428" docExpressionCount="1160" docLength="12096" endLine="126" insertionLength="8" int_docASTNodeCount="1632" int_docActiveCodeLength="11420" int_docExpressionCount="1160" int_docLength="12088" length="3" offset="2911" startLine="126" starttimestamp="1645820509543" timestamp="181348214">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			+ "*"]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3825" _type="Replace" date="Sun Feb 27 17:44:18 EST 2022" docASTNodeCount="1632" docActiveCodeLength="11423" docExpressionCount="1160" docLength="12091" endLine="126" insertionLength="3" int_docASTNodeCount="1632" int_docActiveCodeLength="11420" int_docExpressionCount="1160" int_docLength="12088" length="8" offset="2911" startLine="126" starttimestamp="1645820509543" timestamp="181348945">
    <deletedText><![CDATA[			+ "*"]]></deletedText>
    <insertedText><![CDATA[			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3840" _type="Insert" date="Sun Feb 27 17:44:22 EST 2022" docASTNodeCount="1648" docActiveCodeLength="11524" docExpressionCount="1175" docLength="12192" length="101" offset="2909" starttimestamp="1645820509543" timestamp="181353219">
    <text><![CDATA[			System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");
]]></text>
  </DocumentChange>
  <DocumentChange __id="3846" _type="Insert" date="Sun Feb 27 17:44:24 EST 2022" docASTNodeCount="1648" docActiveCodeLength="11529" docExpressionCount="1175" docLength="12197" length="5" offset="2912" starttimestamp="1645820509543" timestamp="181355239">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="3851" _type="Delete" date="Sun Feb 27 17:44:25 EST 2022" docASTNodeCount="1648" docActiveCodeLength="11527" docExpressionCount="1175" docLength="12195" endLine="128" length="2" offset="3015" startLine="127" starttimestamp="1645820509543" timestamp="181356281">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="3853" _type="Delete" date="Sun Feb 27 17:44:26 EST 2022" docASTNodeCount="1648" docActiveCodeLength="11522" docExpressionCount="1175" docLength="12190" endLine="128" length="5" offset="3015" startLine="127" starttimestamp="1645820509543" timestamp="181356655">
    <text><![CDATA[			
]]></text>
  </DocumentChange>
  <DocumentChange __id="3913" _type="Delete" date="Sun Feb 27 17:44:29 EST 2022" docASTNodeCount="1648" docActiveCodeLength="11521" docExpressionCount="1175" docLength="12189" endLine="126" length="1" offset="2944" startLine="126" starttimestamp="1645820509543" timestamp="181359562">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <DocumentChange __id="3916" _type="Insert" date="Sun Feb 27 17:44:29 EST 2022" docASTNodeCount="1648" docActiveCodeLength="11522" docExpressionCount="1175" docLength="12190" length="1" offset="2944" starttimestamp="1645820509543" timestamp="181359865">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <Command __id="3922" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:44:31 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="181361485">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="3924" _type="RunCommand" date="Sun Feb 27 17:44:33 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181363568" type="Run" />
  <Command __id="3925" _type="RunCommand" date="Sun Feb 27 17:44:33 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181363569" type="Run" />
  <Command __id="3926" _type="RunCommand" date="Sun Feb 27 17:44:33 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181363683" type="Run" />
  <Command __id="3927" _type="RunCommand" date="Sun Feb 27 17:44:33 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="181363683" type="Run" />
  <Command __id="3928" _type="EHExceptionCommand" date="Sun Feb 27 17:44:33 EST 2022" starttimestamp="1645820509543" timestamp="181363720" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
in here0, ID is***numErrors***
numErrors
In scanner =
in here1, EQUAL is******
in here2, EQUAL is**

In scanner =
in here3, EQUAL is**
Parse error: parsing expression, current token is: and its kind is: EQUAL
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="3929" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:44:46 EST 2022" docASTNodeCount="1648" docActiveCodeLength="11522" docExpressionCount="1175" docLength="12190" projectName="pa1" starttimestamp="1645820509543" timestamp="181377269">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:"), Diff(INSERT,"			¶			System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");"), Diff(EQUAL,"¶			acceptIt();¶			System.out.println("in here1, " + currentToken.kind + ""), Diff(INSERT," "), Diff(EQUAL,"is***" + currentToken.spelling + "***");¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				acceptIt();¶				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:			
			System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");
			acceptIt();
			System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				acceptIt();
				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="3930" _type="MoveCaretCommand" caretOffset="2847" date="Sun Feb 27 17:44:46 EST 2022" docOffset="2925" starttimestamp="1645820509543" timestamp="181377328" />
  <Command __id="3932" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 17:44:51 EST 2022" starttimestamp="1645820509543" timestamp="181381990" />
  <Command __id="3933" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:44:52 EST 2022" starttimestamp="1645820509543" timestamp="181382834" />
  <Command __id="3934" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:44:52 EST 2022" starttimestamp="1645820509543" timestamp="181382936" />
  <Command __id="3935" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:44:52 EST 2022" starttimestamp="1645820509543" timestamp="181382950" />
  <DocumentChange __id="3931" _type="Insert" date="Sun Feb 27 17:44:51 EST 2022" docASTNodeCount="1632" docActiveCodeLength="11423" docExpressionCount="1160" docLength="12192" length="2" offset="2914" starttimestamp="1645820509543" timestamp="181381957">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="3936" _type="MoveCaretCommand" caretOffset="2945" date="Sun Feb 27 17:44:55 EST 2022" docOffset="3023" starttimestamp="1645820509543" timestamp="181386419" />
  <Command __id="3937" _type="MoveCaretCommand" caretOffset="2945" date="Sun Feb 27 17:44:55 EST 2022" docOffset="3023" starttimestamp="1645820509543" timestamp="181386419" />
  <Command __id="3938" _type="MoveCaretCommand" caretOffset="2945" date="Sun Feb 27 17:44:56 EST 2022" docOffset="3023" starttimestamp="1645820509543" timestamp="181386586" />
  <Command __id="3939" _type="MoveCaretCommand" caretOffset="2945" date="Sun Feb 27 17:44:56 EST 2022" docOffset="3023" starttimestamp="1645820509543" timestamp="181386587" />
  <Command __id="3940" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sun Feb 27 17:44:57 EST 2022" starttimestamp="1645820509543" timestamp="181387553" />
  <Command __id="3941" _type="MoveCaretCommand" caretOffset="10888" date="Sun Feb 27 17:44:58 EST 2022" docOffset="10966" starttimestamp="1645820509543" timestamp="181388530" />
  <Command __id="3942" _type="MoveCaretCommand" caretOffset="10888" date="Sun Feb 27 17:44:58 EST 2022" docOffset="10966" starttimestamp="1645820509543" timestamp="181388530" />
  <Command __id="3945" _type="MoveCaretCommand" caretOffset="5593" date="Sun Feb 27 17:45:11 EST 2022" docOffset="5744" starttimestamp="1645820509543" timestamp="181401778" />
  <Command __id="3946" _type="MoveCaretCommand" caretOffset="5125" date="Sun Feb 27 17:45:12 EST 2022" docOffset="5276" starttimestamp="1645820509543" timestamp="181403074" />
  <Command __id="3947" _type="MoveCaretCommand" caretOffset="5125" date="Sun Feb 27 17:45:12 EST 2022" docOffset="5276" starttimestamp="1645820509543" timestamp="181403074" />
  <Command __id="3948" _type="MoveCaretCommand" caretOffset="3102" date="Sun Feb 27 17:45:46 EST 2022" docOffset="3253" starttimestamp="1645820509543" timestamp="181436987" />
  <Command __id="3949" _type="MoveCaretCommand" caretOffset="3102" date="Sun Feb 27 17:45:46 EST 2022" docOffset="3253" starttimestamp="1645820509543" timestamp="181436987" />
  <Command __id="3950" _type="MoveCaretCommand" caretOffset="2893" date="Sun Feb 27 17:45:47 EST 2022" docOffset="3044" starttimestamp="1645820509543" timestamp="181437795" />
  <Command __id="3951" _type="MoveCaretCommand" caretOffset="2893" date="Sun Feb 27 17:45:47 EST 2022" docOffset="3044" starttimestamp="1645820509543" timestamp="181437795" />
  <Command __id="3953" _type="ShellCommand" date="Sun Feb 27 17:45:47 EST 2022" starttimestamp="1645820509543" timestamp="181438430" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3954" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:45:51 EST 2022" forward="false" matchWord="true" offset="3044" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181441458" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3955" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:45:52 EST 2022" forward="false" matchWord="true" offset="3044" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181443156" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3956" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:45:52 EST 2022" forward="false" matchWord="true" offset="3044" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181443436" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3957" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:45:53 EST 2022" forward="false" matchWord="true" offset="3044" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181443603" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3958" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:45:54 EST 2022" forward="true" matchWord="true" offset="3044" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181444708" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3959" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:45:54 EST 2022" forward="true" matchWord="true" offset="5743" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181445276" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3960" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:45:54 EST 2022" forward="true" matchWord="true" offset="5743" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181445452" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3961" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:45:55 EST 2022" forward="true" matchWord="true" offset="5743" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="181445668" wrapSearch="false">
    <searchString><![CDATA[EQUAL]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="3962" _type="ShellCommand" date="Sun Feb 27 17:45:56 EST 2022" starttimestamp="1645820509543" timestamp="181447014" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3963" _type="MoveCaretCommand" caretOffset="5541" date="Sun Feb 27 17:45:57 EST 2022" docOffset="5692" starttimestamp="1645820509543" timestamp="181447658" />
  <Command __id="3964" _type="MoveCaretCommand" caretOffset="5541" date="Sun Feb 27 17:45:57 EST 2022" docOffset="5692" starttimestamp="1645820509543" timestamp="181447658" />
  <Command __id="3965" _type="SelectTextCommand" caretOffset="5570" date="Sun Feb 27 17:46:26 EST 2022" end="5593" start="5570" starttimestamp="1645820509543" timestamp="181477026" />
  <Command __id="3966" _type="SelectTextCommand" caretOffset="5570" date="Sun Feb 27 17:46:26 EST 2022" end="5593" start="5570" starttimestamp="1645820509543" timestamp="181477026" />
  <Command __id="3943" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:45:10 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="181401335">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="3944" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:45:11 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7932" docExpressionCount="683" docLength="8662" projectName="pa1" starttimestamp="1645820509543" timestamp="181401689">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	        	if(currentChar == '=') {¶	        		System.out.println("In scanner " +  currentChar);¶	        		return TokenKind.EQUAL;¶	        	}¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3967" _type="MoveCaretCommand" caretOffset="5459" date="Sun Feb 27 17:46:34 EST 2022" docOffset="5610" starttimestamp="1645820509543" timestamp="181484771" />
  <Command __id="3968" _type="MoveCaretCommand" caretOffset="5459" date="Sun Feb 27 17:46:34 EST 2022" docOffset="5610" starttimestamp="1645820509543" timestamp="181484771" />
  <DocumentChange __id="3969" _type="Insert" date="Sun Feb 27 17:46:36 EST 2022" docASTNodeCount="1096" docActiveCodeLength="7944" docExpressionCount="683" docLength="8674" length="12" offset="5610" starttimestamp="1645820509543" timestamp="181486457">
    <text><![CDATA[
	        	]]></text>
  </DocumentChange>
  <Command __id="3970" _type="InsertStringCommand" date="Sun Feb 27 17:46:36 EST 2022" starttimestamp="1645820509543" timestamp="181486466" timestamp2="181486466">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3971" _type="InsertStringCommand" date="Sun Feb 27 17:46:36 EST 2022" starttimestamp="1645820509543" timestamp="181486466" timestamp2="181486466">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="3972" _type="Insert" date="Sun Feb 27 17:46:36 EST 2022" docASTNodeCount="1098" docActiveCodeLength="7945" docExpressionCount="684" docLength="8675" length="1" offset="5622" starttimestamp="1645820509543" timestamp="181486654">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="3973" _type="InsertStringCommand" date="Sun Feb 27 17:46:36 EST 2022" starttimestamp="1645820509543" timestamp="181486658" timestamp2="181486658">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="3974" _type="InsertStringCommand" date="Sun Feb 27 17:46:36 EST 2022" starttimestamp="1645820509543" timestamp="181486658" timestamp2="181486658">
    <data><![CDATA[b]]></data>
  </Command>
  <DocumentChange __id="3975" _type="Insert" date="Sun Feb 27 17:46:36 EST 2022" docASTNodeCount="1098" docActiveCodeLength="7946" docExpressionCount="684" docLength="8676" length="1" offset="5623" starttimestamp="1645820509543" timestamp="181486782">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="3976" _type="InsertStringCommand" date="Sun Feb 27 17:46:36 EST 2022" starttimestamp="1645820509543" timestamp="181486786" timestamp2="181486786">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3977" _type="InsertStringCommand" date="Sun Feb 27 17:46:36 EST 2022" starttimestamp="1645820509543" timestamp="181486787" timestamp2="181486787">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="3978" _type="Insert" date="Sun Feb 27 17:46:36 EST 2022" docASTNodeCount="1098" docActiveCodeLength="7947" docExpressionCount="684" docLength="8677" length="1" offset="5624" starttimestamp="1645820509543" timestamp="181486954">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="3979" _type="InsertStringCommand" date="Sun Feb 27 17:46:36 EST 2022" starttimestamp="1645820509543" timestamp="181486957" timestamp2="181486957">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3980" _type="InsertStringCommand" date="Sun Feb 27 17:46:36 EST 2022" starttimestamp="1645820509543" timestamp="181486957" timestamp2="181486957">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="3981" _type="Insert" date="Sun Feb 27 17:46:36 EST 2022" docASTNodeCount="1098" docActiveCodeLength="7948" docExpressionCount="684" docLength="8678" length="1" offset="5625" starttimestamp="1645820509543" timestamp="181487434">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="3982" _type="InsertStringCommand" date="Sun Feb 27 17:46:36 EST 2022" starttimestamp="1645820509543" timestamp="181487437" timestamp2="181487437">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3983" _type="InsertStringCommand" date="Sun Feb 27 17:46:36 EST 2022" starttimestamp="1645820509543" timestamp="181487437" timestamp2="181487437">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="3984" _type="Insert" date="Sun Feb 27 17:46:37 EST 2022" docASTNodeCount="1098" docActiveCodeLength="7949" docExpressionCount="684" docLength="8679" length="1" offset="5626" starttimestamp="1645820509543" timestamp="181487501">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="3985" _type="InsertStringCommand" date="Sun Feb 27 17:46:37 EST 2022" starttimestamp="1645820509543" timestamp="181487506" timestamp2="181487506">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3986" _type="InsertStringCommand" date="Sun Feb 27 17:46:37 EST 2022" starttimestamp="1645820509543" timestamp="181487506" timestamp2="181487506">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="3987" _type="Insert" date="Sun Feb 27 17:46:37 EST 2022" docASTNodeCount="1098" docActiveCodeLength="7950" docExpressionCount="684" docLength="8680" length="1" offset="5627" starttimestamp="1645820509543" timestamp="181487595">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="3988" _type="InsertStringCommand" date="Sun Feb 27 17:46:37 EST 2022" starttimestamp="1645820509543" timestamp="181487606" timestamp2="181487606">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3989" _type="InsertStringCommand" date="Sun Feb 27 17:46:37 EST 2022" starttimestamp="1645820509543" timestamp="181487606" timestamp2="181487606">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="3990" _type="Insert" date="Sun Feb 27 17:46:37 EST 2022" docASTNodeCount="1100" docActiveCodeLength="7951" docExpressionCount="684" docLength="8681" length="1" offset="5628" starttimestamp="1645820509543" timestamp="181487673">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="3991" _type="InsertStringCommand" date="Sun Feb 27 17:46:37 EST 2022" starttimestamp="1645820509543" timestamp="181487677" timestamp2="181487677">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3992" _type="InsertStringCommand" date="Sun Feb 27 17:46:37 EST 2022" starttimestamp="1645820509543" timestamp="181487677" timestamp2="181487677">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="3993" _type="Insert" date="Sun Feb 27 17:46:37 EST 2022" docASTNodeCount="1100" docActiveCodeLength="7952" docExpressionCount="684" docLength="8682" length="1" offset="5629" starttimestamp="1645820509543" timestamp="181487875">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3994" _type="InsertStringCommand" date="Sun Feb 27 17:46:37 EST 2022" starttimestamp="1645820509543" timestamp="181487886" timestamp2="181487886">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3995" _type="InsertStringCommand" date="Sun Feb 27 17:46:37 EST 2022" starttimestamp="1645820509543" timestamp="181487886" timestamp2="181487886">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3996" _type="Insert" date="Sun Feb 27 17:46:38 EST 2022" docASTNodeCount="1100" docActiveCodeLength="7953" docExpressionCount="684" docLength="8683" length="1" offset="5630" starttimestamp="1645820509543" timestamp="181488940">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="3997" _type="InsertStringCommand" date="Sun Feb 27 17:46:38 EST 2022" starttimestamp="1645820509543" timestamp="181488951" timestamp2="181488951">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3998" _type="InsertStringCommand" date="Sun Feb 27 17:46:38 EST 2022" starttimestamp="1645820509543" timestamp="181488951" timestamp2="181488951">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="3999" _type="Insert" date="Sun Feb 27 17:46:38 EST 2022" docASTNodeCount="1100" docActiveCodeLength="7954" docExpressionCount="684" docLength="8684" length="1" offset="5631" starttimestamp="1645820509543" timestamp="181489011">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="4000" _type="InsertStringCommand" date="Sun Feb 27 17:46:38 EST 2022" starttimestamp="1645820509543" timestamp="181489022" timestamp2="181489022">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4001" _type="InsertStringCommand" date="Sun Feb 27 17:46:38 EST 2022" starttimestamp="1645820509543" timestamp="181489022" timestamp2="181489022">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="4002" _type="Insert" date="Sun Feb 27 17:46:38 EST 2022" docASTNodeCount="1100" docActiveCodeLength="7955" docExpressionCount="684" docLength="8685" length="1" offset="5632" starttimestamp="1645820509543" timestamp="181489145">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4003" _type="InsertStringCommand" date="Sun Feb 27 17:46:38 EST 2022" starttimestamp="1645820509543" timestamp="181489148" timestamp2="181489148">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4004" _type="InsertStringCommand" date="Sun Feb 27 17:46:38 EST 2022" starttimestamp="1645820509543" timestamp="181489148" timestamp2="181489148">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4005" _type="Delete" date="Sun Feb 27 17:46:39 EST 2022" docASTNodeCount="1100" docActiveCodeLength="7954" docExpressionCount="684" docLength="8684" endLine="239" length="1" offset="5632" startLine="239" starttimestamp="1645820509543" timestamp="181489718">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4006" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:46:39 EST 2022" starttimestamp="1645820509543" timestamp="181489720" />
  <Command __id="4007" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:46:39 EST 2022" starttimestamp="1645820509543" timestamp="181489720" />
  <DocumentChange __id="4008" _type="Insert" date="Sun Feb 27 17:46:39 EST 2022" docASTNodeCount="1100" docActiveCodeLength="7955" docExpressionCount="684" docLength="8685" length="1" offset="5632" starttimestamp="1645820509543" timestamp="181489789">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="4009" _type="InsertStringCommand" date="Sun Feb 27 17:46:39 EST 2022" starttimestamp="1645820509543" timestamp="181489794" timestamp2="181489794">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="4010" _type="InsertStringCommand" date="Sun Feb 27 17:46:39 EST 2022" starttimestamp="1645820509543" timestamp="181489794" timestamp2="181489794">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="4011" _type="Insert" date="Sun Feb 27 17:46:39 EST 2022" docASTNodeCount="1100" docActiveCodeLength="7956" docExpressionCount="684" docLength="8686" length="1" offset="5633" starttimestamp="1645820509543" timestamp="181490217">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <Command __id="4012" _type="InsertStringCommand" date="Sun Feb 27 17:46:39 EST 2022" starttimestamp="1645820509543" timestamp="181490223" timestamp2="181490223">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="4013" _type="InsertStringCommand" date="Sun Feb 27 17:46:39 EST 2022" starttimestamp="1645820509543" timestamp="181490223" timestamp2="181490223">
    <data><![CDATA[q]]></data>
  </Command>
  <DocumentChange __id="4014" _type="Insert" date="Sun Feb 27 17:46:39 EST 2022" docASTNodeCount="1100" docActiveCodeLength="7957" docExpressionCount="684" docLength="8687" length="1" offset="5634" starttimestamp="1645820509543" timestamp="181490378">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="4015" _type="InsertStringCommand" date="Sun Feb 27 17:46:39 EST 2022" starttimestamp="1645820509543" timestamp="181490382" timestamp2="181490382">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="4016" _type="InsertStringCommand" date="Sun Feb 27 17:46:39 EST 2022" starttimestamp="1645820509543" timestamp="181490382" timestamp2="181490382">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="4017" _type="Insert" date="Sun Feb 27 17:46:40 EST 2022" docASTNodeCount="1100" docActiveCodeLength="7958" docExpressionCount="684" docLength="8688" length="1" offset="5635" starttimestamp="1645820509543" timestamp="181490466">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="4018" _type="InsertStringCommand" date="Sun Feb 27 17:46:40 EST 2022" starttimestamp="1645820509543" timestamp="181490470" timestamp2="181490470">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4019" _type="InsertStringCommand" date="Sun Feb 27 17:46:40 EST 2022" starttimestamp="1645820509543" timestamp="181490470" timestamp2="181490470">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="4020" _type="Insert" date="Sun Feb 27 17:46:40 EST 2022" docASTNodeCount="1100" docActiveCodeLength="7959" docExpressionCount="684" docLength="8689" length="1" offset="5636" starttimestamp="1645820509543" timestamp="181490575">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="4021" _type="InsertStringCommand" date="Sun Feb 27 17:46:40 EST 2022" starttimestamp="1645820509543" timestamp="181490578" timestamp2="181490578">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4022" _type="InsertStringCommand" date="Sun Feb 27 17:46:40 EST 2022" starttimestamp="1645820509543" timestamp="181490579" timestamp2="181490579">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="4023" _type="Insert" date="Sun Feb 27 17:46:40 EST 2022" docASTNodeCount="1100" docActiveCodeLength="7960" docExpressionCount="684" docLength="8690" length="1" offset="5637" starttimestamp="1645820509543" timestamp="181491025">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4024" _type="InsertStringCommand" date="Sun Feb 27 17:46:40 EST 2022" starttimestamp="1645820509543" timestamp="181491029" timestamp2="181491029">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4025" _type="InsertStringCommand" date="Sun Feb 27 17:46:40 EST 2022" starttimestamp="1645820509543" timestamp="181491029" timestamp2="181491029">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4026" _type="Insert" date="Sun Feb 27 17:46:40 EST 2022" docASTNodeCount="1100" docActiveCodeLength="7961" docExpressionCount="684" docLength="8691" length="1" offset="5638" starttimestamp="1645820509543" timestamp="181491211">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="4027" _type="InsertStringCommand" date="Sun Feb 27 17:46:40 EST 2022" starttimestamp="1645820509543" timestamp="181491222" timestamp2="181491222">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="4028" _type="InsertStringCommand" date="Sun Feb 27 17:46:40 EST 2022" starttimestamp="1645820509543" timestamp="181491223" timestamp2="181491223">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="4029" _type="Insert" date="Sun Feb 27 17:46:40 EST 2022" docASTNodeCount="1100" docActiveCodeLength="7962" docExpressionCount="684" docLength="8692" length="1" offset="5639" starttimestamp="1645820509543" timestamp="181491291">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4030" _type="InsertStringCommand" date="Sun Feb 27 17:46:40 EST 2022" starttimestamp="1645820509543" timestamp="181491303" timestamp2="181491303">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4031" _type="InsertStringCommand" date="Sun Feb 27 17:46:40 EST 2022" starttimestamp="1645820509543" timestamp="181491303" timestamp2="181491303">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4032" _type="Insert" date="Sun Feb 27 17:46:40 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7963" docExpressionCount="685" docLength="8693" length="1" offset="5640" starttimestamp="1645820509543" timestamp="181491409">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="4033" _type="InsertStringCommand" date="Sun Feb 27 17:46:40 EST 2022" starttimestamp="1645820509543" timestamp="181491413" timestamp2="181491413">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4034" _type="InsertStringCommand" date="Sun Feb 27 17:46:40 EST 2022" starttimestamp="1645820509543" timestamp="181491413" timestamp2="181491413">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="4035" _type="Insert" date="Sun Feb 27 17:46:41 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7964" docExpressionCount="685" docLength="8694" length="1" offset="5641" starttimestamp="1645820509543" timestamp="181491508">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="4036" _type="InsertStringCommand" date="Sun Feb 27 17:46:41 EST 2022" starttimestamp="1645820509543" timestamp="181491520" timestamp2="181491520">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4037" _type="InsertStringCommand" date="Sun Feb 27 17:46:41 EST 2022" starttimestamp="1645820509543" timestamp="181491520" timestamp2="181491520">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="4038" _type="Insert" date="Sun Feb 27 17:46:41 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7965" docExpressionCount="685" docLength="8695" length="1" offset="5642" starttimestamp="1645820509543" timestamp="181491567">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="4039" _type="InsertStringCommand" date="Sun Feb 27 17:46:41 EST 2022" starttimestamp="1645820509543" timestamp="181491571" timestamp2="181491571">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4040" _type="InsertStringCommand" date="Sun Feb 27 17:46:41 EST 2022" starttimestamp="1645820509543" timestamp="181491571" timestamp2="181491571">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="4041" _type="Insert" date="Sun Feb 27 17:46:41 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7966" docExpressionCount="685" docLength="8696" length="1" offset="5643" starttimestamp="1645820509543" timestamp="181491684">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="4042" _type="InsertStringCommand" date="Sun Feb 27 17:46:41 EST 2022" starttimestamp="1645820509543" timestamp="181491695" timestamp2="181491695">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4043" _type="InsertStringCommand" date="Sun Feb 27 17:46:41 EST 2022" starttimestamp="1645820509543" timestamp="181491696" timestamp2="181491696">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="4044" _type="Insert" date="Sun Feb 27 17:46:41 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7967" docExpressionCount="685" docLength="8697" length="1" offset="5644" starttimestamp="1645820509543" timestamp="181491793">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4045" _type="InsertStringCommand" date="Sun Feb 27 17:46:41 EST 2022" starttimestamp="1645820509543" timestamp="181491797" timestamp2="181491797">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4046" _type="InsertStringCommand" date="Sun Feb 27 17:46:41 EST 2022" starttimestamp="1645820509543" timestamp="181491797" timestamp2="181491797">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4048" _type="InsertStringCommand" date="Sun Feb 27 17:46:41 EST 2022" starttimestamp="1645820509543" timestamp="181492045" timestamp2="181492045">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4049" _type="InsertStringCommand" date="Sun Feb 27 17:46:41 EST 2022" starttimestamp="1645820509543" timestamp="181492045" timestamp2="181492045">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="4047" _type="Insert" date="Sun Feb 27 17:46:41 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7968" docExpressionCount="685" docLength="8698" length="1" offset="5645" starttimestamp="1645820509543" timestamp="181492041">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="4050" _type="SelectTextCommand" caretOffset="5606" date="Sun Feb 27 17:46:44 EST 2022" end="5629" start="5606" starttimestamp="1645820509543" timestamp="181494739" />
  <Command __id="4051" _type="SelectTextCommand" caretOffset="5606" date="Sun Feb 27 17:46:44 EST 2022" end="5629" start="5606" starttimestamp="1645820509543" timestamp="181494739" />
  <DocumentChange __id="4052" _type="Replace" date="Sun Feb 27 17:46:46 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7946" docExpressionCount="683" docLength="8676" endLine="242" insertionLength="1" int_docASTNodeCount="1097" int_docActiveCodeLength="7945" int_docExpressionCount="682" int_docLength="8675" length="23" offset="5757" startLine="242" starttimestamp="1645820509543" timestamp="181497177">
    <deletedText><![CDATA[return TokenKind.EQUAL;]]></deletedText>
    <insertedText><![CDATA[i]]></insertedText>
  </DocumentChange>
  <Command __id="4053" _type="InsertStringCommand" date="Sun Feb 27 17:46:46 EST 2022" starttimestamp="1645820509543" timestamp="181497184" timestamp2="181497184">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4054" _type="InsertStringCommand" date="Sun Feb 27 17:46:46 EST 2022" starttimestamp="1645820509543" timestamp="181497184" timestamp2="181497184">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="4055" _type="Insert" date="Sun Feb 27 17:46:46 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7947" docExpressionCount="683" docLength="8677" length="1" offset="5758" starttimestamp="1645820509543" timestamp="181497283">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="4056" _type="InsertStringCommand" date="Sun Feb 27 17:46:46 EST 2022" starttimestamp="1645820509543" timestamp="181497294" timestamp2="181497294">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4057" _type="InsertStringCommand" date="Sun Feb 27 17:46:46 EST 2022" starttimestamp="1645820509543" timestamp="181497294" timestamp2="181497294">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="4058" _type="Insert" date="Sun Feb 27 17:46:47 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7948" docExpressionCount="683" docLength="8678" length="1" offset="5759" starttimestamp="1645820509543" timestamp="181497705">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="4059" _type="InsertStringCommand" date="Sun Feb 27 17:46:47 EST 2022" starttimestamp="1645820509543" timestamp="181497709" timestamp2="181497709">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="4060" _type="InsertStringCommand" date="Sun Feb 27 17:46:47 EST 2022" starttimestamp="1645820509543" timestamp="181497709" timestamp2="181497709">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="4061" _type="Insert" date="Sun Feb 27 17:46:47 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7949" docExpressionCount="683" docLength="8679" length="1" offset="5760" starttimestamp="1645820509543" timestamp="181498298">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <Command __id="4062" _type="InsertStringCommand" date="Sun Feb 27 17:46:47 EST 2022" starttimestamp="1645820509543" timestamp="181498301" timestamp2="181498301">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="4063" _type="InsertStringCommand" date="Sun Feb 27 17:46:47 EST 2022" starttimestamp="1645820509543" timestamp="181498302" timestamp2="181498302">
    <data><![CDATA[w]]></data>
  </Command>
  <DocumentChange __id="4064" _type="Insert" date="Sun Feb 27 17:46:47 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7950" docExpressionCount="683" docLength="8680" length="1" offset="5761" starttimestamp="1645820509543" timestamp="181498310">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <Command __id="4065" _type="InsertStringCommand" date="Sun Feb 27 17:46:47 EST 2022" starttimestamp="1645820509543" timestamp="181498314" timestamp2="181498314">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="4066" _type="InsertStringCommand" date="Sun Feb 27 17:46:47 EST 2022" starttimestamp="1645820509543" timestamp="181498314" timestamp2="181498314">
    <data><![CDATA[q]]></data>
  </Command>
  <DocumentChange __id="4067" _type="Insert" date="Sun Feb 27 17:46:47 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7951" docExpressionCount="683" docLength="8681" length="1" offset="5762" starttimestamp="1645820509543" timestamp="181498435">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="4068" _type="InsertStringCommand" date="Sun Feb 27 17:46:47 EST 2022" starttimestamp="1645820509543" timestamp="181498446" timestamp2="181498446">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="4069" _type="InsertStringCommand" date="Sun Feb 27 17:46:47 EST 2022" starttimestamp="1645820509543" timestamp="181498446" timestamp2="181498446">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="4070" _type="Insert" date="Sun Feb 27 17:46:48 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7952" docExpressionCount="683" docLength="8682" length="1" offset="5763" starttimestamp="1645820509543" timestamp="181498548">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="4071" _type="InsertStringCommand" date="Sun Feb 27 17:46:48 EST 2022" starttimestamp="1645820509543" timestamp="181498558" timestamp2="181498558">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4072" _type="InsertStringCommand" date="Sun Feb 27 17:46:48 EST 2022" starttimestamp="1645820509543" timestamp="181498558" timestamp2="181498558">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="4073" _type="Delete" date="Sun Feb 27 17:46:48 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7951" docExpressionCount="683" docLength="8681" endLine="242" length="1" offset="5763" startLine="242" starttimestamp="1645820509543" timestamp="181498801">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="4074" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:46:48 EST 2022" starttimestamp="1645820509543" timestamp="181498804" />
  <Command __id="4075" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:46:48 EST 2022" starttimestamp="1645820509543" timestamp="181498804" />
  <DocumentChange __id="4076" _type="Delete" date="Sun Feb 27 17:46:48 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7950" docExpressionCount="683" docLength="8680" endLine="242" length="1" offset="5762" startLine="242" starttimestamp="1645820509543" timestamp="181498946">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="4077" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:46:48 EST 2022" starttimestamp="1645820509543" timestamp="181498948" />
  <Command __id="4078" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:46:48 EST 2022" starttimestamp="1645820509543" timestamp="181498948" />
  <DocumentChange __id="4079" _type="Delete" date="Sun Feb 27 17:46:48 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7949" docExpressionCount="683" docLength="8679" endLine="242" length="1" offset="5761" startLine="242" starttimestamp="1645820509543" timestamp="181499113">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <Command __id="4080" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:46:48 EST 2022" starttimestamp="1645820509543" timestamp="181499115" />
  <Command __id="4081" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:46:48 EST 2022" starttimestamp="1645820509543" timestamp="181499115" />
  <DocumentChange __id="4082" _type="Delete" date="Sun Feb 27 17:46:48 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7948" docExpressionCount="683" docLength="8678" endLine="242" length="1" offset="5760" startLine="242" starttimestamp="1645820509543" timestamp="181499267">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <Command __id="4083" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:46:48 EST 2022" starttimestamp="1645820509543" timestamp="181499272" />
  <Command __id="4084" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:46:48 EST 2022" starttimestamp="1645820509543" timestamp="181499273" />
  <DocumentChange __id="4085" _type="Insert" date="Sun Feb 27 17:46:48 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7949" docExpressionCount="683" docLength="8679" length="1" offset="5760" starttimestamp="1645820509543" timestamp="181499385">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <Command __id="4086" _type="InsertStringCommand" date="Sun Feb 27 17:46:48 EST 2022" starttimestamp="1645820509543" timestamp="181499389" timestamp2="181499389">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="4087" _type="InsertStringCommand" date="Sun Feb 27 17:46:48 EST 2022" starttimestamp="1645820509543" timestamp="181499389" timestamp2="181499389">
    <data><![CDATA[q]]></data>
  </Command>
  <DocumentChange __id="4088" _type="Insert" date="Sun Feb 27 17:46:49 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7950" docExpressionCount="683" docLength="8680" length="1" offset="5761" starttimestamp="1645820509543" timestamp="181499750">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="4089" _type="InsertStringCommand" date="Sun Feb 27 17:46:49 EST 2022" starttimestamp="1645820509543" timestamp="181499755" timestamp2="181499755">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="4090" _type="InsertStringCommand" date="Sun Feb 27 17:46:49 EST 2022" starttimestamp="1645820509543" timestamp="181499755" timestamp2="181499755">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="4091" _type="Insert" date="Sun Feb 27 17:46:49 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7951" docExpressionCount="683" docLength="8681" length="1" offset="5762" starttimestamp="1645820509543" timestamp="181499881">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="4092" _type="InsertStringCommand" date="Sun Feb 27 17:46:49 EST 2022" starttimestamp="1645820509543" timestamp="181499885" timestamp2="181499885">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4093" _type="InsertStringCommand" date="Sun Feb 27 17:46:49 EST 2022" starttimestamp="1645820509543" timestamp="181499886" timestamp2="181499886">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="4094" _type="Insert" date="Sun Feb 27 17:46:49 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7952" docExpressionCount="683" docLength="8682" length="1" offset="5763" starttimestamp="1645820509543" timestamp="181499988">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="4095" _type="InsertStringCommand" date="Sun Feb 27 17:46:49 EST 2022" starttimestamp="1645820509543" timestamp="181499999" timestamp2="181499999">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4096" _type="InsertStringCommand" date="Sun Feb 27 17:46:49 EST 2022" starttimestamp="1645820509543" timestamp="181499999" timestamp2="181499999">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="4097" _type="Insert" date="Sun Feb 27 17:46:50 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7953" docExpressionCount="683" docLength="8683" length="1" offset="5764" starttimestamp="1645820509543" timestamp="181500486">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4098" _type="InsertStringCommand" date="Sun Feb 27 17:46:50 EST 2022" starttimestamp="1645820509543" timestamp="181500492" timestamp2="181500492">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4099" _type="InsertStringCommand" date="Sun Feb 27 17:46:50 EST 2022" starttimestamp="1645820509543" timestamp="181500492" timestamp2="181500492">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4100" _type="Insert" date="Sun Feb 27 17:46:50 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7954" docExpressionCount="684" docLength="8684" length="1" offset="5765" starttimestamp="1645820509543" timestamp="181500714">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="4101" _type="InsertStringCommand" date="Sun Feb 27 17:46:50 EST 2022" starttimestamp="1645820509543" timestamp="181500718" timestamp2="181500718">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="4102" _type="InsertStringCommand" date="Sun Feb 27 17:46:50 EST 2022" starttimestamp="1645820509543" timestamp="181500718" timestamp2="181500718">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="4103" _type="Insert" date="Sun Feb 27 17:46:50 EST 2022" docASTNodeCount="1097" docActiveCodeLength="7955" docExpressionCount="682" docLength="8685" length="1" offset="5766" starttimestamp="1645820509543" timestamp="181500897">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="4104" _type="InsertStringCommand" date="Sun Feb 27 17:46:50 EST 2022" starttimestamp="1645820509543" timestamp="181500901" timestamp2="181500901">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="4105" _type="InsertStringCommand" date="Sun Feb 27 17:46:50 EST 2022" starttimestamp="1645820509543" timestamp="181500901" timestamp2="181500901">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="4106" _type="Delete" date="Sun Feb 27 17:46:50 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7954" docExpressionCount="684" docLength="8684" endLine="242" length="1" offset="5766" startLine="242" starttimestamp="1645820509543" timestamp="181501386">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="4107" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:46:50 EST 2022" starttimestamp="1645820509543" timestamp="181501388" />
  <Command __id="4108" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:46:50 EST 2022" starttimestamp="1645820509543" timestamp="181501388" />
  <DocumentChange __id="4109" _type="Insert" date="Sun Feb 27 17:46:51 EST 2022" docASTNodeCount="1099" docActiveCodeLength="7955" docExpressionCount="684" docLength="8685" length="1" offset="5766" starttimestamp="1645820509543" timestamp="181501738">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4110" _type="InsertStringCommand" date="Sun Feb 27 17:46:51 EST 2022" starttimestamp="1645820509543" timestamp="181501742" timestamp2="181501742">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4111" _type="InsertStringCommand" date="Sun Feb 27 17:46:51 EST 2022" starttimestamp="1645820509543" timestamp="181501742" timestamp2="181501742">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4112" _type="Insert" date="Sun Feb 27 17:46:51 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7956" docExpressionCount="685" docLength="8686" length="1" offset="5767" starttimestamp="1645820509543" timestamp="181501955">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="4113" _type="InsertStringCommand" date="Sun Feb 27 17:46:51 EST 2022" starttimestamp="1645820509543" timestamp="181501966" timestamp2="181501966">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4114" _type="InsertStringCommand" date="Sun Feb 27 17:46:51 EST 2022" starttimestamp="1645820509543" timestamp="181501966" timestamp2="181501966">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="4115" _type="Insert" date="Sun Feb 27 17:46:51 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7957" docExpressionCount="685" docLength="8687" length="1" offset="5768" starttimestamp="1645820509543" timestamp="181502129">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="4116" _type="InsertStringCommand" date="Sun Feb 27 17:46:51 EST 2022" starttimestamp="1645820509543" timestamp="181502134" timestamp2="181502134">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4117" _type="InsertStringCommand" date="Sun Feb 27 17:46:51 EST 2022" starttimestamp="1645820509543" timestamp="181502134" timestamp2="181502134">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="4118" _type="Insert" date="Sun Feb 27 17:46:51 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7958" docExpressionCount="685" docLength="8688" length="1" offset="5769" starttimestamp="1645820509543" timestamp="181502265">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="4119" _type="InsertStringCommand" date="Sun Feb 27 17:46:51 EST 2022" starttimestamp="1645820509543" timestamp="181502269" timestamp2="181502269">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="4120" _type="InsertStringCommand" date="Sun Feb 27 17:46:51 EST 2022" starttimestamp="1645820509543" timestamp="181502269" timestamp2="181502269">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="4121" _type="Insert" date="Sun Feb 27 17:46:51 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7959" docExpressionCount="685" docLength="8689" length="1" offset="5770" starttimestamp="1645820509543" timestamp="181502337">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4122" _type="InsertStringCommand" date="Sun Feb 27 17:46:51 EST 2022" starttimestamp="1645820509543" timestamp="181502342" timestamp2="181502342">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4123" _type="InsertStringCommand" date="Sun Feb 27 17:46:51 EST 2022" starttimestamp="1645820509543" timestamp="181502342" timestamp2="181502342">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4125" _type="InsertStringCommand" date="Sun Feb 27 17:46:52 EST 2022" starttimestamp="1645820509543" timestamp="181502685" timestamp2="181502685">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4126" _type="InsertStringCommand" date="Sun Feb 27 17:46:52 EST 2022" starttimestamp="1645820509543" timestamp="181502685" timestamp2="181502685">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4127" _type="MoveCaretCommand" caretOffset="5783" date="Sun Feb 27 17:46:53 EST 2022" docOffset="5934" starttimestamp="1645820509543" timestamp="181504035" />
  <Command __id="4128" _type="MoveCaretCommand" caretOffset="5783" date="Sun Feb 27 17:46:53 EST 2022" docOffset="5934" starttimestamp="1645820509543" timestamp="181504035" />
  <Command __id="4129" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Sun Feb 27 17:46:55 EST 2022" starttimestamp="1645820509543" timestamp="181505796" />
  <Command __id="4130" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Sun Feb 27 17:46:55 EST 2022" starttimestamp="1645820509543" timestamp="181505796" />
  <Command __id="4131" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:46:55 EST 2022" starttimestamp="1645820509543" timestamp="181505980" />
  <Command __id="4132" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:46:55 EST 2022" starttimestamp="1645820509543" timestamp="181505980" />
  <Command __id="4133" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:46:55 EST 2022" starttimestamp="1645820509543" timestamp="181506173" />
  <Command __id="4134" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:46:55 EST 2022" starttimestamp="1645820509543" timestamp="181506174" />
  <Command __id="4135" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:46:55 EST 2022" starttimestamp="1645820509543" timestamp="181506334" />
  <Command __id="4136" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:46:55 EST 2022" starttimestamp="1645820509543" timestamp="181506335" />
  <Command __id="4137" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:46:56 EST 2022" starttimestamp="1645820509543" timestamp="181506485" />
  <Command __id="4138" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:46:56 EST 2022" starttimestamp="1645820509543" timestamp="181506486" />
  <Command __id="4139" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:46:56 EST 2022" starttimestamp="1645820509543" timestamp="181506631" />
  <Command __id="4140" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:46:56 EST 2022" starttimestamp="1645820509543" timestamp="181506631" />
  <Command __id="4141" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:46:56 EST 2022" starttimestamp="1645820509543" timestamp="181506974" />
  <Command __id="4142" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 17:46:56 EST 2022" starttimestamp="1645820509543" timestamp="181506974" />
  <DocumentChange __id="4124" _type="Insert" date="Sun Feb 27 17:46:52 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7960" docExpressionCount="685" docLength="8690" length="1" offset="5771" starttimestamp="1645820509543" timestamp="181502681">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="4143" _type="MoveCaretCommand" caretOffset="5658" date="Sun Feb 27 17:47:13 EST 2022" docOffset="5809" starttimestamp="1645820509543" timestamp="181523755" />
  <Command __id="4144" _type="MoveCaretCommand" caretOffset="5658" date="Sun Feb 27 17:47:13 EST 2022" docOffset="5809" starttimestamp="1645820509543" timestamp="181523756" />
  <Command __id="4145" _type="MoveCaretCommand" caretOffset="5725" date="Sun Feb 27 17:47:13 EST 2022" docOffset="5876" starttimestamp="1645820509543" timestamp="181524298" />
  <Command __id="4146" _type="MoveCaretCommand" caretOffset="5725" date="Sun Feb 27 17:47:13 EST 2022" docOffset="5876" starttimestamp="1645820509543" timestamp="181524298" />
  <Command __id="4147" _type="MoveCaretCommand" caretOffset="5697" date="Sun Feb 27 17:47:14 EST 2022" docOffset="5848" starttimestamp="1645820509543" timestamp="181524682" />
  <Command __id="4148" _type="MoveCaretCommand" caretOffset="5697" date="Sun Feb 27 17:47:14 EST 2022" docOffset="5848" starttimestamp="1645820509543" timestamp="181524682" />
  <DocumentChange __id="4149" _type="Insert" date="Sun Feb 27 17:47:17 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7976" docExpressionCount="685" docLength="8706" length="16" offset="5848" starttimestamp="1645820509543" timestamp="181527640">
    <text><![CDATA[
	            	]]></text>
  </DocumentChange>
  <Command __id="4150" _type="InsertStringCommand" date="Sun Feb 27 17:47:17 EST 2022" starttimestamp="1645820509543" timestamp="181527649" timestamp2="181527649">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4151" _type="InsertStringCommand" date="Sun Feb 27 17:47:17 EST 2022" starttimestamp="1645820509543" timestamp="181527650" timestamp2="181527650">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="4152" _type="Insert" date="Sun Feb 27 17:47:30 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7977" docExpressionCount="686" docLength="8707" length="1" offset="5864" starttimestamp="1645820509543" timestamp="181540789">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4153" _type="InsertStringCommand" date="Sun Feb 27 17:47:30 EST 2022" starttimestamp="1645820509543" timestamp="181540793" timestamp2="181540793">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4154" _type="InsertStringCommand" date="Sun Feb 27 17:47:30 EST 2022" starttimestamp="1645820509543" timestamp="181540793" timestamp2="181540793">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="4155" _type="Insert" date="Sun Feb 27 17:47:30 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7978" docExpressionCount="686" docLength="8708" length="1" offset="5865" starttimestamp="1645820509543" timestamp="181540862">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="4156" _type="InsertStringCommand" date="Sun Feb 27 17:47:30 EST 2022" starttimestamp="1645820509543" timestamp="181540866" timestamp2="181540866">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4157" _type="InsertStringCommand" date="Sun Feb 27 17:47:30 EST 2022" starttimestamp="1645820509543" timestamp="181540866" timestamp2="181540866">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="4158" _type="Insert" date="Sun Feb 27 17:47:30 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7979" docExpressionCount="686" docLength="8709" length="1" offset="5866" starttimestamp="1645820509543" timestamp="181541155">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4159" _type="InsertStringCommand" date="Sun Feb 27 17:47:30 EST 2022" starttimestamp="1645820509543" timestamp="181541158" timestamp2="181541158">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4160" _type="InsertStringCommand" date="Sun Feb 27 17:47:30 EST 2022" starttimestamp="1645820509543" timestamp="181541158" timestamp2="181541158">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4161" _type="Delete" date="Sun Feb 27 17:47:31 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7978" docExpressionCount="686" docLength="8708" endLine="246" length="1" offset="5866" startLine="246" starttimestamp="1645820509543" timestamp="181541561">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4162" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:47:31 EST 2022" starttimestamp="1645820509543" timestamp="181541563" />
  <Command __id="4163" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:47:31 EST 2022" starttimestamp="1645820509543" timestamp="181541563" />
  <DocumentChange __id="4164" _type="Delete" date="Sun Feb 27 17:47:31 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7977" docExpressionCount="686" docLength="8707" endLine="246" length="1" offset="5865" startLine="246" starttimestamp="1645820509543" timestamp="181541706">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="4165" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:47:31 EST 2022" starttimestamp="1645820509543" timestamp="181541708" />
  <Command __id="4166" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:47:31 EST 2022" starttimestamp="1645820509543" timestamp="181541708" />
  <Command __id="4168" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:47:31 EST 2022" starttimestamp="1645820509543" timestamp="181541871" />
  <Command __id="4169" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:47:31 EST 2022" starttimestamp="1645820509543" timestamp="181541871" />
  <Command __id="4170" _type="MoveCaretCommand" caretOffset="5658" date="Sun Feb 27 17:47:54 EST 2022" docOffset="5809" starttimestamp="1645820509543" timestamp="181565164" />
  <Command __id="4171" _type="MoveCaretCommand" caretOffset="5658" date="Sun Feb 27 17:47:54 EST 2022" docOffset="5809" starttimestamp="1645820509543" timestamp="181565164" />
  <DocumentChange __id="4167" _type="Delete" date="Sun Feb 27 17:47:31 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7976" docExpressionCount="685" docLength="8706" endLine="246" length="1" offset="5864" startLine="246" starttimestamp="1645820509543" timestamp="181541865">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4172" _type="MoveCaretCommand" caretOffset="5713" date="Sun Feb 27 17:47:57 EST 2022" docOffset="5864" starttimestamp="1645820509543" timestamp="181568114" />
  <Command __id="4173" _type="MoveCaretCommand" caretOffset="5713" date="Sun Feb 27 17:47:57 EST 2022" docOffset="5864" starttimestamp="1645820509543" timestamp="181568114" />
  <DocumentChange __id="4174" _type="Insert" date="Sun Feb 27 17:48:01 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7977" docExpressionCount="686" docLength="8707" length="1" offset="5864" starttimestamp="1645820509543" timestamp="181571609">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4175" _type="InsertStringCommand" date="Sun Feb 27 17:48:01 EST 2022" starttimestamp="1645820509543" timestamp="181571613" timestamp2="181571613">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4176" _type="InsertStringCommand" date="Sun Feb 27 17:48:01 EST 2022" starttimestamp="1645820509543" timestamp="181571613" timestamp2="181571613">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="4177" _type="Insert" date="Sun Feb 27 17:48:01 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7978" docExpressionCount="686" docLength="8708" length="1" offset="5865" starttimestamp="1645820509543" timestamp="181571698">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="4178" _type="InsertStringCommand" date="Sun Feb 27 17:48:01 EST 2022" starttimestamp="1645820509543" timestamp="181571702" timestamp2="181571702">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4179" _type="InsertStringCommand" date="Sun Feb 27 17:48:01 EST 2022" starttimestamp="1645820509543" timestamp="181571702" timestamp2="181571702">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="4180" _type="Insert" date="Sun Feb 27 17:48:01 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7979" docExpressionCount="686" docLength="8709" length="1" offset="5866" starttimestamp="1645820509543" timestamp="181572071">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4181" _type="InsertStringCommand" date="Sun Feb 27 17:48:01 EST 2022" starttimestamp="1645820509543" timestamp="181572074" timestamp2="181572074">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4182" _type="InsertStringCommand" date="Sun Feb 27 17:48:01 EST 2022" starttimestamp="1645820509543" timestamp="181572074" timestamp2="181572074">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4183" _type="Delete" date="Sun Feb 27 17:48:01 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7978" docExpressionCount="686" docLength="8708" endLine="246" length="1" offset="5866" startLine="246" starttimestamp="1645820509543" timestamp="181572360">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4184" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:01 EST 2022" starttimestamp="1645820509543" timestamp="181572363" />
  <Command __id="4185" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:01 EST 2022" starttimestamp="1645820509543" timestamp="181572363" />
  <DocumentChange __id="4186" _type="Insert" date="Sun Feb 27 17:48:02 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7979" docExpressionCount="686" docLength="8709" length="1" offset="5866" starttimestamp="1645820509543" timestamp="181572514">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="4187" _type="InsertStringCommand" date="Sun Feb 27 17:48:02 EST 2022" starttimestamp="1645820509543" timestamp="181572518" timestamp2="181572518">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="4188" _type="InsertStringCommand" date="Sun Feb 27 17:48:02 EST 2022" starttimestamp="1645820509543" timestamp="181572518" timestamp2="181572518">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="4189" _type="Insert" date="Sun Feb 27 17:48:02 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7980" docExpressionCount="686" docLength="8710" length="1" offset="5867" starttimestamp="1645820509543" timestamp="181573153">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="4190" _type="InsertStringCommand" date="Sun Feb 27 17:48:02 EST 2022" starttimestamp="1645820509543" timestamp="181573179" timestamp2="181573179">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="4191" _type="InsertStringCommand" date="Sun Feb 27 17:48:02 EST 2022" starttimestamp="1645820509543" timestamp="181573180" timestamp2="181573180">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="4192" _type="Delete" date="Sun Feb 27 17:48:02 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7979" docExpressionCount="686" docLength="8709" endLine="246" length="1" offset="5867" startLine="246" starttimestamp="1645820509543" timestamp="181573413">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="4193" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:02 EST 2022" starttimestamp="1645820509543" timestamp="181573416" />
  <Command __id="4194" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:02 EST 2022" starttimestamp="1645820509543" timestamp="181573416" />
  <DocumentChange __id="4195" _type="Insert" date="Sun Feb 27 17:48:03 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7980" docExpressionCount="686" docLength="8710" length="1" offset="5867" starttimestamp="1645820509543" timestamp="181573488">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <Command __id="4196" _type="InsertStringCommand" date="Sun Feb 27 17:48:03 EST 2022" starttimestamp="1645820509543" timestamp="181573493" timestamp2="181573493">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="4197" _type="InsertStringCommand" date="Sun Feb 27 17:48:03 EST 2022" starttimestamp="1645820509543" timestamp="181573494" timestamp2="181573494">
    <data><![CDATA[q]]></data>
  </Command>
  <DocumentChange __id="4198" _type="Insert" date="Sun Feb 27 17:48:03 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7981" docExpressionCount="686" docLength="8711" length="1" offset="5868" starttimestamp="1645820509543" timestamp="181573613">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="4199" _type="InsertStringCommand" date="Sun Feb 27 17:48:03 EST 2022" starttimestamp="1645820509543" timestamp="181573620" timestamp2="181573620">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="4200" _type="InsertStringCommand" date="Sun Feb 27 17:48:03 EST 2022" starttimestamp="1645820509543" timestamp="181573620" timestamp2="181573620">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="4201" _type="Insert" date="Sun Feb 27 17:48:03 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7982" docExpressionCount="686" docLength="8712" length="1" offset="5869" starttimestamp="1645820509543" timestamp="181573677">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="4202" _type="InsertStringCommand" date="Sun Feb 27 17:48:03 EST 2022" starttimestamp="1645820509543" timestamp="181573682" timestamp2="181573682">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4203" _type="InsertStringCommand" date="Sun Feb 27 17:48:03 EST 2022" starttimestamp="1645820509543" timestamp="181573682" timestamp2="181573682">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="4204" _type="Insert" date="Sun Feb 27 17:48:03 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7983" docExpressionCount="686" docLength="8713" length="1" offset="5870" starttimestamp="1645820509543" timestamp="181573792">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="4205" _type="InsertStringCommand" date="Sun Feb 27 17:48:03 EST 2022" starttimestamp="1645820509543" timestamp="181573798" timestamp2="181573798">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4206" _type="InsertStringCommand" date="Sun Feb 27 17:48:03 EST 2022" starttimestamp="1645820509543" timestamp="181573798" timestamp2="181573798">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="4207" _type="Insert" date="Sun Feb 27 17:48:03 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7984" docExpressionCount="686" docLength="8714" length="1" offset="5871" starttimestamp="1645820509543" timestamp="181574002">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4208" _type="InsertStringCommand" date="Sun Feb 27 17:48:03 EST 2022" starttimestamp="1645820509543" timestamp="181574006" timestamp2="181574006">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4209" _type="InsertStringCommand" date="Sun Feb 27 17:48:03 EST 2022" starttimestamp="1645820509543" timestamp="181574006" timestamp2="181574006">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4210" _type="Insert" date="Sun Feb 27 17:48:03 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7985" docExpressionCount="687" docLength="8715" length="1" offset="5872" starttimestamp="1645820509543" timestamp="181574144">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="4211" _type="InsertStringCommand" date="Sun Feb 27 17:48:03 EST 2022" starttimestamp="1645820509543" timestamp="181574149" timestamp2="181574149">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="4212" _type="InsertStringCommand" date="Sun Feb 27 17:48:03 EST 2022" starttimestamp="1645820509543" timestamp="181574149" timestamp2="181574149">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="4213" _type="Insert" date="Sun Feb 27 17:48:03 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7986" docExpressionCount="687" docLength="8716" length="1" offset="5873" starttimestamp="1645820509543" timestamp="181574314">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="4214" _type="InsertStringCommand" date="Sun Feb 27 17:48:03 EST 2022" starttimestamp="1645820509543" timestamp="181574318" timestamp2="181574318">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="4215" _type="InsertStringCommand" date="Sun Feb 27 17:48:03 EST 2022" starttimestamp="1645820509543" timestamp="181574318" timestamp2="181574318">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="4216" _type="Insert" date="Sun Feb 27 17:48:04 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7987" docExpressionCount="687" docLength="8717" length="1" offset="5874" starttimestamp="1645820509543" timestamp="181574561">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4217" _type="InsertStringCommand" date="Sun Feb 27 17:48:04 EST 2022" starttimestamp="1645820509543" timestamp="181574564" timestamp2="181574564">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4218" _type="InsertStringCommand" date="Sun Feb 27 17:48:04 EST 2022" starttimestamp="1645820509543" timestamp="181574564" timestamp2="181574564">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4219" _type="Delete" date="Sun Feb 27 17:48:04 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7986" docExpressionCount="687" docLength="8716" endLine="246" length="1" offset="5874" startLine="246" starttimestamp="1645820509543" timestamp="181574969">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4220" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:04 EST 2022" starttimestamp="1645820509543" timestamp="181574972" />
  <Command __id="4221" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:04 EST 2022" starttimestamp="1645820509543" timestamp="181574972" />
  <DocumentChange __id="4222" _type="Delete" date="Sun Feb 27 17:48:04 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7985" docExpressionCount="687" docLength="8715" endLine="246" length="1" offset="5873" startLine="246" starttimestamp="1645820509543" timestamp="181575177">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="4223" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:04 EST 2022" starttimestamp="1645820509543" timestamp="181575183" />
  <Command __id="4224" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:04 EST 2022" starttimestamp="1645820509543" timestamp="181575183" />
  <DocumentChange __id="4225" _type="Insert" date="Sun Feb 27 17:48:04 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7986" docExpressionCount="687" docLength="8716" length="1" offset="5873" starttimestamp="1645820509543" timestamp="181575290">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4226" _type="InsertStringCommand" date="Sun Feb 27 17:48:04 EST 2022" starttimestamp="1645820509543" timestamp="181575294" timestamp2="181575294">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4227" _type="InsertStringCommand" date="Sun Feb 27 17:48:04 EST 2022" starttimestamp="1645820509543" timestamp="181575294" timestamp2="181575294">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4228" _type="Insert" date="Sun Feb 27 17:48:04 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7987" docExpressionCount="688" docLength="8717" length="1" offset="5874" starttimestamp="1645820509543" timestamp="181575420">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="4229" _type="InsertStringCommand" date="Sun Feb 27 17:48:04 EST 2022" starttimestamp="1645820509543" timestamp="181575434" timestamp2="181575434">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4230" _type="InsertStringCommand" date="Sun Feb 27 17:48:04 EST 2022" starttimestamp="1645820509543" timestamp="181575434" timestamp2="181575434">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="4231" _type="Insert" date="Sun Feb 27 17:48:05 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7988" docExpressionCount="688" docLength="8718" length="1" offset="5875" starttimestamp="1645820509543" timestamp="181575508">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="4232" _type="InsertStringCommand" date="Sun Feb 27 17:48:05 EST 2022" starttimestamp="1645820509543" timestamp="181575521" timestamp2="181575521">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4233" _type="InsertStringCommand" date="Sun Feb 27 17:48:05 EST 2022" starttimestamp="1645820509543" timestamp="181575521" timestamp2="181575521">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="4234" _type="Insert" date="Sun Feb 27 17:48:05 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7989" docExpressionCount="688" docLength="8719" length="1" offset="5876" starttimestamp="1645820509543" timestamp="181575581">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="4235" _type="InsertStringCommand" date="Sun Feb 27 17:48:05 EST 2022" starttimestamp="1645820509543" timestamp="181575592" timestamp2="181575592">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4236" _type="InsertStringCommand" date="Sun Feb 27 17:48:05 EST 2022" starttimestamp="1645820509543" timestamp="181575592" timestamp2="181575592">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="4237" _type="Insert" date="Sun Feb 27 17:48:05 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7990" docExpressionCount="688" docLength="8720" length="1" offset="5877" starttimestamp="1645820509543" timestamp="181575662">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="4238" _type="InsertStringCommand" date="Sun Feb 27 17:48:05 EST 2022" starttimestamp="1645820509543" timestamp="181575675" timestamp2="181575675">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4239" _type="InsertStringCommand" date="Sun Feb 27 17:48:05 EST 2022" starttimestamp="1645820509543" timestamp="181575675" timestamp2="181575675">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="4240" _type="Insert" date="Sun Feb 27 17:48:05 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7991" docExpressionCount="688" docLength="8721" length="1" offset="5878" starttimestamp="1645820509543" timestamp="181575782">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4241" _type="InsertStringCommand" date="Sun Feb 27 17:48:05 EST 2022" starttimestamp="1645820509543" timestamp="181575786" timestamp2="181575786">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4242" _type="InsertStringCommand" date="Sun Feb 27 17:48:05 EST 2022" starttimestamp="1645820509543" timestamp="181575787" timestamp2="181575787">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4244" _type="InsertStringCommand" date="Sun Feb 27 17:48:05 EST 2022" starttimestamp="1645820509543" timestamp="181576038" timestamp2="181576038">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4245" _type="InsertStringCommand" date="Sun Feb 27 17:48:05 EST 2022" starttimestamp="1645820509543" timestamp="181576038" timestamp2="181576038">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4246" _type="MoveCaretCommand" caretOffset="5850" date="Sun Feb 27 17:48:06 EST 2022" docOffset="6001" starttimestamp="1645820509543" timestamp="181577314" />
  <Command __id="4247" _type="MoveCaretCommand" caretOffset="5850" date="Sun Feb 27 17:48:06 EST 2022" docOffset="6001" starttimestamp="1645820509543" timestamp="181577315" />
  <Command __id="4248" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:48:08 EST 2022" starttimestamp="1645820509543" timestamp="181578510" />
  <Command __id="4249" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:48:08 EST 2022" starttimestamp="1645820509543" timestamp="181578604" />
  <Command __id="4250" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:48:08 EST 2022" starttimestamp="1645820509543" timestamp="181578627" />
  <DocumentChange __id="4243" _type="Insert" date="Sun Feb 27 17:48:05 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7992" docExpressionCount="688" docLength="8722" length="1" offset="5879" starttimestamp="1645820509543" timestamp="181576026">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="4251" _type="MoveCaretCommand" caretOffset="5815" date="Sun Feb 27 17:48:25 EST 2022" docOffset="5966" starttimestamp="1645820509543" timestamp="181596355" />
  <Command __id="4252" _type="MoveCaretCommand" caretOffset="5815" date="Sun Feb 27 17:48:25 EST 2022" docOffset="5966" starttimestamp="1645820509543" timestamp="181596355" />
  <Command __id="4253" _type="MoveCaretCommand" caretOffset="5837" date="Sun Feb 27 17:48:26 EST 2022" docOffset="5988" starttimestamp="1645820509543" timestamp="181597275" />
  <Command __id="4254" _type="MoveCaretCommand" caretOffset="5837" date="Sun Feb 27 17:48:26 EST 2022" docOffset="5988" starttimestamp="1645820509543" timestamp="181597275" />
  <DocumentChange __id="4255" _type="Insert" date="Sun Feb 27 17:48:28 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7993" docExpressionCount="688" docLength="8723" length="1" offset="5988" starttimestamp="1645820509543" timestamp="181599211">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4256" _type="InsertStringCommand" date="Sun Feb 27 17:48:28 EST 2022" starttimestamp="1645820509543" timestamp="181599215" timestamp2="181599215">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4257" _type="InsertStringCommand" date="Sun Feb 27 17:48:28 EST 2022" starttimestamp="1645820509543" timestamp="181599215" timestamp2="181599215">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="4258" _type="Insert" date="Sun Feb 27 17:48:28 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7994" docExpressionCount="688" docLength="8724" length="1" offset="5989" starttimestamp="1645820509543" timestamp="181599313">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="4259" _type="InsertStringCommand" date="Sun Feb 27 17:48:28 EST 2022" starttimestamp="1645820509543" timestamp="181599324" timestamp2="181599324">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4260" _type="InsertStringCommand" date="Sun Feb 27 17:48:28 EST 2022" starttimestamp="1645820509543" timestamp="181599324" timestamp2="181599324">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="4261" _type="Insert" date="Sun Feb 27 17:48:29 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7995" docExpressionCount="688" docLength="8725" length="1" offset="5990" starttimestamp="1645820509543" timestamp="181599938">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="4262" _type="InsertStringCommand" date="Sun Feb 27 17:48:29 EST 2022" starttimestamp="1645820509543" timestamp="181599950" timestamp2="181599950">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="4263" _type="InsertStringCommand" date="Sun Feb 27 17:48:29 EST 2022" starttimestamp="1645820509543" timestamp="181599950" timestamp2="181599950">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="4264" _type="Insert" date="Sun Feb 27 17:48:29 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7996" docExpressionCount="688" docLength="8726" length="1" offset="5991" starttimestamp="1645820509543" timestamp="181600273">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <Command __id="4265" _type="InsertStringCommand" date="Sun Feb 27 17:48:29 EST 2022" starttimestamp="1645820509543" timestamp="181600276" timestamp2="181600276">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="4266" _type="InsertStringCommand" date="Sun Feb 27 17:48:29 EST 2022" starttimestamp="1645820509543" timestamp="181600277" timestamp2="181600277">
    <data><![CDATA[w]]></data>
  </Command>
  <DocumentChange __id="4267" _type="Insert" date="Sun Feb 27 17:48:29 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7997" docExpressionCount="688" docLength="8727" length="1" offset="5992" starttimestamp="1645820509543" timestamp="181600280">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <Command __id="4268" _type="InsertStringCommand" date="Sun Feb 27 17:48:29 EST 2022" starttimestamp="1645820509543" timestamp="181600284" timestamp2="181600284">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="4269" _type="InsertStringCommand" date="Sun Feb 27 17:48:29 EST 2022" starttimestamp="1645820509543" timestamp="181600285" timestamp2="181600285">
    <data><![CDATA[q]]></data>
  </Command>
  <DocumentChange __id="4270" _type="Insert" date="Sun Feb 27 17:48:29 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7998" docExpressionCount="688" docLength="8728" length="1" offset="5993" starttimestamp="1645820509543" timestamp="181600381">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="4271" _type="InsertStringCommand" date="Sun Feb 27 17:48:29 EST 2022" starttimestamp="1645820509543" timestamp="181600385" timestamp2="181600385">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="4272" _type="InsertStringCommand" date="Sun Feb 27 17:48:29 EST 2022" starttimestamp="1645820509543" timestamp="181600385" timestamp2="181600385">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="4273" _type="Delete" date="Sun Feb 27 17:48:30 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7997" docExpressionCount="688" docLength="8727" endLine="250" length="1" offset="5993" startLine="250" starttimestamp="1645820509543" timestamp="181600801">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="4274" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:30 EST 2022" starttimestamp="1645820509543" timestamp="181600803" />
  <Command __id="4275" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:30 EST 2022" starttimestamp="1645820509543" timestamp="181600803" />
  <DocumentChange __id="4276" _type="Delete" date="Sun Feb 27 17:48:30 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7996" docExpressionCount="688" docLength="8726" endLine="250" length="1" offset="5992" startLine="250" starttimestamp="1645820509543" timestamp="181600978">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <Command __id="4277" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:30 EST 2022" starttimestamp="1645820509543" timestamp="181600979" />
  <Command __id="4278" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:30 EST 2022" starttimestamp="1645820509543" timestamp="181600980" />
  <DocumentChange __id="4279" _type="Delete" date="Sun Feb 27 17:48:30 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7995" docExpressionCount="688" docLength="8725" endLine="250" length="1" offset="5991" startLine="250" starttimestamp="1645820509543" timestamp="181601129">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <Command __id="4280" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:30 EST 2022" starttimestamp="1645820509543" timestamp="181601132" />
  <Command __id="4281" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:30 EST 2022" starttimestamp="1645820509543" timestamp="181601132" />
  <DocumentChange __id="4282" _type="Insert" date="Sun Feb 27 17:48:30 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7996" docExpressionCount="688" docLength="8726" length="1" offset="5991" starttimestamp="1645820509543" timestamp="181601233">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <Command __id="4283" _type="InsertStringCommand" date="Sun Feb 27 17:48:30 EST 2022" starttimestamp="1645820509543" timestamp="181601238" timestamp2="181601238">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="4284" _type="InsertStringCommand" date="Sun Feb 27 17:48:30 EST 2022" starttimestamp="1645820509543" timestamp="181601239" timestamp2="181601239">
    <data><![CDATA[q]]></data>
  </Command>
  <DocumentChange __id="4285" _type="Insert" date="Sun Feb 27 17:48:30 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7997" docExpressionCount="688" docLength="8727" length="1" offset="5992" starttimestamp="1645820509543" timestamp="181601358">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="4286" _type="InsertStringCommand" date="Sun Feb 27 17:48:30 EST 2022" starttimestamp="1645820509543" timestamp="181601362" timestamp2="181601362">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="4287" _type="InsertStringCommand" date="Sun Feb 27 17:48:30 EST 2022" starttimestamp="1645820509543" timestamp="181601362" timestamp2="181601362">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="4288" _type="Insert" date="Sun Feb 27 17:48:31 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7998" docExpressionCount="688" docLength="8728" length="1" offset="5993" starttimestamp="1645820509543" timestamp="181601473">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="4289" _type="InsertStringCommand" date="Sun Feb 27 17:48:31 EST 2022" starttimestamp="1645820509543" timestamp="181601485" timestamp2="181601485">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4290" _type="InsertStringCommand" date="Sun Feb 27 17:48:31 EST 2022" starttimestamp="1645820509543" timestamp="181601486" timestamp2="181601486">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="4291" _type="Insert" date="Sun Feb 27 17:48:31 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7999" docExpressionCount="688" docLength="8729" length="1" offset="5994" starttimestamp="1645820509543" timestamp="181601585">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="4292" _type="InsertStringCommand" date="Sun Feb 27 17:48:31 EST 2022" starttimestamp="1645820509543" timestamp="181601589" timestamp2="181601589">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4293" _type="InsertStringCommand" date="Sun Feb 27 17:48:31 EST 2022" starttimestamp="1645820509543" timestamp="181601590" timestamp2="181601590">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="4294" _type="Insert" date="Sun Feb 27 17:48:31 EST 2022" docASTNodeCount="920" docActiveCodeLength="8000" docExpressionCount="563" docLength="8730" length="1" offset="5995" starttimestamp="1645820509543" timestamp="181602395">
    <text><![CDATA[?]]></text>
  </DocumentChange>
  <Command __id="4295" _type="InsertStringCommand" date="Sun Feb 27 17:48:31 EST 2022" starttimestamp="1645820509543" timestamp="181602406" timestamp2="181602406">
    <data><![CDATA[?]]></data>
  </Command>
  <Command __id="4296" _type="InsertStringCommand" date="Sun Feb 27 17:48:31 EST 2022" starttimestamp="1645820509543" timestamp="181602406" timestamp2="181602406">
    <data><![CDATA[?]]></data>
  </Command>
  <DocumentChange __id="4297" _type="Insert" date="Sun Feb 27 17:48:32 EST 2022" docASTNodeCount="920" docActiveCodeLength="8001" docExpressionCount="563" docLength="8731" length="1" offset="5996" starttimestamp="1645820509543" timestamp="181602627">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4298" _type="InsertStringCommand" date="Sun Feb 27 17:48:32 EST 2022" starttimestamp="1645820509543" timestamp="181602638" timestamp2="181602638">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4299" _type="InsertStringCommand" date="Sun Feb 27 17:48:32 EST 2022" starttimestamp="1645820509543" timestamp="181602638" timestamp2="181602638">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4300" _type="Insert" date="Sun Feb 27 17:48:34 EST 2022" docASTNodeCount="920" docActiveCodeLength="8002" docExpressionCount="563" docLength="8732" length="1" offset="5997" starttimestamp="1645820509543" timestamp="181604754">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="4301" _type="InsertStringCommand" date="Sun Feb 27 17:48:34 EST 2022" starttimestamp="1645820509543" timestamp="181604759" timestamp2="181604759">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4302" _type="InsertStringCommand" date="Sun Feb 27 17:48:34 EST 2022" starttimestamp="1645820509543" timestamp="181604760" timestamp2="181604760">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="4303" _type="Insert" date="Sun Feb 27 17:48:34 EST 2022" docASTNodeCount="920" docActiveCodeLength="8003" docExpressionCount="563" docLength="8733" length="1" offset="5998" starttimestamp="1645820509543" timestamp="181605145">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <Command __id="4304" _type="InsertStringCommand" date="Sun Feb 27 17:48:34 EST 2022" starttimestamp="1645820509543" timestamp="181605149" timestamp2="181605149">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="4305" _type="InsertStringCommand" date="Sun Feb 27 17:48:34 EST 2022" starttimestamp="1645820509543" timestamp="181605149" timestamp2="181605149">
    <data><![CDATA[O]]></data>
  </Command>
  <DocumentChange __id="4306" _type="Delete" date="Sun Feb 27 17:48:34 EST 2022" docASTNodeCount="920" docActiveCodeLength="8002" docExpressionCount="563" docLength="8732" endLine="250" length="1" offset="5998" startLine="250" starttimestamp="1645820509543" timestamp="181605425">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <Command __id="4307" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:34 EST 2022" starttimestamp="1645820509543" timestamp="181605428" />
  <Command __id="4308" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:34 EST 2022" starttimestamp="1645820509543" timestamp="181605428" />
  <DocumentChange __id="4309" _type="Delete" date="Sun Feb 27 17:48:35 EST 2022" docASTNodeCount="920" docActiveCodeLength="8001" docExpressionCount="563" docLength="8731" endLine="250" length="1" offset="5997" startLine="250" starttimestamp="1645820509543" timestamp="181605612">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="4310" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:35 EST 2022" starttimestamp="1645820509543" timestamp="181605618" />
  <Command __id="4311" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 17:48:35 EST 2022" starttimestamp="1645820509543" timestamp="181605618" />
  <DocumentChange __id="4312" _type="Insert" date="Sun Feb 27 17:48:35 EST 2022" docASTNodeCount="920" docActiveCodeLength="8002" docExpressionCount="563" docLength="8732" length="1" offset="5997" starttimestamp="1645820509543" timestamp="181605698">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <Command __id="4313" _type="InsertStringCommand" date="Sun Feb 27 17:48:35 EST 2022" starttimestamp="1645820509543" timestamp="181605712" timestamp2="181605712">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="4314" _type="InsertStringCommand" date="Sun Feb 27 17:48:35 EST 2022" starttimestamp="1645820509543" timestamp="181605712" timestamp2="181605712">
    <data><![CDATA[T]]></data>
  </Command>
  <DocumentChange __id="4315" _type="Insert" date="Sun Feb 27 17:48:35 EST 2022" docASTNodeCount="920" docActiveCodeLength="8003" docExpressionCount="563" docLength="8733" length="1" offset="5998" starttimestamp="1645820509543" timestamp="181605913">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="4316" _type="InsertStringCommand" date="Sun Feb 27 17:48:35 EST 2022" starttimestamp="1645820509543" timestamp="181605918" timestamp2="181605918">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="4317" _type="InsertStringCommand" date="Sun Feb 27 17:48:35 EST 2022" starttimestamp="1645820509543" timestamp="181605918" timestamp2="181605918">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="4318" _type="Insert" date="Sun Feb 27 17:48:35 EST 2022" docASTNodeCount="920" docActiveCodeLength="8004" docExpressionCount="563" docLength="8734" length="1" offset="5999" starttimestamp="1645820509543" timestamp="181606088">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="4319" _type="InsertStringCommand" date="Sun Feb 27 17:48:35 EST 2022" starttimestamp="1645820509543" timestamp="181606095" timestamp2="181606095">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="4320" _type="InsertStringCommand" date="Sun Feb 27 17:48:35 EST 2022" starttimestamp="1645820509543" timestamp="181606095" timestamp2="181606095">
    <data><![CDATA[k]]></data>
  </Command>
  <DocumentChange __id="4321" _type="Insert" date="Sun Feb 27 17:48:35 EST 2022" docASTNodeCount="920" docActiveCodeLength="8005" docExpressionCount="563" docLength="8735" length="1" offset="6000" starttimestamp="1645820509543" timestamp="181606171">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4322" _type="InsertStringCommand" date="Sun Feb 27 17:48:35 EST 2022" starttimestamp="1645820509543" timestamp="181606180" timestamp2="181606180">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4323" _type="InsertStringCommand" date="Sun Feb 27 17:48:35 EST 2022" starttimestamp="1645820509543" timestamp="181606180" timestamp2="181606180">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="4324" _type="Insert" date="Sun Feb 27 17:48:35 EST 2022" docASTNodeCount="920" docActiveCodeLength="8006" docExpressionCount="563" docLength="8736" length="1" offset="6001" starttimestamp="1645820509543" timestamp="181606265">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="4325" _type="InsertStringCommand" date="Sun Feb 27 17:48:35 EST 2022" starttimestamp="1645820509543" timestamp="181606270" timestamp2="181606270">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4326" _type="InsertStringCommand" date="Sun Feb 27 17:48:35 EST 2022" starttimestamp="1645820509543" timestamp="181606270" timestamp2="181606270">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="4327" _type="Insert" date="Sun Feb 27 17:48:36 EST 2022" docASTNodeCount="920" docActiveCodeLength="8007" docExpressionCount="563" docLength="8737" length="1" offset="6002" starttimestamp="1645820509543" timestamp="181606562">
    <text><![CDATA[K]]></text>
  </DocumentChange>
  <Command __id="4328" _type="InsertStringCommand" date="Sun Feb 27 17:48:36 EST 2022" starttimestamp="1645820509543" timestamp="181606568" timestamp2="181606568">
    <data><![CDATA[K]]></data>
  </Command>
  <Command __id="4329" _type="InsertStringCommand" date="Sun Feb 27 17:48:36 EST 2022" starttimestamp="1645820509543" timestamp="181606568" timestamp2="181606568">
    <data><![CDATA[K]]></data>
  </Command>
  <DocumentChange __id="4330" _type="Insert" date="Sun Feb 27 17:48:36 EST 2022" docASTNodeCount="920" docActiveCodeLength="8008" docExpressionCount="563" docLength="8738" length="1" offset="6003" starttimestamp="1645820509543" timestamp="181606747">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4331" _type="InsertStringCommand" date="Sun Feb 27 17:48:36 EST 2022" starttimestamp="1645820509543" timestamp="181606751" timestamp2="181606751">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4332" _type="InsertStringCommand" date="Sun Feb 27 17:48:36 EST 2022" starttimestamp="1645820509543" timestamp="181606751" timestamp2="181606751">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="4333" _type="Insert" date="Sun Feb 27 17:48:36 EST 2022" docASTNodeCount="920" docActiveCodeLength="8009" docExpressionCount="563" docLength="8739" length="1" offset="6004" starttimestamp="1645820509543" timestamp="181606821">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="4334" _type="InsertStringCommand" date="Sun Feb 27 17:48:36 EST 2022" starttimestamp="1645820509543" timestamp="181606825" timestamp2="181606825">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4335" _type="InsertStringCommand" date="Sun Feb 27 17:48:36 EST 2022" starttimestamp="1645820509543" timestamp="181606825" timestamp2="181606825">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="4336" _type="Insert" date="Sun Feb 27 17:48:36 EST 2022" docASTNodeCount="920" docActiveCodeLength="8010" docExpressionCount="563" docLength="8740" length="1" offset="6005" starttimestamp="1645820509543" timestamp="181606924">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="4337" _type="InsertStringCommand" date="Sun Feb 27 17:48:36 EST 2022" starttimestamp="1645820509543" timestamp="181606935" timestamp2="181606935">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4338" _type="InsertStringCommand" date="Sun Feb 27 17:48:36 EST 2022" starttimestamp="1645820509543" timestamp="181606936" timestamp2="181606936">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="4339" _type="Insert" date="Sun Feb 27 17:48:36 EST 2022" docASTNodeCount="920" docActiveCodeLength="8011" docExpressionCount="563" docLength="8741" length="1" offset="6006" starttimestamp="1645820509543" timestamp="181607087">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4340" _type="InsertStringCommand" date="Sun Feb 27 17:48:36 EST 2022" starttimestamp="1645820509543" timestamp="181607092" timestamp2="181607092">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4341" _type="InsertStringCommand" date="Sun Feb 27 17:48:36 EST 2022" starttimestamp="1645820509543" timestamp="181607092" timestamp2="181607092">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4342" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 17:48:36 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="181607096" />
  <DocumentChange __id="4343" _type="Insert" date="Sun Feb 27 17:48:36 EST 2022" docASTNodeCount="920" docActiveCodeLength="8012" docExpressionCount="563" docLength="8742" length="1" offset="6007" starttimestamp="1645820509543" timestamp="181607418">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="4344" _type="Insert" date="Sun Feb 27 17:48:37 EST 2022" docASTNodeCount="920" docActiveCodeLength="8013" docExpressionCount="563" docLength="8743" length="1" offset="6008" starttimestamp="1645820509543" timestamp="181607865">
    <text><![CDATA[q]]></text>
  </DocumentChange>
  <Command __id="4345" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 17:48:37 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="181608319" />
  <DocumentChange __id="4346" _type="Replace" date="Sun Feb 27 17:48:37 EST 2022" docASTNodeCount="920" docActiveCodeLength="8016" docExpressionCount="563" docLength="8746" endLine="250" insertionLength="5" int_docASTNodeCount="920" int_docActiveCodeLength="8011" int_docExpressionCount="563" int_docLength="8741" length="2" offset="6007" startLine="250" starttimestamp="1645820509543" timestamp="181608324">
    <deletedText><![CDATA[eq]]></deletedText>
    <insertedText><![CDATA[EQUAL]]></insertedText>
  </DocumentChange>
  <Command __id="4347" _type="InsertStringCommand" date="Sun Feb 27 17:48:37 EST 2022" starttimestamp="1645820509543" timestamp="181608330" timestamp2="181608330">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4348" _type="InsertStringCommand" date="Sun Feb 27 17:48:37 EST 2022" starttimestamp="1645820509543" timestamp="181608330" timestamp2="181608330">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4350" _type="InsertStringCommand" date="Sun Feb 27 17:48:38 EST 2022" starttimestamp="1645820509543" timestamp="181609184" timestamp2="181609184">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="4351" _type="InsertStringCommand" date="Sun Feb 27 17:48:38 EST 2022" starttimestamp="1645820509543" timestamp="181609185" timestamp2="181609185">
    <data><![CDATA[:]]></data>
  </Command>
  <DocumentChange __id="4349" _type="Insert" date="Sun Feb 27 17:48:38 EST 2022" docASTNodeCount="1110" docActiveCodeLength="8017" docExpressionCount="693" docLength="8747" length="1" offset="6012" starttimestamp="1645820509543" timestamp="181609181">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <Command __id="4352" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:48:39 EST 2022" starttimestamp="1645820509543" timestamp="181610242" />
  <Command __id="4353" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:48:39 EST 2022" starttimestamp="1645820509543" timestamp="181610346" />
  <Command __id="4354" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:48:39 EST 2022" starttimestamp="1645820509543" timestamp="181610359" />
  <Command __id="4355" _type="MoveCaretCommand" caretOffset="5799" date="Sun Feb 27 17:48:40 EST 2022" docOffset="5950" starttimestamp="1645820509543" timestamp="181611147" />
  <Command __id="4356" _type="MoveCaretCommand" caretOffset="5799" date="Sun Feb 27 17:48:40 EST 2022" docOffset="5950" starttimestamp="1645820509543" timestamp="181611147" />
  <Command __id="4357" _type="MoveCaretCommand" caretOffset="5815" date="Sun Feb 27 17:48:41 EST 2022" docOffset="5966" starttimestamp="1645820509543" timestamp="181611699" />
  <Command __id="4358" _type="MoveCaretCommand" caretOffset="5815" date="Sun Feb 27 17:48:41 EST 2022" docOffset="5966" starttimestamp="1645820509543" timestamp="181611699" />
  <Command __id="4360" _type="InsertStringCommand" date="Sun Feb 27 17:49:51 EST 2022" starttimestamp="1645820509543" timestamp="181681775" timestamp2="181681775">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4361" _type="InsertStringCommand" date="Sun Feb 27 17:49:51 EST 2022" starttimestamp="1645820509543" timestamp="181681775" timestamp2="181681775">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4362" _type="ShellCommand" date="Sun Feb 27 17:50:07 EST 2022" starttimestamp="1645820509543" timestamp="181698379" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4363" _type="ShellCommand" date="Sun Feb 27 17:51:07 EST 2022" starttimestamp="1645820509543" timestamp="181757569" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="4359" _type="Insert" date="Sun Feb 27 17:49:51 EST 2022" docASTNodeCount="1110" docActiveCodeLength="8018" docExpressionCount="693" docLength="8748" length="1" offset="5966" starttimestamp="1645820509543" timestamp="181681769">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4366" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:51:09 EST 2022" docASTNodeCount="72" docActiveCodeLength="316" docExpressionCount="36" docLength="316" projectName="pa1" starttimestamp="1645820509543" timestamp="181760405">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\TokenKind.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶public enum TokenKind {NUM, CLASS, ID, LBRACKET, RBRACKET, VOID, LPAREN, RPAREN, EOT, EQUAL, THIS,¶							PUBLIC, PRIVATE, STATIC, INT, BOOLEAN, COMMA, DOT, RETURN, SEMICOLON,¶								IF, ELSE, WHILE, UNOP, BINOP, MINUS, TRUE, FALSE, NEW, LCURLY, RCURLY,¶									ERROR}¶¶")]]]></diff>
  </Command>
  <Command __id="4368" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:51:13 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="181764272">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="4364" _type="MoveCaretCommand" caretOffset="5082" date="Sun Feb 27 17:51:09 EST 2022" docOffset="5233" starttimestamp="1645820509543" timestamp="181759967" />
  <Command __id="4365" _type="MoveCaretCommand" caretOffset="5082" date="Sun Feb 27 17:51:09 EST 2022" docOffset="5233" starttimestamp="1645820509543" timestamp="181759967" />
  <Command __id="4367" _type="MoveCaretCommand" caretOffset="260" date="Sun Feb 27 17:51:09 EST 2022" docOffset="260" starttimestamp="1645820509543" timestamp="181760452" />
  <Command __id="4370" _type="MoveCaretCommand" caretOffset="210" date="Sun Feb 27 17:51:15 EST 2022" docOffset="210" starttimestamp="1645820509543" timestamp="181765891" />
  <Command __id="4372" _type="MoveCaretCommand" caretOffset="5082" date="Sun Feb 27 17:51:16 EST 2022" docOffset="5233" starttimestamp="1645820509543" timestamp="181766646" />
  <Command __id="4373" _type="MoveCaretCommand" caretOffset="5634" date="Sun Feb 27 17:51:16 EST 2022" docOffset="5785" starttimestamp="1645820509543" timestamp="181767014" />
  <Command __id="4374" _type="MoveCaretCommand" caretOffset="5634" date="Sun Feb 27 17:51:16 EST 2022" docOffset="5785" starttimestamp="1645820509543" timestamp="181767014" />
  <Command __id="4375" _type="ShellCommand" date="Sun Feb 27 17:51:16 EST 2022" starttimestamp="1645820509543" timestamp="181767277" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4376" _type="ShellCommand" date="Sun Feb 27 17:52:51 EST 2022" starttimestamp="1645820509543" timestamp="181861891" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4369" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:51:15 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="181765813">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="4371" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:51:16 EST 2022" docASTNodeCount="1110" docActiveCodeLength="8018" docExpressionCount="693" docLength="8748" projectName="pa1" starttimestamp="1645820509543" timestamp="181766577">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	        	"), Diff(INSERT,"boolean isEqual = false;¶	        	"), Diff(EQUAL,"if(currentChar == '=') {¶"), Diff(DELETE,""), Diff(EQUAL,"	        		System.out.println("In scanner " +  currentChar);¶	        		"), Diff(DELETE,"return TokenKind.EQUAL"), Diff(INSERT,"isEqual = true"), Diff(EQUAL,";¶	        	}¶	            takeIt();¶	            if(currentChar == '=') {¶	"), Diff(INSERT,"            	isEqual = false;¶	"), Diff(EQUAL,"                takeIt();¶	                return TokenKind.BINOP;¶	            }"), Diff(INSERT," "), Diff(EQUAL,"¶	            return "), Diff(INSERT,"isEqual? TokenKind.EQUAL:"), Diff(EQUAL,"TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import java.io.IOException;
import java.io.InputStream;

import miniJava.ErrorReporter;
import miniJava.SyntacticAnalyzer.Token;
import miniJava.SyntacticAnalyzer.TokenKind;

public class Scanner {
	private boolean isComment;
	
//	comment state = 0 not comment
//			= 1 show /
//			= 2 show second /
//			= 12 show first *
//			= 13 show second *
//			= 3 show third /
//			= 4 show fourth / end of comment
//			= 14 show second / end of comment
	private int commentState;
	
	private InputStream inputStream;
	private ErrorReporter reporter;
	
	private char currentChar;
	private byte currentKind;
	private StringBuilder currentSpelling;
	
	// true when end of line is found
	private boolean eot = false; 
	
	public Scanner(InputStream inputStream, ErrorReporter reporter) {
		this.isComment = false;
		this.commentState = 0;
		this.inputStream = inputStream;
		this.reporter = reporter;

		// initialize scanner state
		readChar();
	}	
	
	/**
	 * skip whitespace and scan next token
	 */	
	
// ? SINGLE SLASH
//	comment state = 0 not comment
//	= 1 show /
//	= 2 show second /
//	= 12 show first *
//	= 13 show second *
//	= 14 show second / end of comment
	public void scanSeparator() {
		switch (commentState) {
			case 0:
				while (!eot && 
						(currentChar == ' ' ||
							currentChar == '\t' ||
								currentChar == '\n' ||
									currentChar == '\r')) {
					skipIt();
				}
				if (currentChar == '/') {
					commentState = 1;
					skipIt();
					scanSeparator();
				}
				break;
			
			case 1:
				if (currentChar == '/') {
					commentState = 2;
					isComment = true;
					skipIt();
					scanSeparator();
				} else if (currentChar == '*') {
					commentState = 12;
					isComment = true;
					skipIt();
					scanSeparator();
				} else {
					System.exit(4);
				}
				break;
			
			case 2:
				if (currentChar == '\r' || currentChar == '\n' || eot) {
					commentState = 0;
					isComment = false;
					scanSeparator();
				} else {
					skipIt();
					scanSeparator();		
				}
				break;
				
			case 12:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '*') {
					skipIt();
					scanSeparator();
				} else {
					commentState = 13;
					scanSeparator();
				}
				break;
			
			case 13:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '/') {
					skipIt();
					commentState = 12;
					scanSeparator();
				} else {
					commentState = 0;
					isComment = false;
					scanSeparator();
				}
				break;	
		}		
	}
	

	public Token scan() {
		// skip whitespace and comments
		scanSeparator();

		// start of a token: collect spelling and identify token kind
		currentSpelling = new StringBuilder();
		TokenKind kind = scanToken();
		String spelling = currentSpelling.toString();
		
		if (kind == TokenKind.ID) {
			switch (spelling) {
			case "class":
				kind = TokenKind.CLASS;
				break;
			case "public":
				kind = TokenKind.PUBLIC;
				break;
			case "private":
				kind = TokenKind.PRIVATE;
				break;
			case "static":
				kind = TokenKind.STATIC;
				break;
			case "int":
				kind = TokenKind.INT;
				break;
			case "boolean":
				kind = TokenKind.BOOLEAN;
				break;
			case "void":
				kind = TokenKind.VOID;
				break;
			case "this":
				kind = TokenKind.THIS;
				break;
			case "return":
				kind = TokenKind.RETURN;
				break;
			case "if":
				kind = TokenKind.IF;
				break;
			case "else":
				kind = TokenKind.ELSE;
				break;
			case "while":
				kind = TokenKind.WHILE;
				break;
			case "true":
				kind = TokenKind.TRUE;
				break;
			case "false":
				kind = TokenKind.FALSE;
				break;
			default:
				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};
				for (String s : ss) {
					if (spelling.toLowerCase().equals(s)) {
						reporter.reportError("Key word should not be used as identifiers.");
						System.exit(4);
					}
				}
				break;
			}
		}

		// return new token
		return new Token(kind, spelling);
	}

	
	/**
	 * determine token kind
	 */
	public TokenKind scanToken() {
		if (eot) {
			return TokenKind.EOT; 
		}
			
		switch (currentChar) {
			case 'a':  case 'b':  case 'c':  case 'd':
			case 'e':  case 'f':  case 'g':  case 'h':
			case 'i':  case 'j':  case 'k':  case 'l':
			case 'm':  case 'n':  case 'o':  case 'p':
			case 'q':  case 'r':  case 's':  case 't':
	        case 'u':  case 'v':  case 'w':  case 'x':
	        case 'y':  case 'z':
	        
	        case 'A':  case 'B':  case 'C':  case 'D':
	        case 'E':  case 'F':  case 'G':  case 'H':
	        case 'I':  case 'J':  case 'K':  case 'L':
	        case 'M':  case 'N':  case 'O':	 case 'P':
	        case 'Q':  case 'R':  case 'S':  case 'T':
	        case 'U':  case 'V':  case 'W':  case 'X':
	        case 'Y':  case 'Z':
	        	takeIt();
	        	while(Character.isLetter(currentChar) 
	        			|| Character.isDigit(currentChar)
	        				|| currentChar == '_') {
	        		takeIt();
	        	}
	        	return TokenKind.ID;
	        
	        case '0':  case '1':  case '2':  case '3':  case '4':
	        case '5':  case '6':  case '7':  case '8':  case '9':
	            takeIt();
	            while(Character.isDigit(currentChar)) {
	            	takeIt();
	            }
	            return TokenKind.NUM;
	        
	        case '>': case '<': case '=':
	        	boolean isEqual = false;
	        	if(currentChar == '=') {
	        		System.out.println("In scanner " +  currentChar);
	        		isEqual = true;
	        	}
	            takeIt();
	            if(currentChar == '=') {
	            	isEqual = false;
	                takeIt();
	                return TokenKind.BINOP;
	            } 
	            return isEqual? TokenKind.EQUAL:TokenKind.BINOP;
	        
	        case '+': case '*': case '/':
	        	takeIt();
	        	return TokenKind.BINOP;
	        
	        case '&':
	            takeIt();
	            if(currentChar != '&') {
	                System.exit(4);
	            }
	            takeIt();
	            return TokenKind.BINOP;

	        case '|':
	            takeIt();
	            if(currentChar != '|')
	                System.exit(4);
	            takeIt();
	            return TokenKind.BINOP;
	        
	        case '!':
	            takeIt();
	            if(currentChar == '=') {
	                takeIt();
	                return TokenKind.BINOP;
	            }
	            return TokenKind.UNOP;
	            
	        case '-':
	            takeIt();
	            return TokenKind.MINUS;
	        
	        case '.':
	            takeIt();
	            return TokenKind.DOT;

	        case ',':
	            takeIt();
	            return TokenKind.COMMA;

	        case ';':
	            takeIt();
	            return TokenKind.SEMICOLON;

	        case '(':
	            takeIt();
	            return TokenKind.LPAREN;

	        case ')':
	            takeIt();
	            return TokenKind.RPAREN;

	        case '[':
	            takeIt();
	            return TokenKind.LBRACKET;

	        case ']':
	            takeIt();
	            return TokenKind.RBRACKET;

	        case '{':
	            takeIt();
	            return TokenKind.LCURLY;

	        case '}':
	            takeIt();
	            return TokenKind.RCURLY;
	        
	        default:
				scanError("Unrecognized character '" + currentChar + "' in input");
				return TokenKind.ERROR; 
		}
	}

	
	private void takeIt() {
		currentSpelling.append(currentChar);
		nextChar();
	}
	
	private void take(char expectedChar) {
		if (currentChar == expectedChar) {
			takeIt();
		}
	}

	private void skipIt() {
		nextChar();
	}


	private void scanError(String m) {
		reporter.reportError("Scan Error:  " + m);
	}


	private final static char eolUnix = '\n';
	private final static char eolWindows = '\r';

	/**
	 * advance to next char in inputstream
	 * detect end of file or end of line as end of input
	 */
	private void nextChar() {
		if (!eot)
			readChar();
	}

	private void readChar() {
		try {
			int c = inputStream.read();
			currentChar = (char) c;
			if (c == -1) {
				System.out.print("1" + (c == -1));
				System.out.print("2" + (currentChar == eolUnix ));
				System.out.print("3" + (currentChar == eolWindows));
				eot = true;
			}
		} catch (IOException e) {
			scanError("I/O Exception!");
			eot = true;
		}
	}
	


}
]]></snapshot>
  </Command>
  <Command __id="4377" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 17:53:29 EST 2022" starttimestamp="1645820509543" timestamp="181899492" />
  <Command __id="4378" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:53:29 EST 2022" starttimestamp="1645820509543" timestamp="181899581" />
  <Command __id="4379" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:53:29 EST 2022" starttimestamp="1645820509543" timestamp="181899581" />
  <Command __id="4380" _type="MoveCaretCommand" caretOffset="5729" date="Sun Feb 27 17:53:29 EST 2022" docOffset="5880" starttimestamp="1645820509543" timestamp="181899929" />
  <Command __id="4381" _type="MoveCaretCommand" caretOffset="5729" date="Sun Feb 27 17:53:29 EST 2022" docOffset="5880" starttimestamp="1645820509543" timestamp="181899929" />
  <Command __id="4382" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:53:50 EST 2022" docASTNodeCount="1632" docActiveCodeLength="11423" docExpressionCount="1160" docLength="12192" projectName="pa1" starttimestamp="1645820509543" timestamp="181921414">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:			¶"), Diff(INSERT,"//"), Diff(EQUAL,"			System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			acceptIt();¶			System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				acceptIt();¶				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:			
//			System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");
			acceptIt();
			System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				acceptIt();
				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="4383" _type="MoveCaretCommand" caretOffset="11185" date="Sun Feb 27 17:53:51 EST 2022" docOffset="11263" starttimestamp="1645820509543" timestamp="181921461" />
  <Command __id="4384" _type="MoveCaretCommand" caretOffset="11185" date="Sun Feb 27 17:53:51 EST 2022" docOffset="11263" starttimestamp="1645820509543" timestamp="181921483" />
  <Command __id="4385" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:53:52 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="181922901">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="4392" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:54:07 EST 2022" docASTNodeCount="62" docActiveCodeLength="334" docExpressionCount="26" docLength="334" projectName="pa1" starttimestamp="1645820509543" timestamp="181938125">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="4393" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:55:32 EST 2022" starttimestamp="1645820509543" timestamp="182022553" />
  <Command __id="4394" _type="EclipseCommand" commandID="" date="Sun Feb 27 17:55:32 EST 2022" starttimestamp="1645820509543" timestamp="182022568" />
  <Command __id="4396" _type="MoveCaretCommand" caretOffset="210" date="Sun Feb 27 17:55:35 EST 2022" docOffset="210" starttimestamp="1645820509543" timestamp="182025790" />
  <Command __id="4397" _type="RunCommand" date="Sun Feb 27 17:55:36 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="182026645" type="Run" />
  <Command __id="4398" _type="RunCommand" date="Sun Feb 27 17:55:36 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="182026645" type="Run" />
  <Command __id="4399" _type="RunCommand" date="Sun Feb 27 17:55:36 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="182026761" type="Run" />
  <Command __id="4400" _type="RunCommand" date="Sun Feb 27 17:55:36 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="182026761" type="Run" />
  <Command __id="4401" _type="EHExceptionCommand" date="Sun Feb 27 17:55:36 EST 2022" starttimestamp="1645820509543" timestamp="182026814" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
In scanner =
in here1, EQUAL is***=***
in here2, EQUAL is*=*
=
in here3, NUM is*0*
0
;
try
In scanner =
in here1, EQUAL is***=***
in here2, EQUAL is*=*
=
in here3, UNOP is*!*
!
(
a
In scanner =
Parse error: parsing expression, in subcase ID/THIS, current token is: ==and its kind is: BINOP
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="4403" _type="ShellCommand" date="Sun Feb 27 17:55:42 EST 2022" starttimestamp="1645820509543" timestamp="182032951" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4404" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:55:44 EST 2022" forward="true" matchWord="true" offset="210" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182034846" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="4405" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:55:47 EST 2022" forward="false" matchWord="true" offset="210" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182037688" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="4406" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:55:47 EST 2022" forward="false" matchWord="true" offset="210" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182038175" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="4407" _type="ShellCommand" date="Sun Feb 27 17:55:49 EST 2022" starttimestamp="1645820509543" timestamp="182040107" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4409" _type="MoveCaretCommand" caretOffset="9969" date="Sun Feb 27 17:55:49 EST 2022" docOffset="10047" starttimestamp="1645820509543" timestamp="182040167" />
  <Command __id="4410" _type="MoveCaretCommand" caretOffset="9969" date="Sun Feb 27 17:55:49 EST 2022" docOffset="10047" starttimestamp="1645820509543" timestamp="182040207" />
  <Command __id="4411" _type="ShellCommand" date="Sun Feb 27 17:55:50 EST 2022" starttimestamp="1645820509543" timestamp="182041214" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4412" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:55:50 EST 2022" forward="false" matchWord="true" offset="210" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182041315" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="4413" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:55:51 EST 2022" forward="false" matchWord="true" offset="210" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182041794" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="4414" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:55:53 EST 2022" forward="true" matchWord="true" offset="210" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182043598" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="4415" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:55:53 EST 2022" forward="true" matchWord="true" offset="210" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182044176" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="4416" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 17:55:53 EST 2022" forward="true" matchWord="true" offset="210" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182044330" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="4417" _type="ShellCommand" date="Sun Feb 27 17:55:54 EST 2022" starttimestamp="1645820509543" timestamp="182045039" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4395" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:55:35 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="182025690">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="4408" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:55:49 EST 2022" docASTNodeCount="1632" docActiveCodeLength="11423" docExpressionCount="1160" docLength="12192" projectName="pa1" starttimestamp="1645820509543" timestamp="182040147">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:			¶//			System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			acceptIt();¶			System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				acceptIt();¶				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4418" _type="MoveCaretCommand" caretOffset="3388" date="Sun Feb 27 17:55:58 EST 2022" docOffset="3466" starttimestamp="1645820509543" timestamp="182049050" />
  <Command __id="4419" _type="MoveCaretCommand" caretOffset="3388" date="Sun Feb 27 17:55:58 EST 2022" docOffset="3466" starttimestamp="1645820509543" timestamp="182049050" />
  <Command __id="4420" _type="MoveCaretCommand" caretOffset="3319" date="Sun Feb 27 17:55:58 EST 2022" docOffset="3397" starttimestamp="1645820509543" timestamp="182049338" />
  <Command __id="4421" _type="MoveCaretCommand" caretOffset="3319" date="Sun Feb 27 17:55:58 EST 2022" docOffset="3397" starttimestamp="1645820509543" timestamp="182049338" />
  <Command __id="4423" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 17:56:00 EST 2022" starttimestamp="1645820509543" timestamp="182050510" />
  <DocumentChange __id="4422" _type="Insert" date="Sun Feb 27 17:56:00 EST 2022" docASTNodeCount="1616" docActiveCodeLength="11327" docExpressionCount="1145" docLength="12194" length="2" offset="3353" starttimestamp="1645820509543" timestamp="182050494">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="4424" _type="MoveCaretCommand" caretOffset="3443" date="Sun Feb 27 17:56:01 EST 2022" docOffset="3521" starttimestamp="1645820509543" timestamp="182051865" />
  <Command __id="4425" _type="MoveCaretCommand" caretOffset="3443" date="Sun Feb 27 17:56:01 EST 2022" docOffset="3521" starttimestamp="1645820509543" timestamp="182051865" />
  <Command __id="4427" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 17:56:02 EST 2022" starttimestamp="1645820509543" timestamp="182053298" />
  <Command __id="4428" _type="MoveCaretCommand" caretOffset="3002" date="Sun Feb 27 17:56:04 EST 2022" docOffset="3080" starttimestamp="1645820509543" timestamp="182055071" />
  <Command __id="4429" _type="MoveCaretCommand" caretOffset="3002" date="Sun Feb 27 17:56:04 EST 2022" docOffset="3080" starttimestamp="1645820509543" timestamp="182055071" />
  <Command __id="4431" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 17:56:04 EST 2022" starttimestamp="1645820509543" timestamp="182055334" />
  <DocumentChange __id="4426" _type="Insert" date="Sun Feb 27 17:56:02 EST 2022" docASTNodeCount="1600" docActiveCodeLength="11231" docExpressionCount="1130" docLength="12196" length="2" offset="3470" starttimestamp="1645820509543" timestamp="182053283">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="4430" _type="Insert" date="Sun Feb 27 17:56:04 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11132" docExpressionCount="1115" docLength="12198" length="2" offset="3033" starttimestamp="1645820509543" timestamp="182055318">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="4435" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:56:06 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="182057259">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="4437" _type="RunCommand" date="Sun Feb 27 17:56:09 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="182060343" type="Run" />
  <Command __id="4438" _type="RunCommand" date="Sun Feb 27 17:56:09 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="182060343" type="Run" />
  <Command __id="4439" _type="RunCommand" date="Sun Feb 27 17:56:10 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="182060497" type="Run" />
  <Command __id="4440" _type="RunCommand" date="Sun Feb 27 17:56:10 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="182060497" type="Run" />
  <Command __id="4441" _type="EHExceptionCommand" date="Sun Feb 27 17:56:10 EST 2022" starttimestamp="1645820509543" timestamp="182060544" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
In scanner =
=
0
;
try
In scanner =
=
!
(
a
In scanner =
Parse error: parsing expression, in subcase ID/THIS, current token is: ==and its kind is: BINOP
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="4442" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:56:15 EST 2022" docASTNodeCount="1110" docActiveCodeLength="8018" docExpressionCount="693" docLength="8748" projectName="pa1" starttimestamp="1645820509543" timestamp="182065569">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	        	boolean isEqual = false;¶	        	if(currentChar == '=') {¶	        		System.out.println("In scanner " +  currentChar);¶	        		isEqual = true;¶	        	}¶	            takeIt();¶	            if(currentChar == '=') {¶	            	isEqual = false;¶	                takeIt();¶	                return TokenKind.BINOP;¶	            } ¶	            return isEqual? TokenKind.EQUAL:TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4443" _type="MoveCaretCommand" caretOffset="5729" date="Sun Feb 27 17:56:15 EST 2022" docOffset="5880" starttimestamp="1645820509543" timestamp="182065622" />
  <Command __id="4445" _type="MoveCaretCommand" caretOffset="3004" date="Sun Feb 27 17:56:26 EST 2022" docOffset="3082" starttimestamp="1645820509543" timestamp="182076936" />
  <Command __id="4446" _type="MoveCaretCommand" caretOffset="7108" date="Sun Feb 27 18:02:00 EST 2022" docOffset="7186" starttimestamp="1645820509543" timestamp="182410963" />
  <Command __id="4447" _type="MoveCaretCommand" caretOffset="7108" date="Sun Feb 27 18:02:00 EST 2022" docOffset="7186" starttimestamp="1645820509543" timestamp="182410963" />
  <Command __id="4448" _type="MoveCaretCommand" caretOffset="9029" date="Sun Feb 27 18:02:05 EST 2022" docOffset="9107" starttimestamp="1645820509543" timestamp="182415857" />
  <Command __id="4449" _type="MoveCaretCommand" caretOffset="9029" date="Sun Feb 27 18:02:05 EST 2022" docOffset="9107" starttimestamp="1645820509543" timestamp="182415857" />
  <Command __id="4450" _type="SelectTextCommand" caretOffset="7037" date="Sun Feb 27 18:02:09 EST 2022" end="9029" start="7037" starttimestamp="1645820509543" timestamp="182420147" />
  <Command __id="4451" _type="SelectTextCommand" caretOffset="7037" date="Sun Feb 27 18:02:09 EST 2022" end="9029" start="7037" starttimestamp="1645820509543" timestamp="182420147" />
  <Command __id="4452" _type="MoveCaretCommand" caretOffset="7297" date="Sun Feb 27 18:02:09 EST 2022" docOffset="7375" starttimestamp="1645820509543" timestamp="182420448" />
  <Command __id="4453" _type="MoveCaretCommand" caretOffset="7297" date="Sun Feb 27 18:02:09 EST 2022" docOffset="7375" starttimestamp="1645820509543" timestamp="182420448" />
  <Command __id="4454" _type="MoveCaretCommand" caretOffset="7070" date="Sun Feb 27 18:02:10 EST 2022" docOffset="7148" starttimestamp="1645820509543" timestamp="182421180" />
  <Command __id="4455" _type="MoveCaretCommand" caretOffset="7070" date="Sun Feb 27 18:02:10 EST 2022" docOffset="7148" starttimestamp="1645820509543" timestamp="182421180" />
  <Command __id="4456" _type="MoveCaretCommand" caretOffset="7063" date="Sun Feb 27 18:02:11 EST 2022" docOffset="7141" starttimestamp="1645820509543" timestamp="182422298" />
  <Command __id="4457" _type="MoveCaretCommand" caretOffset="7063" date="Sun Feb 27 18:02:11 EST 2022" docOffset="7141" starttimestamp="1645820509543" timestamp="182422298" />
  <Command __id="4458" _type="MoveCaretCommand" caretOffset="7035" date="Sun Feb 27 18:02:12 EST 2022" docOffset="7113" starttimestamp="1645820509543" timestamp="182422652" />
  <Command __id="4459" _type="MoveCaretCommand" caretOffset="7035" date="Sun Feb 27 18:02:12 EST 2022" docOffset="7113" starttimestamp="1645820509543" timestamp="182422652" />
  <Command __id="4460" _type="MoveCaretCommand" caretOffset="7062" date="Sun Feb 27 18:02:13 EST 2022" docOffset="7140" starttimestamp="1645820509543" timestamp="182423585" />
  <Command __id="4461" _type="MoveCaretCommand" caretOffset="7062" date="Sun Feb 27 18:02:13 EST 2022" docOffset="7140" starttimestamp="1645820509543" timestamp="182423585" />
  <Command __id="4462" _type="SelectTextCommand" caretOffset="7066" date="Sun Feb 27 18:02:13 EST 2022" end="7066" start="7051" starttimestamp="1645820509543" timestamp="182423722" />
  <Command __id="4463" _type="SelectTextCommand" caretOffset="7066" date="Sun Feb 27 18:02:13 EST 2022" end="7066" start="7051" starttimestamp="1645820509543" timestamp="182423722" />
  <Command __id="4464" _type="MoveCaretCommand" caretOffset="7035" date="Sun Feb 27 18:02:13 EST 2022" docOffset="7113" starttimestamp="1645820509543" timestamp="182424085" />
  <Command __id="4465" _type="MoveCaretCommand" caretOffset="7035" date="Sun Feb 27 18:02:13 EST 2022" docOffset="7113" starttimestamp="1645820509543" timestamp="182424085" />
  <Command __id="4466" _type="SelectTextCommand" caretOffset="7038" date="Sun Feb 27 18:02:14 EST 2022" end="7070" start="7038" starttimestamp="1645820509543" timestamp="182425341" />
  <Command __id="4467" _type="SelectTextCommand" caretOffset="7038" date="Sun Feb 27 18:02:14 EST 2022" end="7070" start="7038" starttimestamp="1645820509543" timestamp="182425341" />
  <Command __id="4468" _type="CopyCommand" date="Sun Feb 27 18:02:14 EST 2022" starttimestamp="1645820509543" timestamp="182425426" />
  <Command __id="4469" _type="MoveCaretCommand" caretOffset="7035" date="Sun Feb 27 18:02:15 EST 2022" docOffset="7113" starttimestamp="1645820509543" timestamp="182425673" />
  <Command __id="4470" _type="MoveCaretCommand" caretOffset="7035" date="Sun Feb 27 18:02:15 EST 2022" docOffset="7113" starttimestamp="1645820509543" timestamp="182425673" />
  <Command __id="4472" _type="InsertStringCommand" date="Sun Feb 27 18:02:16 EST 2022" starttimestamp="1645820509543" timestamp="182426458" timestamp2="182426458">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4473" _type="InsertStringCommand" date="Sun Feb 27 18:02:16 EST 2022" starttimestamp="1645820509543" timestamp="182426458" timestamp2="182426458">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4475" _type="InsertStringCommand" date="Sun Feb 27 18:02:16 EST 2022" starttimestamp="1645820509543" timestamp="182426574" timestamp2="182426574">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4476" _type="InsertStringCommand" date="Sun Feb 27 18:02:16 EST 2022" starttimestamp="1645820509543" timestamp="182426574" timestamp2="182426574">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4477" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 18:02:16 EST 2022" starttimestamp="1645820509543" timestamp="182426806" />
  <Command __id="4478" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 18:02:16 EST 2022" starttimestamp="1645820509543" timestamp="182426806" />
  <Command __id="4480" _type="PasteCommand" date="Sun Feb 27 18:02:16 EST 2022" starttimestamp="1645820509543" timestamp="182427122" />
  <Command __id="4482" _type="InsertStringCommand" date="Sun Feb 27 18:02:17 EST 2022" starttimestamp="1645820509543" timestamp="182427945" timestamp2="182427945">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4483" _type="InsertStringCommand" date="Sun Feb 27 18:02:17 EST 2022" starttimestamp="1645820509543" timestamp="182427945" timestamp2="182427945">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4444" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 17:56:26 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11132" docExpressionCount="1115" docLength="12198" projectName="pa1" starttimestamp="1645820509543" timestamp="182076867">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:			¶//			System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			acceptIt();¶"), Diff(INSERT,"//"), Diff(EQUAL,"			System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶"), Diff(INSERT,"//"), Diff(EQUAL,"				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				acceptIt();¶"), Diff(INSERT,"//"), Diff(EQUAL,"				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		case ID: case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			break;¶		¶		case NUM: case TRUE: case FALSE:¶			acceptIt();¶			break;¶		¶		case NEW:¶			acceptIt();¶			switch (currentToken.kind) {¶			case ID:¶				acceptIt();¶				switch (currentToken.kind) {¶				case LPAREN:¶					acceptIt();¶					accept(TokenKind.RPAREN);¶					break;¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				}¶			¶			case INT:¶				acceptIt();¶				accept(TokenKind.LBRACKET);¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				break;¶			¶			default:¶				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			break;¶		¶		default:¶			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:			
//			System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");
			acceptIt();
//			System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				acceptIt();
//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}


	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
		case ID: case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				break;
				
			// just reference
			default:
				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			
		case UNOP: case MINUS:
			acceptIt();
			parseExpression();
			break;
		
		case LPAREN:
			acceptIt();
			parseExpression();
			accept(TokenKind.RPAREN);
			break;
		
		case NUM: case TRUE: case FALSE:
			acceptIt();
			break;
		
		case NEW:
			acceptIt();
			switch (currentToken.kind) {
			case ID:
				acceptIt();
				switch (currentToken.kind) {
				case LPAREN:
					acceptIt();
					accept(TokenKind.RPAREN);
					break;
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				}
			
			case INT:
				acceptIt();
				accept(TokenKind.LBRACKET);
				parseExpression();
				accept(TokenKind.RBRACKET);
				break;
			
			default:
				parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
			}
			break;
		
		default:
			parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="4471" _type="Insert" date="Sun Feb 27 18:02:16 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11135" docExpressionCount="1115" docLength="12201" length="3" offset="7113" starttimestamp="1645820509543" timestamp="182426458">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="4474" _type="Insert" date="Sun Feb 27 18:02:16 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11138" docExpressionCount="1115" docLength="12204" length="3" offset="7116" starttimestamp="1645820509543" timestamp="182426558">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="4479" _type="Replace" date="Sun Feb 27 18:02:16 EST 2022" docASTNodeCount="1589" docActiveCodeLength="11170" docExpressionCount="1116" docLength="12236" endLine="305" insertionLength="33" int_docASTNodeCount="1584" int_docActiveCodeLength="11137" int_docExpressionCount="1115" int_docLength="12203" length="1" offset="7115" startLine="305" starttimestamp="1645820509543" timestamp="182427107">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	private void parseExpression() {]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4481" _type="Insert" date="Sun Feb 27 18:02:17 EST 2022" docASTNodeCount="1589" docActiveCodeLength="11178" docExpressionCount="1116" docLength="12244" length="8" offset="7148" starttimestamp="1645820509543" timestamp="182427945">
    <text><![CDATA[
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="4486" _type="Insert" date="Sun Feb 27 18:02:19 EST 2022" docASTNodeCount="1589" docActiveCodeLength="11179" docExpressionCount="1116" docLength="12245" length="1" offset="7144" starttimestamp="1645820509543" timestamp="182429747">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <DocumentChange __id="4491" _type="Insert" date="Sun Feb 27 18:02:22 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11180" docExpressionCount="1117" docLength="12246" length="1" offset="7153" starttimestamp="1645820509543" timestamp="182432966">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="4494" _type="Insert" date="Sun Feb 27 18:02:22 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11181" docExpressionCount="1117" docLength="12247" length="1" offset="7154" starttimestamp="1645820509543" timestamp="182433051">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="4497" _type="Insert" date="Sun Feb 27 18:02:22 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11182" docExpressionCount="1117" docLength="12248" length="1" offset="7155" starttimestamp="1645820509543" timestamp="182433214">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="4500" _type="Insert" date="Sun Feb 27 18:02:22 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11183" docExpressionCount="1117" docLength="12249" length="1" offset="7156" starttimestamp="1645820509543" timestamp="182433336">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="4503" _type="Insert" date="Sun Feb 27 18:02:22 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11184" docExpressionCount="1117" docLength="12250" length="1" offset="7157" starttimestamp="1645820509543" timestamp="182433436">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4484" _type="MoveCaretCommand" caretOffset="7066" date="Sun Feb 27 18:02:19 EST 2022" docOffset="7144" starttimestamp="1645820509543" timestamp="182429694" />
  <Command __id="4485" _type="MoveCaretCommand" caretOffset="7066" date="Sun Feb 27 18:02:19 EST 2022" docOffset="7144" starttimestamp="1645820509543" timestamp="182429694" />
  <Command __id="4487" _type="InsertStringCommand" date="Sun Feb 27 18:02:19 EST 2022" starttimestamp="1645820509543" timestamp="182429747" timestamp2="182429747">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="4488" _type="InsertStringCommand" date="Sun Feb 27 18:02:19 EST 2022" starttimestamp="1645820509543" timestamp="182429747" timestamp2="182429747">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="4489" _type="MoveCaretCommand" caretOffset="7075" date="Sun Feb 27 18:02:19 EST 2022" docOffset="7153" starttimestamp="1645820509543" timestamp="182430110" />
  <Command __id="4490" _type="MoveCaretCommand" caretOffset="7075" date="Sun Feb 27 18:02:19 EST 2022" docOffset="7153" starttimestamp="1645820509543" timestamp="182430110" />
  <Command __id="4492" _type="InsertStringCommand" date="Sun Feb 27 18:02:22 EST 2022" starttimestamp="1645820509543" timestamp="182432966" timestamp2="182432966">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="4493" _type="InsertStringCommand" date="Sun Feb 27 18:02:22 EST 2022" starttimestamp="1645820509543" timestamp="182432966" timestamp2="182432966">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="4495" _type="InsertStringCommand" date="Sun Feb 27 18:02:22 EST 2022" starttimestamp="1645820509543" timestamp="182433051" timestamp2="182433051">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4496" _type="InsertStringCommand" date="Sun Feb 27 18:02:22 EST 2022" starttimestamp="1645820509543" timestamp="182433067" timestamp2="182433067">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4498" _type="InsertStringCommand" date="Sun Feb 27 18:02:22 EST 2022" starttimestamp="1645820509543" timestamp="182433236" timestamp2="182433236">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4499" _type="InsertStringCommand" date="Sun Feb 27 18:02:22 EST 2022" starttimestamp="1645820509543" timestamp="182433236" timestamp2="182433236">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4501" _type="InsertStringCommand" date="Sun Feb 27 18:02:22 EST 2022" starttimestamp="1645820509543" timestamp="182433336" timestamp2="182433336">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4502" _type="InsertStringCommand" date="Sun Feb 27 18:02:22 EST 2022" starttimestamp="1645820509543" timestamp="182433336" timestamp2="182433336">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4504" _type="InsertStringCommand" date="Sun Feb 27 18:02:22 EST 2022" starttimestamp="1645820509543" timestamp="182433436" timestamp2="182433436">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4505" _type="InsertStringCommand" date="Sun Feb 27 18:02:22 EST 2022" starttimestamp="1645820509543" timestamp="182433436" timestamp2="182433436">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4507" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:02:31 EST 2022" starttimestamp="1645820509543" timestamp="182442271" />
  <Command __id="4508" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:02:31 EST 2022" starttimestamp="1645820509543" timestamp="182442271" />
  <Command __id="4510" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:02:32 EST 2022" starttimestamp="1645820509543" timestamp="182442487" />
  <Command __id="4511" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:02:32 EST 2022" starttimestamp="1645820509543" timestamp="182442487" />
  <Command __id="4513" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:02:32 EST 2022" starttimestamp="1645820509543" timestamp="182442656" />
  <Command __id="4514" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:02:32 EST 2022" starttimestamp="1645820509543" timestamp="182442656" />
  <Command __id="4516" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:02:32 EST 2022" starttimestamp="1645820509543" timestamp="182442818" />
  <Command __id="4517" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:02:32 EST 2022" starttimestamp="1645820509543" timestamp="182442818" />
  <DocumentChange __id="4506" _type="Delete" date="Sun Feb 27 18:02:31 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11183" docExpressionCount="1117" docLength="12249" endLine="306" length="1" offset="7157" startLine="306" starttimestamp="1645820509543" timestamp="182442271">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="4509" _type="Delete" date="Sun Feb 27 18:02:32 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11182" docExpressionCount="1117" docLength="12248" endLine="306" length="1" offset="7156" startLine="306" starttimestamp="1645820509543" timestamp="182442487">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="4512" _type="Delete" date="Sun Feb 27 18:02:32 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11181" docExpressionCount="1117" docLength="12247" endLine="306" length="1" offset="7155" startLine="306" starttimestamp="1645820509543" timestamp="182442656">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="4515" _type="Delete" date="Sun Feb 27 18:02:32 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11180" docExpressionCount="1117" docLength="12246" endLine="306" length="1" offset="7154" startLine="306" starttimestamp="1645820509543" timestamp="182442818">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="4518" _type="Delete" date="Sun Feb 27 18:02:32 EST 2022" docASTNodeCount="1589" docActiveCodeLength="11179" docExpressionCount="1116" docLength="12245" endLine="306" length="1" offset="7153" startLine="306" starttimestamp="1645820509543" timestamp="182443003">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="4519" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:02:32 EST 2022" starttimestamp="1645820509543" timestamp="182443003" />
  <Command __id="4520" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:02:32 EST 2022" starttimestamp="1645820509543" timestamp="182443003" />
  <DocumentChange __id="4521" _type="Insert" date="Sun Feb 27 18:02:36 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11180" docExpressionCount="1117" docLength="12246" length="1" offset="7153" starttimestamp="1645820509543" timestamp="182446954">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4522" _type="InsertStringCommand" date="Sun Feb 27 18:02:36 EST 2022" starttimestamp="1645820509543" timestamp="182446970" timestamp2="182446970">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4523" _type="InsertStringCommand" date="Sun Feb 27 18:02:36 EST 2022" starttimestamp="1645820509543" timestamp="182446970" timestamp2="182446970">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="4524" _type="Insert" date="Sun Feb 27 18:02:36 EST 2022" docASTNodeCount="1589" docActiveCodeLength="11181" docExpressionCount="1116" docLength="12247" length="1" offset="7154" starttimestamp="1645820509543" timestamp="182447076">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="4525" _type="InsertStringCommand" date="Sun Feb 27 18:02:36 EST 2022" starttimestamp="1645820509543" timestamp="182447076" timestamp2="182447076">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4526" _type="InsertStringCommand" date="Sun Feb 27 18:02:36 EST 2022" starttimestamp="1645820509543" timestamp="182447076" timestamp2="182447076">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="4527" _type="Insert" date="Sun Feb 27 18:02:37 EST 2022" docASTNodeCount="1589" docActiveCodeLength="11182" docExpressionCount="1116" docLength="12248" length="1" offset="7155" starttimestamp="1645820509543" timestamp="182448409">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4528" _type="InsertStringCommand" date="Sun Feb 27 18:02:37 EST 2022" starttimestamp="1645820509543" timestamp="182448409" timestamp2="182448409">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4529" _type="InsertStringCommand" date="Sun Feb 27 18:02:37 EST 2022" starttimestamp="1645820509543" timestamp="182448409" timestamp2="182448409">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4530" _type="Insert" date="Sun Feb 27 18:02:38 EST 2022" docASTNodeCount="1589" docActiveCodeLength="11184" docExpressionCount="1116" docLength="12250" length="2" offset="7156" starttimestamp="1645820509543" timestamp="182448773">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="4531" _type="InsertStringCommand" date="Sun Feb 27 18:02:38 EST 2022" starttimestamp="1645820509543" timestamp="182448773" timestamp2="182448773">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="4532" _type="InsertStringCommand" date="Sun Feb 27 18:02:38 EST 2022" starttimestamp="1645820509543" timestamp="182448773" timestamp2="182448773">
    <data><![CDATA[(]]></data>
  </Command>
  <DocumentChange __id="4533" _type="Insert" date="Sun Feb 27 18:02:39 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11185" docExpressionCount="1117" docLength="12251" length="1" offset="7157" starttimestamp="1645820509543" timestamp="182449530">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4534" _type="InsertStringCommand" date="Sun Feb 27 18:02:39 EST 2022" starttimestamp="1645820509543" timestamp="182449549" timestamp2="182449549">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4535" _type="InsertStringCommand" date="Sun Feb 27 18:02:39 EST 2022" starttimestamp="1645820509543" timestamp="182449550" timestamp2="182449550">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="4536" _type="Insert" date="Sun Feb 27 18:02:39 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11186" docExpressionCount="1117" docLength="12252" length="1" offset="7158" starttimestamp="1645820509543" timestamp="182449596">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="4537" _type="InsertStringCommand" date="Sun Feb 27 18:02:39 EST 2022" starttimestamp="1645820509543" timestamp="182449596" timestamp2="182449596">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4538" _type="InsertStringCommand" date="Sun Feb 27 18:02:39 EST 2022" starttimestamp="1645820509543" timestamp="182449596" timestamp2="182449596">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="4539" _type="Insert" date="Sun Feb 27 18:02:39 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11187" docExpressionCount="1117" docLength="12253" length="1" offset="7159" starttimestamp="1645820509543" timestamp="182449812">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4540" _type="InsertStringCommand" date="Sun Feb 27 18:02:39 EST 2022" starttimestamp="1645820509543" timestamp="182449812" timestamp2="182449812">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4541" _type="InsertStringCommand" date="Sun Feb 27 18:02:39 EST 2022" starttimestamp="1645820509543" timestamp="182449812" timestamp2="182449812">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4542" _type="Delete" date="Sun Feb 27 18:02:39 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11186" docExpressionCount="1117" docLength="12252" endLine="306" length="1" offset="7159" startLine="306" starttimestamp="1645820509543" timestamp="182450343">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4543" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:02:39 EST 2022" starttimestamp="1645820509543" timestamp="182450343" />
  <Command __id="4544" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:02:39 EST 2022" starttimestamp="1645820509543" timestamp="182450343" />
  <DocumentChange __id="4545" _type="Insert" date="Sun Feb 27 18:02:40 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11187" docExpressionCount="1117" docLength="12253" length="1" offset="7159" starttimestamp="1645820509543" timestamp="182450481">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <Command __id="4546" _type="InsertStringCommand" date="Sun Feb 27 18:02:40 EST 2022" starttimestamp="1645820509543" timestamp="182450481" timestamp2="182450481">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="4547" _type="InsertStringCommand" date="Sun Feb 27 18:02:40 EST 2022" starttimestamp="1645820509543" timestamp="182450481" timestamp2="182450481">
    <data><![CDATA[R]]></data>
  </Command>
  <DocumentChange __id="4548" _type="Insert" date="Sun Feb 27 18:02:40 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11188" docExpressionCount="1117" docLength="12254" length="1" offset="7160" starttimestamp="1645820509543" timestamp="182450828">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4549" _type="InsertStringCommand" date="Sun Feb 27 18:02:40 EST 2022" starttimestamp="1645820509543" timestamp="182450828" timestamp2="182450828">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4550" _type="InsertStringCommand" date="Sun Feb 27 18:02:40 EST 2022" starttimestamp="1645820509543" timestamp="182450828" timestamp2="182450828">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="4551" _type="Insert" date="Sun Feb 27 18:02:40 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11189" docExpressionCount="1117" docLength="12255" length="1" offset="7161" starttimestamp="1645820509543" timestamp="182451075">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="4552" _type="InsertStringCommand" date="Sun Feb 27 18:02:40 EST 2022" starttimestamp="1645820509543" timestamp="182451075" timestamp2="182451075">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4553" _type="InsertStringCommand" date="Sun Feb 27 18:02:40 EST 2022" starttimestamp="1645820509543" timestamp="182451075" timestamp2="182451075">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="4554" _type="Insert" date="Sun Feb 27 18:02:40 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11190" docExpressionCount="1117" docLength="12256" length="1" offset="7162" starttimestamp="1645820509543" timestamp="182451182">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4555" _type="InsertStringCommand" date="Sun Feb 27 18:02:40 EST 2022" starttimestamp="1645820509543" timestamp="182451182" timestamp2="182451182">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4556" _type="InsertStringCommand" date="Sun Feb 27 18:02:40 EST 2022" starttimestamp="1645820509543" timestamp="182451182" timestamp2="182451182">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="4557" _type="Insert" date="Sun Feb 27 18:02:40 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11191" docExpressionCount="1117" docLength="12257" length="1" offset="7163" starttimestamp="1645820509543" timestamp="182451313">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="4558" _type="InsertStringCommand" date="Sun Feb 27 18:02:40 EST 2022" starttimestamp="1645820509543" timestamp="182451313" timestamp2="182451313">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4559" _type="InsertStringCommand" date="Sun Feb 27 18:02:40 EST 2022" starttimestamp="1645820509543" timestamp="182451313" timestamp2="182451313">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="4560" _type="Insert" date="Sun Feb 27 18:02:41 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11192" docExpressionCount="1117" docLength="12258" length="1" offset="7164" starttimestamp="1645820509543" timestamp="182451497">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4561" _type="InsertStringCommand" date="Sun Feb 27 18:02:41 EST 2022" starttimestamp="1645820509543" timestamp="182451497" timestamp2="182451497">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4562" _type="InsertStringCommand" date="Sun Feb 27 18:02:41 EST 2022" starttimestamp="1645820509543" timestamp="182451497" timestamp2="182451497">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="4563" _type="Insert" date="Sun Feb 27 18:02:41 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11193" docExpressionCount="1117" docLength="12259" length="1" offset="7165" starttimestamp="1645820509543" timestamp="182451660">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="4564" _type="InsertStringCommand" date="Sun Feb 27 18:02:41 EST 2022" starttimestamp="1645820509543" timestamp="182451676" timestamp2="182451676">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4565" _type="InsertStringCommand" date="Sun Feb 27 18:02:41 EST 2022" starttimestamp="1645820509543" timestamp="182451676" timestamp2="182451676">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="4566" _type="Insert" date="Sun Feb 27 18:02:41 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11194" docExpressionCount="1117" docLength="12260" length="1" offset="7166" starttimestamp="1645820509543" timestamp="182451813">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="4567" _type="InsertStringCommand" date="Sun Feb 27 18:02:41 EST 2022" starttimestamp="1645820509543" timestamp="182451829" timestamp2="182451829">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4568" _type="InsertStringCommand" date="Sun Feb 27 18:02:41 EST 2022" starttimestamp="1645820509543" timestamp="182451829" timestamp2="182451829">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4570" _type="InsertStringCommand" date="Sun Feb 27 18:02:41 EST 2022" starttimestamp="1645820509543" timestamp="182452145" timestamp2="182452145">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4571" _type="InsertStringCommand" date="Sun Feb 27 18:02:41 EST 2022" starttimestamp="1645820509543" timestamp="182452145" timestamp2="182452145">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4572" _type="MoveCaretCommand" caretOffset="7203" date="Sun Feb 27 18:04:49 EST 2022" docOffset="7281" starttimestamp="1645820509543" timestamp="182579961" />
  <Command __id="4573" _type="MoveCaretCommand" caretOffset="7203" date="Sun Feb 27 18:04:49 EST 2022" docOffset="7281" starttimestamp="1645820509543" timestamp="182579961" />
  <Command __id="4574" _type="MoveCaretCommand" caretOffset="7095" date="Sun Feb 27 18:04:51 EST 2022" docOffset="7173" starttimestamp="1645820509543" timestamp="182581649" />
  <Command __id="4575" _type="MoveCaretCommand" caretOffset="7095" date="Sun Feb 27 18:04:51 EST 2022" docOffset="7173" starttimestamp="1645820509543" timestamp="182581649" />
  <DocumentChange __id="4569" _type="Insert" date="Sun Feb 27 18:02:41 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11195" docExpressionCount="1117" docLength="12261" length="1" offset="7167" starttimestamp="1645820509543" timestamp="182452145">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4576" _type="SelectTextCommand" caretOffset="7038" date="Sun Feb 27 18:04:52 EST 2022" end="7095" start="7038" starttimestamp="1645820509543" timestamp="182582781" />
  <Command __id="4577" _type="SelectTextCommand" caretOffset="7038" date="Sun Feb 27 18:04:52 EST 2022" end="7095" start="7038" starttimestamp="1645820509543" timestamp="182582781" />
  <DocumentChange __id="4578" _type="Delete" date="Sun Feb 27 18:04:54 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11138" docExpressionCount="1115" docLength="12204" endLine="307" length="57" offset="7116" startLine="305" starttimestamp="1645820509543" timestamp="182584513">
    <text><![CDATA[private void parseExpression1() {
		if (isReference)
	}]]></text>
  </DocumentChange>
  <Command __id="4579" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:04:54 EST 2022" starttimestamp="1645820509543" timestamp="182584521" />
  <Command __id="4580" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:04:54 EST 2022" starttimestamp="1645820509543" timestamp="182584522" />
  <DocumentChange __id="4581" _type="Insert" date="Sun Feb 27 18:04:54 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11139" docExpressionCount="1115" docLength="12205" length="1" offset="7116" starttimestamp="1645820509543" timestamp="182584559">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="4582" _type="InsertStringCommand" date="Sun Feb 27 18:04:54 EST 2022" starttimestamp="1645820509543" timestamp="182584566" timestamp2="182584566">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="4583" _type="InsertStringCommand" date="Sun Feb 27 18:04:54 EST 2022" starttimestamp="1645820509543" timestamp="182584566" timestamp2="182584566">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="4584" _type="Delete" date="Sun Feb 27 18:04:54 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11138" docExpressionCount="1115" docLength="12204" endLine="305" length="1" offset="7116" startLine="305" starttimestamp="1645820509543" timestamp="182584757">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="4585" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:04:54 EST 2022" starttimestamp="1645820509543" timestamp="182584757" />
  <Command __id="4586" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:04:54 EST 2022" starttimestamp="1645820509543" timestamp="182584757" />
  <DocumentChange __id="4587" _type="Delete" date="Sun Feb 27 18:04:54 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12203" endLine="305" length="1" offset="7115" startLine="305" starttimestamp="1645820509543" timestamp="182584958">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="4588" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:04:54 EST 2022" starttimestamp="1645820509543" timestamp="182584958" />
  <Command __id="4589" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:04:54 EST 2022" starttimestamp="1645820509543" timestamp="182584958" />
  <DocumentChange __id="4590" _type="Delete" date="Sun Feb 27 18:04:54 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11135" docExpressionCount="1115" docLength="12201" endLine="305" length="2" offset="7113" startLine="304" starttimestamp="1645820509543" timestamp="182585205">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="4591" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:04:54 EST 2022" starttimestamp="1645820509543" timestamp="182585205" />
  <Command __id="4592" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:04:54 EST 2022" starttimestamp="1645820509543" timestamp="182585205" />
  <Command __id="4594" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:04:55 EST 2022" starttimestamp="1645820509543" timestamp="182585520" />
  <Command __id="4595" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:04:55 EST 2022" starttimestamp="1645820509543" timestamp="182585520" />
  <DocumentChange __id="4593" _type="Delete" date="Sun Feb 27 18:04:55 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11133" docExpressionCount="1115" docLength="12199" endLine="304" length="2" offset="7111" startLine="303" starttimestamp="1645820509543" timestamp="182585520">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="4596" _type="MoveCaretCommand" caretOffset="7109" date="Sun Feb 27 18:04:56 EST 2022" docOffset="7187" starttimestamp="1645820509543" timestamp="182587008" />
  <Command __id="4597" _type="MoveCaretCommand" caretOffset="7109" date="Sun Feb 27 18:04:56 EST 2022" docOffset="7187" starttimestamp="1645820509543" timestamp="182587008" />
  <Command __id="4598" _type="MoveCaretCommand" caretOffset="7141" date="Sun Feb 27 18:04:57 EST 2022" docOffset="7219" starttimestamp="1645820509543" timestamp="182587762" />
  <Command __id="4599" _type="MoveCaretCommand" caretOffset="7141" date="Sun Feb 27 18:04:57 EST 2022" docOffset="7219" starttimestamp="1645820509543" timestamp="182587762" />
  <DocumentChange __id="4600" _type="Insert" date="Sun Feb 27 18:04:59 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12203" length="4" offset="7219" starttimestamp="1645820509543" timestamp="182590350">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="4601" _type="InsertStringCommand" date="Sun Feb 27 18:04:59 EST 2022" starttimestamp="1645820509543" timestamp="182590350" timestamp2="182590350">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4602" _type="InsertStringCommand" date="Sun Feb 27 18:04:59 EST 2022" starttimestamp="1645820509543" timestamp="182590350" timestamp2="182590350">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="4603" _type="Insert" date="Sun Feb 27 18:05:01 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11138" docExpressionCount="1115" docLength="12204" length="1" offset="7223" starttimestamp="1645820509543" timestamp="182591900">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="4604" _type="InsertStringCommand" date="Sun Feb 27 18:05:01 EST 2022" starttimestamp="1645820509543" timestamp="182591900" timestamp2="182591900">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="4605" _type="InsertStringCommand" date="Sun Feb 27 18:05:01 EST 2022" starttimestamp="1645820509543" timestamp="182591900" timestamp2="182591900">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="4606" _type="Insert" date="Sun Feb 27 18:05:01 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12205" length="1" offset="7224" starttimestamp="1645820509543" timestamp="182592016">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="4607" _type="InsertStringCommand" date="Sun Feb 27 18:05:01 EST 2022" starttimestamp="1645820509543" timestamp="182592032" timestamp2="182592032">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="4608" _type="InsertStringCommand" date="Sun Feb 27 18:05:01 EST 2022" starttimestamp="1645820509543" timestamp="182592032" timestamp2="182592032">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="4609" _type="Insert" date="Sun Feb 27 18:05:01 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12206" length="1" offset="7225" starttimestamp="1645820509543" timestamp="182592270">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4610" _type="InsertStringCommand" date="Sun Feb 27 18:05:01 EST 2022" starttimestamp="1645820509543" timestamp="182592286" timestamp2="182592286">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4611" _type="InsertStringCommand" date="Sun Feb 27 18:05:01 EST 2022" starttimestamp="1645820509543" timestamp="182592286" timestamp2="182592286">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="4612" _type="Insert" date="Sun Feb 27 18:05:01 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12207" length="1" offset="7226" starttimestamp="1645820509543" timestamp="182592417">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="4613" _type="InsertStringCommand" date="Sun Feb 27 18:05:01 EST 2022" starttimestamp="1645820509543" timestamp="182592417" timestamp2="182592417">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4614" _type="InsertStringCommand" date="Sun Feb 27 18:05:01 EST 2022" starttimestamp="1645820509543" timestamp="182592417" timestamp2="182592417">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="4615" _type="Insert" date="Sun Feb 27 18:05:02 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12208" length="1" offset="7227" starttimestamp="1645820509543" timestamp="182592533">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4616" _type="InsertStringCommand" date="Sun Feb 27 18:05:02 EST 2022" starttimestamp="1645820509543" timestamp="182592548" timestamp2="182592548">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4617" _type="InsertStringCommand" date="Sun Feb 27 18:05:02 EST 2022" starttimestamp="1645820509543" timestamp="182592548" timestamp2="182592548">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4618" _type="Delete" date="Sun Feb 27 18:05:02 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12207" endLine="308" length="1" offset="7227" startLine="308" starttimestamp="1645820509543" timestamp="182592771">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4619" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:02 EST 2022" starttimestamp="1645820509543" timestamp="182592771" />
  <Command __id="4620" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:02 EST 2022" starttimestamp="1645820509543" timestamp="182592771" />
  <DocumentChange __id="4621" _type="Delete" date="Sun Feb 27 18:05:02 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12206" endLine="308" length="1" offset="7226" startLine="308" starttimestamp="1645820509543" timestamp="182592918">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="4622" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:02 EST 2022" starttimestamp="1645820509543" timestamp="182592918" />
  <Command __id="4623" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:02 EST 2022" starttimestamp="1645820509543" timestamp="182592918" />
  <DocumentChange __id="4624" _type="Delete" date="Sun Feb 27 18:05:02 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12205" endLine="308" length="1" offset="7225" startLine="308" starttimestamp="1645820509543" timestamp="182593071">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4625" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:02 EST 2022" starttimestamp="1645820509543" timestamp="182593071" />
  <Command __id="4626" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:02 EST 2022" starttimestamp="1645820509543" timestamp="182593071" />
  <DocumentChange __id="4627" _type="Insert" date="Sun Feb 27 18:05:02 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12206" length="1" offset="7225" starttimestamp="1645820509543" timestamp="182593149">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4628" _type="InsertStringCommand" date="Sun Feb 27 18:05:02 EST 2022" starttimestamp="1645820509543" timestamp="182593155" timestamp2="182593155">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4629" _type="InsertStringCommand" date="Sun Feb 27 18:05:02 EST 2022" starttimestamp="1645820509543" timestamp="182593155" timestamp2="182593155">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4630" _type="Insert" date="Sun Feb 27 18:05:02 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12207" length="1" offset="7226" starttimestamp="1645820509543" timestamp="182593333">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4631" _type="InsertStringCommand" date="Sun Feb 27 18:05:02 EST 2022" starttimestamp="1645820509543" timestamp="182593333" timestamp2="182593333">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4632" _type="InsertStringCommand" date="Sun Feb 27 18:05:02 EST 2022" starttimestamp="1645820509543" timestamp="182593333" timestamp2="182593333">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="4633" _type="Insert" date="Sun Feb 27 18:05:03 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12208" length="1" offset="7227" starttimestamp="1645820509543" timestamp="182593471">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="4634" _type="InsertStringCommand" date="Sun Feb 27 18:05:03 EST 2022" starttimestamp="1645820509543" timestamp="182593471" timestamp2="182593471">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4635" _type="InsertStringCommand" date="Sun Feb 27 18:05:03 EST 2022" starttimestamp="1645820509543" timestamp="182593471" timestamp2="182593471">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="4636" _type="Insert" date="Sun Feb 27 18:05:03 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12209" length="1" offset="7228" starttimestamp="1645820509543" timestamp="182594404">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4637" _type="InsertStringCommand" date="Sun Feb 27 18:05:03 EST 2022" starttimestamp="1645820509543" timestamp="182594414" timestamp2="182594414">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4638" _type="InsertStringCommand" date="Sun Feb 27 18:05:03 EST 2022" starttimestamp="1645820509543" timestamp="182594415" timestamp2="182594415">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4639" _type="Insert" date="Sun Feb 27 18:05:04 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12210" length="1" offset="7229" starttimestamp="1645820509543" timestamp="182595359">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="4640" _type="InsertStringCommand" date="Sun Feb 27 18:05:04 EST 2022" starttimestamp="1645820509543" timestamp="182595359" timestamp2="182595359">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4641" _type="InsertStringCommand" date="Sun Feb 27 18:05:04 EST 2022" starttimestamp="1645820509543" timestamp="182595359" timestamp2="182595359">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="4642" _type="Insert" date="Sun Feb 27 18:05:05 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12211" length="1" offset="7230" starttimestamp="1645820509543" timestamp="182595474">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4643" _type="InsertStringCommand" date="Sun Feb 27 18:05:05 EST 2022" starttimestamp="1645820509543" timestamp="182595474" timestamp2="182595474">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4644" _type="InsertStringCommand" date="Sun Feb 27 18:05:05 EST 2022" starttimestamp="1645820509543" timestamp="182595474" timestamp2="182595474">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="4645" _type="Insert" date="Sun Feb 27 18:05:05 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12212" length="1" offset="7231" starttimestamp="1645820509543" timestamp="182595637">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="4646" _type="InsertStringCommand" date="Sun Feb 27 18:05:05 EST 2022" starttimestamp="1645820509543" timestamp="182595637" timestamp2="182595637">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4647" _type="InsertStringCommand" date="Sun Feb 27 18:05:05 EST 2022" starttimestamp="1645820509543" timestamp="182595637" timestamp2="182595637">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="4648" _type="Insert" date="Sun Feb 27 18:05:05 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12213" length="1" offset="7232" starttimestamp="1645820509543" timestamp="182595737">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4649" _type="InsertStringCommand" date="Sun Feb 27 18:05:05 EST 2022" starttimestamp="1645820509543" timestamp="182595753" timestamp2="182595753">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4650" _type="InsertStringCommand" date="Sun Feb 27 18:05:05 EST 2022" starttimestamp="1645820509543" timestamp="182595753" timestamp2="182595753">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="4651" _type="Insert" date="Sun Feb 27 18:05:05 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12214" length="1" offset="7233" starttimestamp="1645820509543" timestamp="182596175">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="4652" _type="InsertStringCommand" date="Sun Feb 27 18:05:05 EST 2022" starttimestamp="1645820509543" timestamp="182596175" timestamp2="182596175">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4653" _type="InsertStringCommand" date="Sun Feb 27 18:05:05 EST 2022" starttimestamp="1645820509543" timestamp="182596175" timestamp2="182596175">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="4654" _type="Insert" date="Sun Feb 27 18:05:05 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12215" length="1" offset="7234" starttimestamp="1645820509543" timestamp="182596359">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4655" _type="InsertStringCommand" date="Sun Feb 27 18:05:05 EST 2022" starttimestamp="1645820509543" timestamp="182596359" timestamp2="182596359">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4656" _type="InsertStringCommand" date="Sun Feb 27 18:05:05 EST 2022" starttimestamp="1645820509543" timestamp="182596359" timestamp2="182596359">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="4657" _type="Delete" date="Sun Feb 27 18:05:06 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12214" endLine="308" length="1" offset="7234" startLine="308" starttimestamp="1645820509543" timestamp="182596538">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4658" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182596538" />
  <Command __id="4659" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182596538" />
  <DocumentChange __id="4660" _type="Delete" date="Sun Feb 27 18:05:06 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12213" endLine="308" length="1" offset="7233" startLine="308" starttimestamp="1645820509543" timestamp="182597039">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="4661" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597039" />
  <Command __id="4662" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597039" />
  <DocumentChange __id="4663" _type="Delete" date="Sun Feb 27 18:05:06 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12212" endLine="308" length="1" offset="7232" startLine="308" starttimestamp="1645820509543" timestamp="182597077">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4664" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597077" />
  <Command __id="4665" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597077" />
  <DocumentChange __id="4666" _type="Delete" date="Sun Feb 27 18:05:06 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12211" endLine="308" length="1" offset="7231" startLine="308" starttimestamp="1645820509543" timestamp="182597108">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="4667" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597108" />
  <Command __id="4668" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597108" />
  <DocumentChange __id="4669" _type="Delete" date="Sun Feb 27 18:05:06 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12210" endLine="308" length="1" offset="7230" startLine="308" starttimestamp="1645820509543" timestamp="182597139">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4670" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597139" />
  <Command __id="4671" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597139" />
  <DocumentChange __id="4672" _type="Delete" date="Sun Feb 27 18:05:06 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12209" endLine="308" length="1" offset="7229" startLine="308" starttimestamp="1645820509543" timestamp="182597177">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="4673" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597177" />
  <Command __id="4674" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597177" />
  <DocumentChange __id="4675" _type="Delete" date="Sun Feb 27 18:05:06 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12208" endLine="308" length="1" offset="7228" startLine="308" starttimestamp="1645820509543" timestamp="182597208">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4676" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597208" />
  <Command __id="4677" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597208" />
  <DocumentChange __id="4678" _type="Delete" date="Sun Feb 27 18:05:06 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12207" endLine="308" length="1" offset="7227" startLine="308" starttimestamp="1645820509543" timestamp="182597239">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="4679" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597239" />
  <Command __id="4680" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597239" />
  <DocumentChange __id="4681" _type="Delete" date="Sun Feb 27 18:05:06 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12206" endLine="308" length="1" offset="7226" startLine="308" starttimestamp="1645820509543" timestamp="182597377">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4682" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597377" />
  <Command __id="4683" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:06 EST 2022" starttimestamp="1645820509543" timestamp="182597392" />
  <DocumentChange __id="4684" _type="Insert" date="Sun Feb 27 18:05:07 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12207" length="1" offset="7226" starttimestamp="1645820509543" timestamp="182597562">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="4685" _type="InsertStringCommand" date="Sun Feb 27 18:05:07 EST 2022" starttimestamp="1645820509543" timestamp="182597577" timestamp2="182597577">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4686" _type="InsertStringCommand" date="Sun Feb 27 18:05:07 EST 2022" starttimestamp="1645820509543" timestamp="182597577" timestamp2="182597577">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="4687" _type="Insert" date="Sun Feb 27 18:05:07 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12208" length="1" offset="7227" starttimestamp="1645820509543" timestamp="182597709">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="4688" _type="InsertStringCommand" date="Sun Feb 27 18:05:07 EST 2022" starttimestamp="1645820509543" timestamp="182597709" timestamp2="182597709">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4689" _type="InsertStringCommand" date="Sun Feb 27 18:05:07 EST 2022" starttimestamp="1645820509543" timestamp="182597709" timestamp2="182597709">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="4690" _type="Insert" date="Sun Feb 27 18:05:07 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12209" length="1" offset="7228" starttimestamp="1645820509543" timestamp="182597862">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="4691" _type="InsertStringCommand" date="Sun Feb 27 18:05:07 EST 2022" starttimestamp="1645820509543" timestamp="182597862" timestamp2="182597862">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4692" _type="InsertStringCommand" date="Sun Feb 27 18:05:07 EST 2022" starttimestamp="1645820509543" timestamp="182597862" timestamp2="182597862">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="4693" _type="Insert" date="Sun Feb 27 18:05:07 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12210" length="1" offset="7229" starttimestamp="1645820509543" timestamp="182598094">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="4694" _type="InsertStringCommand" date="Sun Feb 27 18:05:07 EST 2022" starttimestamp="1645820509543" timestamp="182598094" timestamp2="182598094">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4695" _type="InsertStringCommand" date="Sun Feb 27 18:05:07 EST 2022" starttimestamp="1645820509543" timestamp="182598094" timestamp2="182598094">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="4696" _type="Insert" date="Sun Feb 27 18:05:07 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12211" length="1" offset="7230" starttimestamp="1645820509543" timestamp="182598341">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="4697" _type="InsertStringCommand" date="Sun Feb 27 18:05:07 EST 2022" starttimestamp="1645820509543" timestamp="182598356" timestamp2="182598356">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4698" _type="InsertStringCommand" date="Sun Feb 27 18:05:07 EST 2022" starttimestamp="1645820509543" timestamp="182598356" timestamp2="182598356">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="4699" _type="Insert" date="Sun Feb 27 18:05:08 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12212" length="1" offset="7231" starttimestamp="1645820509543" timestamp="182598462">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="4700" _type="InsertStringCommand" date="Sun Feb 27 18:05:08 EST 2022" starttimestamp="1645820509543" timestamp="182598462" timestamp2="182598462">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4701" _type="InsertStringCommand" date="Sun Feb 27 18:05:08 EST 2022" starttimestamp="1645820509543" timestamp="182598462" timestamp2="182598462">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="4702" _type="Insert" date="Sun Feb 27 18:05:08 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12213" length="1" offset="7232" starttimestamp="1645820509543" timestamp="182598610">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4703" _type="InsertStringCommand" date="Sun Feb 27 18:05:08 EST 2022" starttimestamp="1645820509543" timestamp="182598626" timestamp2="182598626">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4704" _type="InsertStringCommand" date="Sun Feb 27 18:05:08 EST 2022" starttimestamp="1645820509543" timestamp="182598626" timestamp2="182598626">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4705" _type="Insert" date="Sun Feb 27 18:05:08 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12214" length="1" offset="7233" starttimestamp="1645820509543" timestamp="182598763">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <Command __id="4706" _type="InsertStringCommand" date="Sun Feb 27 18:05:08 EST 2022" starttimestamp="1645820509543" timestamp="182598763" timestamp2="182598763">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="4707" _type="InsertStringCommand" date="Sun Feb 27 18:05:08 EST 2022" starttimestamp="1645820509543" timestamp="182598763" timestamp2="182598763">
    <data><![CDATA[w]]></data>
  </Command>
  <DocumentChange __id="4708" _type="Insert" date="Sun Feb 27 18:05:08 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12215" length="1" offset="7234" starttimestamp="1645820509543" timestamp="182598879">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4709" _type="InsertStringCommand" date="Sun Feb 27 18:05:08 EST 2022" starttimestamp="1645820509543" timestamp="182598895" timestamp2="182598895">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4710" _type="InsertStringCommand" date="Sun Feb 27 18:05:08 EST 2022" starttimestamp="1645820509543" timestamp="182598895" timestamp2="182598895">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="4711" _type="Insert" date="Sun Feb 27 18:05:08 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12216" length="1" offset="7235" starttimestamp="1645820509543" timestamp="182598995">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="4712" _type="InsertStringCommand" date="Sun Feb 27 18:05:08 EST 2022" starttimestamp="1645820509543" timestamp="182599011" timestamp2="182599011">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4713" _type="InsertStringCommand" date="Sun Feb 27 18:05:08 EST 2022" starttimestamp="1645820509543" timestamp="182599011" timestamp2="182599011">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="4714" _type="Insert" date="Sun Feb 27 18:05:08 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12217" length="1" offset="7236" starttimestamp="1645820509543" timestamp="182599127">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <Command __id="4715" _type="InsertStringCommand" date="Sun Feb 27 18:05:08 EST 2022" starttimestamp="1645820509543" timestamp="182599127" timestamp2="182599127">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="4716" _type="InsertStringCommand" date="Sun Feb 27 18:05:08 EST 2022" starttimestamp="1645820509543" timestamp="182599127" timestamp2="182599127">
    <data><![CDATA[h]]></data>
  </Command>
  <DocumentChange __id="4717" _type="Insert" date="Sun Feb 27 18:05:08 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12218" length="1" offset="7237" starttimestamp="1645820509543" timestamp="182599228">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4718" _type="InsertStringCommand" date="Sun Feb 27 18:05:08 EST 2022" starttimestamp="1645820509543" timestamp="182599243" timestamp2="182599243">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4719" _type="InsertStringCommand" date="Sun Feb 27 18:05:08 EST 2022" starttimestamp="1645820509543" timestamp="182599243" timestamp2="182599243">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4720" _type="Insert" date="Sun Feb 27 18:05:09 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12219" length="1" offset="7238" starttimestamp="1645820509543" timestamp="182599474">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="4721" _type="InsertStringCommand" date="Sun Feb 27 18:05:09 EST 2022" starttimestamp="1645820509543" timestamp="182599478" timestamp2="182599478">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4722" _type="InsertStringCommand" date="Sun Feb 27 18:05:09 EST 2022" starttimestamp="1645820509543" timestamp="182599478" timestamp2="182599478">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="4723" _type="Insert" date="Sun Feb 27 18:05:09 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12220" length="1" offset="7239" starttimestamp="1645820509543" timestamp="182599555">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4724" _type="InsertStringCommand" date="Sun Feb 27 18:05:09 EST 2022" starttimestamp="1645820509543" timestamp="182599567" timestamp2="182599567">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4725" _type="InsertStringCommand" date="Sun Feb 27 18:05:09 EST 2022" starttimestamp="1645820509543" timestamp="182599567" timestamp2="182599567">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="4726" _type="Insert" date="Sun Feb 27 18:05:09 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12221" length="1" offset="7240" starttimestamp="1645820509543" timestamp="182600313">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="4727" _type="InsertStringCommand" date="Sun Feb 27 18:05:09 EST 2022" starttimestamp="1645820509543" timestamp="182600329" timestamp2="182600329">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4728" _type="InsertStringCommand" date="Sun Feb 27 18:05:09 EST 2022" starttimestamp="1645820509543" timestamp="182600329" timestamp2="182600329">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="4729" _type="Insert" date="Sun Feb 27 18:05:09 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12222" length="1" offset="7241" starttimestamp="1645820509543" timestamp="182600445">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4730" _type="InsertStringCommand" date="Sun Feb 27 18:05:10 EST 2022" starttimestamp="1645820509543" timestamp="182600460" timestamp2="182600460">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4731" _type="InsertStringCommand" date="Sun Feb 27 18:05:10 EST 2022" starttimestamp="1645820509543" timestamp="182600460" timestamp2="182600460">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="4732" _type="Insert" date="Sun Feb 27 18:05:10 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12223" length="1" offset="7242" starttimestamp="1645820509543" timestamp="182600545">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="4733" _type="InsertStringCommand" date="Sun Feb 27 18:05:10 EST 2022" starttimestamp="1645820509543" timestamp="182600561" timestamp2="182600561">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4734" _type="InsertStringCommand" date="Sun Feb 27 18:05:10 EST 2022" starttimestamp="1645820509543" timestamp="182600567" timestamp2="182600567">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="4735" _type="Insert" date="Sun Feb 27 18:05:10 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12224" length="1" offset="7243" starttimestamp="1645820509543" timestamp="182600567">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="4736" _type="InsertStringCommand" date="Sun Feb 27 18:05:10 EST 2022" starttimestamp="1645820509543" timestamp="182600583" timestamp2="182600583">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4737" _type="InsertStringCommand" date="Sun Feb 27 18:05:10 EST 2022" starttimestamp="1645820509543" timestamp="182600583" timestamp2="182600583">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="4738" _type="Delete" date="Sun Feb 27 18:05:10 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12223" endLine="308" length="1" offset="7243" startLine="308" starttimestamp="1645820509543" timestamp="182601331">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="4739" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:10 EST 2022" starttimestamp="1645820509543" timestamp="182601331" />
  <Command __id="4740" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:05:10 EST 2022" starttimestamp="1645820509543" timestamp="182601331" />
  <DocumentChange __id="4741" _type="Insert" date="Sun Feb 27 18:05:10 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12224" length="1" offset="7243" starttimestamp="1645820509543" timestamp="182601400">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4742" _type="InsertStringCommand" date="Sun Feb 27 18:05:10 EST 2022" starttimestamp="1645820509543" timestamp="182601416" timestamp2="182601416">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4743" _type="InsertStringCommand" date="Sun Feb 27 18:05:10 EST 2022" starttimestamp="1645820509543" timestamp="182601416" timestamp2="182601416">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="4744" _type="Insert" date="Sun Feb 27 18:05:11 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12225" length="1" offset="7244" starttimestamp="1645820509543" timestamp="182601547">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="4745" _type="InsertStringCommand" date="Sun Feb 27 18:05:11 EST 2022" starttimestamp="1645820509543" timestamp="182601547" timestamp2="182601547">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4746" _type="InsertStringCommand" date="Sun Feb 27 18:05:11 EST 2022" starttimestamp="1645820509543" timestamp="182601547" timestamp2="182601547">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="4747" _type="Insert" date="Sun Feb 27 18:05:11 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12226" length="1" offset="7245" starttimestamp="1645820509543" timestamp="182601647">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="4748" _type="InsertStringCommand" date="Sun Feb 27 18:05:11 EST 2022" starttimestamp="1645820509543" timestamp="182601669" timestamp2="182601669">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4749" _type="InsertStringCommand" date="Sun Feb 27 18:05:11 EST 2022" starttimestamp="1645820509543" timestamp="182601669" timestamp2="182601669">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4751" _type="InsertStringCommand" date="Sun Feb 27 18:05:11 EST 2022" starttimestamp="1645820509543" timestamp="182601816" timestamp2="182601816">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4752" _type="InsertStringCommand" date="Sun Feb 27 18:05:11 EST 2022" starttimestamp="1645820509543" timestamp="182601816" timestamp2="182601816">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4753" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 18:05:12 EST 2022" starttimestamp="1645820509543" timestamp="182602815" />
  <Command __id="4754" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:05:12 EST 2022" starttimestamp="1645820509543" timestamp="182602918" />
  <Command __id="4755" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:05:12 EST 2022" starttimestamp="1645820509543" timestamp="182602933" />
  <Command __id="4756" _type="MoveCaretCommand" caretOffset="7208" date="Sun Feb 27 18:05:12 EST 2022" docOffset="7286" starttimestamp="1645820509543" timestamp="182603272" />
  <Command __id="4757" _type="MoveCaretCommand" caretOffset="7208" date="Sun Feb 27 18:05:12 EST 2022" docOffset="7286" starttimestamp="1645820509543" timestamp="182603272" />
  <Command __id="4758" _type="SelectTextCommand" caretOffset="7937" date="Sun Feb 27 18:05:19 EST 2022" end="7937" start="7145" starttimestamp="1645820509543" timestamp="182609768" />
  <Command __id="4759" _type="SelectTextCommand" caretOffset="7937" date="Sun Feb 27 18:05:19 EST 2022" end="7937" start="7145" starttimestamp="1645820509543" timestamp="182609768" />
  <Command __id="4760" _type="SelectTextCommand" caretOffset="7301" date="Sun Feb 27 18:05:19 EST 2022" end="7307" start="7301" starttimestamp="1645820509543" timestamp="182610200" />
  <Command __id="4761" _type="SelectTextCommand" caretOffset="7301" date="Sun Feb 27 18:05:19 EST 2022" end="7307" start="7301" starttimestamp="1645820509543" timestamp="182610200" />
  <Command __id="4762" _type="MoveCaretCommand" caretOffset="7140" date="Sun Feb 27 18:05:20 EST 2022" docOffset="7218" starttimestamp="1645820509543" timestamp="182610871" />
  <Command __id="4763" _type="MoveCaretCommand" caretOffset="7140" date="Sun Feb 27 18:05:20 EST 2022" docOffset="7218" starttimestamp="1645820509543" timestamp="182610871" />
  <Command __id="4764" _type="MoveCaretCommand" caretOffset="7141" date="Sun Feb 27 18:05:21 EST 2022" docOffset="7219" starttimestamp="1645820509543" timestamp="182612057" />
  <Command __id="4765" _type="MoveCaretCommand" caretOffset="7141" date="Sun Feb 27 18:05:21 EST 2022" docOffset="7219" starttimestamp="1645820509543" timestamp="182612057" />
  <DocumentChange __id="4750" _type="Insert" date="Sun Feb 27 18:05:11 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11137" docExpressionCount="1115" docLength="12227" length="1" offset="7246" starttimestamp="1645820509543" timestamp="182601816">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="4768" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11138" docExpressionCount="1115" docLength="12228" length="1" offset="7221" starttimestamp="1645820509543" timestamp="182624208">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4769" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11139" docExpressionCount="1115" docLength="12229" length="1" offset="7250" starttimestamp="1645820509543" timestamp="182624208">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4770" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11140" docExpressionCount="1115" docLength="12230" length="1" offset="7274" starttimestamp="1645820509543" timestamp="182624208">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4771" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11141" docExpressionCount="1115" docLength="12231" length="1" offset="7291" starttimestamp="1645820509543" timestamp="182624224">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4772" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11142" docExpressionCount="1115" docLength="12232" length="1" offset="7341" starttimestamp="1645820509543" timestamp="182624224">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4773" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11143" docExpressionCount="1115" docLength="12233" length="1" offset="7359" starttimestamp="1645820509543" timestamp="182624224">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4774" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11144" docExpressionCount="1115" docLength="12234" length="1" offset="7387" starttimestamp="1645820509543" timestamp="182624224">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4775" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11145" docExpressionCount="1115" docLength="12235" length="1" offset="7394" starttimestamp="1645820509543" timestamp="182624224">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4776" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11146" docExpressionCount="1115" docLength="12236" length="1" offset="7428" starttimestamp="1645820509543" timestamp="182624224">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4777" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11147" docExpressionCount="1115" docLength="12237" length="1" offset="7448" starttimestamp="1645820509543" timestamp="182624239">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4778" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11148" docExpressionCount="1115" docLength="12238" length="1" offset="7466" starttimestamp="1645820509543" timestamp="182624239">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4779" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11149" docExpressionCount="1115" docLength="12239" length="1" offset="7491" starttimestamp="1645820509543" timestamp="182624239">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4780" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11150" docExpressionCount="1115" docLength="12240" length="1" offset="7525" starttimestamp="1645820509543" timestamp="182624239">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4781" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11151" docExpressionCount="1115" docLength="12241" length="1" offset="7538" starttimestamp="1645820509543" timestamp="182624239">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4782" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11152" docExpressionCount="1115" docLength="12242" length="1" offset="7544" starttimestamp="1645820509543" timestamp="182624255">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4783" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11153" docExpressionCount="1115" docLength="12243" length="1" offset="7562" starttimestamp="1645820509543" timestamp="182624255">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4784" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11154" docExpressionCount="1115" docLength="12244" length="1" offset="7580" starttimestamp="1645820509543" timestamp="182624255">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4785" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11155" docExpressionCount="1115" docLength="12245" length="1" offset="7631" starttimestamp="1645820509543" timestamp="182624262">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4786" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11156" docExpressionCount="1115" docLength="12246" length="1" offset="7650" starttimestamp="1645820509543" timestamp="182624262">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4787" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11157" docExpressionCount="1115" docLength="12247" length="1" offset="7665" starttimestamp="1645820509543" timestamp="182624262">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4788" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11158" docExpressionCount="1115" docLength="12248" length="1" offset="7693" starttimestamp="1645820509543" timestamp="182624262">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4789" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11159" docExpressionCount="1115" docLength="12249" length="1" offset="7726" starttimestamp="1645820509543" timestamp="182624262">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4790" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11160" docExpressionCount="1115" docLength="12250" length="1" offset="7734" starttimestamp="1645820509543" timestamp="182624262">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4791" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11161" docExpressionCount="1115" docLength="12251" length="1" offset="7747" starttimestamp="1645820509543" timestamp="182624262">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4792" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11162" docExpressionCount="1115" docLength="12252" length="1" offset="7754" starttimestamp="1645820509543" timestamp="182624277">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4793" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11163" docExpressionCount="1115" docLength="12253" length="1" offset="7777" starttimestamp="1645820509543" timestamp="182624277">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4794" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11164" docExpressionCount="1115" docLength="12254" length="1" offset="7791" starttimestamp="1645820509543" timestamp="182624277">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4795" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11165" docExpressionCount="1115" docLength="12255" length="1" offset="7937" starttimestamp="1645820509543" timestamp="182624277">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4796" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11166" docExpressionCount="1115" docLength="12256" length="1" offset="7944" starttimestamp="1645820509543" timestamp="182624277">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4797" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11167" docExpressionCount="1115" docLength="12257" length="1" offset="7950" starttimestamp="1645820509543" timestamp="182624277">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4798" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11168" docExpressionCount="1115" docLength="12258" length="1" offset="7977" starttimestamp="1645820509543" timestamp="182624277">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4799" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11169" docExpressionCount="1115" docLength="12259" length="1" offset="7994" starttimestamp="1645820509543" timestamp="182624293">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4800" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11170" docExpressionCount="1115" docLength="12260" length="1" offset="8018" starttimestamp="1645820509543" timestamp="182624293">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4801" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11171" docExpressionCount="1115" docLength="12261" length="1" offset="8030" starttimestamp="1645820509543" timestamp="182624293">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4802" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11172" docExpressionCount="1115" docLength="12262" length="1" offset="8035" starttimestamp="1645820509543" timestamp="182624293">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4803" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11173" docExpressionCount="1115" docLength="12263" length="1" offset="8052" starttimestamp="1645820509543" timestamp="182624293">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4804" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11174" docExpressionCount="1115" docLength="12264" length="1" offset="8069" starttimestamp="1645820509543" timestamp="182624308">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4805" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11175" docExpressionCount="1115" docLength="12265" length="1" offset="8093" starttimestamp="1645820509543" timestamp="182624308">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4806" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11176" docExpressionCount="1115" docLength="12266" length="1" offset="8124" starttimestamp="1645820509543" timestamp="182624308">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4807" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11177" docExpressionCount="1115" docLength="12267" length="1" offset="8136" starttimestamp="1645820509543" timestamp="182624324">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4808" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11178" docExpressionCount="1115" docLength="12268" length="1" offset="8141" starttimestamp="1645820509543" timestamp="182624324">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4809" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11179" docExpressionCount="1115" docLength="12269" length="1" offset="8178" starttimestamp="1645820509543" timestamp="182624324">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4810" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11180" docExpressionCount="1115" docLength="12270" length="1" offset="8195" starttimestamp="1645820509543" timestamp="182624324">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4811" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11181" docExpressionCount="1115" docLength="12271" length="1" offset="8207" starttimestamp="1645820509543" timestamp="182624324">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4812" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11182" docExpressionCount="1115" docLength="12272" length="1" offset="8212" starttimestamp="1645820509543" timestamp="182624324">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4813" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11183" docExpressionCount="1115" docLength="12273" length="1" offset="8226" starttimestamp="1645820509543" timestamp="182624324">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4814" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11184" docExpressionCount="1115" docLength="12274" length="1" offset="8243" starttimestamp="1645820509543" timestamp="182624324">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4815" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11185" docExpressionCount="1115" docLength="12275" length="1" offset="8277" starttimestamp="1645820509543" timestamp="182624340">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4816" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11186" docExpressionCount="1115" docLength="12276" length="1" offset="8291" starttimestamp="1645820509543" timestamp="182624340">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4817" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11187" docExpressionCount="1115" docLength="12277" length="1" offset="8309" starttimestamp="1645820509543" timestamp="182624340">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4818" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11188" docExpressionCount="1115" docLength="12278" length="1" offset="8344" starttimestamp="1645820509543" timestamp="182624340">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4819" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11189" docExpressionCount="1115" docLength="12279" length="1" offset="8363" starttimestamp="1645820509543" timestamp="182624340">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4820" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11190" docExpressionCount="1115" docLength="12280" length="1" offset="8382" starttimestamp="1645820509543" timestamp="182624340">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4821" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11191" docExpressionCount="1115" docLength="12281" length="1" offset="8415" starttimestamp="1645820509543" timestamp="182624355">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4822" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11192" docExpressionCount="1115" docLength="12282" length="1" offset="8429" starttimestamp="1645820509543" timestamp="182624355">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4823" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11193" docExpressionCount="1115" docLength="12283" length="1" offset="8450" starttimestamp="1645820509543" timestamp="182624355">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4824" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11194" docExpressionCount="1115" docLength="12284" length="1" offset="8469" starttimestamp="1645820509543" timestamp="182624362">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4825" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11195" docExpressionCount="1115" docLength="12285" length="1" offset="8495" starttimestamp="1645820509543" timestamp="182624362">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4826" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11196" docExpressionCount="1115" docLength="12286" length="1" offset="8530" starttimestamp="1645820509543" timestamp="182624362">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4827" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11197" docExpressionCount="1115" docLength="12287" length="1" offset="8544" starttimestamp="1645820509543" timestamp="182624377">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4828" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11198" docExpressionCount="1115" docLength="12288" length="1" offset="8551" starttimestamp="1645820509543" timestamp="182624377">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4829" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11199" docExpressionCount="1115" docLength="12289" length="1" offset="8559" starttimestamp="1645820509543" timestamp="182624377">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4830" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11200" docExpressionCount="1115" docLength="12290" length="1" offset="8565" starttimestamp="1645820509543" timestamp="182624377">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4831" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11201" docExpressionCount="1115" docLength="12291" length="1" offset="8580" starttimestamp="1645820509543" timestamp="182624393">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4832" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11202" docExpressionCount="1115" docLength="12292" length="1" offset="8598" starttimestamp="1645820509543" timestamp="182624393">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4833" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11203" docExpressionCount="1115" docLength="12293" length="1" offset="8632" starttimestamp="1645820509543" timestamp="182624393">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4834" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11204" docExpressionCount="1115" docLength="12294" length="1" offset="8657" starttimestamp="1645820509543" timestamp="182624393">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4835" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11205" docExpressionCount="1115" docLength="12295" length="1" offset="8691" starttimestamp="1645820509543" timestamp="182624393">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4836" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11206" docExpressionCount="1115" docLength="12296" length="1" offset="8704" starttimestamp="1645820509543" timestamp="182624409">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4837" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11207" docExpressionCount="1115" docLength="12297" length="1" offset="8710" starttimestamp="1645820509543" timestamp="182624409">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4838" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11208" docExpressionCount="1115" docLength="12298" length="1" offset="8724" starttimestamp="1645820509543" timestamp="182624409">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="4766" _type="SelectTextCommand" caretOffset="7143" date="Sun Feb 27 18:05:33 EST 2022" end="8773" start="7143" starttimestamp="1645820509543" timestamp="182623854" />
  <Command __id="4767" _type="SelectTextCommand" caretOffset="7143" date="Sun Feb 27 18:05:33 EST 2022" end="8773" start="7143" starttimestamp="1645820509543" timestamp="182623854" />
  <Command __id="4844" _type="InsertStringCommand" date="Sun Feb 27 18:05:34 EST 2022" starttimestamp="1645820509543" timestamp="182624472" timestamp2="182624472">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="4845" _type="InsertStringCommand" date="Sun Feb 27 18:05:34 EST 2022" starttimestamp="1645820509543" timestamp="182624472" timestamp2="182624472">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="4846" _type="MoveCaretCommand" caretOffset="8823" date="Sun Feb 27 18:05:36 EST 2022" docOffset="8901" starttimestamp="1645820509543" timestamp="182626711" />
  <Command __id="4847" _type="MoveCaretCommand" caretOffset="8823" date="Sun Feb 27 18:05:36 EST 2022" docOffset="8901" starttimestamp="1645820509543" timestamp="182626711" />
  <Command __id="4848" _type="MoveCaretCommand" caretOffset="8823" date="Sun Feb 27 18:05:38 EST 2022" docOffset="8901" starttimestamp="1645820509543" timestamp="182629265" />
  <Command __id="4849" _type="MoveCaretCommand" caretOffset="8823" date="Sun Feb 27 18:05:38 EST 2022" docOffset="8901" starttimestamp="1645820509543" timestamp="182629265" />
  <Command __id="4850" _type="MoveCaretCommand" caretOffset="7314" date="Sun Feb 27 18:05:41 EST 2022" docOffset="7392" starttimestamp="1645820509543" timestamp="182631546" />
  <Command __id="4851" _type="MoveCaretCommand" caretOffset="7314" date="Sun Feb 27 18:05:41 EST 2022" docOffset="7392" starttimestamp="1645820509543" timestamp="182631546" />
  <Command __id="4852" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 18:05:42 EST 2022" starttimestamp="1645820509543" timestamp="182632570" />
  <Command __id="4853" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:05:42 EST 2022" starttimestamp="1645820509543" timestamp="182632664" />
  <Command __id="4854" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:05:42 EST 2022" starttimestamp="1645820509543" timestamp="182632679" />
  <Command __id="4855" _type="MoveCaretCommand" caretOffset="7193" date="Sun Feb 27 18:05:42 EST 2022" docOffset="7271" starttimestamp="1645820509543" timestamp="182632983" />
  <Command __id="4856" _type="MoveCaretCommand" caretOffset="7193" date="Sun Feb 27 18:05:42 EST 2022" docOffset="7271" starttimestamp="1645820509543" timestamp="182632983" />
  <Command __id="4857" _type="MoveCaretCommand" caretOffset="7279" date="Sun Feb 27 18:06:00 EST 2022" docOffset="7357" starttimestamp="1645820509543" timestamp="182650962" />
  <Command __id="4858" _type="MoveCaretCommand" caretOffset="7279" date="Sun Feb 27 18:06:00 EST 2022" docOffset="7357" starttimestamp="1645820509543" timestamp="182650962" />
  <Command __id="4859" _type="MoveCaretCommand" caretOffset="7314" date="Sun Feb 27 18:06:00 EST 2022" docOffset="7392" starttimestamp="1645820509543" timestamp="182651331" />
  <Command __id="4860" _type="MoveCaretCommand" caretOffset="7314" date="Sun Feb 27 18:06:00 EST 2022" docOffset="7392" starttimestamp="1645820509543" timestamp="182651331" />
  <Command __id="4861" _type="MoveCaretCommand" caretOffset="7300" date="Sun Feb 27 18:06:01 EST 2022" docOffset="7378" starttimestamp="1645820509543" timestamp="182651916" />
  <Command __id="4862" _type="MoveCaretCommand" caretOffset="7300" date="Sun Feb 27 18:06:01 EST 2022" docOffset="7378" starttimestamp="1645820509543" timestamp="182651916" />
  <Command __id="4863" _type="MoveCaretCommand" caretOffset="7279" date="Sun Feb 27 18:06:02 EST 2022" docOffset="7357" starttimestamp="1645820509543" timestamp="182652586" />
  <Command __id="4864" _type="MoveCaretCommand" caretOffset="7279" date="Sun Feb 27 18:06:02 EST 2022" docOffset="7357" starttimestamp="1645820509543" timestamp="182652586" />
  <Command __id="4865" _type="MoveCaretCommand" caretOffset="7314" date="Sun Feb 27 18:06:02 EST 2022" docOffset="7392" starttimestamp="1645820509543" timestamp="182653033" />
  <Command __id="4866" _type="MoveCaretCommand" caretOffset="7314" date="Sun Feb 27 18:06:02 EST 2022" docOffset="7392" starttimestamp="1645820509543" timestamp="182653033" />
  <Command __id="4867" _type="MoveCaretCommand" caretOffset="7307" date="Sun Feb 27 18:06:19 EST 2022" docOffset="7385" starttimestamp="1645820509543" timestamp="182669778" />
  <Command __id="4868" _type="MoveCaretCommand" caretOffset="7307" date="Sun Feb 27 18:06:19 EST 2022" docOffset="7385" starttimestamp="1645820509543" timestamp="182669778" />
  <DocumentChange __id="4839" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11209" docExpressionCount="1115" docLength="12299" length="1" offset="8866" starttimestamp="1645820509543" timestamp="182624409">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4840" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11210" docExpressionCount="1115" docLength="12300" length="1" offset="8873" starttimestamp="1645820509543" timestamp="182624409">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4841" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11211" docExpressionCount="1115" docLength="12301" length="1" offset="8885" starttimestamp="1645820509543" timestamp="182624424">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4842" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11212" docExpressionCount="1115" docLength="12302" length="1" offset="8890" starttimestamp="1645820509543" timestamp="182624428">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4843" _type="Insert" date="Sun Feb 27 18:05:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11213" docExpressionCount="1115" docLength="12303" length="1" offset="8903" starttimestamp="1645820509543" timestamp="182624431">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="4869" _type="MoveCaretCommand" caretOffset="7314" date="Sun Feb 27 18:06:22 EST 2022" docOffset="7392" starttimestamp="1645820509543" timestamp="182673191" />
  <Command __id="4870" _type="MoveCaretCommand" caretOffset="7314" date="Sun Feb 27 18:06:22 EST 2022" docOffset="7392" starttimestamp="1645820509543" timestamp="182673191" />
  <Command __id="4871" _type="MoveCaretCommand" caretOffset="7314" date="Sun Feb 27 18:06:23 EST 2022" docOffset="7392" starttimestamp="1645820509543" timestamp="182673623" />
  <Command __id="4872" _type="MoveCaretCommand" caretOffset="7314" date="Sun Feb 27 18:06:23 EST 2022" docOffset="7392" starttimestamp="1645820509543" timestamp="182673623" />
  <Command __id="4873" _type="MoveCaretCommand" caretOffset="7194" date="Sun Feb 27 18:06:23 EST 2022" docOffset="7272" starttimestamp="1645820509543" timestamp="182674392" />
  <Command __id="4874" _type="MoveCaretCommand" caretOffset="7194" date="Sun Feb 27 18:06:23 EST 2022" docOffset="7272" starttimestamp="1645820509543" timestamp="182674392" />
  <Command __id="4875" _type="MoveCaretCommand" caretOffset="7211" date="Sun Feb 27 18:06:24 EST 2022" docOffset="7289" starttimestamp="1645820509543" timestamp="182674787" />
  <Command __id="4876" _type="MoveCaretCommand" caretOffset="7211" date="Sun Feb 27 18:06:24 EST 2022" docOffset="7289" starttimestamp="1645820509543" timestamp="182674787" />
  <DocumentChange __id="4877" _type="Insert" date="Sun Feb 27 18:06:25 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12309" length="6" offset="7289" starttimestamp="1645820509543" timestamp="182675794">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <Command __id="4878" _type="InsertStringCommand" date="Sun Feb 27 18:06:25 EST 2022" starttimestamp="1645820509543" timestamp="182675810" timestamp2="182675810">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4879" _type="InsertStringCommand" date="Sun Feb 27 18:06:25 EST 2022" starttimestamp="1645820509543" timestamp="182675810" timestamp2="182675810">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="4880" _type="Insert" date="Sun Feb 27 18:06:26 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11220" docExpressionCount="1115" docLength="12310" length="1" offset="7295" starttimestamp="1645820509543" timestamp="182676649">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="4881" _type="InsertStringCommand" date="Sun Feb 27 18:06:26 EST 2022" starttimestamp="1645820509543" timestamp="182676657" timestamp2="182676657">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="4882" _type="InsertStringCommand" date="Sun Feb 27 18:06:26 EST 2022" starttimestamp="1645820509543" timestamp="182676657" timestamp2="182676657">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="4883" _type="Insert" date="Sun Feb 27 18:06:26 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12311" length="1" offset="7296" starttimestamp="1645820509543" timestamp="182676767">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="4884" _type="InsertStringCommand" date="Sun Feb 27 18:06:26 EST 2022" starttimestamp="1645820509543" timestamp="182676783" timestamp2="182676783">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="4885" _type="InsertStringCommand" date="Sun Feb 27 18:06:26 EST 2022" starttimestamp="1645820509543" timestamp="182676783" timestamp2="182676783">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="4886" _type="Insert" date="Sun Feb 27 18:06:26 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12312" length="1" offset="7297" starttimestamp="1645820509543" timestamp="182676898">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4887" _type="InsertStringCommand" date="Sun Feb 27 18:06:26 EST 2022" starttimestamp="1645820509543" timestamp="182676898" timestamp2="182676898">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4888" _type="InsertStringCommand" date="Sun Feb 27 18:06:26 EST 2022" starttimestamp="1645820509543" timestamp="182676898" timestamp2="182676898">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4889" _type="Insert" date="Sun Feb 27 18:06:27 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12313" length="1" offset="7298" starttimestamp="1645820509543" timestamp="182677767">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="4890" _type="InsertStringCommand" date="Sun Feb 27 18:06:27 EST 2022" starttimestamp="1645820509543" timestamp="182677767" timestamp2="182677767">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4891" _type="InsertStringCommand" date="Sun Feb 27 18:06:27 EST 2022" starttimestamp="1645820509543" timestamp="182677767" timestamp2="182677767">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="4892" _type="Delete" date="Sun Feb 27 18:06:27 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12312" endLine="311" length="1" offset="7298" startLine="311" starttimestamp="1645820509543" timestamp="182678331">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="4893" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:06:27 EST 2022" starttimestamp="1645820509543" timestamp="182678331" />
  <Command __id="4894" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:06:27 EST 2022" starttimestamp="1645820509543" timestamp="182678331" />
  <DocumentChange __id="4895" _type="Insert" date="Sun Feb 27 18:06:27 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12313" length="1" offset="7298" starttimestamp="1645820509543" timestamp="182678430">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="4896" _type="InsertStringCommand" date="Sun Feb 27 18:06:27 EST 2022" starttimestamp="1645820509543" timestamp="182678430" timestamp2="182678430">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4897" _type="InsertStringCommand" date="Sun Feb 27 18:06:27 EST 2022" starttimestamp="1645820509543" timestamp="182678430" timestamp2="182678430">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="4898" _type="Delete" date="Sun Feb 27 18:06:28 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12312" endLine="311" length="1" offset="7298" startLine="311" starttimestamp="1645820509543" timestamp="182678684">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="4899" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:06:28 EST 2022" starttimestamp="1645820509543" timestamp="182678684" />
  <Command __id="4900" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:06:28 EST 2022" starttimestamp="1645820509543" timestamp="182678684" />
  <DocumentChange __id="4901" _type="Insert" date="Sun Feb 27 18:06:28 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12313" length="1" offset="7298" starttimestamp="1645820509543" timestamp="182678768">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="4902" _type="InsertStringCommand" date="Sun Feb 27 18:06:28 EST 2022" starttimestamp="1645820509543" timestamp="182678768" timestamp2="182678768">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4903" _type="InsertStringCommand" date="Sun Feb 27 18:06:28 EST 2022" starttimestamp="1645820509543" timestamp="182678768" timestamp2="182678768">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="4904" _type="Insert" date="Sun Feb 27 18:06:28 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12314" length="1" offset="7299" starttimestamp="1645820509543" timestamp="182678931">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="4905" _type="InsertStringCommand" date="Sun Feb 27 18:06:28 EST 2022" starttimestamp="1645820509543" timestamp="182678946" timestamp2="182678946">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4906" _type="InsertStringCommand" date="Sun Feb 27 18:06:28 EST 2022" starttimestamp="1645820509543" timestamp="182678946" timestamp2="182678946">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="4907" _type="Insert" date="Sun Feb 27 18:06:28 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12315" length="1" offset="7300" starttimestamp="1645820509543" timestamp="182679084">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="4908" _type="InsertStringCommand" date="Sun Feb 27 18:06:28 EST 2022" starttimestamp="1645820509543" timestamp="182679099" timestamp2="182679099">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4909" _type="InsertStringCommand" date="Sun Feb 27 18:06:28 EST 2022" starttimestamp="1645820509543" timestamp="182679099" timestamp2="182679099">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="4910" _type="Insert" date="Sun Feb 27 18:06:28 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12316" length="1" offset="7301" starttimestamp="1645820509543" timestamp="182679215">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="4911" _type="InsertStringCommand" date="Sun Feb 27 18:06:28 EST 2022" starttimestamp="1645820509543" timestamp="182679215" timestamp2="182679215">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4912" _type="InsertStringCommand" date="Sun Feb 27 18:06:28 EST 2022" starttimestamp="1645820509543" timestamp="182679215" timestamp2="182679215">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="4913" _type="Insert" date="Sun Feb 27 18:06:29 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12317" length="1" offset="7302" starttimestamp="1645820509543" timestamp="182679462">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4914" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182679469" timestamp2="182679469">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4915" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182679469" timestamp2="182679469">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="4916" _type="Insert" date="Sun Feb 27 18:06:29 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12318" length="1" offset="7303" starttimestamp="1645820509543" timestamp="182679546">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="4917" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182679551" timestamp2="182679551">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4918" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182679551" timestamp2="182679551">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="4919" _type="Insert" date="Sun Feb 27 18:06:29 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12319" length="1" offset="7304" starttimestamp="1645820509543" timestamp="182679660">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <Command __id="4920" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182679667" timestamp2="182679667">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="4921" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182679667" timestamp2="182679667">
    <data><![CDATA[g]]></data>
  </Command>
  <DocumentChange __id="4922" _type="Insert" date="Sun Feb 27 18:06:29 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12320" length="1" offset="7305" starttimestamp="1645820509543" timestamp="182679840">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4923" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182679840" timestamp2="182679840">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4924" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182679840" timestamp2="182679840">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4925" _type="Insert" date="Sun Feb 27 18:06:29 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12321" length="1" offset="7306" starttimestamp="1645820509543" timestamp="182680132">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <Command __id="4926" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182680148" timestamp2="182680148">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="4927" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182680148" timestamp2="182680148">
    <data><![CDATA[w]]></data>
  </Command>
  <DocumentChange __id="4928" _type="Insert" date="Sun Feb 27 18:06:29 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12322" length="1" offset="7307" starttimestamp="1645820509543" timestamp="182680232">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4929" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182680232" timestamp2="182680232">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4930" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182680232" timestamp2="182680232">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="4931" _type="Insert" date="Sun Feb 27 18:06:29 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12323" length="1" offset="7308" starttimestamp="1645820509543" timestamp="182680370">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="4932" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182680370" timestamp2="182680370">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4933" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182680370" timestamp2="182680370">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="4934" _type="Insert" date="Sun Feb 27 18:06:29 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12324" length="1" offset="7309" starttimestamp="1645820509543" timestamp="182680433">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <Command __id="4935" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182680448" timestamp2="182680448">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="4936" _type="InsertStringCommand" date="Sun Feb 27 18:06:29 EST 2022" starttimestamp="1645820509543" timestamp="182680448" timestamp2="182680448">
    <data><![CDATA[h]]></data>
  </Command>
  <DocumentChange __id="4937" _type="Insert" date="Sun Feb 27 18:06:30 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12325" length="1" offset="7310" starttimestamp="1645820509543" timestamp="182680549">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4938" _type="InsertStringCommand" date="Sun Feb 27 18:06:30 EST 2022" starttimestamp="1645820509543" timestamp="182680549" timestamp2="182680549">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4939" _type="InsertStringCommand" date="Sun Feb 27 18:06:30 EST 2022" starttimestamp="1645820509543" timestamp="182680564" timestamp2="182680564">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4940" _type="Insert" date="Sun Feb 27 18:06:30 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12326" length="1" offset="7311" starttimestamp="1645820509543" timestamp="182681257">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4941" _type="InsertStringCommand" date="Sun Feb 27 18:06:30 EST 2022" starttimestamp="1645820509543" timestamp="182681259" timestamp2="182681259">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4942" _type="InsertStringCommand" date="Sun Feb 27 18:06:30 EST 2022" starttimestamp="1645820509543" timestamp="182681259" timestamp2="182681259">
    <data><![CDATA[.]]></data>
  </Command>
  <DocumentChange __id="4943" _type="Delete" date="Sun Feb 27 18:06:31 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12325" endLine="311" length="1" offset="7311" startLine="311" starttimestamp="1645820509543" timestamp="182681825">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4944" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:06:31 EST 2022" starttimestamp="1645820509543" timestamp="182681825" />
  <Command __id="4945" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:06:31 EST 2022" starttimestamp="1645820509543" timestamp="182681825" />
  <DocumentChange __id="4946" _type="Insert" date="Sun Feb 27 18:06:31 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12326" length="1" offset="7311" starttimestamp="1645820509543" timestamp="182682372">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <Command __id="4947" _type="InsertStringCommand" date="Sun Feb 27 18:06:31 EST 2022" starttimestamp="1645820509543" timestamp="182682379" timestamp2="182682379">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="4948" _type="InsertStringCommand" date="Sun Feb 27 18:06:31 EST 2022" starttimestamp="1645820509543" timestamp="182682379" timestamp2="182682379">
    <data><![CDATA[(]]></data>
  </Command>
  <DocumentChange __id="4949" _type="Insert" date="Sun Feb 27 18:06:31 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12327" length="1" offset="7312" starttimestamp="1645820509543" timestamp="182682410">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <Command __id="4950" _type="InsertStringCommand" date="Sun Feb 27 18:06:31 EST 2022" starttimestamp="1645820509543" timestamp="182682426" timestamp2="182682426">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="4951" _type="InsertStringCommand" date="Sun Feb 27 18:06:31 EST 2022" starttimestamp="1645820509543" timestamp="182682426" timestamp2="182682426">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="4952" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:06:32 EST 2022" starttimestamp="1645820509543" timestamp="182682779" />
  <Command __id="4953" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:06:32 EST 2022" starttimestamp="1645820509543" timestamp="182682779" />
  <DocumentChange __id="4954" _type="Insert" date="Sun Feb 27 18:06:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12328" length="1" offset="7312" starttimestamp="1645820509543" timestamp="182683480">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4955" _type="InsertStringCommand" date="Sun Feb 27 18:06:33 EST 2022" starttimestamp="1645820509543" timestamp="182683496" timestamp2="182683496">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4956" _type="InsertStringCommand" date="Sun Feb 27 18:06:33 EST 2022" starttimestamp="1645820509543" timestamp="182683496" timestamp2="182683496">
    <data><![CDATA[.]]></data>
  </Command>
  <DocumentChange __id="4957" _type="Insert" date="Sun Feb 27 18:06:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12329" length="1" offset="7313" starttimestamp="1645820509543" timestamp="182683647">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="4958" _type="InsertStringCommand" date="Sun Feb 27 18:06:33 EST 2022" starttimestamp="1645820509543" timestamp="182683662" timestamp2="182683662">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4959" _type="InsertStringCommand" date="Sun Feb 27 18:06:33 EST 2022" starttimestamp="1645820509543" timestamp="182683662" timestamp2="182683662">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="4960" _type="Insert" date="Sun Feb 27 18:06:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12330" length="1" offset="7314" starttimestamp="1645820509543" timestamp="182683831">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4961" _type="InsertStringCommand" date="Sun Feb 27 18:06:33 EST 2022" starttimestamp="1645820509543" timestamp="182683847" timestamp2="182683847">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4962" _type="InsertStringCommand" date="Sun Feb 27 18:06:33 EST 2022" starttimestamp="1645820509543" timestamp="182683847" timestamp2="182683847">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="4963" _type="Delete" date="Sun Feb 27 18:06:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12329" endLine="311" length="1" offset="7314" startLine="311" starttimestamp="1645820509543" timestamp="182684110">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4964" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:06:33 EST 2022" starttimestamp="1645820509543" timestamp="182684110" />
  <Command __id="4965" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:06:33 EST 2022" starttimestamp="1645820509543" timestamp="182684110" />
  <DocumentChange __id="4966" _type="Delete" date="Sun Feb 27 18:06:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12328" endLine="311" length="1" offset="7313" startLine="311" starttimestamp="1645820509543" timestamp="182684232">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="4967" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:06:33 EST 2022" starttimestamp="1645820509543" timestamp="182684248" />
  <Command __id="4968" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:06:33 EST 2022" starttimestamp="1645820509543" timestamp="182684248" />
  <DocumentChange __id="4969" _type="Insert" date="Sun Feb 27 18:06:33 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12329" length="1" offset="7313" starttimestamp="1645820509543" timestamp="182684432">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="4970" _type="InsertStringCommand" date="Sun Feb 27 18:06:33 EST 2022" starttimestamp="1645820509543" timestamp="182684432" timestamp2="182684432">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4971" _type="InsertStringCommand" date="Sun Feb 27 18:06:33 EST 2022" starttimestamp="1645820509543" timestamp="182684432" timestamp2="182684432">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="4972" _type="Insert" date="Sun Feb 27 18:06:34 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12330" length="1" offset="7314" starttimestamp="1645820509543" timestamp="182684526">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="4973" _type="InsertStringCommand" date="Sun Feb 27 18:06:34 EST 2022" starttimestamp="1645820509543" timestamp="182684531" timestamp2="182684531">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4974" _type="InsertStringCommand" date="Sun Feb 27 18:06:34 EST 2022" starttimestamp="1645820509543" timestamp="182684531" timestamp2="182684531">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4975" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:06:34 EST 2022" starttimestamp="1645820509543" timestamp="182685096" />
  <Command __id="4976" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:06:34 EST 2022" starttimestamp="1645820509543" timestamp="182685096" />
  <Command __id="4978" _type="InsertStringCommand" date="Sun Feb 27 18:06:36 EST 2022" starttimestamp="1645820509543" timestamp="182686731" timestamp2="182686731">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="4979" _type="InsertStringCommand" date="Sun Feb 27 18:06:36 EST 2022" starttimestamp="1645820509543" timestamp="182686731" timestamp2="182686731">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="4980" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 18:06:36 EST 2022" starttimestamp="1645820509543" timestamp="182687329" />
  <Command __id="4981" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:06:36 EST 2022" starttimestamp="1645820509543" timestamp="182687419" />
  <Command __id="4982" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:06:36 EST 2022" starttimestamp="1645820509543" timestamp="182687434" />
  <Command __id="4983" _type="MoveCaretCommand" caretOffset="7342" date="Sun Feb 27 18:06:37 EST 2022" docOffset="7420" starttimestamp="1645820509543" timestamp="182687854" />
  <Command __id="4984" _type="MoveCaretCommand" caretOffset="7342" date="Sun Feb 27 18:06:37 EST 2022" docOffset="7420" starttimestamp="1645820509543" timestamp="182687854" />
  <Command __id="4985" _type="MoveCaretCommand" caretOffset="7342" date="Sun Feb 27 18:06:37 EST 2022" docOffset="7420" starttimestamp="1645820509543" timestamp="182688372" />
  <Command __id="4986" _type="MoveCaretCommand" caretOffset="7342" date="Sun Feb 27 18:06:37 EST 2022" docOffset="7420" starttimestamp="1645820509543" timestamp="182688372" />
  <Command __id="4987" _type="MoveCaretCommand" caretOffset="7892" date="Sun Feb 27 18:07:00 EST 2022" docOffset="7970" starttimestamp="1645820509543" timestamp="182711141" />
  <Command __id="4988" _type="MoveCaretCommand" caretOffset="7892" date="Sun Feb 27 18:07:00 EST 2022" docOffset="7970" starttimestamp="1645820509543" timestamp="182711141" />
  <Command __id="4989" _type="SelectTextCommand" caretOffset="7764" date="Sun Feb 27 18:07:14 EST 2022" end="7764" start="7382" starttimestamp="1645820509543" timestamp="182724546" />
  <Command __id="4990" _type="SelectTextCommand" caretOffset="7764" date="Sun Feb 27 18:07:14 EST 2022" end="7764" start="7382" starttimestamp="1645820509543" timestamp="182724546" />
  <Command __id="5010" _type="InsertStringCommand" date="Sun Feb 27 18:07:14 EST 2022" starttimestamp="1645820509543" timestamp="182724740" timestamp2="182724740">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5011" _type="InsertStringCommand" date="Sun Feb 27 18:07:14 EST 2022" starttimestamp="1645820509543" timestamp="182724741" timestamp2="182724741">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5012" _type="MoveCaretCommand" caretOffset="7717" date="Sun Feb 27 18:07:14 EST 2022" docOffset="7795" starttimestamp="1645820509543" timestamp="182725143" />
  <Command __id="5013" _type="MoveCaretCommand" caretOffset="7717" date="Sun Feb 27 18:07:14 EST 2022" docOffset="7795" starttimestamp="1645820509543" timestamp="182725143" />
  <Command __id="5014" _type="MoveCaretCommand" caretOffset="7757" date="Sun Feb 27 18:07:15 EST 2022" docOffset="7835" starttimestamp="1645820509543" timestamp="182725544" />
  <Command __id="5015" _type="MoveCaretCommand" caretOffset="7757" date="Sun Feb 27 18:07:15 EST 2022" docOffset="7835" starttimestamp="1645820509543" timestamp="182725544" />
  <Command __id="5016" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 18:07:17 EST 2022" starttimestamp="1645820509543" timestamp="182728201" />
  <Command __id="5017" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:07:17 EST 2022" starttimestamp="1645820509543" timestamp="182728303" />
  <Command __id="5018" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:07:17 EST 2022" starttimestamp="1645820509543" timestamp="182728303" />
  <Command __id="5019" _type="MoveCaretCommand" caretOffset="7718" date="Sun Feb 27 18:07:18 EST 2022" docOffset="7796" starttimestamp="1645820509543" timestamp="182728604" />
  <Command __id="5020" _type="MoveCaretCommand" caretOffset="7718" date="Sun Feb 27 18:07:18 EST 2022" docOffset="7796" starttimestamp="1645820509543" timestamp="182728604" />
  <DocumentChange __id="4977" _type="Insert" date="Sun Feb 27 18:06:36 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11219" docExpressionCount="1115" docLength="12331" length="1" offset="7316" starttimestamp="1645820509543" timestamp="182686715">
    <text><![CDATA[*]]></text>
  </DocumentChange>
  <DocumentChange __id="4991" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11220" docExpressionCount="1115" docLength="12332" length="1" offset="7456" starttimestamp="1645820509543" timestamp="182724679">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4992" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11221" docExpressionCount="1115" docLength="12333" length="1" offset="7477" starttimestamp="1645820509543" timestamp="182724684">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4993" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11222" docExpressionCount="1115" docLength="12334" length="1" offset="7496" starttimestamp="1645820509543" timestamp="182724687">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4994" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11223" docExpressionCount="1115" docLength="12335" length="1" offset="7522" starttimestamp="1645820509543" timestamp="182724690">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4995" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11224" docExpressionCount="1115" docLength="12336" length="1" offset="7557" starttimestamp="1645820509543" timestamp="182724693">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4996" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11225" docExpressionCount="1115" docLength="12337" length="1" offset="7571" starttimestamp="1645820509543" timestamp="182724695">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4997" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11226" docExpressionCount="1115" docLength="12338" length="1" offset="7578" starttimestamp="1645820509543" timestamp="182724698">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4998" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11227" docExpressionCount="1115" docLength="12339" length="1" offset="7597" starttimestamp="1645820509543" timestamp="182724700">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="4999" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11228" docExpressionCount="1115" docLength="12340" length="1" offset="7616" starttimestamp="1645820509543" timestamp="182724702">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5000" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11229" docExpressionCount="1115" docLength="12341" length="1" offset="7668" starttimestamp="1645820509543" timestamp="182724704">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5001" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11230" docExpressionCount="1115" docLength="12342" length="1" offset="7688" starttimestamp="1645820509543" timestamp="182724705">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5002" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11231" docExpressionCount="1115" docLength="12343" length="1" offset="7704" starttimestamp="1645820509543" timestamp="182724707">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5003" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11232" docExpressionCount="1115" docLength="12344" length="1" offset="7733" starttimestamp="1645820509543" timestamp="182724709">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5004" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11233" docExpressionCount="1115" docLength="12345" length="1" offset="7767" starttimestamp="1645820509543" timestamp="182724710">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5005" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11234" docExpressionCount="1115" docLength="12346" length="1" offset="7776" starttimestamp="1645820509543" timestamp="182724712">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5006" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11235" docExpressionCount="1115" docLength="12347" length="1" offset="7790" starttimestamp="1645820509543" timestamp="182724713">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5007" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11236" docExpressionCount="1115" docLength="12348" length="1" offset="7798" starttimestamp="1645820509543" timestamp="182724715">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5008" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11237" docExpressionCount="1115" docLength="12349" length="1" offset="7822" starttimestamp="1645820509543" timestamp="182724716">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5009" _type="Insert" date="Sun Feb 27 18:07:14 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11238" docExpressionCount="1115" docLength="12350" length="1" offset="7837" starttimestamp="1645820509543" timestamp="182724718">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5023" _type="Insert" date="Sun Feb 27 18:07:23 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11244" docExpressionCount="1115" docLength="12356" length="6" offset="7454" starttimestamp="1645820509543" timestamp="182734174">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="5026" _type="Insert" date="Sun Feb 27 18:07:24 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12357" length="1" offset="7460" starttimestamp="1645820509543" timestamp="182734607">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5029" _type="Insert" date="Sun Feb 27 18:07:24 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11244" docExpressionCount="1115" docLength="12358" length="1" offset="7461" starttimestamp="1645820509543" timestamp="182734755">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5032" _type="Delete" date="Sun Feb 27 18:07:24 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12357" endLine="317" length="1" offset="7461" startLine="317" starttimestamp="1645820509543" timestamp="182735097">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="5021" _type="MoveCaretCommand" caretOffset="7376" date="Sun Feb 27 18:07:22 EST 2022" docOffset="7454" starttimestamp="1645820509543" timestamp="182733342" />
  <Command __id="5022" _type="MoveCaretCommand" caretOffset="7376" date="Sun Feb 27 18:07:22 EST 2022" docOffset="7454" starttimestamp="1645820509543" timestamp="182733342" />
  <Command __id="5024" _type="InsertStringCommand" date="Sun Feb 27 18:07:23 EST 2022" starttimestamp="1645820509543" timestamp="182734196" timestamp2="182734196">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5025" _type="InsertStringCommand" date="Sun Feb 27 18:07:23 EST 2022" starttimestamp="1645820509543" timestamp="182734196" timestamp2="182734196">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5027" _type="InsertStringCommand" date="Sun Feb 27 18:07:24 EST 2022" starttimestamp="1645820509543" timestamp="182734611" timestamp2="182734611">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5028" _type="InsertStringCommand" date="Sun Feb 27 18:07:24 EST 2022" starttimestamp="1645820509543" timestamp="182734611" timestamp2="182734611">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5030" _type="InsertStringCommand" date="Sun Feb 27 18:07:24 EST 2022" starttimestamp="1645820509543" timestamp="182734772" timestamp2="182734772">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5031" _type="InsertStringCommand" date="Sun Feb 27 18:07:24 EST 2022" starttimestamp="1645820509543" timestamp="182734772" timestamp2="182734772">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5033" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:07:24 EST 2022" starttimestamp="1645820509543" timestamp="182735097" />
  <Command __id="5034" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:07:24 EST 2022" starttimestamp="1645820509543" timestamp="182735097" />
  <Command __id="5036" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:07:24 EST 2022" starttimestamp="1645820509543" timestamp="182735244" />
  <Command __id="5037" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:07:24 EST 2022" starttimestamp="1645820509543" timestamp="182735244" />
  <Command __id="5039" _type="InsertStringCommand" date="Sun Feb 27 18:07:25 EST 2022" starttimestamp="1645820509543" timestamp="182735460" timestamp2="182735460">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5040" _type="InsertStringCommand" date="Sun Feb 27 18:07:25 EST 2022" starttimestamp="1645820509543" timestamp="182735460" timestamp2="182735460">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5042" _type="InsertStringCommand" date="Sun Feb 27 18:07:25 EST 2022" starttimestamp="1645820509543" timestamp="182735814" timestamp2="182735814">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5043" _type="InsertStringCommand" date="Sun Feb 27 18:07:25 EST 2022" starttimestamp="1645820509543" timestamp="182735814" timestamp2="182735814">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5045" _type="InsertStringCommand" date="Sun Feb 27 18:07:25 EST 2022" starttimestamp="1645820509543" timestamp="182736013" timestamp2="182736013">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5046" _type="InsertStringCommand" date="Sun Feb 27 18:07:25 EST 2022" starttimestamp="1645820509543" timestamp="182736013" timestamp2="182736013">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5048" _type="InsertStringCommand" date="Sun Feb 27 18:07:25 EST 2022" starttimestamp="1645820509543" timestamp="182736345" timestamp2="182736345">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5049" _type="InsertStringCommand" date="Sun Feb 27 18:07:25 EST 2022" starttimestamp="1645820509543" timestamp="182736345" timestamp2="182736345">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5051" _type="InsertStringCommand" date="Sun Feb 27 18:07:26 EST 2022" starttimestamp="1645820509543" timestamp="182736498" timestamp2="182736498">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5052" _type="InsertStringCommand" date="Sun Feb 27 18:07:26 EST 2022" starttimestamp="1645820509543" timestamp="182736498" timestamp2="182736498">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5054" _type="InsertStringCommand" date="Sun Feb 27 18:07:26 EST 2022" starttimestamp="1645820509543" timestamp="182736561" timestamp2="182736561">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5055" _type="InsertStringCommand" date="Sun Feb 27 18:07:26 EST 2022" starttimestamp="1645820509543" timestamp="182736561" timestamp2="182736561">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5057" _type="InsertStringCommand" date="Sun Feb 27 18:07:26 EST 2022" starttimestamp="1645820509543" timestamp="182736798" timestamp2="182736798">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5058" _type="InsertStringCommand" date="Sun Feb 27 18:07:26 EST 2022" starttimestamp="1645820509543" timestamp="182736798" timestamp2="182736798">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5060" _type="InsertStringCommand" date="Sun Feb 27 18:07:26 EST 2022" starttimestamp="1645820509543" timestamp="182736892" timestamp2="182736892">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5061" _type="InsertStringCommand" date="Sun Feb 27 18:07:26 EST 2022" starttimestamp="1645820509543" timestamp="182736892" timestamp2="182736892">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5063" _type="InsertStringCommand" date="Sun Feb 27 18:07:26 EST 2022" starttimestamp="1645820509543" timestamp="182737015" timestamp2="182737015">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5064" _type="InsertStringCommand" date="Sun Feb 27 18:07:26 EST 2022" starttimestamp="1645820509543" timestamp="182737015" timestamp2="182737015">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5066" _type="InsertStringCommand" date="Sun Feb 27 18:07:26 EST 2022" starttimestamp="1645820509543" timestamp="182737162" timestamp2="182737162">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5067" _type="InsertStringCommand" date="Sun Feb 27 18:07:26 EST 2022" starttimestamp="1645820509543" timestamp="182737177" timestamp2="182737177">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5069" _type="InsertStringCommand" date="Sun Feb 27 18:07:26 EST 2022" starttimestamp="1645820509543" timestamp="182737315" timestamp2="182737315">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5070" _type="InsertStringCommand" date="Sun Feb 27 18:07:26 EST 2022" starttimestamp="1645820509543" timestamp="182737315" timestamp2="182737315">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5072" _type="InsertStringCommand" date="Sun Feb 27 18:07:27 EST 2022" starttimestamp="1645820509543" timestamp="182737462" timestamp2="182737462">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5073" _type="InsertStringCommand" date="Sun Feb 27 18:07:27 EST 2022" starttimestamp="1645820509543" timestamp="182737462" timestamp2="182737462">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5075" _type="InsertStringCommand" date="Sun Feb 27 18:07:27 EST 2022" starttimestamp="1645820509543" timestamp="182737646" timestamp2="182737646">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5076" _type="InsertStringCommand" date="Sun Feb 27 18:07:27 EST 2022" starttimestamp="1645820509543" timestamp="182737646" timestamp2="182737646">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5078" _type="InsertStringCommand" date="Sun Feb 27 18:07:27 EST 2022" starttimestamp="1645820509543" timestamp="182738347" timestamp2="182738347">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="5079" _type="InsertStringCommand" date="Sun Feb 27 18:07:27 EST 2022" starttimestamp="1645820509543" timestamp="182738347" timestamp2="182738347">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="5081" _type="InsertStringCommand" date="Sun Feb 27 18:07:27 EST 2022" starttimestamp="1645820509543" timestamp="182738417" timestamp2="182738417">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="5082" _type="InsertStringCommand" date="Sun Feb 27 18:07:27 EST 2022" starttimestamp="1645820509543" timestamp="182738417" timestamp2="182738417">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="5083" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:07:28 EST 2022" starttimestamp="1645820509543" timestamp="182738717" />
  <Command __id="5084" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:07:28 EST 2022" starttimestamp="1645820509543" timestamp="182738717" />
  <Command __id="5086" _type="InsertStringCommand" date="Sun Feb 27 18:07:28 EST 2022" starttimestamp="1645820509543" timestamp="182738902" timestamp2="182738902">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5087" _type="InsertStringCommand" date="Sun Feb 27 18:07:28 EST 2022" starttimestamp="1645820509543" timestamp="182738902" timestamp2="182738902">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5089" _type="InsertStringCommand" date="Sun Feb 27 18:07:28 EST 2022" starttimestamp="1645820509543" timestamp="182739233" timestamp2="182739233">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5090" _type="InsertStringCommand" date="Sun Feb 27 18:07:28 EST 2022" starttimestamp="1645820509543" timestamp="182739233" timestamp2="182739233">
    <data><![CDATA[x]]></data>
  </Command>
  <DocumentChange __id="5035" _type="Delete" date="Sun Feb 27 18:07:24 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11244" docExpressionCount="1115" docLength="12356" endLine="317" length="1" offset="7460" startLine="317" starttimestamp="1645820509543" timestamp="182735244">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5038" _type="Insert" date="Sun Feb 27 18:07:25 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12357" length="1" offset="7460" starttimestamp="1645820509543" timestamp="182735460">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5041" _type="Insert" date="Sun Feb 27 18:07:25 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11246" docExpressionCount="1115" docLength="12358" length="1" offset="7461" starttimestamp="1645820509543" timestamp="182735814">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5044" _type="Insert" date="Sun Feb 27 18:07:25 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12359" length="1" offset="7462" starttimestamp="1645820509543" timestamp="182735998">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5047" _type="Insert" date="Sun Feb 27 18:07:25 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12360" length="1" offset="7463" starttimestamp="1645820509543" timestamp="182736345">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5050" _type="Insert" date="Sun Feb 27 18:07:26 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12361" length="1" offset="7464" starttimestamp="1645820509543" timestamp="182736492">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5053" _type="Insert" date="Sun Feb 27 18:07:26 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12362" length="1" offset="7465" starttimestamp="1645820509543" timestamp="182736561">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5056" _type="Insert" date="Sun Feb 27 18:07:26 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12363" length="1" offset="7466" starttimestamp="1645820509543" timestamp="182736798">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="5059" _type="Insert" date="Sun Feb 27 18:07:26 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12364" length="1" offset="7467" starttimestamp="1645820509543" timestamp="182736892">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5062" _type="Insert" date="Sun Feb 27 18:07:26 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12365" length="1" offset="7468" starttimestamp="1645820509543" timestamp="182736999">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5065" _type="Insert" date="Sun Feb 27 18:07:26 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12366" length="1" offset="7469" starttimestamp="1645820509543" timestamp="182737162">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5068" _type="Insert" date="Sun Feb 27 18:07:26 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12367" length="1" offset="7470" starttimestamp="1645820509543" timestamp="182737315">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="5071" _type="Insert" date="Sun Feb 27 18:07:26 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12368" length="1" offset="7471" starttimestamp="1645820509543" timestamp="182737446">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="5074" _type="Insert" date="Sun Feb 27 18:07:27 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12369" length="1" offset="7472" starttimestamp="1645820509543" timestamp="182737631">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5077" _type="Insert" date="Sun Feb 27 18:07:27 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12370" length="1" offset="7473" starttimestamp="1645820509543" timestamp="182738347">
    <text><![CDATA[[]]></text>
  </DocumentChange>
  <DocumentChange __id="5080" _type="Insert" date="Sun Feb 27 18:07:27 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12371" length="1" offset="7474" starttimestamp="1645820509543" timestamp="182738401">
    <text><![CDATA[]]]></text>
  </DocumentChange>
  <DocumentChange __id="5085" _type="Insert" date="Sun Feb 27 18:07:28 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12372" length="1" offset="7474" starttimestamp="1645820509543" timestamp="182738895">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5088" _type="Insert" date="Sun Feb 27 18:07:28 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12373" length="1" offset="7475" starttimestamp="1645820509543" timestamp="182739233">
    <text><![CDATA[x]]></text>
  </DocumentChange>
  <DocumentChange __id="5091" _type="Insert" date="Sun Feb 27 18:07:28 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12374" length="1" offset="7476" starttimestamp="1645820509543" timestamp="182739449">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="5094" _type="Insert" date="Sun Feb 27 18:07:29 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12375" length="1" offset="7477" starttimestamp="1645820509543" timestamp="182739582">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5097" _type="Insert" date="Sun Feb 27 18:07:29 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12376" length="1" offset="7478" starttimestamp="1645820509543" timestamp="182739702">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5100" _type="Insert" date="Sun Feb 27 18:07:29 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12377" length="1" offset="7479" starttimestamp="1645820509543" timestamp="182739853">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="5103" _type="Insert" date="Sun Feb 27 18:07:29 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12378" length="1" offset="7480" starttimestamp="1645820509543" timestamp="182740002">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="5106" _type="Insert" date="Sun Feb 27 18:07:29 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12379" length="1" offset="7481" starttimestamp="1645820509543" timestamp="182740055">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="5092" _type="InsertStringCommand" date="Sun Feb 27 18:07:28 EST 2022" starttimestamp="1645820509543" timestamp="182739449" timestamp2="182739449">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5093" _type="InsertStringCommand" date="Sun Feb 27 18:07:28 EST 2022" starttimestamp="1645820509543" timestamp="182739449" timestamp2="182739449">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5095" _type="InsertStringCommand" date="Sun Feb 27 18:07:29 EST 2022" starttimestamp="1645820509543" timestamp="182739586" timestamp2="182739586">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5096" _type="InsertStringCommand" date="Sun Feb 27 18:07:29 EST 2022" starttimestamp="1645820509543" timestamp="182739586" timestamp2="182739586">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5098" _type="InsertStringCommand" date="Sun Feb 27 18:07:29 EST 2022" starttimestamp="1645820509543" timestamp="182739706" timestamp2="182739706">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5099" _type="InsertStringCommand" date="Sun Feb 27 18:07:29 EST 2022" starttimestamp="1645820509543" timestamp="182739706" timestamp2="182739706">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5101" _type="InsertStringCommand" date="Sun Feb 27 18:07:29 EST 2022" starttimestamp="1645820509543" timestamp="182739857" timestamp2="182739857">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5102" _type="InsertStringCommand" date="Sun Feb 27 18:07:29 EST 2022" starttimestamp="1645820509543" timestamp="182739857" timestamp2="182739857">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5104" _type="InsertStringCommand" date="Sun Feb 27 18:07:29 EST 2022" starttimestamp="1645820509543" timestamp="182740017" timestamp2="182740017">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5105" _type="InsertStringCommand" date="Sun Feb 27 18:07:29 EST 2022" starttimestamp="1645820509543" timestamp="182740017" timestamp2="182740017">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5107" _type="InsertStringCommand" date="Sun Feb 27 18:07:29 EST 2022" starttimestamp="1645820509543" timestamp="182740055" timestamp2="182740055">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5108" _type="InsertStringCommand" date="Sun Feb 27 18:07:29 EST 2022" starttimestamp="1645820509543" timestamp="182740055" timestamp2="182740055">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5110" _type="InsertStringCommand" date="Sun Feb 27 18:07:29 EST 2022" starttimestamp="1645820509543" timestamp="182740149" timestamp2="182740149">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5111" _type="InsertStringCommand" date="Sun Feb 27 18:07:29 EST 2022" starttimestamp="1645820509543" timestamp="182740149" timestamp2="182740149">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5113" _type="InsertStringCommand" date="Sun Feb 27 18:07:29 EST 2022" starttimestamp="1645820509543" timestamp="182740249" timestamp2="182740249">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5114" _type="InsertStringCommand" date="Sun Feb 27 18:07:29 EST 2022" starttimestamp="1645820509543" timestamp="182740249" timestamp2="182740249">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="5109" _type="Insert" date="Sun Feb 27 18:07:29 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12380" length="1" offset="7482" starttimestamp="1645820509543" timestamp="182740134">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="5112" _type="Insert" date="Sun Feb 27 18:07:29 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11245" docExpressionCount="1115" docLength="12381" length="1" offset="7483" starttimestamp="1645820509543" timestamp="182740234">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="5115" _type="MoveCaretCommand" caretOffset="7522" date="Sun Feb 27 18:07:32 EST 2022" docOffset="7600" starttimestamp="1645820509543" timestamp="182743121" />
  <Command __id="5116" _type="MoveCaretCommand" caretOffset="7522" date="Sun Feb 27 18:07:32 EST 2022" docOffset="7600" starttimestamp="1645820509543" timestamp="182743121" />
  <Command __id="5117" _type="MoveCaretCommand" caretOffset="7529" date="Sun Feb 27 18:07:33 EST 2022" docOffset="7607" starttimestamp="1645820509543" timestamp="182743523" />
  <Command __id="5118" _type="MoveCaretCommand" caretOffset="7529" date="Sun Feb 27 18:07:33 EST 2022" docOffset="7607" starttimestamp="1645820509543" timestamp="182743523" />
  <DocumentChange __id="5119" _type="Insert" date="Sun Feb 27 18:07:37 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11253" docExpressionCount="1115" docLength="12389" length="8" offset="7607" starttimestamp="1645820509543" timestamp="182747947">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <Command __id="5120" _type="InsertStringCommand" date="Sun Feb 27 18:07:37 EST 2022" starttimestamp="1645820509543" timestamp="182747947" timestamp2="182747947">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5121" _type="InsertStringCommand" date="Sun Feb 27 18:07:37 EST 2022" starttimestamp="1645820509543" timestamp="182747947" timestamp2="182747947">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5122" _type="Delete" date="Sun Feb 27 18:07:38 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12388" endLine="324" length="1" offset="7614" startLine="324" starttimestamp="1645820509543" timestamp="182748996">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="5123" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:07:38 EST 2022" starttimestamp="1645820509543" timestamp="182748996" />
  <Command __id="5124" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:07:38 EST 2022" starttimestamp="1645820509543" timestamp="182748996" />
  <DocumentChange __id="5125" _type="Insert" date="Sun Feb 27 18:07:38 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11253" docExpressionCount="1115" docLength="12389" length="1" offset="7614" starttimestamp="1645820509543" timestamp="182749327">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="5126" _type="InsertStringCommand" date="Sun Feb 27 18:07:38 EST 2022" starttimestamp="1645820509543" timestamp="182749333" timestamp2="182749333">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5127" _type="InsertStringCommand" date="Sun Feb 27 18:07:38 EST 2022" starttimestamp="1645820509543" timestamp="182749333" timestamp2="182749333">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5128" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 18:07:38 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="182749333" />
  <Command __id="5129" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 18:07:39 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="182749468" />
  <DocumentChange __id="5130" _type="Insert" date="Sun Feb 27 18:07:39 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11260" docExpressionCount="1115" docLength="12396" length="7" offset="7615" starttimestamp="1645820509543" timestamp="182749484">
    <text><![CDATA[Parser.]]></text>
  </DocumentChange>
  <Command __id="5131" _type="InsertStringCommand" date="Sun Feb 27 18:07:39 EST 2022" starttimestamp="1645820509543" timestamp="182749484" timestamp2="182749484">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5132" _type="InsertStringCommand" date="Sun Feb 27 18:07:39 EST 2022" starttimestamp="1645820509543" timestamp="182749484" timestamp2="182749484">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5133" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 18:07:39 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="182749499" />
  <Command __id="5143" _type="ShellCommand" date="Sun Feb 27 18:07:42 EST 2022" starttimestamp="1645820509543" timestamp="182752642" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="5134" _type="Delete" date="Sun Feb 27 18:07:39 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11259" docExpressionCount="1115" docLength="12395" endLine="324" length="1" offset="7621" startLine="324" starttimestamp="1645820509543" timestamp="182750028">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="5135" _type="Delete" date="Sun Feb 27 18:07:39 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11258" docExpressionCount="1115" docLength="12394" endLine="324" length="1" offset="7620" startLine="324" starttimestamp="1645820509543" timestamp="182750182">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5136" _type="Delete" date="Sun Feb 27 18:07:39 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11257" docExpressionCount="1115" docLength="12393" endLine="324" length="1" offset="7619" startLine="324" starttimestamp="1645820509543" timestamp="182750351">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5137" _type="Delete" date="Sun Feb 27 18:07:40 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11256" docExpressionCount="1115" docLength="12392" endLine="324" length="1" offset="7618" startLine="324" starttimestamp="1645820509543" timestamp="182750514">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="5138" _type="Delete" date="Sun Feb 27 18:07:40 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11255" docExpressionCount="1115" docLength="12391" endLine="324" length="1" offset="7617" startLine="324" starttimestamp="1645820509543" timestamp="182750698">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5139" _type="Delete" date="Sun Feb 27 18:07:40 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11254" docExpressionCount="1115" docLength="12390" endLine="324" length="1" offset="7616" startLine="324" starttimestamp="1645820509543" timestamp="182750836">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="5140" _type="Delete" date="Sun Feb 27 18:07:40 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11253" docExpressionCount="1115" docLength="12389" endLine="324" length="1" offset="7615" startLine="324" starttimestamp="1645820509543" timestamp="182751015">
    <text><![CDATA[P]]></text>
  </DocumentChange>
  <DocumentChange __id="5141" _type="Delete" date="Sun Feb 27 18:07:40 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12388" endLine="324" length="1" offset="7614" startLine="324" starttimestamp="1645820509543" timestamp="182751369">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="5142" _type="Delete" date="Sun Feb 27 18:07:41 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11251" docExpressionCount="1115" docLength="12387" endLine="324" length="1" offset="7613" startLine="324" starttimestamp="1645820509543" timestamp="182752172">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5150" _type="Insert" date="Sun Feb 27 18:07:44 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12388" length="1" offset="7632" starttimestamp="1645820509543" timestamp="182754838">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="5144" _type="ShellCommand" date="Sun Feb 27 18:07:43 EST 2022" starttimestamp="1645820509543" timestamp="182754111" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5145" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 18:07:43 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="182754146" />
  <Command __id="5146" _type="MoveCaretCommand" caretOffset="7529" date="Sun Feb 27 18:07:43 EST 2022" docOffset="7607" starttimestamp="1645820509543" timestamp="182754161" />
  <Command __id="5147" _type="MoveCaretCommand" caretOffset="7529" date="Sun Feb 27 18:07:43 EST 2022" docOffset="7607" starttimestamp="1645820509543" timestamp="182754161" />
  <Command __id="5148" _type="MoveCaretCommand" caretOffset="7535" date="Sun Feb 27 18:07:44 EST 2022" docOffset="7613" starttimestamp="1645820509543" timestamp="182754501" />
  <Command __id="5149" _type="MoveCaretCommand" caretOffset="7535" date="Sun Feb 27 18:07:44 EST 2022" docOffset="7613" starttimestamp="1645820509543" timestamp="182754501" />
  <Command __id="5151" _type="InsertStringCommand" date="Sun Feb 27 18:07:44 EST 2022" starttimestamp="1645820509543" timestamp="182754842" timestamp2="182754842">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5152" _type="InsertStringCommand" date="Sun Feb 27 18:07:44 EST 2022" starttimestamp="1645820509543" timestamp="182754843" timestamp2="182754843">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5153" _type="MoveCaretCommand" caretOffset="7555" date="Sun Feb 27 18:07:44 EST 2022" docOffset="7633" starttimestamp="1645820509543" timestamp="182754843" />
  <Command __id="5154" _type="MoveCaretCommand" caretOffset="7555" date="Sun Feb 27 18:07:44 EST 2022" docOffset="7633" starttimestamp="1645820509543" timestamp="182754844" />
  <Command __id="5156" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:07:45 EST 2022" starttimestamp="1645820509543" timestamp="182755941" />
  <Command __id="5157" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:07:45 EST 2022" starttimestamp="1645820509543" timestamp="182755941" />
  <Command __id="5158" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 18:07:45 EST 2022" starttimestamp="1645820509543" timestamp="182756393" />
  <Command __id="5159" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 18:07:45 EST 2022" starttimestamp="1645820509543" timestamp="182756393" />
  <Command __id="5161" _type="InsertStringCommand" date="Sun Feb 27 18:07:46 EST 2022" starttimestamp="1645820509543" timestamp="182756509" timestamp2="182756509">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5162" _type="InsertStringCommand" date="Sun Feb 27 18:07:46 EST 2022" starttimestamp="1645820509543" timestamp="182756509" timestamp2="182756509">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5164" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:07:46 EST 2022" starttimestamp="1645820509543" timestamp="182757009" />
  <Command __id="5165" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:07:46 EST 2022" starttimestamp="1645820509543" timestamp="182757009" />
  <Command __id="5167" _type="InsertStringCommand" date="Sun Feb 27 18:07:47 EST 2022" starttimestamp="1645820509543" timestamp="182757872" timestamp2="182757872">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5168" _type="InsertStringCommand" date="Sun Feb 27 18:07:47 EST 2022" starttimestamp="1645820509543" timestamp="182757872" timestamp2="182757872">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5170" _type="InsertStringCommand" date="Sun Feb 27 18:07:47 EST 2022" starttimestamp="1645820509543" timestamp="182757994" timestamp2="182757994">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5171" _type="InsertStringCommand" date="Sun Feb 27 18:07:47 EST 2022" starttimestamp="1645820509543" timestamp="182757994" timestamp2="182757994">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5173" _type="InsertStringCommand" date="Sun Feb 27 18:07:47 EST 2022" starttimestamp="1645820509543" timestamp="182758125" timestamp2="182758125">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5174" _type="InsertStringCommand" date="Sun Feb 27 18:07:47 EST 2022" starttimestamp="1645820509543" timestamp="182758125" timestamp2="182758125">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="5155" _type="Delete" date="Sun Feb 27 18:07:45 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11251" docExpressionCount="1115" docLength="12387" endLine="325" length="1" offset="7632" startLine="325" starttimestamp="1645820509543" timestamp="182755941">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5160" _type="Replace" date="Sun Feb 27 18:07:46 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11253" docExpressionCount="1115" docLength="12389" endLine="324" insertionLength="6" int_docASTNodeCount="1584" int_docActiveCodeLength="11247" int_docExpressionCount="1115" int_docLength="12383" length="4" offset="7609" startLine="324" starttimestamp="1645820509543" timestamp="182756509">
    <deletedText><![CDATA[				]]></deletedText>
    <insertedText><![CDATA[						]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5163" _type="Delete" date="Sun Feb 27 18:07:46 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12388" endLine="324" length="1" offset="7614" startLine="324" starttimestamp="1645820509543" timestamp="182757009">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5166" _type="Insert" date="Sun Feb 27 18:07:47 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11253" docExpressionCount="1115" docLength="12389" length="1" offset="7614" starttimestamp="1645820509543" timestamp="182757856">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5169" _type="Insert" date="Sun Feb 27 18:07:47 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12390" length="1" offset="7615" starttimestamp="1645820509543" timestamp="182757978">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5172" _type="Insert" date="Sun Feb 27 18:07:47 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12391" length="1" offset="7616" starttimestamp="1645820509543" timestamp="182758110">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5175" _type="Insert" date="Sun Feb 27 18:07:47 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12392" length="1" offset="7617" starttimestamp="1645820509543" timestamp="182758395">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5178" _type="Insert" date="Sun Feb 27 18:07:48 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12393" length="1" offset="7618" starttimestamp="1645820509543" timestamp="182758494">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5181" _type="Insert" date="Sun Feb 27 18:07:48 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12394" length="1" offset="7619" starttimestamp="1645820509543" timestamp="182758811">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="5184" _type="Insert" date="Sun Feb 27 18:07:48 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12395" length="1" offset="7620" starttimestamp="1645820509543" timestamp="182758911">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5187" _type="Insert" date="Sun Feb 27 18:07:48 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12396" length="1" offset="7621" starttimestamp="1645820509543" timestamp="182759026">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5190" _type="Insert" date="Sun Feb 27 18:07:48 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12397" length="1" offset="7622" starttimestamp="1645820509543" timestamp="182759126">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5193" _type="Insert" date="Sun Feb 27 18:07:48 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12398" length="1" offset="7623" starttimestamp="1645820509543" timestamp="182759311">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="5196" _type="Insert" date="Sun Feb 27 18:07:48 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12399" length="1" offset="7624" starttimestamp="1645820509543" timestamp="182759442">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="5199" _type="Insert" date="Sun Feb 27 18:07:49 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12400" length="1" offset="7625" starttimestamp="1645820509543" timestamp="182759633">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="5176" _type="InsertStringCommand" date="Sun Feb 27 18:07:47 EST 2022" starttimestamp="1645820509543" timestamp="182758410" timestamp2="182758410">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5177" _type="InsertStringCommand" date="Sun Feb 27 18:07:47 EST 2022" starttimestamp="1645820509543" timestamp="182758410" timestamp2="182758410">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5179" _type="InsertStringCommand" date="Sun Feb 27 18:07:48 EST 2022" starttimestamp="1645820509543" timestamp="182758494" timestamp2="182758494">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5180" _type="InsertStringCommand" date="Sun Feb 27 18:07:48 EST 2022" starttimestamp="1645820509543" timestamp="182758494" timestamp2="182758494">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5182" _type="InsertStringCommand" date="Sun Feb 27 18:07:48 EST 2022" starttimestamp="1645820509543" timestamp="182758826" timestamp2="182758826">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5183" _type="InsertStringCommand" date="Sun Feb 27 18:07:48 EST 2022" starttimestamp="1645820509543" timestamp="182758826" timestamp2="182758826">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5185" _type="InsertStringCommand" date="Sun Feb 27 18:07:48 EST 2022" starttimestamp="1645820509543" timestamp="182758911" timestamp2="182758911">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5186" _type="InsertStringCommand" date="Sun Feb 27 18:07:48 EST 2022" starttimestamp="1645820509543" timestamp="182758911" timestamp2="182758911">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5188" _type="InsertStringCommand" date="Sun Feb 27 18:07:48 EST 2022" starttimestamp="1645820509543" timestamp="182759042" timestamp2="182759042">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5189" _type="InsertStringCommand" date="Sun Feb 27 18:07:48 EST 2022" starttimestamp="1645820509543" timestamp="182759042" timestamp2="182759042">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5191" _type="InsertStringCommand" date="Sun Feb 27 18:07:48 EST 2022" starttimestamp="1645820509543" timestamp="182759142" timestamp2="182759142">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5192" _type="InsertStringCommand" date="Sun Feb 27 18:07:48 EST 2022" starttimestamp="1645820509543" timestamp="182759142" timestamp2="182759142">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5194" _type="InsertStringCommand" date="Sun Feb 27 18:07:48 EST 2022" starttimestamp="1645820509543" timestamp="182759311" timestamp2="182759311">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5195" _type="InsertStringCommand" date="Sun Feb 27 18:07:48 EST 2022" starttimestamp="1645820509543" timestamp="182759311" timestamp2="182759311">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5197" _type="InsertStringCommand" date="Sun Feb 27 18:07:48 EST 2022" starttimestamp="1645820509543" timestamp="182759442" timestamp2="182759442">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5198" _type="InsertStringCommand" date="Sun Feb 27 18:07:48 EST 2022" starttimestamp="1645820509543" timestamp="182759442" timestamp2="182759442">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5200" _type="InsertStringCommand" date="Sun Feb 27 18:07:49 EST 2022" starttimestamp="1645820509543" timestamp="182759637" timestamp2="182759637">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5201" _type="InsertStringCommand" date="Sun Feb 27 18:07:49 EST 2022" starttimestamp="1645820509543" timestamp="182759637" timestamp2="182759637">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5203" _type="InsertStringCommand" date="Sun Feb 27 18:07:50 EST 2022" starttimestamp="1645820509543" timestamp="182761360" timestamp2="182761360">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5204" _type="InsertStringCommand" date="Sun Feb 27 18:07:50 EST 2022" starttimestamp="1645820509543" timestamp="182761360" timestamp2="182761360">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5206" _type="InsertStringCommand" date="Sun Feb 27 18:07:51 EST 2022" starttimestamp="1645820509543" timestamp="182761482" timestamp2="182761482">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5207" _type="InsertStringCommand" date="Sun Feb 27 18:07:51 EST 2022" starttimestamp="1645820509543" timestamp="182761482" timestamp2="182761482">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5209" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:07:51 EST 2022" starttimestamp="1645820509543" timestamp="182762215" />
  <Command __id="5210" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:07:51 EST 2022" starttimestamp="1645820509543" timestamp="182762215" />
  <DocumentChange __id="5202" _type="Insert" date="Sun Feb 27 18:07:50 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12401" length="1" offset="7626" starttimestamp="1645820509543" timestamp="182761344">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5205" _type="Insert" date="Sun Feb 27 18:07:51 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12402" length="1" offset="7627" starttimestamp="1645820509543" timestamp="182761482">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5208" _type="Delete" date="Sun Feb 27 18:07:51 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12401" endLine="324" length="1" offset="7627" startLine="324" starttimestamp="1645820509543" timestamp="182762215">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5211" _type="Delete" date="Sun Feb 27 18:07:51 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12400" endLine="324" length="1" offset="7626" startLine="324" starttimestamp="1645820509543" timestamp="182762346">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5214" _type="Insert" date="Sun Feb 27 18:07:52 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12401" length="1" offset="7626" starttimestamp="1645820509543" timestamp="182763101">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="5217" _type="Insert" date="Sun Feb 27 18:07:52 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12402" length="1" offset="7627" starttimestamp="1645820509543" timestamp="182763217">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="5222" _type="Insert" date="Sun Feb 27 18:07:57 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12403" length="1" offset="7627" starttimestamp="1645820509543" timestamp="182767974">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="5225" _type="Insert" date="Sun Feb 27 18:07:57 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12404" length="1" offset="7628" starttimestamp="1645820509543" timestamp="182768106">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5228" _type="Insert" date="Sun Feb 27 18:07:57 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12405" length="1" offset="7629" starttimestamp="1645820509543" timestamp="182768406">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <Command __id="5212" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:07:51 EST 2022" starttimestamp="1645820509543" timestamp="182762346" />
  <Command __id="5213" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:07:51 EST 2022" starttimestamp="1645820509543" timestamp="182762362" />
  <Command __id="5215" _type="InsertStringCommand" date="Sun Feb 27 18:07:52 EST 2022" starttimestamp="1645820509543" timestamp="182763101" timestamp2="182763101">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5216" _type="InsertStringCommand" date="Sun Feb 27 18:07:52 EST 2022" starttimestamp="1645820509543" timestamp="182763101" timestamp2="182763101">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5218" _type="InsertStringCommand" date="Sun Feb 27 18:07:52 EST 2022" starttimestamp="1645820509543" timestamp="182763217" timestamp2="182763217">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="5219" _type="InsertStringCommand" date="Sun Feb 27 18:07:52 EST 2022" starttimestamp="1645820509543" timestamp="182763217" timestamp2="182763217">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="5220" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:07:53 EST 2022" starttimestamp="1645820509543" timestamp="182763733" />
  <Command __id="5221" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:07:53 EST 2022" starttimestamp="1645820509543" timestamp="182763733" />
  <Command __id="5223" _type="InsertStringCommand" date="Sun Feb 27 18:07:57 EST 2022" starttimestamp="1645820509543" timestamp="182767974" timestamp2="182767974">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5224" _type="InsertStringCommand" date="Sun Feb 27 18:07:57 EST 2022" starttimestamp="1645820509543" timestamp="182767974" timestamp2="182767974">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5226" _type="InsertStringCommand" date="Sun Feb 27 18:07:57 EST 2022" starttimestamp="1645820509543" timestamp="182768121" timestamp2="182768121">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5227" _type="InsertStringCommand" date="Sun Feb 27 18:07:57 EST 2022" starttimestamp="1645820509543" timestamp="182768121" timestamp2="182768121">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5229" _type="InsertStringCommand" date="Sun Feb 27 18:07:57 EST 2022" starttimestamp="1645820509543" timestamp="182768406" timestamp2="182768406">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="5230" _type="InsertStringCommand" date="Sun Feb 27 18:07:57 EST 2022" starttimestamp="1645820509543" timestamp="182768422" timestamp2="182768422">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="5232" _type="InsertStringCommand" date="Sun Feb 27 18:08:00 EST 2022" starttimestamp="1645820509543" timestamp="182770979" timestamp2="182770979">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5233" _type="InsertStringCommand" date="Sun Feb 27 18:08:00 EST 2022" starttimestamp="1645820509543" timestamp="182770979" timestamp2="182770979">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5235" _type="InsertStringCommand" date="Sun Feb 27 18:08:00 EST 2022" starttimestamp="1645820509543" timestamp="182771095" timestamp2="182771095">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5236" _type="InsertStringCommand" date="Sun Feb 27 18:08:00 EST 2022" starttimestamp="1645820509543" timestamp="182771095" timestamp2="182771095">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5238" _type="InsertStringCommand" date="Sun Feb 27 18:08:00 EST 2022" starttimestamp="1645820509543" timestamp="182771180" timestamp2="182771180">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5239" _type="InsertStringCommand" date="Sun Feb 27 18:08:00 EST 2022" starttimestamp="1645820509543" timestamp="182771180" timestamp2="182771180">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5241" _type="InsertStringCommand" date="Sun Feb 27 18:08:00 EST 2022" starttimestamp="1645820509543" timestamp="182771349" timestamp2="182771349">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5242" _type="InsertStringCommand" date="Sun Feb 27 18:08:00 EST 2022" starttimestamp="1645820509543" timestamp="182771349" timestamp2="182771349">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5244" _type="InsertStringCommand" date="Sun Feb 27 18:08:01 EST 2022" starttimestamp="1645820509543" timestamp="182772181" timestamp2="182772181">
    <data><![CDATA[?]]></data>
  </Command>
  <Command __id="5245" _type="InsertStringCommand" date="Sun Feb 27 18:08:01 EST 2022" starttimestamp="1645820509543" timestamp="182772181" timestamp2="182772181">
    <data><![CDATA[?]]></data>
  </Command>
  <Command __id="5246" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:08:02 EST 2022" starttimestamp="1645820509543" timestamp="182772681" />
  <Command __id="5247" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:08:02 EST 2022" starttimestamp="1645820509543" timestamp="182772697" />
  <Command __id="5248" _type="MoveCaretCommand" caretOffset="7802" date="Sun Feb 27 18:08:23 EST 2022" docOffset="7880" starttimestamp="1645820509543" timestamp="182793635" />
  <Command __id="5249" _type="MoveCaretCommand" caretOffset="7802" date="Sun Feb 27 18:08:23 EST 2022" docOffset="7880" starttimestamp="1645820509543" timestamp="182793635" />
  <Command __id="5250" _type="MoveCaretCommand" caretOffset="7817" date="Sun Feb 27 18:08:23 EST 2022" docOffset="7895" starttimestamp="1645820509543" timestamp="182794020" />
  <Command __id="5251" _type="MoveCaretCommand" caretOffset="7817" date="Sun Feb 27 18:08:23 EST 2022" docOffset="7895" starttimestamp="1645820509543" timestamp="182794020" />
  <Command __id="5252" _type="MoveCaretCommand" caretOffset="7828" date="Sun Feb 27 18:08:24 EST 2022" docOffset="7906" starttimestamp="1645820509543" timestamp="182794620" />
  <Command __id="5253" _type="MoveCaretCommand" caretOffset="7828" date="Sun Feb 27 18:08:24 EST 2022" docOffset="7906" starttimestamp="1645820509543" timestamp="182794620" />
  <Command __id="5254" _type="MoveCaretCommand" caretOffset="7817" date="Sun Feb 27 18:08:24 EST 2022" docOffset="7895" starttimestamp="1645820509543" timestamp="182795290" />
  <Command __id="5255" _type="MoveCaretCommand" caretOffset="7817" date="Sun Feb 27 18:08:24 EST 2022" docOffset="7895" starttimestamp="1645820509543" timestamp="182795290" />
  <Command __id="5256" _type="SelectTextCommand" caretOffset="7964" date="Sun Feb 27 18:08:33 EST 2022" end="7964" start="7825" starttimestamp="1645820509543" timestamp="182803889" />
  <Command __id="5257" _type="SelectTextCommand" caretOffset="7964" date="Sun Feb 27 18:08:33 EST 2022" end="7964" start="7825" starttimestamp="1645820509543" timestamp="182803889" />
  <DocumentChange __id="5231" _type="Insert" date="Sun Feb 27 18:08:00 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12406" length="1" offset="7630" starttimestamp="1645820509543" timestamp="182770964">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="5234" _type="Insert" date="Sun Feb 27 18:08:00 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12407" length="1" offset="7631" starttimestamp="1645820509543" timestamp="182771095">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="5237" _type="Insert" date="Sun Feb 27 18:08:00 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12408" length="1" offset="7632" starttimestamp="1645820509543" timestamp="182771180">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="5240" _type="Insert" date="Sun Feb 27 18:08:00 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12409" length="1" offset="7633" starttimestamp="1645820509543" timestamp="182771334">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="5243" _type="Insert" date="Sun Feb 27 18:08:01 EST 2022" docASTNodeCount="1584" docActiveCodeLength="11252" docExpressionCount="1115" docLength="12410" length="1" offset="7634" starttimestamp="1645820509543" timestamp="182772165">
    <text><![CDATA[?]]></text>
  </DocumentChange>
  <Command __id="5258" _type="MoveCaretCommand" caretOffset="7950" date="Sun Feb 27 18:08:34 EST 2022" docOffset="8028" starttimestamp="1645820509543" timestamp="182804979" />
  <Command __id="5259" _type="MoveCaretCommand" caretOffset="7950" date="Sun Feb 27 18:08:34 EST 2022" docOffset="8028" starttimestamp="1645820509543" timestamp="182804979" />
  <Command __id="5261" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 18:08:35 EST 2022" starttimestamp="1645820509543" timestamp="182806239" />
  <Command __id="5262" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 18:08:36 EST 2022" starttimestamp="1645820509543" timestamp="182807394" />
  <Command __id="5263" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 18:08:36 EST 2022" starttimestamp="1645820509543" timestamp="182807394" />
  <Command __id="5265" _type="InsertStringCommand" date="Sun Feb 27 18:08:37 EST 2022" starttimestamp="1645820509543" timestamp="182808141" timestamp2="182808141">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5266" _type="InsertStringCommand" date="Sun Feb 27 18:08:37 EST 2022" starttimestamp="1645820509543" timestamp="182808141" timestamp2="182808141">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5260" _type="Insert" date="Sun Feb 27 18:08:35 EST 2022" docASTNodeCount="1572" docActiveCodeLength="11107" docExpressionCount="1104" docLength="12412" length="2" offset="7897" starttimestamp="1645820509543" timestamp="182806223">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5264" _type="Insert" date="Sun Feb 27 18:08:37 EST 2022" docASTNodeCount="1572" docActiveCodeLength="11115" docExpressionCount="1104" docLength="12420" length="8" offset="7895" starttimestamp="1645820509543" timestamp="182808141">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <Command __id="5267" _type="MoveCaretCommand" caretOffset="7981" date="Sun Feb 27 18:09:02 EST 2022" docOffset="8059" starttimestamp="1645820509543" timestamp="182832886" />
  <Command __id="5268" _type="MoveCaretCommand" caretOffset="7981" date="Sun Feb 27 18:09:02 EST 2022" docOffset="8059" starttimestamp="1645820509543" timestamp="182832886" />
  <DocumentChange __id="5269" _type="Insert" date="Sun Feb 27 18:09:05 EST 2022" docASTNodeCount="1572" docActiveCodeLength="11121" docExpressionCount="1104" docLength="12426" length="6" offset="8059" starttimestamp="1645820509543" timestamp="182835944">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <Command __id="5270" _type="InsertStringCommand" date="Sun Feb 27 18:09:05 EST 2022" starttimestamp="1645820509543" timestamp="182835944" timestamp2="182835944">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5271" _type="InsertStringCommand" date="Sun Feb 27 18:09:05 EST 2022" starttimestamp="1645820509543" timestamp="182835944" timestamp2="182835944">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5272" _type="Insert" date="Sun Feb 27 18:09:06 EST 2022" docASTNodeCount="1574" docActiveCodeLength="11122" docExpressionCount="1105" docLength="12427" length="1" offset="8065" starttimestamp="1645820509543" timestamp="182837214">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="5273" _type="InsertStringCommand" date="Sun Feb 27 18:09:06 EST 2022" starttimestamp="1645820509543" timestamp="182837214" timestamp2="182837214">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="5274" _type="InsertStringCommand" date="Sun Feb 27 18:09:06 EST 2022" starttimestamp="1645820509543" timestamp="182837214" timestamp2="182837214">
    <data><![CDATA[b]]></data>
  </Command>
  <DocumentChange __id="5275" _type="Insert" date="Sun Feb 27 18:09:07 EST 2022" docASTNodeCount="1574" docActiveCodeLength="11123" docExpressionCount="1105" docLength="12428" length="1" offset="8066" starttimestamp="1645820509543" timestamp="182837530">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="5276" _type="InsertStringCommand" date="Sun Feb 27 18:09:07 EST 2022" starttimestamp="1645820509543" timestamp="182837546" timestamp2="182837546">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5277" _type="InsertStringCommand" date="Sun Feb 27 18:09:07 EST 2022" starttimestamp="1645820509543" timestamp="182837546" timestamp2="182837546">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="5278" _type="Insert" date="Sun Feb 27 18:09:07 EST 2022" docASTNodeCount="1574" docActiveCodeLength="11124" docExpressionCount="1105" docLength="12429" length="1" offset="8067" starttimestamp="1645820509543" timestamp="182837608">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="5279" _type="InsertStringCommand" date="Sun Feb 27 18:09:07 EST 2022" starttimestamp="1645820509543" timestamp="182837615" timestamp2="182837615">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5280" _type="InsertStringCommand" date="Sun Feb 27 18:09:07 EST 2022" starttimestamp="1645820509543" timestamp="182837615" timestamp2="182837615">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="5281" _type="Insert" date="Sun Feb 27 18:09:07 EST 2022" docASTNodeCount="1574" docActiveCodeLength="11125" docExpressionCount="1105" docLength="12430" length="1" offset="8068" starttimestamp="1645820509543" timestamp="182837762">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="5282" _type="InsertStringCommand" date="Sun Feb 27 18:09:07 EST 2022" starttimestamp="1645820509543" timestamp="182837762" timestamp2="182837762">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5283" _type="InsertStringCommand" date="Sun Feb 27 18:09:07 EST 2022" starttimestamp="1645820509543" timestamp="182837762" timestamp2="182837762">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="5284" _type="Insert" date="Sun Feb 27 18:09:07 EST 2022" docASTNodeCount="1573" docActiveCodeLength="11126" docExpressionCount="1104" docLength="12431" length="1" offset="8069" starttimestamp="1645820509543" timestamp="182837793">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="5285" _type="InsertStringCommand" date="Sun Feb 27 18:09:07 EST 2022" starttimestamp="1645820509543" timestamp="182837809" timestamp2="182837809">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="5286" _type="InsertStringCommand" date="Sun Feb 27 18:09:07 EST 2022" starttimestamp="1645820509543" timestamp="182837809" timestamp2="182837809">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="5288" _type="InsertStringCommand" date="Sun Feb 27 18:09:07 EST 2022" starttimestamp="1645820509543" timestamp="182838216" timestamp2="182838216">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5289" _type="InsertStringCommand" date="Sun Feb 27 18:09:07 EST 2022" starttimestamp="1645820509543" timestamp="182838216" timestamp2="182838216">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="5287" _type="Insert" date="Sun Feb 27 18:09:07 EST 2022" docASTNodeCount="1573" docActiveCodeLength="11127" docExpressionCount="1104" docLength="12432" length="1" offset="8070" starttimestamp="1645820509543" timestamp="182838216">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="5290" _type="MoveCaretCommand" caretOffset="7825" date="Sun Feb 27 18:09:09 EST 2022" docOffset="7903" starttimestamp="1645820509543" timestamp="182839465" />
  <Command __id="5291" _type="MoveCaretCommand" caretOffset="7825" date="Sun Feb 27 18:09:09 EST 2022" docOffset="7903" starttimestamp="1645820509543" timestamp="182839465" />
  <DocumentChange __id="5292" _type="Insert" date="Sun Feb 27 18:09:10 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11128" docExpressionCount="1105" docLength="12433" length="1" offset="7903" starttimestamp="1645820509543" timestamp="182840519">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="5293" _type="InsertStringCommand" date="Sun Feb 27 18:09:10 EST 2022" starttimestamp="1645820509543" timestamp="182840535" timestamp2="182840535">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="5294" _type="InsertStringCommand" date="Sun Feb 27 18:09:10 EST 2022" starttimestamp="1645820509543" timestamp="182840535" timestamp2="182840535">
    <data><![CDATA[b]]></data>
  </Command>
  <DocumentChange __id="5295" _type="Insert" date="Sun Feb 27 18:09:10 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11129" docExpressionCount="1105" docLength="12434" length="1" offset="7904" starttimestamp="1645820509543" timestamp="182840736">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="5296" _type="InsertStringCommand" date="Sun Feb 27 18:09:10 EST 2022" starttimestamp="1645820509543" timestamp="182840751" timestamp2="182840751">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5297" _type="InsertStringCommand" date="Sun Feb 27 18:09:10 EST 2022" starttimestamp="1645820509543" timestamp="182840751" timestamp2="182840751">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="5298" _type="Insert" date="Sun Feb 27 18:09:10 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11130" docExpressionCount="1105" docLength="12435" length="1" offset="7905" starttimestamp="1645820509543" timestamp="182840836">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="5299" _type="InsertStringCommand" date="Sun Feb 27 18:09:10 EST 2022" starttimestamp="1645820509543" timestamp="182840851" timestamp2="182840851">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5300" _type="InsertStringCommand" date="Sun Feb 27 18:09:10 EST 2022" starttimestamp="1645820509543" timestamp="182840851" timestamp2="182840851">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="5301" _type="Insert" date="Sun Feb 27 18:09:10 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11131" docExpressionCount="1105" docLength="12436" length="1" offset="7906" starttimestamp="1645820509543" timestamp="182840936">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="5302" _type="InsertStringCommand" date="Sun Feb 27 18:09:10 EST 2022" starttimestamp="1645820509543" timestamp="182840951" timestamp2="182840951">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5303" _type="InsertStringCommand" date="Sun Feb 27 18:09:10 EST 2022" starttimestamp="1645820509543" timestamp="182840951" timestamp2="182840951">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="5304" _type="Insert" date="Sun Feb 27 18:09:10 EST 2022" docASTNodeCount="1574" docActiveCodeLength="11132" docExpressionCount="1104" docLength="12437" length="1" offset="7907" starttimestamp="1645820509543" timestamp="182841014">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="5305" _type="InsertStringCommand" date="Sun Feb 27 18:09:10 EST 2022" starttimestamp="1645820509543" timestamp="182841020" timestamp2="182841020">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="5306" _type="InsertStringCommand" date="Sun Feb 27 18:09:10 EST 2022" starttimestamp="1645820509543" timestamp="182841020" timestamp2="182841020">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="5308" _type="InsertStringCommand" date="Sun Feb 27 18:09:11 EST 2022" starttimestamp="1645820509543" timestamp="182841552" timestamp2="182841552">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5309" _type="InsertStringCommand" date="Sun Feb 27 18:09:11 EST 2022" starttimestamp="1645820509543" timestamp="182841552" timestamp2="182841552">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5310" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 18:09:11 EST 2022" starttimestamp="1645820509543" timestamp="182842438" />
  <Command __id="5311" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:09:12 EST 2022" starttimestamp="1645820509543" timestamp="182842539" />
  <Command __id="5312" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:09:12 EST 2022" starttimestamp="1645820509543" timestamp="182842554" />
  <Command __id="5313" _type="MoveCaretCommand" caretOffset="7817" date="Sun Feb 27 18:09:12 EST 2022" docOffset="7895" starttimestamp="1645820509543" timestamp="182842940" />
  <Command __id="5314" _type="MoveCaretCommand" caretOffset="7817" date="Sun Feb 27 18:09:12 EST 2022" docOffset="7895" starttimestamp="1645820509543" timestamp="182842940" />
  <Command __id="5315" _type="MoveCaretCommand" caretOffset="8975" date="Sun Feb 27 18:09:36 EST 2022" docOffset="9053" starttimestamp="1645820509543" timestamp="182866558" />
  <Command __id="5316" _type="MoveCaretCommand" caretOffset="8975" date="Sun Feb 27 18:09:36 EST 2022" docOffset="9053" starttimestamp="1645820509543" timestamp="182866558" />
  <Command __id="5317" _type="MoveCaretCommand" caretOffset="9088" date="Sun Feb 27 18:09:36 EST 2022" docOffset="9166" starttimestamp="1645820509543" timestamp="182866997" />
  <Command __id="5318" _type="MoveCaretCommand" caretOffset="9088" date="Sun Feb 27 18:09:36 EST 2022" docOffset="9166" starttimestamp="1645820509543" timestamp="182866997" />
  <Command __id="5319" _type="MoveCaretCommand" caretOffset="9087" date="Sun Feb 27 18:09:37 EST 2022" docOffset="9165" starttimestamp="1645820509543" timestamp="182867698" />
  <Command __id="5320" _type="MoveCaretCommand" caretOffset="9087" date="Sun Feb 27 18:09:37 EST 2022" docOffset="9165" starttimestamp="1645820509543" timestamp="182867698" />
  <Command __id="5322" _type="InsertStringCommand" date="Sun Feb 27 18:09:38 EST 2022" starttimestamp="1645820509543" timestamp="182868676" timestamp2="182868676">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5323" _type="InsertStringCommand" date="Sun Feb 27 18:09:38 EST 2022" starttimestamp="1645820509543" timestamp="182868676" timestamp2="182868676">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5324" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 18:09:38 EST 2022" starttimestamp="1645820509543" timestamp="182869061" />
  <Command __id="5325" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sun Feb 27 18:09:38 EST 2022" starttimestamp="1645820509543" timestamp="182869061" />
  <Command __id="5327" _type="InsertStringCommand" date="Sun Feb 27 18:09:38 EST 2022" starttimestamp="1645820509543" timestamp="182869377" timestamp2="182869377">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5328" _type="InsertStringCommand" date="Sun Feb 27 18:09:38 EST 2022" starttimestamp="1645820509543" timestamp="182869377" timestamp2="182869377">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5330" _type="InsertStringCommand" date="Sun Feb 27 18:09:39 EST 2022" starttimestamp="1645820509543" timestamp="182870029" timestamp2="182870029">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="5331" _type="InsertStringCommand" date="Sun Feb 27 18:09:39 EST 2022" starttimestamp="1645820509543" timestamp="182870029" timestamp2="182870029">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="5333" _type="InsertStringCommand" date="Sun Feb 27 18:09:39 EST 2022" starttimestamp="1645820509543" timestamp="182870277" timestamp2="182870277">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5334" _type="InsertStringCommand" date="Sun Feb 27 18:09:39 EST 2022" starttimestamp="1645820509543" timestamp="182870277" timestamp2="182870277">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5336" _type="InsertStringCommand" date="Sun Feb 27 18:09:39 EST 2022" starttimestamp="1645820509543" timestamp="182870377" timestamp2="182870377">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5337" _type="InsertStringCommand" date="Sun Feb 27 18:09:39 EST 2022" starttimestamp="1645820509543" timestamp="182870377" timestamp2="182870377">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5339" _type="InsertStringCommand" date="Sun Feb 27 18:09:39 EST 2022" starttimestamp="1645820509543" timestamp="182870446" timestamp2="182870446">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5340" _type="InsertStringCommand" date="Sun Feb 27 18:09:39 EST 2022" starttimestamp="1645820509543" timestamp="182870446" timestamp2="182870446">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5342" _type="InsertStringCommand" date="Sun Feb 27 18:09:40 EST 2022" starttimestamp="1645820509543" timestamp="182870562" timestamp2="182870562">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="5343" _type="InsertStringCommand" date="Sun Feb 27 18:09:40 EST 2022" starttimestamp="1645820509543" timestamp="182870562" timestamp2="182870562">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="5345" _type="InsertStringCommand" date="Sun Feb 27 18:09:40 EST 2022" starttimestamp="1645820509543" timestamp="182870846" timestamp2="182870846">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5346" _type="InsertStringCommand" date="Sun Feb 27 18:09:40 EST 2022" starttimestamp="1645820509543" timestamp="182870846" timestamp2="182870846">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="5307" _type="Insert" date="Sun Feb 27 18:09:11 EST 2022" docASTNodeCount="1574" docActiveCodeLength="11133" docExpressionCount="1104" docLength="12438" length="1" offset="7908" starttimestamp="1645820509543" timestamp="182841537">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="5321" _type="Insert" date="Sun Feb 27 18:09:38 EST 2022" docASTNodeCount="1574" docActiveCodeLength="11137" docExpressionCount="1104" docLength="12442" length="4" offset="9165" starttimestamp="1645820509543" timestamp="182868660">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="5326" _type="Replace" date="Sun Feb 27 18:09:38 EST 2022" docASTNodeCount="1574" docActiveCodeLength="11139" docExpressionCount="1104" docLength="12444" endLine="389" insertionLength="4" int_docASTNodeCount="1574" int_docActiveCodeLength="11135" int_docExpressionCount="1104" int_docLength="12440" length="2" offset="9163" startLine="389" starttimestamp="1645820509543" timestamp="182869361">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5329" _type="Insert" date="Sun Feb 27 18:09:39 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11140" docExpressionCount="1105" docLength="12445" length="1" offset="9167" starttimestamp="1645820509543" timestamp="182870024">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="5332" _type="Insert" date="Sun Feb 27 18:09:39 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11141" docExpressionCount="1105" docLength="12446" length="1" offset="9168" starttimestamp="1645820509543" timestamp="182870262">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5335" _type="Insert" date="Sun Feb 27 18:09:39 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11142" docExpressionCount="1105" docLength="12447" length="1" offset="9169" starttimestamp="1645820509543" timestamp="182870362">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5338" _type="Insert" date="Sun Feb 27 18:09:39 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11143" docExpressionCount="1105" docLength="12448" length="1" offset="9170" starttimestamp="1645820509543" timestamp="182870446">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="5341" _type="Insert" date="Sun Feb 27 18:09:40 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11144" docExpressionCount="1104" docLength="12449" length="1" offset="9171" starttimestamp="1645820509543" timestamp="182870562">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="5344" _type="Insert" date="Sun Feb 27 18:09:40 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11145" docExpressionCount="1104" docLength="12450" length="1" offset="9172" starttimestamp="1645820509543" timestamp="182870846">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="5347" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 18:09:40 EST 2022" starttimestamp="1645820509543" timestamp="182871447" />
  <Command __id="5348" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:09:41 EST 2022" starttimestamp="1645820509543" timestamp="182871532" />
  <Command __id="5349" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:09:41 EST 2022" starttimestamp="1645820509543" timestamp="182871548" />
  <Command __id="5350" _type="MoveCaretCommand" caretOffset="9252" date="Sun Feb 27 18:09:41 EST 2022" docOffset="9330" starttimestamp="1645820509543" timestamp="182872218" />
  <Command __id="5351" _type="MoveCaretCommand" caretOffset="9252" date="Sun Feb 27 18:09:41 EST 2022" docOffset="9330" starttimestamp="1645820509543" timestamp="182872218" />
  <Command __id="5352" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:09:44 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="182875006">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="5359" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:09:58 EST 2022" docASTNodeCount="62" docActiveCodeLength="355" docExpressionCount="26" docLength="355" projectName="pa1" starttimestamp="1645820509543" timestamp="182889204">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶		"), Diff(INSERT,"	try = !(a == a);¶		"), Diff(EQUAL,"}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
    <snapshot><![CDATA[class ErrorReporter {

		private int numErrors;
		public static boolean gg;

		static void ErrorReporter(int j, boolean k, boo[] a1) {
			numErrors = 0;
			try = !(a == a);
		}

		public boolean hasErrors() {
			return numErrors > 0;
		}

		public void reportError(String message) {
			System.out.println(message);
			numErrors++;
		}	
}]]></snapshot>
  </Command>
  <Command __id="5354" _type="RunCommand" date="Sun Feb 27 18:09:45 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="182876412" type="Run" />
  <Command __id="5355" _type="RunCommand" date="Sun Feb 27 18:09:45 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="182876412" type="Run" />
  <Command __id="5356" _type="RunCommand" date="Sun Feb 27 18:09:46 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="182876544" type="Run" />
  <Command __id="5357" _type="RunCommand" date="Sun Feb 27 18:09:46 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="182876544" type="Run" />
  <Command __id="5358" _type="EHExceptionCommand" date="Sun Feb 27 18:09:46 EST 2022" starttimestamp="1645820509543" timestamp="182876590" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
In scanner =
=
0
;
try
In scanner =
=
!
(
a
In scanner =
==
a
)
;
}
public
boolean
hasErrors
in here: (
Parse error: Parsing ( and expecting 'RCURLY' but found 'LPAREN'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="5361" _type="MoveCaretCommand" caretOffset="9252" date="Sun Feb 27 18:10:12 EST 2022" docOffset="9330" starttimestamp="1645820509543" timestamp="182903037" />
  <Command __id="5362" _type="CopyCommand" date="Sun Feb 27 18:10:17 EST 2022" starttimestamp="1645820509543" timestamp="182908028" />
  <Command __id="5363" _type="MoveCaretCommand" caretOffset="6327" date="Sun Feb 27 18:10:17 EST 2022" docOffset="6405" starttimestamp="1645820509543" timestamp="182908429" />
  <Command __id="5364" _type="MoveCaretCommand" caretOffset="6327" date="Sun Feb 27 18:10:17 EST 2022" docOffset="6405" starttimestamp="1645820509543" timestamp="182908429" />
  <Command __id="5366" _type="ShellCommand" date="Sun Feb 27 18:10:18 EST 2022" starttimestamp="1645820509543" timestamp="182908895" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5367" _type="PasteCommand" date="Sun Feb 27 18:10:19 EST 2022" starttimestamp="1645820509543" timestamp="182909646" />
  <Command __id="5368" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 18:10:19 EST 2022" forward="true" matchWord="true" offset="6405" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182910348" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5369" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 18:10:20 EST 2022" forward="true" matchWord="true" offset="6405" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182910680" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5370" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 18:10:21 EST 2022" forward="false" matchWord="true" offset="6405" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182911904" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5371" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 18:10:21 EST 2022" forward="false" matchWord="true" offset="6405" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182912289" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5372" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 18:10:22 EST 2022" forward="false" matchWord="true" offset="6405" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182912459" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5373" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 18:10:22 EST 2022" forward="false" matchWord="true" offset="6405" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182912606" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5374" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 18:10:23 EST 2022" forward="true" matchWord="true" offset="6405" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182914075" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5375" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 18:10:23 EST 2022" forward="true" matchWord="true" offset="6405" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182914249" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5376" _type="ShellCommand" date="Sun Feb 27 18:10:25 EST 2022" starttimestamp="1645820509543" timestamp="182915868" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5377" _type="MoveCaretCommand" caretOffset="6222" date="Sun Feb 27 18:10:26 EST 2022" docOffset="6300" starttimestamp="1645820509543" timestamp="182917399" />
  <Command __id="5378" _type="MoveCaretCommand" caretOffset="6222" date="Sun Feb 27 18:10:26 EST 2022" docOffset="6300" starttimestamp="1645820509543" timestamp="182917399" />
  <Command __id="5379" _type="MoveCaretCommand" caretOffset="2655" date="Sun Feb 27 18:10:36 EST 2022" docOffset="2733" starttimestamp="1645820509543" timestamp="182927344" />
  <Command __id="5380" _type="MoveCaretCommand" caretOffset="2655" date="Sun Feb 27 18:10:36 EST 2022" docOffset="2733" starttimestamp="1645820509543" timestamp="182927344" />
  <Command __id="5381" _type="SelectTextCommand" caretOffset="2595" date="Sun Feb 27 18:10:43 EST 2022" end="2595" start="2587" starttimestamp="1645820509543" timestamp="182933639" />
  <Command __id="5382" _type="SelectTextCommand" caretOffset="2595" date="Sun Feb 27 18:10:43 EST 2022" end="2595" start="2587" starttimestamp="1645820509543" timestamp="182933639" />
  <Command __id="5384" _type="ShellCommand" date="Sun Feb 27 18:10:44 EST 2022" starttimestamp="1645820509543" timestamp="182934590" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5385" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 18:10:45 EST 2022" forward="true" matchWord="true" offset="2673" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182935689" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5386" _type="FindCommand" caseSensitive="true" date="Sun Feb 27 18:10:45 EST 2022" forward="true" matchWord="true" offset="2673" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182936143" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5387" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:10:50 EST 2022" forward="true" matchWord="true" offset="2673" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182940579" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5388" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:10:50 EST 2022" forward="true" matchWord="true" offset="2673" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182940873" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5389" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:10:52 EST 2022" forward="true" matchWord="true" offset="2673" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182942513" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5390" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:10:53 EST 2022" forward="false" matchWord="true" offset="2673" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182943548" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5391" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:10:53 EST 2022" forward="false" matchWord="true" offset="2673" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182943940" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5392" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:10:53 EST 2022" forward="false" matchWord="true" offset="2673" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182944143" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5393" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:10:55 EST 2022" forward="true" matchWord="true" offset="2673" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182945629" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5394" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:10:59 EST 2022" forward="true" matchWord="false" offset="2673" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182949817" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5395" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:10:59 EST 2022" forward="true" matchWord="false" offset="2673" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182950412" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5396" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:01 EST 2022" forward="true" matchWord="true" offset="2673" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182951946" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5397" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:01 EST 2022" forward="true" matchWord="true" offset="2673" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182952417" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5398" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:04 EST 2022" forward="true" matchWord="true" offset="2673" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182954669" wrapSearch="false">
    <searchString><![CDATA[in here:]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5399" _type="ShellCommand" date="Sun Feb 27 18:11:08 EST 2022" starttimestamp="1645820509543" timestamp="182959231" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5400" _type="MoveCaretCommand" caretOffset="2632" date="Sun Feb 27 18:11:09 EST 2022" docOffset="2710" starttimestamp="1645820509543" timestamp="182959779" />
  <Command __id="5401" _type="MoveCaretCommand" caretOffset="2632" date="Sun Feb 27 18:11:09 EST 2022" docOffset="2710" starttimestamp="1645820509543" timestamp="182959779" />
  <Command __id="5403" _type="ShellCommand" date="Sun Feb 27 18:11:10 EST 2022" starttimestamp="1645820509543" timestamp="182960517" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5404" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:11 EST 2022" forward="true" matchWord="true" offset="2710" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182962327" wrapSearch="false">
    <searchString><![CDATA[in]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5405" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:13 EST 2022" forward="true" matchWord="true" offset="2941" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182964084" wrapSearch="false">
    <searchString><![CDATA[in]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5406" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:15 EST 2022" forward="true" matchWord="true" offset="3060" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182965686" wrapSearch="false">
    <searchString><![CDATA[in]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5407" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:17 EST 2022" forward="true" matchWord="true" offset="3177" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182967890" wrapSearch="false">
    <searchString><![CDATA[in her]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5408" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:22 EST 2022" forward="true" matchWord="true" offset="3177" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182972507" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5409" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:25 EST 2022" forward="true" matchWord="false" offset="3177" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182975704" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5410" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:25 EST 2022" forward="true" matchWord="false" offset="3388" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182976368" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5411" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:33 EST 2022" forward="false" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182984302" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5412" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:34 EST 2022" forward="false" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182985133" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5413" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:35 EST 2022" forward="false" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182985896" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5414" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:35 EST 2022" forward="false" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182986394" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5415" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:36 EST 2022" forward="false" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182986916" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5416" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:37 EST 2022" forward="true" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182987948" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5417" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:38 EST 2022" forward="true" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182989115" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5418" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:38 EST 2022" forward="true" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182989443" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5419" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:40 EST 2022" forward="false" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182991032" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5420" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:40 EST 2022" forward="false" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182991331" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5421" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:41 EST 2022" forward="false" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182991522" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5422" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:43 EST 2022" forward="false" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182994231" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5423" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:43 EST 2022" forward="false" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182994397" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5424" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:44 EST 2022" forward="false" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182994535" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5425" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:45 EST 2022" forward="false" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182996334" wrapSearch="false">
    <searchString><![CDATA[in here3]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5426" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:49 EST 2022" forward="false" matchWord="false" offset="3506" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182999545" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5427" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:49 EST 2022" forward="false" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="182999804" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5428" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:49 EST 2022" forward="false" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183000189" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5429" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:51 EST 2022" forward="true" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183001460" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5430" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:51 EST 2022" forward="true" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183001858" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5431" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:51 EST 2022" forward="true" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183002379" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5432" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:52 EST 2022" forward="true" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183002586" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5433" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:53 EST 2022" forward="true" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183003686" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5434" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:53 EST 2022" forward="true" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183004422" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5435" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:54 EST 2022" forward="true" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183004847" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5436" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:54 EST 2022" forward="true" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183005055" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5437" _type="ShellCommand" date="Sun Feb 27 18:11:56 EST 2022" starttimestamp="1645820509543" timestamp="183006826" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5438" _type="MoveCaretCommand" caretOffset="3307" date="Sun Feb 27 18:11:56 EST 2022" docOffset="3385" starttimestamp="1645820509543" timestamp="183006876" />
  <Command __id="5439" _type="MoveCaretCommand" caretOffset="3307" date="Sun Feb 27 18:11:56 EST 2022" docOffset="3385" starttimestamp="1645820509543" timestamp="183006876" />
  <Command __id="5440" _type="ShellCommand" date="Sun Feb 27 18:11:57 EST 2022" starttimestamp="1645820509543" timestamp="183007824" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5441" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:57 EST 2022" forward="true" matchWord="false" offset="3385" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183007908" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5442" _type="ShellCommand" date="Sun Feb 27 18:11:57 EST 2022" starttimestamp="1645820509543" timestamp="183008447" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5443" _type="MoveCaretCommand" caretOffset="2815" date="Sun Feb 27 18:11:58 EST 2022" docOffset="2893" starttimestamp="1645820509543" timestamp="183008510" />
  <Command __id="5444" _type="MoveCaretCommand" caretOffset="2815" date="Sun Feb 27 18:11:58 EST 2022" docOffset="2893" starttimestamp="1645820509543" timestamp="183008510" />
  <Command __id="5445" _type="ShellCommand" date="Sun Feb 27 18:11:59 EST 2022" starttimestamp="1645820509543" timestamp="183009496" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5446" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:59 EST 2022" forward="true" matchWord="false" offset="2893" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183009581" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5447" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:11:59 EST 2022" forward="true" matchWord="false" offset="3065" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183010235" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5448" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:00 EST 2022" forward="true" matchWord="false" offset="3388" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183010851" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5449" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:00 EST 2022" forward="true" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183011215" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5450" _type="ShellCommand" date="Sun Feb 27 18:12:01 EST 2022" starttimestamp="1645820509543" timestamp="183011869" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5451" _type="MoveCaretCommand" caretOffset="2644" date="Sun Feb 27 18:12:01 EST 2022" docOffset="2722" starttimestamp="1645820509543" timestamp="183011914" />
  <Command __id="5452" _type="MoveCaretCommand" caretOffset="2644" date="Sun Feb 27 18:12:01 EST 2022" docOffset="2722" starttimestamp="1645820509543" timestamp="183011914" />
  <Command __id="5453" _type="ShellCommand" date="Sun Feb 27 18:12:04 EST 2022" starttimestamp="1645820509543" timestamp="183015261" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5454" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:05 EST 2022" forward="false" matchWord="false" offset="2722" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183016025" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5455" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:06 EST 2022" forward="false" matchWord="false" offset="2672" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183016510" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5456" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:06 EST 2022" forward="false" matchWord="false" offset="2672" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183016880" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5457" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:06 EST 2022" forward="false" matchWord="false" offset="2672" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183017095" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5458" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:06 EST 2022" forward="false" matchWord="false" offset="2672" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183017296" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5459" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:07 EST 2022" forward="false" matchWord="false" offset="2672" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183018034" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5460" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:07 EST 2022" forward="false" matchWord="false" offset="2672" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183018313" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5461" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:10 EST 2022" forward="true" matchWord="false" offset="2672" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183020539" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5462" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:10 EST 2022" forward="true" matchWord="false" offset="2946" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183021103" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5463" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:11 EST 2022" forward="true" matchWord="false" offset="3065" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183021572" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5464" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:11 EST 2022" forward="true" matchWord="false" offset="3388" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183022272" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5465" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:12 EST 2022" forward="true" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183022703" wrapSearch="false">
    <searchString><![CDATA[in here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5466" _type="ShellCommand" date="Sun Feb 27 18:12:14 EST 2022" starttimestamp="1645820509543" timestamp="183025369" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5468" _type="ShellCommand" date="Sun Feb 27 18:12:30 EST 2022" starttimestamp="1645820509543" timestamp="183040809" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5469" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:32 EST 2022" forward="true" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183043425" wrapSearch="false">
    <searchString><![CDATA[RCURLY]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5470" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:12:34 EST 2022" forward="false" matchWord="false" offset="3505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="183045250" wrapSearch="false">
    <searchString><![CDATA[RCURLY]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="5471" _type="ShellCommand" date="Sun Feb 27 18:12:39 EST 2022" starttimestamp="1645820509543" timestamp="183050139" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5472" _type="MoveCaretCommand" caretOffset="2298" date="Sun Feb 27 18:12:39 EST 2022" docOffset="2376" starttimestamp="1645820509543" timestamp="183050192" />
  <Command __id="5473" _type="MoveCaretCommand" caretOffset="2298" date="Sun Feb 27 18:12:39 EST 2022" docOffset="2376" starttimestamp="1645820509543" timestamp="183050192" />
  <Command __id="5474" _type="ShellCommand" date="Sun Feb 27 18:12:44 EST 2022" starttimestamp="1645820509543" timestamp="183054644" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5475" _type="ShellCommand" date="Sun Feb 27 18:12:44 EST 2022" starttimestamp="1645820509543" timestamp="183054744" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5476" _type="SelectTextCommand" caretOffset="2265" date="Sun Feb 27 18:13:11 EST 2022" end="2267" start="2265" starttimestamp="1645820509543" timestamp="183081478" />
  <Command __id="5477" _type="SelectTextCommand" caretOffset="2265" date="Sun Feb 27 18:13:11 EST 2022" end="2267" start="2265" starttimestamp="1645820509543" timestamp="183081478" />
  <Command __id="5479" _type="InsertStringCommand" date="Sun Feb 27 18:13:11 EST 2022" starttimestamp="1645820509543" timestamp="183082063" timestamp2="183082063">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5480" _type="InsertStringCommand" date="Sun Feb 27 18:13:11 EST 2022" starttimestamp="1645820509543" timestamp="183082063" timestamp2="183082063">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5482" _type="InsertStringCommand" date="Sun Feb 27 18:13:11 EST 2022" starttimestamp="1645820509543" timestamp="183082201" timestamp2="183082201">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="5483" _type="InsertStringCommand" date="Sun Feb 27 18:13:11 EST 2022" starttimestamp="1645820509543" timestamp="183082201" timestamp2="183082201">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="5485" _type="InsertStringCommand" date="Sun Feb 27 18:13:11 EST 2022" starttimestamp="1645820509543" timestamp="183082332" timestamp2="183082332">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5486" _type="InsertStringCommand" date="Sun Feb 27 18:13:11 EST 2022" starttimestamp="1645820509543" timestamp="183082332" timestamp2="183082332">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5487" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:13:12 EST 2022" starttimestamp="1645820509543" timestamp="183082879" />
  <Command __id="5488" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:13:12 EST 2022" starttimestamp="1645820509543" timestamp="183082879" />
  <Command __id="5489" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:13:12 EST 2022" starttimestamp="1645820509543" timestamp="183083064" />
  <Command __id="5490" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:13:12 EST 2022" starttimestamp="1645820509543" timestamp="183083064" />
  <Command __id="5491" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:13:12 EST 2022" starttimestamp="1645820509543" timestamp="183083218" />
  <Command __id="5492" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:13:12 EST 2022" starttimestamp="1645820509543" timestamp="183083218" />
  <Command __id="5493" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:13:12 EST 2022" starttimestamp="1645820509543" timestamp="183083381" />
  <Command __id="5494" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:13:12 EST 2022" starttimestamp="1645820509543" timestamp="183083381" />
  <Command __id="5495" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:13:13 EST 2022" starttimestamp="1645820509543" timestamp="183083550" />
  <Command __id="5496" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:13:13 EST 2022" starttimestamp="1645820509543" timestamp="183083550" />
  <Command __id="5497" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:13:13 EST 2022" starttimestamp="1645820509543" timestamp="183083750" />
  <Command __id="5498" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:13:13 EST 2022" starttimestamp="1645820509543" timestamp="183083750" />
  <Command __id="5499" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:13:13 EST 2022" starttimestamp="1645820509543" timestamp="183084088" />
  <Command __id="5500" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:13:13 EST 2022" starttimestamp="1645820509543" timestamp="183084088" />
  <Command __id="5502" _type="InsertStringCommand" date="Sun Feb 27 18:13:14 EST 2022" starttimestamp="1645820509543" timestamp="183084503" timestamp2="183084503">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5503" _type="InsertStringCommand" date="Sun Feb 27 18:13:14 EST 2022" starttimestamp="1645820509543" timestamp="183084503" timestamp2="183084503">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5505" _type="InsertStringCommand" date="Sun Feb 27 18:13:14 EST 2022" starttimestamp="1645820509543" timestamp="183084781" timestamp2="183084781">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5506" _type="InsertStringCommand" date="Sun Feb 27 18:13:14 EST 2022" starttimestamp="1645820509543" timestamp="183084781" timestamp2="183084781">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5508" _type="InsertStringCommand" date="Sun Feb 27 18:13:14 EST 2022" starttimestamp="1645820509543" timestamp="183084888" timestamp2="183084888">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5509" _type="InsertStringCommand" date="Sun Feb 27 18:13:14 EST 2022" starttimestamp="1645820509543" timestamp="183084888" timestamp2="183084888">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5511" _type="InsertStringCommand" date="Sun Feb 27 18:13:14 EST 2022" starttimestamp="1645820509543" timestamp="183085035" timestamp2="183085035">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5512" _type="InsertStringCommand" date="Sun Feb 27 18:13:14 EST 2022" starttimestamp="1645820509543" timestamp="183085035" timestamp2="183085035">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5514" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:13:14 EST 2022" starttimestamp="1645820509543" timestamp="183085251" />
  <Command __id="5515" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:13:14 EST 2022" starttimestamp="1645820509543" timestamp="183085251" />
  <Command __id="5517" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:13:14 EST 2022" starttimestamp="1645820509543" timestamp="183085420" />
  <Command __id="5518" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:13:14 EST 2022" starttimestamp="1645820509543" timestamp="183085420" />
  <Command __id="5520" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:13:15 EST 2022" starttimestamp="1645820509543" timestamp="183085567" />
  <Command __id="5521" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:13:15 EST 2022" starttimestamp="1645820509543" timestamp="183085567" />
  <Command __id="5523" _type="InsertStringCommand" date="Sun Feb 27 18:13:15 EST 2022" starttimestamp="1645820509543" timestamp="183085883" timestamp2="183085883">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5524" _type="InsertStringCommand" date="Sun Feb 27 18:13:15 EST 2022" starttimestamp="1645820509543" timestamp="183085883" timestamp2="183085883">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5526" _type="InsertStringCommand" date="Sun Feb 27 18:13:15 EST 2022" starttimestamp="1645820509543" timestamp="183086005" timestamp2="183086005">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5527" _type="InsertStringCommand" date="Sun Feb 27 18:13:15 EST 2022" starttimestamp="1645820509543" timestamp="183086005" timestamp2="183086005">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5529" _type="InsertStringCommand" date="Sun Feb 27 18:13:15 EST 2022" starttimestamp="1645820509543" timestamp="183086068" timestamp2="183086068">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5530" _type="InsertStringCommand" date="Sun Feb 27 18:13:15 EST 2022" starttimestamp="1645820509543" timestamp="183086068" timestamp2="183086068">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5532" _type="InsertStringCommand" date="Sun Feb 27 18:13:15 EST 2022" starttimestamp="1645820509543" timestamp="183086221" timestamp2="183086221">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5533" _type="InsertStringCommand" date="Sun Feb 27 18:13:15 EST 2022" starttimestamp="1645820509543" timestamp="183086221" timestamp2="183086221">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5535" _type="InsertStringCommand" date="Sun Feb 27 18:13:15 EST 2022" starttimestamp="1645820509543" timestamp="183086321" timestamp2="183086321">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5536" _type="InsertStringCommand" date="Sun Feb 27 18:13:15 EST 2022" starttimestamp="1645820509543" timestamp="183086321" timestamp2="183086321">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5538" _type="InsertStringCommand" date="Sun Feb 27 18:13:16 EST 2022" starttimestamp="1645820509543" timestamp="183086491" timestamp2="183086491">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5539" _type="InsertStringCommand" date="Sun Feb 27 18:13:16 EST 2022" starttimestamp="1645820509543" timestamp="183086491" timestamp2="183086491">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5360" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:10:12 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11145" docExpressionCount="1104" docLength="12450" projectName="pa1" starttimestamp="1645820509543" timestamp="182902983">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println("in here: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:			¶//			System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			acceptIt();¶//			System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				acceptIt();¶//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶"), Diff(INSERT,"	"), Diff(EQUAL,"¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶		"), Diff(INSERT,"	// starts with reference¶			"), Diff(EQUAL,"case ID: case THIS:¶			"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶			"), Diff(INSERT,"	// dealing with (.id)*¶				"), Diff(EQUAL,"while (currentToken.kind == TokenKind.DOT) {¶				"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.ID);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"}¶			"), Diff(INSERT,"	"), Diff(EQUAL,"switch (currentToken.kind) {¶			"), Diff(DELETE,"case LBRACKET"), Diff(INSERT,"		// reference[expression]¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					// reference(arglist?)¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						break;¶						¶					// just reference¶					default:¶						break;¶//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶				¶			case UNOP: case MINUS"), Diff(EQUAL,":¶				acceptIt();¶				parseExpression();¶				"), Diff(DELETE,"accept(TokenKind.RBRACKET);¶				"), Diff(EQUAL,"break;¶			¶			case LPAREN:¶				acceptIt();¶				"), Diff(DELETE,"if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				break;¶				¶			// just reference¶			default:¶				parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			}¶			¶		case UNOP: case MINUS:¶			acceptIt();¶			parseExpression();¶			break;¶		¶		case LPAREN:¶			acceptIt();¶			"), Diff(EQUAL,"parseExpression();¶"), Diff(INSERT,"	"), Diff(EQUAL,"			accept(TokenKind.RPAREN);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶		"), Diff(INSERT,"	"), Diff(EQUAL,"¶		"), Diff(INSERT,"	"), Diff(EQUAL,"case NUM: case TRUE: case FALSE:¶			"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶		"), Diff(INSERT,"	"), Diff(EQUAL,"¶		"), Diff(INSERT,"	"), Diff(EQUAL,"case NEW:¶			"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"switch (currentToken.kind) {¶			"), Diff(INSERT,"	"), Diff(EQUAL,"case ID:¶				"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"switch (currentToken.kind) {¶				"), Diff(INSERT,"	"), Diff(EQUAL,"case LPAREN:¶					"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶					"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RPAREN);¶					"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶				"), Diff(INSERT,"	"), Diff(EQUAL,"case LBRACKET:¶					"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶					"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶					"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RBRACKET);¶					"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶				"), Diff(INSERT,"	"), Diff(EQUAL,"¶				"), Diff(INSERT,"	"), Diff(EQUAL,"}¶			"), Diff(INSERT,"	"), Diff(EQUAL,"¶			"), Diff(INSERT,"	"), Diff(EQUAL,"case INT:¶				"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.LBRACKET);¶				"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RBRACKET);¶				"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶			"), Diff(INSERT,"	"), Diff(EQUAL,"¶			"), Diff(INSERT,"	"), Diff(EQUAL,"default:¶				"), Diff(INSERT,"	"), Diff(EQUAL,"parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"}¶			"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶		"), Diff(INSERT,"	"), Diff(EQUAL,"¶		"), Diff(INSERT,"	"), Diff(EQUAL,"default:¶			"), Diff(INSERT,"	"), Diff(EQUAL,"parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶		"), Diff(INSERT,"		break;¶		"), Diff(EQUAL,"}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("in here: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:			
//			System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");
			acceptIt();
//			System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				acceptIt();
//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}

	
	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
			// starts with reference
			case ID: case THIS:
				acceptIt();
				// dealing with (.id)*
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					// reference[expression]
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					// reference(arglist?)
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						break;
						
					// just reference
					default:
						break;
//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
				
			case UNOP: case MINUS:
				acceptIt();
				parseExpression();
				break;
			
			case LPAREN:
				acceptIt();
				parseExpression();
				accept(TokenKind.RPAREN);
				break;
			
			case NUM: case TRUE: case FALSE:
				acceptIt();
				break;
			
			case NEW:
				acceptIt();
				switch (currentToken.kind) {
				case ID:
					acceptIt();
					switch (currentToken.kind) {
					case LPAREN:
						acceptIt();
						accept(TokenKind.RPAREN);
						break;
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					}
				
				case INT:
					acceptIt();
					accept(TokenKind.LBRACKET);
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				default:
					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
			
			default:
				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				break;
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="5478" _type="Replace" date="Sun Feb 27 18:13:11 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11144" docExpressionCount="1104" docLength="12449" endLine="100" insertionLength="1" int_docASTNodeCount="1575" int_docActiveCodeLength="11143" int_docExpressionCount="1104" int_docLength="12448" length="2" offset="2343" startLine="100" starttimestamp="1645820509543" timestamp="183082063">
    <deletedText><![CDATA[in]]></deletedText>
    <insertedText><![CDATA[o]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5481" _type="Insert" date="Sun Feb 27 18:13:11 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11145" docExpressionCount="1104" docLength="12450" length="1" offset="2344" starttimestamp="1645820509543" timestamp="183082201">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="5484" _type="Insert" date="Sun Feb 27 18:13:11 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11146" docExpressionCount="1104" docLength="12451" length="1" offset="2345" starttimestamp="1645820509543" timestamp="183082332">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="5501" _type="Insert" date="Sun Feb 27 18:13:14 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11147" docExpressionCount="1104" docLength="12452" length="1" offset="2351" starttimestamp="1645820509543" timestamp="183084503">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5504" _type="Insert" date="Sun Feb 27 18:13:14 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11148" docExpressionCount="1104" docLength="12453" length="1" offset="2352" starttimestamp="1645820509543" timestamp="183084766">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="5507" _type="Insert" date="Sun Feb 27 18:13:14 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11149" docExpressionCount="1104" docLength="12454" length="1" offset="2353" starttimestamp="1645820509543" timestamp="183084888">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="5510" _type="Insert" date="Sun Feb 27 18:13:14 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11150" docExpressionCount="1104" docLength="12455" length="1" offset="2354" starttimestamp="1645820509543" timestamp="183085035">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5513" _type="Delete" date="Sun Feb 27 18:13:14 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11149" docExpressionCount="1104" docLength="12454" endLine="100" length="1" offset="2354" startLine="100" starttimestamp="1645820509543" timestamp="183085251">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5516" _type="Delete" date="Sun Feb 27 18:13:14 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11148" docExpressionCount="1104" docLength="12453" endLine="100" length="1" offset="2353" startLine="100" starttimestamp="1645820509543" timestamp="183085405">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="5519" _type="Delete" date="Sun Feb 27 18:13:15 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11147" docExpressionCount="1104" docLength="12452" endLine="100" length="1" offset="2352" startLine="100" starttimestamp="1645820509543" timestamp="183085567">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="5522" _type="Insert" date="Sun Feb 27 18:13:15 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11148" docExpressionCount="1104" docLength="12453" length="1" offset="2352" starttimestamp="1645820509543" timestamp="183085868">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5525" _type="Insert" date="Sun Feb 27 18:13:15 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11149" docExpressionCount="1104" docLength="12454" length="1" offset="2353" starttimestamp="1645820509543" timestamp="183085990">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="5528" _type="Insert" date="Sun Feb 27 18:13:15 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11150" docExpressionCount="1104" docLength="12455" length="1" offset="2354" starttimestamp="1645820509543" timestamp="183086068">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="5531" _type="Insert" date="Sun Feb 27 18:13:15 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11151" docExpressionCount="1104" docLength="12456" length="1" offset="2355" starttimestamp="1645820509543" timestamp="183086221">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5534" _type="Insert" date="Sun Feb 27 18:13:15 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11152" docExpressionCount="1104" docLength="12457" length="1" offset="2356" starttimestamp="1645820509543" timestamp="183086321">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="5537" _type="Insert" date="Sun Feb 27 18:13:16 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11153" docExpressionCount="1104" docLength="12458" length="1" offset="2357" starttimestamp="1645820509543" timestamp="183086484">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="5540" _type="Insert" date="Sun Feb 27 18:13:16 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11154" docExpressionCount="1104" docLength="12459" length="1" offset="2358" starttimestamp="1645820509543" timestamp="183086553">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5543" _type="Insert" date="Sun Feb 27 18:13:16 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11155" docExpressionCount="1104" docLength="12460" length="1" offset="2359" starttimestamp="1645820509543" timestamp="183086807">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="5546" _type="Insert" date="Sun Feb 27 18:13:16 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11156" docExpressionCount="1104" docLength="12461" length="1" offset="2360" starttimestamp="1645820509543" timestamp="183086892">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5549" _type="Insert" date="Sun Feb 27 18:13:16 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11157" docExpressionCount="1104" docLength="12462" length="1" offset="2361" starttimestamp="1645820509543" timestamp="183086992">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="5552" _type="Insert" date="Sun Feb 27 18:13:16 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11158" docExpressionCount="1104" docLength="12463" length="1" offset="2362" starttimestamp="1645820509543" timestamp="183087208">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="5555" _type="Insert" date="Sun Feb 27 18:13:16 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11159" docExpressionCount="1104" docLength="12464" length="1" offset="2363" starttimestamp="1645820509543" timestamp="183087408">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5558" _type="Insert" date="Sun Feb 27 18:13:17 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11160" docExpressionCount="1104" docLength="12465" length="1" offset="2364" starttimestamp="1645820509543" timestamp="183087508">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="5561" _type="Insert" date="Sun Feb 27 18:13:17 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11161" docExpressionCount="1104" docLength="12466" length="1" offset="2365" starttimestamp="1645820509543" timestamp="183087624">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="5574" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:14:20 EST 2022" docASTNodeCount="62" docActiveCodeLength="355" docExpressionCount="26" docLength="355" projectName="pa1" starttimestamp="1645820509543" timestamp="183150884">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="5575" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:14:31 EST 2022" starttimestamp="1645820509543" timestamp="183161496" />
  <Command __id="5576" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:14:31 EST 2022" starttimestamp="1645820509543" timestamp="183161501" />
  <Command __id="5578" _type="MoveCaretCommand" caretOffset="1634" date="Sun Feb 27 18:14:31 EST 2022" docOffset="1712" starttimestamp="1645820509543" timestamp="183161934" />
  <Command __id="5579" _type="MoveCaretCommand" caretOffset="1634" date="Sun Feb 27 18:14:31 EST 2022" docOffset="1712" starttimestamp="1645820509543" timestamp="183161981" />
  <Command __id="5588" _type="RunCommand" date="Sun Feb 27 18:14:37 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183168316" type="Run" />
  <Command __id="5589" _type="RunCommand" date="Sun Feb 27 18:14:37 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183168316" type="Run" />
  <Command __id="5590" _type="RunCommand" date="Sun Feb 27 18:14:37 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183168432" type="Run" />
  <Command __id="5591" _type="RunCommand" date="Sun Feb 27 18:14:37 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183168432" type="Run" />
  <Command __id="5592" _type="EHExceptionCommand" date="Sun Feb 27 18:14:38 EST 2022" starttimestamp="1645820509543" timestamp="183168479" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
In scanner =
=
0
;
try
In scanner =
=
!
(
a
In scanner =
==
a
)
;
}
public
static
boolean
hasErrors
out here end of program: (
Parse error: Parsing ( and expecting 'RCURLY' but found 'LPAREN'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="5593" _type="SelectTextCommand" caretOffset="1689" date="Sun Feb 27 18:14:48 EST 2022" end="2133" start="1689" starttimestamp="1645820509543" timestamp="183178482" />
  <Command __id="5594" _type="SelectTextCommand" caretOffset="1689" date="Sun Feb 27 18:14:48 EST 2022" end="2133" start="1689" starttimestamp="1645820509543" timestamp="183178482" />
  <Command __id="5612" _type="InsertStringCommand" date="Sun Feb 27 18:14:48 EST 2022" starttimestamp="1645820509543" timestamp="183178635" timestamp2="183178635">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5613" _type="InsertStringCommand" date="Sun Feb 27 18:14:48 EST 2022" starttimestamp="1645820509543" timestamp="183178635" timestamp2="183178635">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5614" _type="MoveCaretCommand" caretOffset="1946" date="Sun Feb 27 18:14:48 EST 2022" docOffset="2024" starttimestamp="1645820509543" timestamp="183179084" />
  <Command __id="5615" _type="MoveCaretCommand" caretOffset="1946" date="Sun Feb 27 18:14:48 EST 2022" docOffset="2024" starttimestamp="1645820509543" timestamp="183179084" />
  <Command __id="5616" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 18:14:49 EST 2022" starttimestamp="1645820509543" timestamp="183179952" />
  <Command __id="5617" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:14:49 EST 2022" starttimestamp="1645820509543" timestamp="183180053" />
  <Command __id="5618" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:14:49 EST 2022" starttimestamp="1645820509543" timestamp="183180053" />
  <Command __id="5619" _type="MoveCaretCommand" caretOffset="1978" date="Sun Feb 27 18:14:51 EST 2022" docOffset="2056" starttimestamp="1645820509543" timestamp="183181620" />
  <Command __id="5620" _type="MoveCaretCommand" caretOffset="1978" date="Sun Feb 27 18:14:51 EST 2022" docOffset="2056" starttimestamp="1645820509543" timestamp="183181635" />
  <Command __id="5621" _type="MoveCaretCommand" caretOffset="1782" date="Sun Feb 27 18:14:52 EST 2022" docOffset="1860" starttimestamp="1645820509543" timestamp="183183138" />
  <Command __id="5622" _type="MoveCaretCommand" caretOffset="1782" date="Sun Feb 27 18:14:52 EST 2022" docOffset="1860" starttimestamp="1645820509543" timestamp="183183138" />
  <Command __id="5623" _type="MoveCaretCommand" caretOffset="1802" date="Sun Feb 27 18:15:41 EST 2022" docOffset="1880" starttimestamp="1645820509543" timestamp="183232362" />
  <Command __id="5624" _type="MoveCaretCommand" caretOffset="1802" date="Sun Feb 27 18:15:41 EST 2022" docOffset="1880" starttimestamp="1645820509543" timestamp="183232362" />
  <Command __id="5625" _type="MoveCaretCommand" caretOffset="1796" date="Sun Feb 27 18:15:55 EST 2022" docOffset="1874" starttimestamp="1645820509543" timestamp="183245512" />
  <Command __id="5626" _type="MoveCaretCommand" caretOffset="1796" date="Sun Feb 27 18:15:55 EST 2022" docOffset="1874" starttimestamp="1645820509543" timestamp="183245512" />
  <Command __id="5627" _type="SelectTextCommand" caretOffset="1799" date="Sun Feb 27 18:15:55 EST 2022" end="1799" start="1792" starttimestamp="1645820509543" timestamp="183245728" />
  <Command __id="5628" _type="SelectTextCommand" caretOffset="1799" date="Sun Feb 27 18:15:55 EST 2022" end="1799" start="1792" starttimestamp="1645820509543" timestamp="183245728" />
  <Command __id="5630" _type="ShellCommand" date="Sun Feb 27 18:15:58 EST 2022" starttimestamp="1645820509543" timestamp="183249040" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5631" _type="ShellCommand" date="Sun Feb 27 18:15:59 EST 2022" starttimestamp="1645820509543" timestamp="183250432" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5632" _type="SelectTextCommand" caretOffset="1799" date="Sun Feb 27 18:16:03 EST 2022" end="1799" start="1792" starttimestamp="1645820509543" timestamp="183253522" />
  <Command __id="5633" _type="SelectTextCommand" caretOffset="1799" date="Sun Feb 27 18:16:03 EST 2022" end="1799" start="1792" starttimestamp="1645820509543" timestamp="183253522" />
  <Command __id="5634" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sun Feb 27 18:16:04 EST 2022" starttimestamp="1645820509543" timestamp="183254613" />
  <Command __id="5635" _type="MoveCaretCommand" caretOffset="10434" date="Sun Feb 27 18:16:05 EST 2022" docOffset="10512" starttimestamp="1645820509543" timestamp="183256128" />
  <Command __id="5636" _type="MoveCaretCommand" caretOffset="10434" date="Sun Feb 27 18:16:05 EST 2022" docOffset="10512" starttimestamp="1645820509543" timestamp="183256128" />
  <Command __id="5637" _type="MoveCaretCommand" caretOffset="10477" date="Sun Feb 27 18:16:06 EST 2022" docOffset="10555" starttimestamp="1645820509543" timestamp="183256877" />
  <Command __id="5638" _type="MoveCaretCommand" caretOffset="10477" date="Sun Feb 27 18:16:06 EST 2022" docOffset="10555" starttimestamp="1645820509543" timestamp="183256877" />
  <Command __id="5577" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:14:31 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11161" docExpressionCount="1104" docLength="12466" projectName="pa1" starttimestamp="1645820509543" timestamp="183161903">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						case SEMICOLON:¶							accept(TokenKind.SEMICOLON);¶							break;¶						case ID:¶							parseId();¶							accept(TokenKind.LPAREN);¶							if (startsType(currentToken.kind)) {¶								parseParameterList();¶							}¶							accept(TokenKind.RPAREN);¶							accept(TokenKind.LCURLY);¶							¶							while (startsStatement(currentToken.kind)) {¶								parseStatement();¶							}¶							accept(TokenKind.RCURLY);¶							break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations");¶					}¶					¶			}¶		}¶		System.out.println(""), Diff(DELETE,"in"), Diff(INSERT,"out"), Diff(EQUAL," here"), Diff(INSERT," end of program"), Diff(EQUAL,": " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:			¶//			System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			acceptIt();¶//			System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				acceptIt();¶//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶	¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶			// starts with reference¶			case ID: case THIS:¶				acceptIt();¶				// dealing with (.id)*¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					// reference[expression]¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					// reference(arglist?)¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						break;¶						¶					// just reference¶					default:¶						break;¶//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶				¶			case UNOP: case MINUS:¶				acceptIt();¶				parseExpression();¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				break;¶			¶			case NUM: case TRUE: case FALSE:¶				acceptIt();¶				break;¶			¶			case NEW:¶				acceptIt();¶				switch (currentToken.kind) {¶				case ID:¶					acceptIt();¶					switch (currentToken.kind) {¶					case LPAREN:¶						acceptIt();¶						accept(TokenKind.RPAREN);¶						break;¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					}¶				¶				case INT:¶					acceptIt();¶					accept(TokenKind.LBRACKET);¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				default:¶					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶			¶			default:¶				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				break;¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
						case SEMICOLON:
							accept(TokenKind.SEMICOLON);
							break;
						case ID:
							parseId();
							accept(TokenKind.LPAREN);
							if (startsType(currentToken.kind)) {
								parseParameterList();
							}
							accept(TokenKind.RPAREN);
							accept(TokenKind.LCURLY);
							
							while (startsStatement(currentToken.kind)) {
								parseStatement();
							}
							accept(TokenKind.RCURLY);
							break;
						}
					}
					else {
						parseError("Parsing wrong in declarations");
					}
					
			}
		}
		System.out.println("out here end of program: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:			
//			System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");
			acceptIt();
//			System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				acceptIt();
//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}

	
	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
			// starts with reference
			case ID: case THIS:
				acceptIt();
				// dealing with (.id)*
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					// reference[expression]
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					// reference(arglist?)
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						break;
						
					// just reference
					default:
						break;
//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
				
			case UNOP: case MINUS:
				acceptIt();
				parseExpression();
				break;
			
			case LPAREN:
				acceptIt();
				parseExpression();
				accept(TokenKind.RPAREN);
				break;
			
			case NUM: case TRUE: case FALSE:
				acceptIt();
				break;
			
			case NEW:
				acceptIt();
				switch (currentToken.kind) {
				case ID:
					acceptIt();
					switch (currentToken.kind) {
					case LPAREN:
						acceptIt();
						accept(TokenKind.RPAREN);
						break;
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					}
				
				case INT:
					acceptIt();
					accept(TokenKind.LBRACKET);
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				default:
					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
			
			default:
				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				break;
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="5595" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11162" docExpressionCount="1104" docLength="12467" length="1" offset="1767" starttimestamp="1645820509543" timestamp="183178582">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5596" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11163" docExpressionCount="1104" docLength="12468" length="1" offset="1791" starttimestamp="1645820509543" timestamp="183178582">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5597" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11164" docExpressionCount="1104" docLength="12469" length="1" offset="1829" starttimestamp="1645820509543" timestamp="183178582">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5598" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11165" docExpressionCount="1104" docLength="12470" length="1" offset="1845" starttimestamp="1645820509543" timestamp="183178598">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5599" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11166" docExpressionCount="1104" docLength="12471" length="1" offset="1862" starttimestamp="1645820509543" timestamp="183178598">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5600" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11167" docExpressionCount="1104" docLength="12472" length="1" offset="1882" starttimestamp="1645820509543" timestamp="183178598">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5601" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11168" docExpressionCount="1104" docLength="12473" length="1" offset="1917" starttimestamp="1645820509543" timestamp="183178598">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5602" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11169" docExpressionCount="1104" docLength="12474" length="1" offset="1963" starttimestamp="1645820509543" timestamp="183178598">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5603" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11170" docExpressionCount="1104" docLength="12475" length="1" offset="1995" starttimestamp="1645820509543" timestamp="183178598">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5604" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11171" docExpressionCount="1104" docLength="12476" length="1" offset="2006" starttimestamp="1645820509543" timestamp="183178598">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5605" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11172" docExpressionCount="1104" docLength="12477" length="1" offset="2041" starttimestamp="1645820509543" timestamp="183178598">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5606" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11173" docExpressionCount="1104" docLength="12478" length="1" offset="2076" starttimestamp="1645820509543" timestamp="183178598">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5607" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11174" docExpressionCount="1104" docLength="12479" length="1" offset="2086" starttimestamp="1645820509543" timestamp="183178613">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5608" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11175" docExpressionCount="1104" docLength="12480" length="1" offset="2140" starttimestamp="1645820509543" timestamp="183178613">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5609" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11176" docExpressionCount="1104" docLength="12481" length="1" offset="2168" starttimestamp="1645820509543" timestamp="183178613">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5610" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11177" docExpressionCount="1104" docLength="12482" length="1" offset="2179" starttimestamp="1645820509543" timestamp="183178613">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5611" _type="Insert" date="Sun Feb 27 18:14:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11178" docExpressionCount="1104" docLength="12483" length="1" offset="2214" starttimestamp="1645820509543" timestamp="183178613">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="5639" _type="MoveCaretCommand" caretOffset="1801" date="Sun Feb 27 18:16:16 EST 2022" docOffset="1879" starttimestamp="1645820509543" timestamp="183266530" />
  <Command __id="5640" _type="MoveCaretCommand" caretOffset="1801" date="Sun Feb 27 18:16:16 EST 2022" docOffset="1879" starttimestamp="1645820509543" timestamp="183266530" />
  <Command __id="5641" _type="MoveCaretCommand" caretOffset="1802" date="Sun Feb 27 18:16:16 EST 2022" docOffset="1880" starttimestamp="1645820509543" timestamp="183267194" />
  <Command __id="5642" _type="MoveCaretCommand" caretOffset="1802" date="Sun Feb 27 18:16:16 EST 2022" docOffset="1880" starttimestamp="1645820509543" timestamp="183267194" />
  <DocumentChange __id="5643" _type="Insert" date="Sun Feb 27 18:16:36 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11188" docExpressionCount="1104" docLength="12493" length="10" offset="1880" starttimestamp="1645820509543" timestamp="183287186">
    <text><![CDATA[
								]]></text>
  </DocumentChange>
  <Command __id="5644" _type="InsertStringCommand" date="Sun Feb 27 18:16:36 EST 2022" starttimestamp="1645820509543" timestamp="183287217" timestamp2="183287217">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5645" _type="InsertStringCommand" date="Sun Feb 27 18:16:36 EST 2022" starttimestamp="1645820509543" timestamp="183287217" timestamp2="183287217">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5646" _type="Insert" date="Sun Feb 27 18:16:36 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11198" docExpressionCount="1104" docLength="12503" length="10" offset="1890" starttimestamp="1645820509543" timestamp="183287318">
    <text><![CDATA[
								]]></text>
  </DocumentChange>
  <Command __id="5647" _type="InsertStringCommand" date="Sun Feb 27 18:16:36 EST 2022" starttimestamp="1645820509543" timestamp="183287318" timestamp2="183287318">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5648" _type="InsertStringCommand" date="Sun Feb 27 18:16:36 EST 2022" starttimestamp="1645820509543" timestamp="183287318" timestamp2="183287318">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5649" _type="Insert" date="Sun Feb 27 18:16:37 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11199" docExpressionCount="1104" docLength="12504" length="1" offset="1900" starttimestamp="1645820509543" timestamp="183287518">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="5650" _type="InsertStringCommand" date="Sun Feb 27 18:16:37 EST 2022" starttimestamp="1645820509543" timestamp="183287518" timestamp2="183287518">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5651" _type="InsertStringCommand" date="Sun Feb 27 18:16:37 EST 2022" starttimestamp="1645820509543" timestamp="183287518" timestamp2="183287518">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="5652" _type="Insert" date="Sun Feb 27 18:16:37 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11198" docExpressionCount="1104" docLength="12505" length="1" offset="1901" starttimestamp="1645820509543" timestamp="183287671">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="5653" _type="InsertStringCommand" date="Sun Feb 27 18:16:37 EST 2022" starttimestamp="1645820509543" timestamp="183287687" timestamp2="183287687">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5654" _type="InsertStringCommand" date="Sun Feb 27 18:16:37 EST 2022" starttimestamp="1645820509543" timestamp="183287687" timestamp2="183287687">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="5655" _type="Delete" date="Sun Feb 27 18:16:37 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11199" docExpressionCount="1104" docLength="12504" endLine="81" length="1" offset="1901" startLine="81" starttimestamp="1645820509543" timestamp="183288073">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="5656" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:37 EST 2022" starttimestamp="1645820509543" timestamp="183288073" />
  <Command __id="5657" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:37 EST 2022" starttimestamp="1645820509543" timestamp="183288073" />
  <DocumentChange __id="5658" _type="Delete" date="Sun Feb 27 18:16:37 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11198" docExpressionCount="1104" docLength="12503" endLine="81" length="1" offset="1900" startLine="81" starttimestamp="1645820509543" timestamp="183288241">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="5659" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:37 EST 2022" starttimestamp="1645820509543" timestamp="183288241" />
  <Command __id="5660" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:37 EST 2022" starttimestamp="1645820509543" timestamp="183288241" />
  <DocumentChange __id="5661" _type="Delete" date="Sun Feb 27 18:16:37 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11197" docExpressionCount="1104" docLength="12502" endLine="81" length="1" offset="1899" startLine="81" starttimestamp="1645820509543" timestamp="183288404">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="5662" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:37 EST 2022" starttimestamp="1645820509543" timestamp="183288404" />
  <Command __id="5663" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:37 EST 2022" starttimestamp="1645820509543" timestamp="183288404" />
  <DocumentChange __id="5664" _type="Delete" date="Sun Feb 27 18:16:38 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11196" docExpressionCount="1104" docLength="12501" endLine="81" length="1" offset="1898" startLine="81" starttimestamp="1645820509543" timestamp="183288589">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="5665" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:38 EST 2022" starttimestamp="1645820509543" timestamp="183288589" />
  <Command __id="5666" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:38 EST 2022" starttimestamp="1645820509543" timestamp="183288589" />
  <DocumentChange __id="5667" _type="Delete" date="Sun Feb 27 18:16:38 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11195" docExpressionCount="1104" docLength="12500" endLine="81" length="1" offset="1897" startLine="81" starttimestamp="1645820509543" timestamp="183288736">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="5668" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:38 EST 2022" starttimestamp="1645820509543" timestamp="183288742" />
  <Command __id="5669" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:38 EST 2022" starttimestamp="1645820509543" timestamp="183288742" />
  <DocumentChange __id="5670" _type="Delete" date="Sun Feb 27 18:16:38 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11194" docExpressionCount="1104" docLength="12499" endLine="81" length="1" offset="1896" startLine="81" starttimestamp="1645820509543" timestamp="183288905">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="5671" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:38 EST 2022" starttimestamp="1645820509543" timestamp="183288905" />
  <Command __id="5672" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:38 EST 2022" starttimestamp="1645820509543" timestamp="183288905" />
  <DocumentChange __id="5673" _type="Delete" date="Sun Feb 27 18:16:38 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11193" docExpressionCount="1104" docLength="12498" endLine="81" length="1" offset="1895" startLine="81" starttimestamp="1645820509543" timestamp="183289075">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="5674" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:38 EST 2022" starttimestamp="1645820509543" timestamp="183289075" />
  <Command __id="5675" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:38 EST 2022" starttimestamp="1645820509543" timestamp="183289075" />
  <DocumentChange __id="5676" _type="Delete" date="Sun Feb 27 18:16:38 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11192" docExpressionCount="1104" docLength="12497" endLine="81" length="1" offset="1894" startLine="81" starttimestamp="1645820509543" timestamp="183289222">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="5677" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:38 EST 2022" starttimestamp="1645820509543" timestamp="183289222" />
  <Command __id="5678" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:38 EST 2022" starttimestamp="1645820509543" timestamp="183289222" />
  <DocumentChange __id="5679" _type="Delete" date="Sun Feb 27 18:16:38 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11191" docExpressionCount="1104" docLength="12496" endLine="81" length="1" offset="1893" startLine="81" starttimestamp="1645820509543" timestamp="183289391">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="5680" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:38 EST 2022" starttimestamp="1645820509543" timestamp="183289391" />
  <Command __id="5681" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:38 EST 2022" starttimestamp="1645820509543" timestamp="183289391" />
  <DocumentChange __id="5682" _type="Delete" date="Sun Feb 27 18:16:39 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12495" endLine="81" length="1" offset="1892" startLine="81" starttimestamp="1645820509543" timestamp="183289575">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="5683" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:39 EST 2022" starttimestamp="1645820509543" timestamp="183289591" />
  <Command __id="5684" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:39 EST 2022" starttimestamp="1645820509543" timestamp="183289591" />
  <DocumentChange __id="5685" _type="Delete" date="Sun Feb 27 18:16:39 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11188" docExpressionCount="1104" docLength="12493" endLine="81" length="2" offset="1890" startLine="80" starttimestamp="1645820509543" timestamp="183289757">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="5686" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:39 EST 2022" starttimestamp="1645820509543" timestamp="183289795" />
  <Command __id="5687" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:39 EST 2022" starttimestamp="1645820509543" timestamp="183289795" />
  <DocumentChange __id="5688" _type="Insert" date="Sun Feb 27 18:16:40 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11189" docExpressionCount="1104" docLength="12494" length="1" offset="1890" starttimestamp="1645820509543" timestamp="183290553">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="5689" _type="InsertStringCommand" date="Sun Feb 27 18:16:40 EST 2022" starttimestamp="1645820509543" timestamp="183290553" timestamp2="183290553">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5690" _type="InsertStringCommand" date="Sun Feb 27 18:16:40 EST 2022" starttimestamp="1645820509543" timestamp="183290553" timestamp2="183290553">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="5691" _type="Insert" date="Sun Feb 27 18:16:40 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11188" docExpressionCount="1104" docLength="12495" length="1" offset="1891" starttimestamp="1645820509543" timestamp="183290707">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="5692" _type="InsertStringCommand" date="Sun Feb 27 18:16:40 EST 2022" starttimestamp="1645820509543" timestamp="183290707" timestamp2="183290707">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5693" _type="InsertStringCommand" date="Sun Feb 27 18:16:40 EST 2022" starttimestamp="1645820509543" timestamp="183290707" timestamp2="183290707">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="5694" _type="Delete" date="Sun Feb 27 18:16:40 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11189" docExpressionCount="1104" docLength="12494" endLine="80" length="1" offset="1891" startLine="80" starttimestamp="1645820509543" timestamp="183290954">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="5695" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:40 EST 2022" starttimestamp="1645820509543" timestamp="183290954" />
  <Command __id="5696" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:40 EST 2022" starttimestamp="1645820509543" timestamp="183290954" />
  <DocumentChange __id="5697" _type="Delete" date="Sun Feb 27 18:16:40 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11188" docExpressionCount="1104" docLength="12493" endLine="80" length="1" offset="1890" startLine="80" starttimestamp="1645820509543" timestamp="183291086">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="5698" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:40 EST 2022" starttimestamp="1645820509543" timestamp="183291086" />
  <Command __id="5699" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:40 EST 2022" starttimestamp="1645820509543" timestamp="183291086" />
  <DocumentChange __id="5700" _type="Insert" date="Sun Feb 27 18:16:41 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11189" docExpressionCount="1105" docLength="12494" length="1" offset="1890" starttimestamp="1645820509543" timestamp="183291610">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="5701" _type="InsertStringCommand" date="Sun Feb 27 18:16:41 EST 2022" starttimestamp="1645820509543" timestamp="183291610" timestamp2="183291610">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="5702" _type="InsertStringCommand" date="Sun Feb 27 18:16:41 EST 2022" starttimestamp="1645820509543" timestamp="183291610" timestamp2="183291610">
    <data><![CDATA[S]]></data>
  </Command>
  <DocumentChange __id="5703" _type="Insert" date="Sun Feb 27 18:16:41 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11190" docExpressionCount="1105" docLength="12495" length="1" offset="1891" starttimestamp="1645820509543" timestamp="183291957">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="5704" _type="InsertStringCommand" date="Sun Feb 27 18:16:41 EST 2022" starttimestamp="1645820509543" timestamp="183291957" timestamp2="183291957">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5705" _type="InsertStringCommand" date="Sun Feb 27 18:16:41 EST 2022" starttimestamp="1645820509543" timestamp="183291957" timestamp2="183291957">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="5706" _type="Insert" date="Sun Feb 27 18:16:41 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11191" docExpressionCount="1105" docLength="12496" length="1" offset="1892" starttimestamp="1645820509543" timestamp="183292041">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="5707" _type="InsertStringCommand" date="Sun Feb 27 18:16:41 EST 2022" starttimestamp="1645820509543" timestamp="183292057" timestamp2="183292057">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="5708" _type="InsertStringCommand" date="Sun Feb 27 18:16:41 EST 2022" starttimestamp="1645820509543" timestamp="183292057" timestamp2="183292057">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="5709" _type="Delete" date="Sun Feb 27 18:16:41 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11190" docExpressionCount="1105" docLength="12495" endLine="80" length="1" offset="1892" startLine="80" starttimestamp="1645820509543" timestamp="183292374">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="5710" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:41 EST 2022" starttimestamp="1645820509543" timestamp="183292374" />
  <Command __id="5711" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:41 EST 2022" starttimestamp="1645820509543" timestamp="183292374" />
  <DocumentChange __id="5712" _type="Delete" date="Sun Feb 27 18:16:42 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11189" docExpressionCount="1105" docLength="12494" endLine="80" length="1" offset="1891" startLine="80" starttimestamp="1645820509543" timestamp="183292489">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="5713" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:42 EST 2022" starttimestamp="1645820509543" timestamp="183292511" />
  <Command __id="5714" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:42 EST 2022" starttimestamp="1645820509543" timestamp="183292511" />
  <DocumentChange __id="5715" _type="Insert" date="Sun Feb 27 18:16:42 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11190" docExpressionCount="1105" docLength="12495" length="1" offset="1891" starttimestamp="1645820509543" timestamp="183292705">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="5716" _type="InsertStringCommand" date="Sun Feb 27 18:16:42 EST 2022" starttimestamp="1645820509543" timestamp="183292705" timestamp2="183292705">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="5717" _type="InsertStringCommand" date="Sun Feb 27 18:16:42 EST 2022" starttimestamp="1645820509543" timestamp="183292705" timestamp2="183292705">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="5718" _type="Insert" date="Sun Feb 27 18:16:42 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11191" docExpressionCount="1105" docLength="12496" length="1" offset="1892" starttimestamp="1645820509543" timestamp="183292728">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="5719" _type="InsertStringCommand" date="Sun Feb 27 18:16:42 EST 2022" starttimestamp="1645820509543" timestamp="183292743" timestamp2="183292743">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5720" _type="InsertStringCommand" date="Sun Feb 27 18:16:42 EST 2022" starttimestamp="1645820509543" timestamp="183292743" timestamp2="183292743">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="5721" _type="Insert" date="Sun Feb 27 18:16:42 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11192" docExpressionCount="1105" docLength="12497" length="1" offset="1893" starttimestamp="1645820509543" timestamp="183292859">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="5722" _type="InsertStringCommand" date="Sun Feb 27 18:16:42 EST 2022" starttimestamp="1645820509543" timestamp="183292874" timestamp2="183292874">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5723" _type="InsertStringCommand" date="Sun Feb 27 18:16:42 EST 2022" starttimestamp="1645820509543" timestamp="183292874" timestamp2="183292874">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="5724" _type="Insert" date="Sun Feb 27 18:16:42 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11193" docExpressionCount="1105" docLength="12498" length="1" offset="1894" starttimestamp="1645820509543" timestamp="183292974">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="5725" _type="InsertStringCommand" date="Sun Feb 27 18:16:42 EST 2022" starttimestamp="1645820509543" timestamp="183292974" timestamp2="183292974">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5726" _type="InsertStringCommand" date="Sun Feb 27 18:16:42 EST 2022" starttimestamp="1645820509543" timestamp="183292974" timestamp2="183292974">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="5727" _type="Insert" date="Sun Feb 27 18:16:42 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11194" docExpressionCount="1105" docLength="12499" length="1" offset="1895" starttimestamp="1645820509543" timestamp="183293059">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="5728" _type="InsertStringCommand" date="Sun Feb 27 18:16:42 EST 2022" starttimestamp="1645820509543" timestamp="183293059" timestamp2="183293059">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5729" _type="InsertStringCommand" date="Sun Feb 27 18:16:42 EST 2022" starttimestamp="1645820509543" timestamp="183293059" timestamp2="183293059">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="5730" _type="Insert" date="Sun Feb 27 18:16:42 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11195" docExpressionCount="1105" docLength="12500" length="1" offset="1896" starttimestamp="1645820509543" timestamp="183293059">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="5731" _type="InsertStringCommand" date="Sun Feb 27 18:16:42 EST 2022" starttimestamp="1645820509543" timestamp="183293075" timestamp2="183293075">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="5732" _type="InsertStringCommand" date="Sun Feb 27 18:16:42 EST 2022" starttimestamp="1645820509543" timestamp="183293075" timestamp2="183293075">
    <data><![CDATA[,]]></data>
  </Command>
  <DocumentChange __id="5733" _type="Delete" date="Sun Feb 27 18:16:43 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11194" docExpressionCount="1105" docLength="12499" endLine="80" length="1" offset="1896" startLine="80" starttimestamp="1645820509543" timestamp="183293529">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="5734" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:43 EST 2022" starttimestamp="1645820509543" timestamp="183293529" />
  <Command __id="5735" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:43 EST 2022" starttimestamp="1645820509543" timestamp="183293529" />
  <DocumentChange __id="5736" _type="Insert" date="Sun Feb 27 18:16:43 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11195" docExpressionCount="1105" docLength="12500" length="1" offset="1896" starttimestamp="1645820509543" timestamp="183293744">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="5737" _type="InsertStringCommand" date="Sun Feb 27 18:16:43 EST 2022" starttimestamp="1645820509543" timestamp="183293760" timestamp2="183293760">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5738" _type="InsertStringCommand" date="Sun Feb 27 18:16:43 EST 2022" starttimestamp="1645820509543" timestamp="183293760" timestamp2="183293760">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5739" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 18:16:43 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="183293760" />
  <DocumentChange __id="5740" _type="Insert" date="Sun Feb 27 18:16:43 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11196" docExpressionCount="1107" docLength="12501" length="1" offset="1897" starttimestamp="1645820509543" timestamp="183294007">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="5741" _type="Insert" date="Sun Feb 27 18:16:43 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11197" docExpressionCount="1107" docLength="12502" length="1" offset="1898" starttimestamp="1645820509543" timestamp="183294129">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="5742" _type="Insert" date="Sun Feb 27 18:16:43 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11198" docExpressionCount="1107" docLength="12503" length="1" offset="1899" starttimestamp="1645820509543" timestamp="183294230">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="5743" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 18:16:43 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="183294377" />
  <DocumentChange __id="5744" _type="Replace" date="Sun Feb 27 18:16:43 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11199" docExpressionCount="1107" docLength="12504" endLine="80" insertionLength="4" int_docASTNodeCount="1576" int_docActiveCodeLength="11195" int_docExpressionCount="1105" int_docLength="12500" length="3" offset="1897" startLine="80" starttimestamp="1645820509543" timestamp="183294377">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5748" _type="Insert" date="Sun Feb 27 18:16:44 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11200" docExpressionCount="1109" docLength="12505" length="1" offset="1901" starttimestamp="1645820509543" timestamp="183294562">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="5749" _type="Insert" date="Sun Feb 27 18:16:45 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11201" docExpressionCount="1109" docLength="12506" length="1" offset="1902" starttimestamp="1645820509543" timestamp="183295963">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5750" _type="Insert" date="Sun Feb 27 18:16:45 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11202" docExpressionCount="1109" docLength="12507" length="1" offset="1903" starttimestamp="1645820509543" timestamp="183296048">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="5751" _type="Insert" date="Sun Feb 27 18:16:45 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11203" docExpressionCount="1109" docLength="12508" length="1" offset="1904" starttimestamp="1645820509543" timestamp="183296198">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="5752" _type="Insert" date="Sun Feb 27 18:16:45 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11204" docExpressionCount="1109" docLength="12509" length="1" offset="1905" starttimestamp="1645820509543" timestamp="183296277">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="5753" _type="Insert" date="Sun Feb 27 18:16:46 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11205" docExpressionCount="1109" docLength="12510" length="1" offset="1906" starttimestamp="1645820509543" timestamp="183296562">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="5754" _type="Insert" date="Sun Feb 27 18:16:46 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11206" docExpressionCount="1109" docLength="12511" length="1" offset="1907" starttimestamp="1645820509543" timestamp="183296662">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="5755" _type="Insert" date="Sun Feb 27 18:16:46 EST 2022" docASTNodeCount="1581" docActiveCodeLength="11207" docExpressionCount="1110" docLength="12512" length="1" offset="1908" starttimestamp="1645820509543" timestamp="183297000">
    <text><![CDATA[*]]></text>
  </DocumentChange>
  <DocumentChange __id="5757" _type="Insert" date="Sun Feb 27 18:16:46 EST 2022" docASTNodeCount="1581" docActiveCodeLength="11209" docExpressionCount="1109" docLength="12514" length="2" offset="1909" starttimestamp="1645820509543" timestamp="183297031">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="5760" _type="Delete" date="Sun Feb 27 18:16:47 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11208" docExpressionCount="1107" docLength="12513" endLine="80" length="1" offset="1909" startLine="80" starttimestamp="1645820509543" timestamp="183297547">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="5761" _type="Delete" date="Sun Feb 27 18:16:47 EST 2022" docASTNodeCount="1581" docActiveCodeLength="11207" docExpressionCount="1110" docLength="12512" endLine="80" length="1" offset="1909" startLine="80" starttimestamp="1645820509543" timestamp="183297547">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="5764" _type="Delete" date="Sun Feb 27 18:16:47 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11206" docExpressionCount="1109" docLength="12511" endLine="80" length="1" offset="1908" startLine="80" starttimestamp="1645820509543" timestamp="183297678">
    <text><![CDATA[*]]></text>
  </DocumentChange>
  <DocumentChange __id="5767" _type="Insert" date="Sun Feb 27 18:16:47 EST 2022" docASTNodeCount="1581" docActiveCodeLength="11208" docExpressionCount="1109" docLength="12513" length="2" offset="1908" starttimestamp="1645820509543" timestamp="183297947">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="5770" _type="Insert" date="Sun Feb 27 18:16:49 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11210" docExpressionCount="1110" docLength="12515" length="2" offset="1909" starttimestamp="1645820509543" timestamp="183299464">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <Command __id="5745" _type="InsertStringCommand" date="Sun Feb 27 18:16:43 EST 2022" starttimestamp="1645820509543" timestamp="183294392" timestamp2="183294392">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5746" _type="InsertStringCommand" date="Sun Feb 27 18:16:43 EST 2022" starttimestamp="1645820509543" timestamp="183294392" timestamp2="183294392">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5747" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 18:16:43 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="183294408" />
  <Command __id="5756" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 18:16:46 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="183297031" />
  <Command __id="5758" _type="InsertStringCommand" date="Sun Feb 27 18:16:46 EST 2022" starttimestamp="1645820509543" timestamp="183297031" timestamp2="183297031">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5759" _type="InsertStringCommand" date="Sun Feb 27 18:16:46 EST 2022" starttimestamp="1645820509543" timestamp="183297031" timestamp2="183297031">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5762" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:47 EST 2022" starttimestamp="1645820509543" timestamp="183297547" />
  <Command __id="5763" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:47 EST 2022" starttimestamp="1645820509543" timestamp="183297547" />
  <Command __id="5765" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:47 EST 2022" starttimestamp="1645820509543" timestamp="183297678" />
  <Command __id="5766" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:47 EST 2022" starttimestamp="1645820509543" timestamp="183297678" />
  <Command __id="5768" _type="InsertStringCommand" date="Sun Feb 27 18:16:47 EST 2022" starttimestamp="1645820509543" timestamp="183297947" timestamp2="183297947">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5769" _type="InsertStringCommand" date="Sun Feb 27 18:16:47 EST 2022" starttimestamp="1645820509543" timestamp="183297947" timestamp2="183297947">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5771" _type="InsertStringCommand" date="Sun Feb 27 18:16:49 EST 2022" starttimestamp="1645820509543" timestamp="183299480" timestamp2="183299480">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5772" _type="InsertStringCommand" date="Sun Feb 27 18:16:49 EST 2022" starttimestamp="1645820509543" timestamp="183299480" timestamp2="183299480">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5773" _type="InsertStringCommand" date="Sun Feb 27 18:16:49 EST 2022" starttimestamp="1645820509543" timestamp="183299618" timestamp2="183299618">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5774" _type="InsertStringCommand" date="Sun Feb 27 18:16:49 EST 2022" starttimestamp="1645820509543" timestamp="183299618" timestamp2="183299618">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5775" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:16:49 EST 2022" starttimestamp="1645820509543" timestamp="183300065" />
  <Command __id="5776" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:16:49 EST 2022" starttimestamp="1645820509543" timestamp="183300065" />
  <Command __id="5778" _type="InsertStringCommand" date="Sun Feb 27 18:16:50 EST 2022" starttimestamp="1645820509543" timestamp="183301105" timestamp2="183301105">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5779" _type="InsertStringCommand" date="Sun Feb 27 18:16:50 EST 2022" starttimestamp="1645820509543" timestamp="183301105" timestamp2="183301105">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5781" _type="InsertStringCommand" date="Sun Feb 27 18:16:50 EST 2022" starttimestamp="1645820509543" timestamp="183301255" timestamp2="183301255">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5782" _type="InsertStringCommand" date="Sun Feb 27 18:16:50 EST 2022" starttimestamp="1645820509543" timestamp="183301255" timestamp2="183301255">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5784" _type="InsertStringCommand" date="Sun Feb 27 18:16:50 EST 2022" starttimestamp="1645820509543" timestamp="183301439" timestamp2="183301439">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5785" _type="InsertStringCommand" date="Sun Feb 27 18:16:50 EST 2022" starttimestamp="1645820509543" timestamp="183301439" timestamp2="183301439">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5787" _type="InsertStringCommand" date="Sun Feb 27 18:16:50 EST 2022" starttimestamp="1645820509543" timestamp="183301455" timestamp2="183301455">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5788" _type="InsertStringCommand" date="Sun Feb 27 18:16:50 EST 2022" starttimestamp="1645820509543" timestamp="183301455" timestamp2="183301455">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5790" _type="InsertStringCommand" date="Sun Feb 27 18:16:51 EST 2022" starttimestamp="1645820509543" timestamp="183301555" timestamp2="183301555">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5791" _type="InsertStringCommand" date="Sun Feb 27 18:16:51 EST 2022" starttimestamp="1645820509543" timestamp="183301555" timestamp2="183301555">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5793" _type="InsertStringCommand" date="Sun Feb 27 18:16:51 EST 2022" starttimestamp="1645820509543" timestamp="183301725" timestamp2="183301725">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5794" _type="InsertStringCommand" date="Sun Feb 27 18:16:51 EST 2022" starttimestamp="1645820509543" timestamp="183301725" timestamp2="183301725">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5796" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:51 EST 2022" starttimestamp="1645820509543" timestamp="183301925" />
  <Command __id="5797" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:51 EST 2022" starttimestamp="1645820509543" timestamp="183301925" />
  <Command __id="5799" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:51 EST 2022" starttimestamp="1645820509543" timestamp="183302087" />
  <Command __id="5800" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:51 EST 2022" starttimestamp="1645820509543" timestamp="183302087" />
  <Command __id="5802" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:51 EST 2022" starttimestamp="1645820509543" timestamp="183302256" />
  <Command __id="5803" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:51 EST 2022" starttimestamp="1645820509543" timestamp="183302256" />
  <Command __id="5805" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:51 EST 2022" starttimestamp="1645820509543" timestamp="183302425" />
  <Command __id="5806" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:16:51 EST 2022" starttimestamp="1645820509543" timestamp="183302425" />
  <Command __id="5808" _type="InsertStringCommand" date="Sun Feb 27 18:16:52 EST 2022" starttimestamp="1645820509543" timestamp="183302503" timestamp2="183302503">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5809" _type="InsertStringCommand" date="Sun Feb 27 18:16:52 EST 2022" starttimestamp="1645820509543" timestamp="183302503" timestamp2="183302503">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5811" _type="InsertStringCommand" date="Sun Feb 27 18:16:52 EST 2022" starttimestamp="1645820509543" timestamp="183302587" timestamp2="183302587">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5812" _type="InsertStringCommand" date="Sun Feb 27 18:16:52 EST 2022" starttimestamp="1645820509543" timestamp="183302587" timestamp2="183302587">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5814" _type="InsertStringCommand" date="Sun Feb 27 18:16:52 EST 2022" starttimestamp="1645820509543" timestamp="183302672" timestamp2="183302672">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5815" _type="InsertStringCommand" date="Sun Feb 27 18:16:52 EST 2022" starttimestamp="1645820509543" timestamp="183302672" timestamp2="183302672">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5817" _type="InsertStringCommand" date="Sun Feb 27 18:16:52 EST 2022" starttimestamp="1645820509543" timestamp="183303242" timestamp2="183303242">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5818" _type="InsertStringCommand" date="Sun Feb 27 18:16:52 EST 2022" starttimestamp="1645820509543" timestamp="183303242" timestamp2="183303242">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5820" _type="InsertStringCommand" date="Sun Feb 27 18:16:52 EST 2022" starttimestamp="1645820509543" timestamp="183303342" timestamp2="183303342">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5821" _type="InsertStringCommand" date="Sun Feb 27 18:16:52 EST 2022" starttimestamp="1645820509543" timestamp="183303342" timestamp2="183303342">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5850" _type="RunCommand" date="Sun Feb 27 18:16:57 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183307481" type="Run" />
  <Command __id="5851" _type="RunCommand" date="Sun Feb 27 18:16:57 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183307481" type="Run" />
  <Command __id="5852" _type="RunCommand" date="Sun Feb 27 18:16:57 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183307650" type="Run" />
  <Command __id="5853" _type="RunCommand" date="Sun Feb 27 18:16:57 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183307650" type="Run" />
  <Command __id="5854" _type="EHExceptionCommand" date="Sun Feb 27 18:16:57 EST 2022" starttimestamp="1645820509543" timestamp="183307697" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
In scanner =
=
0
;
try
In scanner =
=
!
(
a
In scanner =
==
a
)
;
}
public
static
boolean
hasErrors
out here end of program: (
Parse error: Parsing ( and expecting 'RCURLY' but found 'LPAREN'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="5855" _type="MoveCaretCommand" caretOffset="1848" date="Sun Feb 27 18:17:07 EST 2022" docOffset="1926" starttimestamp="1645820509543" timestamp="183318070" />
  <Command __id="5856" _type="MoveCaretCommand" caretOffset="1848" date="Sun Feb 27 18:17:07 EST 2022" docOffset="1926" starttimestamp="1645820509543" timestamp="183318086" />
  <Command __id="5858" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Sun Feb 27 18:17:08 EST 2022" starttimestamp="1645820509543" timestamp="183318802" />
  <Command __id="5859" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 18:17:09 EST 2022" starttimestamp="1645820509543" timestamp="183319470" />
  <Command __id="5860" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:17:09 EST 2022" starttimestamp="1645820509543" timestamp="183319572" />
  <Command __id="5861" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:17:09 EST 2022" starttimestamp="1645820509543" timestamp="183319587" />
  <Command __id="5862" _type="MoveCaretCommand" caretOffset="1837" date="Sun Feb 27 18:17:09 EST 2022" docOffset="1915" starttimestamp="1645820509543" timestamp="183320104" />
  <Command __id="5863" _type="MoveCaretCommand" caretOffset="1837" date="Sun Feb 27 18:17:09 EST 2022" docOffset="1915" starttimestamp="1645820509543" timestamp="183320104" />
  <Command __id="5864" _type="MoveCaretCommand" caretOffset="1802" date="Sun Feb 27 18:17:10 EST 2022" docOffset="1880" starttimestamp="1645820509543" timestamp="183320520" />
  <Command __id="5865" _type="MoveCaretCommand" caretOffset="1802" date="Sun Feb 27 18:17:10 EST 2022" docOffset="1880" starttimestamp="1645820509543" timestamp="183320520" />
  <Command __id="5866" _type="MoveCaretCommand" caretOffset="1782" date="Sun Feb 27 18:17:10 EST 2022" docOffset="1860" starttimestamp="1645820509543" timestamp="183320921" />
  <Command __id="5867" _type="MoveCaretCommand" caretOffset="1782" date="Sun Feb 27 18:17:10 EST 2022" docOffset="1860" starttimestamp="1645820509543" timestamp="183320921" />
  <Command __id="5868" _type="MoveCaretCommand" caretOffset="1652" date="Sun Feb 27 18:17:21 EST 2022" docOffset="1730" starttimestamp="1645820509543" timestamp="183332048" />
  <Command __id="5869" _type="MoveCaretCommand" caretOffset="1652" date="Sun Feb 27 18:17:21 EST 2022" docOffset="1730" starttimestamp="1645820509543" timestamp="183332048" />
  <Command __id="5870" _type="MoveCaretCommand" caretOffset="1711" date="Sun Feb 27 18:17:22 EST 2022" docOffset="1789" starttimestamp="1645820509543" timestamp="183332566" />
  <Command __id="5871" _type="MoveCaretCommand" caretOffset="1711" date="Sun Feb 27 18:17:22 EST 2022" docOffset="1789" starttimestamp="1645820509543" timestamp="183332566" />
  <Command __id="5872" _type="MoveCaretCommand" caretOffset="2159" date="Sun Feb 27 18:17:26 EST 2022" docOffset="2237" starttimestamp="1645820509543" timestamp="183337156" />
  <Command __id="5873" _type="MoveCaretCommand" caretOffset="2159" date="Sun Feb 27 18:17:26 EST 2022" docOffset="2237" starttimestamp="1645820509543" timestamp="183337156" />
  <Command __id="5874" _type="MoveCaretCommand" caretOffset="2150" date="Sun Feb 27 18:17:27 EST 2022" docOffset="2228" starttimestamp="1645820509543" timestamp="183337711" />
  <Command __id="5875" _type="MoveCaretCommand" caretOffset="2150" date="Sun Feb 27 18:17:27 EST 2022" docOffset="2228" starttimestamp="1645820509543" timestamp="183337711" />
  <DocumentChange __id="5777" _type="Insert" date="Sun Feb 27 18:16:50 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11211" docExpressionCount="1110" docLength="12516" length="1" offset="1910" starttimestamp="1645820509543" timestamp="183301105">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="5780" _type="Insert" date="Sun Feb 27 18:16:50 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11212" docExpressionCount="1110" docLength="12517" length="1" offset="1911" starttimestamp="1645820509543" timestamp="183301255">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="5783" _type="Insert" date="Sun Feb 27 18:16:50 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11213" docExpressionCount="1110" docLength="12518" length="1" offset="1912" starttimestamp="1645820509543" timestamp="183301439">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="5786" _type="Insert" date="Sun Feb 27 18:16:50 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11214" docExpressionCount="1110" docLength="12519" length="1" offset="1913" starttimestamp="1645820509543" timestamp="183301455">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5789" _type="Insert" date="Sun Feb 27 18:16:51 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11215" docExpressionCount="1110" docLength="12520" length="1" offset="1914" starttimestamp="1645820509543" timestamp="183301555">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5792" _type="Insert" date="Sun Feb 27 18:16:51 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11216" docExpressionCount="1110" docLength="12521" length="1" offset="1915" starttimestamp="1645820509543" timestamp="183301725">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5795" _type="Delete" date="Sun Feb 27 18:16:51 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11215" docExpressionCount="1110" docLength="12520" endLine="80" length="1" offset="1915" startLine="80" starttimestamp="1645820509543" timestamp="183301925">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5798" _type="Delete" date="Sun Feb 27 18:16:51 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11214" docExpressionCount="1110" docLength="12519" endLine="80" length="1" offset="1914" startLine="80" starttimestamp="1645820509543" timestamp="183302072">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5801" _type="Delete" date="Sun Feb 27 18:16:51 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11213" docExpressionCount="1110" docLength="12518" endLine="80" length="1" offset="1913" startLine="80" starttimestamp="1645820509543" timestamp="183302256">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5804" _type="Delete" date="Sun Feb 27 18:16:51 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11212" docExpressionCount="1110" docLength="12517" endLine="80" length="1" offset="1912" startLine="80" starttimestamp="1645820509543" timestamp="183302425">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="5807" _type="Insert" date="Sun Feb 27 18:16:52 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11213" docExpressionCount="1110" docLength="12518" length="1" offset="1912" starttimestamp="1645820509543" timestamp="183302503">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="5810" _type="Insert" date="Sun Feb 27 18:16:52 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11214" docExpressionCount="1110" docLength="12519" length="1" offset="1913" starttimestamp="1645820509543" timestamp="183302587">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5813" _type="Insert" date="Sun Feb 27 18:16:52 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11215" docExpressionCount="1110" docLength="12520" length="1" offset="1914" starttimestamp="1645820509543" timestamp="183302672">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5816" _type="Insert" date="Sun Feb 27 18:16:52 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11216" docExpressionCount="1110" docLength="12521" length="1" offset="1915" starttimestamp="1645820509543" timestamp="183303242">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5819" _type="Insert" date="Sun Feb 27 18:16:52 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11217" docExpressionCount="1110" docLength="12522" length="1" offset="1916" starttimestamp="1645820509543" timestamp="183303342">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="5822" _type="Insert" date="Sun Feb 27 18:16:53 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11218" docExpressionCount="1110" docLength="12523" length="1" offset="1917" starttimestamp="1645820509543" timestamp="183303458">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="5825" _type="Insert" date="Sun Feb 27 18:16:53 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11219" docExpressionCount="1110" docLength="12524" length="1" offset="1918" starttimestamp="1645820509543" timestamp="183303505">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5828" _type="Insert" date="Sun Feb 27 18:16:53 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11220" docExpressionCount="1110" docLength="12525" length="1" offset="1919" starttimestamp="1645820509543" timestamp="183303674">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <DocumentChange __id="5831" _type="Insert" date="Sun Feb 27 18:16:53 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11221" docExpressionCount="1110" docLength="12526" length="1" offset="1920" starttimestamp="1645820509543" timestamp="183303728">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5834" _type="Insert" date="Sun Feb 27 18:16:53 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11222" docExpressionCount="1110" docLength="12527" length="1" offset="1921" starttimestamp="1645820509543" timestamp="183303821">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5837" _type="Insert" date="Sun Feb 27 18:16:53 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11223" docExpressionCount="1110" docLength="12528" length="1" offset="1922" starttimestamp="1645820509543" timestamp="183304307">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5844" _type="Insert" date="Sun Feb 27 18:16:54 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11224" docExpressionCount="1110" docLength="12529" length="1" offset="1925" starttimestamp="1645820509543" timestamp="183305345">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="5857" _type="Delete" date="Sun Feb 27 18:17:08 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11178" docExpressionCount="1104" docLength="12483" endLine="81" length="46" offset="1882" startLine="80" starttimestamp="1645820509543" timestamp="183318802">
    <text><![CDATA[								System.out.println("after in here");
]]></text>
  </DocumentChange>
  <Command __id="5876" _type="MoveCaretCommand" caretOffset="1570" date="Sun Feb 27 18:18:12 EST 2022" docOffset="1648" starttimestamp="1645820509543" timestamp="183383250" />
  <Command __id="5877" _type="MoveCaretCommand" caretOffset="1570" date="Sun Feb 27 18:18:12 EST 2022" docOffset="1648" starttimestamp="1645820509543" timestamp="183383250" />
  <Command __id="5878" _type="MoveCaretCommand" caretOffset="1557" date="Sun Feb 27 18:18:13 EST 2022" docOffset="1635" starttimestamp="1645820509543" timestamp="183383651" />
  <Command __id="5879" _type="MoveCaretCommand" caretOffset="1557" date="Sun Feb 27 18:18:13 EST 2022" docOffset="1635" starttimestamp="1645820509543" timestamp="183383651" />
  <Command __id="5880" _type="MoveCaretCommand" caretOffset="1557" date="Sun Feb 27 18:18:13 EST 2022" docOffset="1635" starttimestamp="1645820509543" timestamp="183384451" />
  <Command __id="5881" _type="MoveCaretCommand" caretOffset="1557" date="Sun Feb 27 18:18:13 EST 2022" docOffset="1635" starttimestamp="1645820509543" timestamp="183384451" />
  <DocumentChange __id="5882" _type="Insert" date="Sun Feb 27 18:18:31 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11185" docExpressionCount="1104" docLength="12490" length="7" offset="1635" starttimestamp="1645820509543" timestamp="183402214">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <Command __id="5883" _type="InsertStringCommand" date="Sun Feb 27 18:18:31 EST 2022" starttimestamp="1645820509543" timestamp="183402245" timestamp2="183402245">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5884" _type="InsertStringCommand" date="Sun Feb 27 18:18:31 EST 2022" starttimestamp="1645820509543" timestamp="183402245" timestamp2="183402245">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5885" _type="Delete" date="Sun Feb 27 18:18:32 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11184" docExpressionCount="1104" docLength="12489" endLine="70" length="1" offset="1641" startLine="70" starttimestamp="1645820509543" timestamp="183402584">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="5886" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:18:32 EST 2022" starttimestamp="1645820509543" timestamp="183402584" />
  <Command __id="5887" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:18:32 EST 2022" starttimestamp="1645820509543" timestamp="183402584" />
  <DocumentChange __id="5888" _type="Insert" date="Sun Feb 27 18:18:32 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11185" docExpressionCount="1104" docLength="12490" length="1" offset="1641" starttimestamp="1645820509543" timestamp="183403347">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="5889" _type="InsertStringCommand" date="Sun Feb 27 18:18:32 EST 2022" starttimestamp="1645820509543" timestamp="183403354" timestamp2="183403354">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5890" _type="InsertStringCommand" date="Sun Feb 27 18:18:32 EST 2022" starttimestamp="1645820509543" timestamp="183403354" timestamp2="183403354">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="5891" _type="Insert" date="Sun Feb 27 18:18:33 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11184" docExpressionCount="1104" docLength="12491" length="1" offset="1642" starttimestamp="1645820509543" timestamp="183403469">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="5892" _type="InsertStringCommand" date="Sun Feb 27 18:18:33 EST 2022" starttimestamp="1645820509543" timestamp="183403469" timestamp2="183403469">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5893" _type="InsertStringCommand" date="Sun Feb 27 18:18:33 EST 2022" starttimestamp="1645820509543" timestamp="183403469" timestamp2="183403469">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="5894" _type="Insert" date="Sun Feb 27 18:18:33 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11184" docExpressionCount="1104" docLength="12492" length="1" offset="1643" starttimestamp="1645820509543" timestamp="183404033">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="5895" _type="InsertStringCommand" date="Sun Feb 27 18:18:33 EST 2022" starttimestamp="1645820509543" timestamp="183404033" timestamp2="183404033">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5896" _type="InsertStringCommand" date="Sun Feb 27 18:18:33 EST 2022" starttimestamp="1645820509543" timestamp="183404033" timestamp2="183404033">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="5897" _type="Insert" date="Sun Feb 27 18:18:34 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11184" docExpressionCount="1104" docLength="12493" length="1" offset="1644" starttimestamp="1645820509543" timestamp="183405450">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="5898" _type="InsertStringCommand" date="Sun Feb 27 18:18:34 EST 2022" starttimestamp="1645820509543" timestamp="183405456" timestamp2="183405456">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5899" _type="InsertStringCommand" date="Sun Feb 27 18:18:34 EST 2022" starttimestamp="1645820509543" timestamp="183405456" timestamp2="183405456">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="5900" _type="Insert" date="Sun Feb 27 18:18:35 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11184" docExpressionCount="1104" docLength="12494" length="1" offset="1645" starttimestamp="1645820509543" timestamp="183405572">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="5901" _type="InsertStringCommand" date="Sun Feb 27 18:18:35 EST 2022" starttimestamp="1645820509543" timestamp="183405572" timestamp2="183405572">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5902" _type="InsertStringCommand" date="Sun Feb 27 18:18:35 EST 2022" starttimestamp="1645820509543" timestamp="183405572" timestamp2="183405572">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="5903" _type="Insert" date="Sun Feb 27 18:18:35 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11184" docExpressionCount="1104" docLength="12495" length="1" offset="1646" starttimestamp="1645820509543" timestamp="183405819">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="5904" _type="InsertStringCommand" date="Sun Feb 27 18:18:35 EST 2022" starttimestamp="1645820509543" timestamp="183405834" timestamp2="183405834">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5905" _type="InsertStringCommand" date="Sun Feb 27 18:18:35 EST 2022" starttimestamp="1645820509543" timestamp="183405834" timestamp2="183405834">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="5906" _type="Insert" date="Sun Feb 27 18:18:35 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11184" docExpressionCount="1104" docLength="12496" length="1" offset="1647" starttimestamp="1645820509543" timestamp="183405834">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="5907" _type="InsertStringCommand" date="Sun Feb 27 18:18:35 EST 2022" starttimestamp="1645820509543" timestamp="183405834" timestamp2="183405834">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5908" _type="InsertStringCommand" date="Sun Feb 27 18:18:35 EST 2022" starttimestamp="1645820509543" timestamp="183405834" timestamp2="183405834">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="5909" _type="Insert" date="Sun Feb 27 18:18:35 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11184" docExpressionCount="1104" docLength="12497" length="1" offset="1648" starttimestamp="1645820509543" timestamp="183405988">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="5910" _type="InsertStringCommand" date="Sun Feb 27 18:18:35 EST 2022" starttimestamp="1645820509543" timestamp="183406004" timestamp2="183406004">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5911" _type="InsertStringCommand" date="Sun Feb 27 18:18:35 EST 2022" starttimestamp="1645820509543" timestamp="183406004" timestamp2="183406004">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="5912" _type="Insert" date="Sun Feb 27 18:18:35 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11184" docExpressionCount="1104" docLength="12498" length="1" offset="1649" starttimestamp="1645820509543" timestamp="183406405">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <Command __id="5913" _type="InsertStringCommand" date="Sun Feb 27 18:18:35 EST 2022" starttimestamp="1645820509543" timestamp="183406405" timestamp2="183406405">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="5914" _type="InsertStringCommand" date="Sun Feb 27 18:18:35 EST 2022" starttimestamp="1645820509543" timestamp="183406405" timestamp2="183406405">
    <data><![CDATA[T]]></data>
  </Command>
  <DocumentChange __id="5915" _type="Insert" date="Sun Feb 27 18:18:36 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11184" docExpressionCount="1104" docLength="12499" length="1" offset="1650" starttimestamp="1645820509543" timestamp="183406605">
    <text><![CDATA[Y]]></text>
  </DocumentChange>
  <Command __id="5916" _type="InsertStringCommand" date="Sun Feb 27 18:18:36 EST 2022" starttimestamp="1645820509543" timestamp="183406605" timestamp2="183406605">
    <data><![CDATA[Y]]></data>
  </Command>
  <Command __id="5917" _type="InsertStringCommand" date="Sun Feb 27 18:18:36 EST 2022" starttimestamp="1645820509543" timestamp="183406605" timestamp2="183406605">
    <data><![CDATA[Y]]></data>
  </Command>
  <DocumentChange __id="5918" _type="Insert" date="Sun Feb 27 18:18:36 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11184" docExpressionCount="1104" docLength="12500" length="1" offset="1651" starttimestamp="1645820509543" timestamp="183406752">
    <text><![CDATA[P]]></text>
  </DocumentChange>
  <Command __id="5919" _type="InsertStringCommand" date="Sun Feb 27 18:18:36 EST 2022" starttimestamp="1645820509543" timestamp="183406759" timestamp2="183406759">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="5920" _type="InsertStringCommand" date="Sun Feb 27 18:18:36 EST 2022" starttimestamp="1645820509543" timestamp="183406759" timestamp2="183406759">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="5922" _type="InsertStringCommand" date="Sun Feb 27 18:18:36 EST 2022" starttimestamp="1645820509543" timestamp="183406875" timestamp2="183406875">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="5923" _type="InsertStringCommand" date="Sun Feb 27 18:18:36 EST 2022" starttimestamp="1645820509543" timestamp="183406875" timestamp2="183406875">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="5924" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 18:18:37 EST 2022" starttimestamp="1645820509543" timestamp="183408108" />
  <Command __id="5925" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:18:37 EST 2022" starttimestamp="1645820509543" timestamp="183408193" />
  <Command __id="5926" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:18:37 EST 2022" starttimestamp="1645820509543" timestamp="183408193" />
  <Command __id="5927" _type="MoveCaretCommand" caretOffset="1652" date="Sun Feb 27 18:18:38 EST 2022" docOffset="1730" starttimestamp="1645820509543" timestamp="183408610" />
  <Command __id="5928" _type="MoveCaretCommand" caretOffset="1652" date="Sun Feb 27 18:18:38 EST 2022" docOffset="1730" starttimestamp="1645820509543" timestamp="183408610" />
  <Command __id="5929" _type="MoveCaretCommand" caretOffset="1670" date="Sun Feb 27 18:18:47 EST 2022" docOffset="1748" starttimestamp="1645820509543" timestamp="183418307" />
  <Command __id="5930" _type="MoveCaretCommand" caretOffset="1670" date="Sun Feb 27 18:18:47 EST 2022" docOffset="1748" starttimestamp="1645820509543" timestamp="183418307" />
  <Command __id="5931" _type="MoveCaretCommand" caretOffset="1652" date="Sun Feb 27 18:18:48 EST 2022" docOffset="1730" starttimestamp="1645820509543" timestamp="183419008" />
  <Command __id="5932" _type="MoveCaretCommand" caretOffset="1652" date="Sun Feb 27 18:18:48 EST 2022" docOffset="1730" starttimestamp="1645820509543" timestamp="183419008" />
  <Command __id="5933" _type="MoveCaretCommand" caretOffset="1670" date="Sun Feb 27 18:18:54 EST 2022" docOffset="1748" starttimestamp="1645820509543" timestamp="183424546" />
  <Command __id="5934" _type="MoveCaretCommand" caretOffset="1670" date="Sun Feb 27 18:18:54 EST 2022" docOffset="1748" starttimestamp="1645820509543" timestamp="183424546" />
  <Command __id="5935" _type="MoveCaretCommand" caretOffset="1290" date="Sun Feb 27 18:19:31 EST 2022" docOffset="1368" starttimestamp="1645820509543" timestamp="183462441" />
  <Command __id="5936" _type="MoveCaretCommand" caretOffset="1290" date="Sun Feb 27 18:19:31 EST 2022" docOffset="1368" starttimestamp="1645820509543" timestamp="183462441" />
  <Command __id="5937" _type="SelectTextCommand" caretOffset="1407" date="Sun Feb 27 18:19:32 EST 2022" end="1407" start="1406" starttimestamp="1645820509543" timestamp="183462826" />
  <Command __id="5938" _type="SelectTextCommand" caretOffset="1407" date="Sun Feb 27 18:19:32 EST 2022" end="1407" start="1406" starttimestamp="1645820509543" timestamp="183462826" />
  <Command __id="5939" _type="MoveCaretCommand" caretOffset="1342" date="Sun Feb 27 18:19:32 EST 2022" docOffset="1420" starttimestamp="1645820509543" timestamp="183463227" />
  <Command __id="5940" _type="MoveCaretCommand" caretOffset="1342" date="Sun Feb 27 18:19:32 EST 2022" docOffset="1420" starttimestamp="1645820509543" timestamp="183463227" />
  <Command __id="5941" _type="MoveCaretCommand" caretOffset="1421" date="Sun Feb 27 18:19:33 EST 2022" docOffset="1499" starttimestamp="1645820509543" timestamp="183463744" />
  <Command __id="5942" _type="MoveCaretCommand" caretOffset="1421" date="Sun Feb 27 18:19:33 EST 2022" docOffset="1499" starttimestamp="1645820509543" timestamp="183463744" />
  <DocumentChange __id="5921" _type="Insert" date="Sun Feb 27 18:18:36 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11184" docExpressionCount="1104" docLength="12501" length="1" offset="1652" starttimestamp="1645820509543" timestamp="183406859">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <DocumentChange __id="5947" _type="Insert" date="Sun Feb 27 18:19:42 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11189" docExpressionCount="1104" docLength="12506" length="5" offset="1265" starttimestamp="1645820509543" timestamp="183473402">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="5950" _type="Insert" date="Sun Feb 27 18:19:43 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12507" length="1" offset="1270" starttimestamp="1645820509543" timestamp="183473640">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5953" _type="Insert" date="Sun Feb 27 18:19:43 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11189" docExpressionCount="1104" docLength="12508" length="1" offset="1271" starttimestamp="1645820509543" timestamp="183473772">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="5943" _type="MoveCaretCommand" caretOffset="1155" date="Sun Feb 27 18:19:42 EST 2022" docOffset="1233" starttimestamp="1645820509543" timestamp="183472470" />
  <Command __id="5944" _type="MoveCaretCommand" caretOffset="1155" date="Sun Feb 27 18:19:42 EST 2022" docOffset="1233" starttimestamp="1645820509543" timestamp="183472470" />
  <Command __id="5945" _type="MoveCaretCommand" caretOffset="1187" date="Sun Feb 27 18:19:42 EST 2022" docOffset="1265" starttimestamp="1645820509543" timestamp="183472786" />
  <Command __id="5946" _type="MoveCaretCommand" caretOffset="1187" date="Sun Feb 27 18:19:42 EST 2022" docOffset="1265" starttimestamp="1645820509543" timestamp="183472786" />
  <Command __id="5948" _type="InsertStringCommand" date="Sun Feb 27 18:19:42 EST 2022" starttimestamp="1645820509543" timestamp="183473418" timestamp2="183473418">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5949" _type="InsertStringCommand" date="Sun Feb 27 18:19:42 EST 2022" starttimestamp="1645820509543" timestamp="183473418" timestamp2="183473418">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5951" _type="InsertStringCommand" date="Sun Feb 27 18:19:43 EST 2022" starttimestamp="1645820509543" timestamp="183473640" timestamp2="183473640">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5952" _type="InsertStringCommand" date="Sun Feb 27 18:19:43 EST 2022" starttimestamp="1645820509543" timestamp="183473640" timestamp2="183473640">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5954" _type="InsertStringCommand" date="Sun Feb 27 18:19:43 EST 2022" starttimestamp="1645820509543" timestamp="183473772" timestamp2="183473772">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5955" _type="InsertStringCommand" date="Sun Feb 27 18:19:43 EST 2022" starttimestamp="1645820509543" timestamp="183473772" timestamp2="183473772">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5957" _type="InsertStringCommand" date="Sun Feb 27 18:19:45 EST 2022" starttimestamp="1645820509543" timestamp="183475773" timestamp2="183475773">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5958" _type="InsertStringCommand" date="Sun Feb 27 18:19:45 EST 2022" starttimestamp="1645820509543" timestamp="183475773" timestamp2="183475773">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5960" _type="InsertStringCommand" date="Sun Feb 27 18:19:45 EST 2022" starttimestamp="1645820509543" timestamp="183476175" timestamp2="183476175">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="5961" _type="InsertStringCommand" date="Sun Feb 27 18:19:45 EST 2022" starttimestamp="1645820509543" timestamp="183476175" timestamp2="183476175">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="5963" _type="InsertStringCommand" date="Sun Feb 27 18:19:46 EST 2022" starttimestamp="1645820509543" timestamp="183476575" timestamp2="183476575">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5964" _type="InsertStringCommand" date="Sun Feb 27 18:19:46 EST 2022" starttimestamp="1645820509543" timestamp="183476575" timestamp2="183476575">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5966" _type="InsertStringCommand" date="Sun Feb 27 18:19:46 EST 2022" starttimestamp="1645820509543" timestamp="183476775" timestamp2="183476775">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5967" _type="InsertStringCommand" date="Sun Feb 27 18:19:46 EST 2022" starttimestamp="1645820509543" timestamp="183476775" timestamp2="183476775">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5969" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:46 EST 2022" starttimestamp="1645820509543" timestamp="183477138" />
  <Command __id="5970" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:46 EST 2022" starttimestamp="1645820509543" timestamp="183477138" />
  <Command __id="5972" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:46 EST 2022" starttimestamp="1645820509543" timestamp="183477291" />
  <Command __id="5973" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:46 EST 2022" starttimestamp="1645820509543" timestamp="183477291" />
  <Command __id="5975" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:47 EST 2022" starttimestamp="1645820509543" timestamp="183477460" />
  <Command __id="5976" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:47 EST 2022" starttimestamp="1645820509543" timestamp="183477460" />
  <Command __id="5978" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:47 EST 2022" starttimestamp="1645820509543" timestamp="183477607" />
  <Command __id="5979" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:47 EST 2022" starttimestamp="1645820509543" timestamp="183477607" />
  <Command __id="5981" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:47 EST 2022" starttimestamp="1645820509543" timestamp="183477761" />
  <Command __id="5982" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:47 EST 2022" starttimestamp="1645820509543" timestamp="183477761" />
  <Command __id="5984" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:47 EST 2022" starttimestamp="1645820509543" timestamp="183477977" />
  <Command __id="5985" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:47 EST 2022" starttimestamp="1645820509543" timestamp="183477977" />
  <Command __id="5987" _type="InsertStringCommand" date="Sun Feb 27 18:19:47 EST 2022" starttimestamp="1645820509543" timestamp="183478040" timestamp2="183478040">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5988" _type="InsertStringCommand" date="Sun Feb 27 18:19:47 EST 2022" starttimestamp="1645820509543" timestamp="183478040" timestamp2="183478040">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5990" _type="InsertStringCommand" date="Sun Feb 27 18:19:48 EST 2022" starttimestamp="1645820509543" timestamp="183478578" timestamp2="183478578">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5991" _type="InsertStringCommand" date="Sun Feb 27 18:19:48 EST 2022" starttimestamp="1645820509543" timestamp="183478578" timestamp2="183478578">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5992" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 18:19:48 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="183478578" />
  <Command __id="5995" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 18:19:48 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="183479179" />
  <Command __id="5997" _type="InsertStringCommand" date="Sun Feb 27 18:19:48 EST 2022" starttimestamp="1645820509543" timestamp="183479348" timestamp2="183479348">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5998" _type="InsertStringCommand" date="Sun Feb 27 18:19:48 EST 2022" starttimestamp="1645820509543" timestamp="183479348" timestamp2="183479348">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6000" _type="InsertStringCommand" date="Sun Feb 27 18:19:49 EST 2022" starttimestamp="1645820509543" timestamp="183479726" timestamp2="183479726">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6001" _type="InsertStringCommand" date="Sun Feb 27 18:19:49 EST 2022" starttimestamp="1645820509543" timestamp="183479726" timestamp2="183479726">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6003" _type="InsertStringCommand" date="Sun Feb 27 18:19:49 EST 2022" starttimestamp="1645820509543" timestamp="183480049" timestamp2="183480049">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="6004" _type="InsertStringCommand" date="Sun Feb 27 18:19:49 EST 2022" starttimestamp="1645820509543" timestamp="183480049" timestamp2="183480049">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="6006" _type="InsertStringCommand" date="Sun Feb 27 18:19:49 EST 2022" starttimestamp="1645820509543" timestamp="183480412" timestamp2="183480412">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6007" _type="InsertStringCommand" date="Sun Feb 27 18:19:49 EST 2022" starttimestamp="1645820509543" timestamp="183480412" timestamp2="183480412">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6009" _type="InsertStringCommand" date="Sun Feb 27 18:19:50 EST 2022" starttimestamp="1645820509543" timestamp="183480628" timestamp2="183480628">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6010" _type="InsertStringCommand" date="Sun Feb 27 18:19:50 EST 2022" starttimestamp="1645820509543" timestamp="183480628" timestamp2="183480628">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6012" _type="InsertStringCommand" date="Sun Feb 27 18:19:50 EST 2022" starttimestamp="1645820509543" timestamp="183480712" timestamp2="183480712">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="6013" _type="InsertStringCommand" date="Sun Feb 27 18:19:50 EST 2022" starttimestamp="1645820509543" timestamp="183480712" timestamp2="183480712">
    <data><![CDATA[h]]></data>
  </Command>
  <DocumentChange __id="5956" _type="Insert" date="Sun Feb 27 18:19:45 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11189" docExpressionCount="1104" docLength="12509" length="1" offset="1272" starttimestamp="1645820509543" timestamp="183475758">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5959" _type="Insert" date="Sun Feb 27 18:19:45 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11189" docExpressionCount="1104" docLength="12510" length="1" offset="1273" starttimestamp="1645820509543" timestamp="183476159">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <DocumentChange __id="5962" _type="Insert" date="Sun Feb 27 18:19:46 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11189" docExpressionCount="1104" docLength="12511" length="1" offset="1274" starttimestamp="1645820509543" timestamp="183476575">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5965" _type="Insert" date="Sun Feb 27 18:19:46 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11189" docExpressionCount="1104" docLength="12512" length="1" offset="1275" starttimestamp="1645820509543" timestamp="183476775">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="5968" _type="Delete" date="Sun Feb 27 18:19:46 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11189" docExpressionCount="1104" docLength="12511" endLine="54" length="1" offset="1275" startLine="54" starttimestamp="1645820509543" timestamp="183477138">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="5971" _type="Delete" date="Sun Feb 27 18:19:46 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11189" docExpressionCount="1104" docLength="12510" endLine="54" length="1" offset="1274" startLine="54" starttimestamp="1645820509543" timestamp="183477291">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5974" _type="Delete" date="Sun Feb 27 18:19:46 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11189" docExpressionCount="1104" docLength="12509" endLine="54" length="1" offset="1273" startLine="54" starttimestamp="1645820509543" timestamp="183477445">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <DocumentChange __id="5977" _type="Delete" date="Sun Feb 27 18:19:47 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11189" docExpressionCount="1104" docLength="12508" endLine="54" length="1" offset="1272" startLine="54" starttimestamp="1645820509543" timestamp="183477607">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5980" _type="Delete" date="Sun Feb 27 18:19:47 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12507" endLine="54" length="1" offset="1271" startLine="54" starttimestamp="1645820509543" timestamp="183477745">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5983" _type="Delete" date="Sun Feb 27 18:19:47 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11189" docExpressionCount="1104" docLength="12506" endLine="54" length="1" offset="1270" startLine="54" starttimestamp="1645820509543" timestamp="183477962">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5986" _type="Insert" date="Sun Feb 27 18:19:47 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12507" length="1" offset="1270" starttimestamp="1645820509543" timestamp="183478040">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="5989" _type="Insert" date="Sun Feb 27 18:19:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11191" docExpressionCount="1104" docLength="12508" length="1" offset="1271" starttimestamp="1645820509543" timestamp="183478578">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="5993" _type="Delete" date="Sun Feb 27 18:19:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12507" endLine="54" length="1" offset="1271" startLine="54" starttimestamp="1645820509543" timestamp="183478963">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="5994" _type="Insert" date="Sun Feb 27 18:19:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11191" docExpressionCount="1104" docLength="12508" length="1" offset="1271" starttimestamp="1645820509543" timestamp="183479179">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5996" _type="Insert" date="Sun Feb 27 18:19:48 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12509" length="1" offset="1272" starttimestamp="1645820509543" timestamp="183479342">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="5999" _type="Insert" date="Sun Feb 27 18:19:49 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12510" length="1" offset="1273" starttimestamp="1645820509543" timestamp="183479726">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6002" _type="Insert" date="Sun Feb 27 18:19:49 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12511" length="1" offset="1274" starttimestamp="1645820509543" timestamp="183480049">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <DocumentChange __id="6005" _type="Insert" date="Sun Feb 27 18:19:49 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12512" length="1" offset="1275" starttimestamp="1645820509543" timestamp="183480396">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="6008" _type="Insert" date="Sun Feb 27 18:19:50 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12513" length="1" offset="1276" starttimestamp="1645820509543" timestamp="183480628">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="6011" _type="Insert" date="Sun Feb 27 18:19:50 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12514" length="1" offset="1277" starttimestamp="1645820509543" timestamp="183480697">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <DocumentChange __id="6014" _type="Insert" date="Sun Feb 27 18:19:50 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12515" length="1" offset="1278" starttimestamp="1645820509543" timestamp="183480865">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="6017" _type="Insert" date="Sun Feb 27 18:19:50 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12516" length="1" offset="1279" starttimestamp="1645820509543" timestamp="183481122">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="6020" _type="Insert" date="Sun Feb 27 18:19:50 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12517" length="1" offset="1280" starttimestamp="1645820509543" timestamp="183481438">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6023" _type="Insert" date="Sun Feb 27 18:19:51 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12518" length="1" offset="1281" starttimestamp="1645820509543" timestamp="183481893">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="6015" _type="InsertStringCommand" date="Sun Feb 27 18:19:50 EST 2022" starttimestamp="1645820509543" timestamp="183480865" timestamp2="183480865">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6016" _type="InsertStringCommand" date="Sun Feb 27 18:19:50 EST 2022" starttimestamp="1645820509543" timestamp="183480865" timestamp2="183480865">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6018" _type="InsertStringCommand" date="Sun Feb 27 18:19:50 EST 2022" starttimestamp="1645820509543" timestamp="183481122" timestamp2="183481122">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6019" _type="InsertStringCommand" date="Sun Feb 27 18:19:50 EST 2022" starttimestamp="1645820509543" timestamp="183481122" timestamp2="183481122">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6021" _type="InsertStringCommand" date="Sun Feb 27 18:19:50 EST 2022" starttimestamp="1645820509543" timestamp="183481438" timestamp2="183481438">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6022" _type="InsertStringCommand" date="Sun Feb 27 18:19:50 EST 2022" starttimestamp="1645820509543" timestamp="183481438" timestamp2="183481438">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6024" _type="InsertStringCommand" date="Sun Feb 27 18:19:51 EST 2022" starttimestamp="1645820509543" timestamp="183481909" timestamp2="183481909">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="6025" _type="InsertStringCommand" date="Sun Feb 27 18:19:51 EST 2022" starttimestamp="1645820509543" timestamp="183481909" timestamp2="183481909">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="6027" _type="InsertStringCommand" date="Sun Feb 27 18:19:51 EST 2022" starttimestamp="1645820509543" timestamp="183482241" timestamp2="183482241">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6028" _type="InsertStringCommand" date="Sun Feb 27 18:19:51 EST 2022" starttimestamp="1645820509543" timestamp="183482241" timestamp2="183482241">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6030" _type="InsertStringCommand" date="Sun Feb 27 18:19:52 EST 2022" starttimestamp="1645820509543" timestamp="183482510" timestamp2="183482510">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6031" _type="InsertStringCommand" date="Sun Feb 27 18:19:52 EST 2022" starttimestamp="1645820509543" timestamp="183482510" timestamp2="183482510">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6033" _type="InsertStringCommand" date="Sun Feb 27 18:19:52 EST 2022" starttimestamp="1645820509543" timestamp="183482657" timestamp2="183482657">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6034" _type="InsertStringCommand" date="Sun Feb 27 18:19:52 EST 2022" starttimestamp="1645820509543" timestamp="183482657" timestamp2="183482657">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6036" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:52 EST 2022" starttimestamp="1645820509543" timestamp="183482942" />
  <Command __id="6037" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:52 EST 2022" starttimestamp="1645820509543" timestamp="183482942" />
  <Command __id="6039" _type="InsertStringCommand" date="Sun Feb 27 18:19:52 EST 2022" starttimestamp="1645820509543" timestamp="183483158" timestamp2="183483158">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6040" _type="InsertStringCommand" date="Sun Feb 27 18:19:52 EST 2022" starttimestamp="1645820509543" timestamp="183483158" timestamp2="183483158">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6042" _type="InsertStringCommand" date="Sun Feb 27 18:19:52 EST 2022" starttimestamp="1645820509543" timestamp="183483311" timestamp2="183483311">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6043" _type="InsertStringCommand" date="Sun Feb 27 18:19:52 EST 2022" starttimestamp="1645820509543" timestamp="183483311" timestamp2="183483311">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6045" _type="InsertStringCommand" date="Sun Feb 27 18:19:53 EST 2022" starttimestamp="1645820509543" timestamp="183483643" timestamp2="183483643">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6046" _type="InsertStringCommand" date="Sun Feb 27 18:19:53 EST 2022" starttimestamp="1645820509543" timestamp="183483659" timestamp2="183483659">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6048" _type="InsertStringCommand" date="Sun Feb 27 18:19:53 EST 2022" starttimestamp="1645820509543" timestamp="183484059" timestamp2="183484059">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6049" _type="InsertStringCommand" date="Sun Feb 27 18:19:53 EST 2022" starttimestamp="1645820509543" timestamp="183484059" timestamp2="183484059">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6051" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:53 EST 2022" starttimestamp="1645820509543" timestamp="183484397" />
  <Command __id="6052" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:19:53 EST 2022" starttimestamp="1645820509543" timestamp="183484397" />
  <Command __id="6054" _type="InsertStringCommand" date="Sun Feb 27 18:19:54 EST 2022" starttimestamp="1645820509543" timestamp="183484697" timestamp2="183484697">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6055" _type="InsertStringCommand" date="Sun Feb 27 18:19:54 EST 2022" starttimestamp="1645820509543" timestamp="183484697" timestamp2="183484697">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6057" _type="InsertStringCommand" date="Sun Feb 27 18:19:54 EST 2022" starttimestamp="1645820509543" timestamp="183484776" timestamp2="183484776">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6058" _type="InsertStringCommand" date="Sun Feb 27 18:19:54 EST 2022" starttimestamp="1645820509543" timestamp="183484776" timestamp2="183484776">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6060" _type="InsertStringCommand" date="Sun Feb 27 18:19:54 EST 2022" starttimestamp="1645820509543" timestamp="183484860" timestamp2="183484860">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6061" _type="InsertStringCommand" date="Sun Feb 27 18:19:54 EST 2022" starttimestamp="1645820509543" timestamp="183484860" timestamp2="183484860">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6063" _type="InsertStringCommand" date="Sun Feb 27 18:19:54 EST 2022" starttimestamp="1645820509543" timestamp="183484976" timestamp2="183484976">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6064" _type="InsertStringCommand" date="Sun Feb 27 18:19:54 EST 2022" starttimestamp="1645820509543" timestamp="183484976" timestamp2="183484976">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6065" _type="MoveCaretCommand" caretOffset="1209" date="Sun Feb 27 18:19:56 EST 2022" docOffset="1287" starttimestamp="1645820509543" timestamp="183486764" />
  <Command __id="6066" _type="MoveCaretCommand" caretOffset="1209" date="Sun Feb 27 18:19:56 EST 2022" docOffset="1287" starttimestamp="1645820509543" timestamp="183486764" />
  <Command __id="6068" _type="InsertStringCommand" date="Sun Feb 27 18:19:56 EST 2022" starttimestamp="1645820509543" timestamp="183486817" timestamp2="183486817">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6069" _type="InsertStringCommand" date="Sun Feb 27 18:19:56 EST 2022" starttimestamp="1645820509543" timestamp="183486817" timestamp2="183486817">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6070" _type="MoveCaretCommand" caretOffset="1214" date="Sun Feb 27 18:19:56 EST 2022" docOffset="1292" starttimestamp="1645820509543" timestamp="183487149" />
  <Command __id="6071" _type="MoveCaretCommand" caretOffset="1214" date="Sun Feb 27 18:19:56 EST 2022" docOffset="1292" starttimestamp="1645820509543" timestamp="183487149" />
  <Command __id="6072" _type="MoveCaretCommand" caretOffset="1248" date="Sun Feb 27 18:19:57 EST 2022" docOffset="1326" starttimestamp="1645820509543" timestamp="183488235" />
  <Command __id="6073" _type="MoveCaretCommand" caretOffset="1248" date="Sun Feb 27 18:19:57 EST 2022" docOffset="1326" starttimestamp="1645820509543" timestamp="183488235" />
  <Command __id="6074" _type="MoveCaretCommand" caretOffset="1602" date="Sun Feb 27 18:20:04 EST 2022" docOffset="1680" starttimestamp="1645820509543" timestamp="183495130" />
  <Command __id="6075" _type="MoveCaretCommand" caretOffset="1602" date="Sun Feb 27 18:20:04 EST 2022" docOffset="1680" starttimestamp="1645820509543" timestamp="183495130" />
  <DocumentChange __id="6026" _type="Insert" date="Sun Feb 27 18:19:51 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12519" length="1" offset="1282" starttimestamp="1645820509543" timestamp="183482225">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="6029" _type="Insert" date="Sun Feb 27 18:19:52 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12520" length="1" offset="1283" starttimestamp="1645820509543" timestamp="183482495">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="6032" _type="Insert" date="Sun Feb 27 18:19:52 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12521" length="1" offset="1284" starttimestamp="1645820509543" timestamp="183482657">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="6035" _type="Delete" date="Sun Feb 27 18:19:52 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12520" endLine="54" length="1" offset="1284" startLine="54" starttimestamp="1645820509543" timestamp="183482942">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="6038" _type="Insert" date="Sun Feb 27 18:19:52 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12521" length="1" offset="1284" starttimestamp="1645820509543" timestamp="183483158">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="6041" _type="Insert" date="Sun Feb 27 18:19:52 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12522" length="1" offset="1285" starttimestamp="1645820509543" timestamp="183483311">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="6044" _type="Insert" date="Sun Feb 27 18:19:53 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12523" length="1" offset="1286" starttimestamp="1645820509543" timestamp="183483643">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="6047" _type="Insert" date="Sun Feb 27 18:19:53 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12524" length="1" offset="1287" starttimestamp="1645820509543" timestamp="183484059">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="6050" _type="Delete" date="Sun Feb 27 18:19:53 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12523" endLine="54" length="1" offset="1287" startLine="54" starttimestamp="1645820509543" timestamp="183484397">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="6053" _type="Insert" date="Sun Feb 27 18:19:54 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12524" length="1" offset="1287" starttimestamp="1645820509543" timestamp="183484691">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="6056" _type="Insert" date="Sun Feb 27 18:19:54 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12525" length="1" offset="1288" starttimestamp="1645820509543" timestamp="183484776">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="6059" _type="Insert" date="Sun Feb 27 18:19:54 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12526" length="1" offset="1289" starttimestamp="1645820509543" timestamp="183484845">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="6062" _type="Insert" date="Sun Feb 27 18:19:54 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12527" length="1" offset="1290" starttimestamp="1645820509543" timestamp="183484976">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="6067" _type="Insert" date="Sun Feb 27 18:19:56 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12528" length="1" offset="1287" starttimestamp="1645820509543" timestamp="183486802">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="6078" _type="Replace" date="Sun Feb 27 18:20:07 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12520" endLine="71" insertionLength="1" int_docASTNodeCount="1575" int_docActiveCodeLength="11190" int_docExpressionCount="1104" int_docLength="12519" length="9" offset="1671" startLine="71" starttimestamp="1645820509543" timestamp="183498295">
    <deletedText><![CDATA[case TYPE]]></deletedText>
    <insertedText><![CDATA[b]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6081" _type="Insert" date="Sun Feb 27 18:20:07 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12521" length="1" offset="1672" starttimestamp="1645820509543" timestamp="183498433">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="6084" _type="Insert" date="Sun Feb 27 18:20:08 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12522" length="1" offset="1673" starttimestamp="1645820509543" timestamp="183498564">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="6087" _type="Insert" date="Sun Feb 27 18:20:08 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12523" length="1" offset="1674" starttimestamp="1645820509543" timestamp="183498733">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6090" _type="Delete" date="Sun Feb 27 18:20:08 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12522" endLine="71" length="1" offset="1674" startLine="71" starttimestamp="1645820509543" timestamp="183499181">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6093" _type="Insert" date="Sun Feb 27 18:20:08 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12523" length="1" offset="1674" starttimestamp="1645820509543" timestamp="183499381">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <DocumentChange __id="6096" _type="Insert" date="Sun Feb 27 18:20:09 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12524" length="1" offset="1675" starttimestamp="1645820509543" timestamp="183499497">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6099" _type="Insert" date="Sun Feb 27 18:20:09 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12525" length="1" offset="1676" starttimestamp="1645820509543" timestamp="183499766">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="6102" _type="Insert" date="Sun Feb 27 18:20:09 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12526" length="1" offset="1677" starttimestamp="1645820509543" timestamp="183499935">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="6105" _type="Insert" date="Sun Feb 27 18:20:09 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12527" length="1" offset="1678" starttimestamp="1645820509543" timestamp="183500066">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="6076" _type="SelectTextCommand" caretOffset="1593" date="Sun Feb 27 18:20:07 EST 2022" end="1602" start="1593" starttimestamp="1645820509543" timestamp="183497832" />
  <Command __id="6077" _type="SelectTextCommand" caretOffset="1593" date="Sun Feb 27 18:20:07 EST 2022" end="1602" start="1593" starttimestamp="1645820509543" timestamp="183497832" />
  <Command __id="6079" _type="InsertStringCommand" date="Sun Feb 27 18:20:07 EST 2022" starttimestamp="1645820509543" timestamp="183498295" timestamp2="183498295">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="6080" _type="InsertStringCommand" date="Sun Feb 27 18:20:07 EST 2022" starttimestamp="1645820509543" timestamp="183498295" timestamp2="183498295">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="6082" _type="InsertStringCommand" date="Sun Feb 27 18:20:07 EST 2022" starttimestamp="1645820509543" timestamp="183498433" timestamp2="183498433">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6083" _type="InsertStringCommand" date="Sun Feb 27 18:20:07 EST 2022" starttimestamp="1645820509543" timestamp="183498433" timestamp2="183498433">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6085" _type="InsertStringCommand" date="Sun Feb 27 18:20:08 EST 2022" starttimestamp="1645820509543" timestamp="183498564" timestamp2="183498564">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6086" _type="InsertStringCommand" date="Sun Feb 27 18:20:08 EST 2022" starttimestamp="1645820509543" timestamp="183498564" timestamp2="183498564">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6088" _type="InsertStringCommand" date="Sun Feb 27 18:20:08 EST 2022" starttimestamp="1645820509543" timestamp="183498733" timestamp2="183498733">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6089" _type="InsertStringCommand" date="Sun Feb 27 18:20:08 EST 2022" starttimestamp="1645820509543" timestamp="183498733" timestamp2="183498733">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6091" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:08 EST 2022" starttimestamp="1645820509543" timestamp="183499181" />
  <Command __id="6092" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:08 EST 2022" starttimestamp="1645820509543" timestamp="183499181" />
  <Command __id="6094" _type="InsertStringCommand" date="Sun Feb 27 18:20:08 EST 2022" starttimestamp="1645820509543" timestamp="183499381" timestamp2="183499381">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="6095" _type="InsertStringCommand" date="Sun Feb 27 18:20:08 EST 2022" starttimestamp="1645820509543" timestamp="183499381" timestamp2="183499381">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="6097" _type="InsertStringCommand" date="Sun Feb 27 18:20:09 EST 2022" starttimestamp="1645820509543" timestamp="183499512" timestamp2="183499512">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6098" _type="InsertStringCommand" date="Sun Feb 27 18:20:09 EST 2022" starttimestamp="1645820509543" timestamp="183499512" timestamp2="183499512">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6100" _type="InsertStringCommand" date="Sun Feb 27 18:20:09 EST 2022" starttimestamp="1645820509543" timestamp="183499766" timestamp2="183499766">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="6101" _type="InsertStringCommand" date="Sun Feb 27 18:20:09 EST 2022" starttimestamp="1645820509543" timestamp="183499766" timestamp2="183499766">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="6103" _type="InsertStringCommand" date="Sun Feb 27 18:20:09 EST 2022" starttimestamp="1645820509543" timestamp="183499935" timestamp2="183499935">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6104" _type="InsertStringCommand" date="Sun Feb 27 18:20:09 EST 2022" starttimestamp="1645820509543" timestamp="183499935" timestamp2="183499935">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6106" _type="InsertStringCommand" date="Sun Feb 27 18:20:09 EST 2022" starttimestamp="1645820509543" timestamp="183500066" timestamp2="183500066">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6107" _type="InsertStringCommand" date="Sun Feb 27 18:20:09 EST 2022" starttimestamp="1645820509543" timestamp="183500066" timestamp2="183500066">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6109" _type="InsertStringCommand" date="Sun Feb 27 18:20:09 EST 2022" starttimestamp="1645820509543" timestamp="183500267" timestamp2="183500267">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6110" _type="InsertStringCommand" date="Sun Feb 27 18:20:09 EST 2022" starttimestamp="1645820509543" timestamp="183500267" timestamp2="183500267">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6112" _type="InsertStringCommand" date="Sun Feb 27 18:20:09 EST 2022" starttimestamp="1645820509543" timestamp="183500367" timestamp2="183500367">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6113" _type="InsertStringCommand" date="Sun Feb 27 18:20:09 EST 2022" starttimestamp="1645820509543" timestamp="183500367" timestamp2="183500367">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6115" _type="InsertStringCommand" date="Sun Feb 27 18:20:10 EST 2022" starttimestamp="1645820509543" timestamp="183500636" timestamp2="183500636">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="6116" _type="InsertStringCommand" date="Sun Feb 27 18:20:10 EST 2022" starttimestamp="1645820509543" timestamp="183500636" timestamp2="183500636">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="6118" _type="InsertStringCommand" date="Sun Feb 27 18:20:10 EST 2022" starttimestamp="1645820509543" timestamp="183500699" timestamp2="183500699">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6119" _type="InsertStringCommand" date="Sun Feb 27 18:20:10 EST 2022" starttimestamp="1645820509543" timestamp="183500699" timestamp2="183500699">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6121" _type="InsertStringCommand" date="Sun Feb 27 18:20:10 EST 2022" starttimestamp="1645820509543" timestamp="183500799" timestamp2="183500799">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6122" _type="InsertStringCommand" date="Sun Feb 27 18:20:10 EST 2022" starttimestamp="1645820509543" timestamp="183500799" timestamp2="183500799">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6123" _type="MoveCaretCommand" caretOffset="2261" date="Sun Feb 27 18:20:24 EST 2022" docOffset="2339" starttimestamp="1645820509543" timestamp="183514817" />
  <Command __id="6124" _type="MoveCaretCommand" caretOffset="2261" date="Sun Feb 27 18:20:24 EST 2022" docOffset="2339" starttimestamp="1645820509543" timestamp="183514817" />
  <Command __id="6125" _type="MoveCaretCommand" caretOffset="2278" date="Sun Feb 27 18:20:26 EST 2022" docOffset="2356" starttimestamp="1645820509543" timestamp="183517058" />
  <Command __id="6126" _type="MoveCaretCommand" caretOffset="2278" date="Sun Feb 27 18:20:26 EST 2022" docOffset="2356" starttimestamp="1645820509543" timestamp="183517058" />
  <Command __id="6128" _type="InsertStringCommand" date="Sun Feb 27 18:20:27 EST 2022" starttimestamp="1645820509543" timestamp="183517745" timestamp2="183517745">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="6129" _type="InsertStringCommand" date="Sun Feb 27 18:20:27 EST 2022" starttimestamp="1645820509543" timestamp="183517745" timestamp2="183517745">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="6131" _type="InsertStringCommand" date="Sun Feb 27 18:20:27 EST 2022" starttimestamp="1645820509543" timestamp="183517877" timestamp2="183517877">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6132" _type="InsertStringCommand" date="Sun Feb 27 18:20:27 EST 2022" starttimestamp="1645820509543" timestamp="183517877" timestamp2="183517877">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6134" _type="InsertStringCommand" date="Sun Feb 27 18:20:27 EST 2022" starttimestamp="1645820509543" timestamp="183518023" timestamp2="183518023">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6135" _type="InsertStringCommand" date="Sun Feb 27 18:20:27 EST 2022" starttimestamp="1645820509543" timestamp="183518023" timestamp2="183518023">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6137" _type="InsertStringCommand" date="Sun Feb 27 18:20:27 EST 2022" starttimestamp="1645820509543" timestamp="183518108" timestamp2="183518108">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6138" _type="InsertStringCommand" date="Sun Feb 27 18:20:27 EST 2022" starttimestamp="1645820509543" timestamp="183518108" timestamp2="183518108">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6140" _type="InsertStringCommand" date="Sun Feb 27 18:20:27 EST 2022" starttimestamp="1645820509543" timestamp="183518440" timestamp2="183518440">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6141" _type="InsertStringCommand" date="Sun Feb 27 18:20:27 EST 2022" starttimestamp="1645820509543" timestamp="183518440" timestamp2="183518440">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6143" _type="InsertStringCommand" date="Sun Feb 27 18:20:28 EST 2022" starttimestamp="1645820509543" timestamp="183518694" timestamp2="183518694">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6144" _type="InsertStringCommand" date="Sun Feb 27 18:20:28 EST 2022" starttimestamp="1645820509543" timestamp="183518694" timestamp2="183518694">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6146" _type="InsertStringCommand" date="Sun Feb 27 18:20:28 EST 2022" starttimestamp="1645820509543" timestamp="183518894" timestamp2="183518894">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="6147" _type="InsertStringCommand" date="Sun Feb 27 18:20:28 EST 2022" starttimestamp="1645820509543" timestamp="183518894" timestamp2="183518894">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="6149" _type="InsertStringCommand" date="Sun Feb 27 18:20:28 EST 2022" starttimestamp="1645820509543" timestamp="183519048" timestamp2="183519048">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="6150" _type="InsertStringCommand" date="Sun Feb 27 18:20:28 EST 2022" starttimestamp="1645820509543" timestamp="183519048" timestamp2="183519048">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="6152" _type="InsertStringCommand" date="Sun Feb 27 18:20:28 EST 2022" starttimestamp="1645820509543" timestamp="183519210" timestamp2="183519210">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6153" _type="InsertStringCommand" date="Sun Feb 27 18:20:28 EST 2022" starttimestamp="1645820509543" timestamp="183519210" timestamp2="183519210">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6155" _type="InsertStringCommand" date="Sun Feb 27 18:20:29 EST 2022" starttimestamp="1645820509543" timestamp="183520112" timestamp2="183520112">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6156" _type="InsertStringCommand" date="Sun Feb 27 18:20:29 EST 2022" starttimestamp="1645820509543" timestamp="183520112" timestamp2="183520112">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6158" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:30 EST 2022" starttimestamp="1645820509543" timestamp="183520512" />
  <Command __id="6159" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:30 EST 2022" starttimestamp="1645820509543" timestamp="183520512" />
  <DocumentChange __id="6108" _type="Insert" date="Sun Feb 27 18:20:09 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12528" length="1" offset="1679" starttimestamp="1645820509543" timestamp="183500235">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="6111" _type="Insert" date="Sun Feb 27 18:20:09 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12529" length="1" offset="1680" starttimestamp="1645820509543" timestamp="183500351">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="6114" _type="Insert" date="Sun Feb 27 18:20:10 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12530" length="1" offset="1681" starttimestamp="1645820509543" timestamp="183500621">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="6117" _type="Insert" date="Sun Feb 27 18:20:10 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12531" length="1" offset="1682" starttimestamp="1645820509543" timestamp="183500699">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="6120" _type="Insert" date="Sun Feb 27 18:20:10 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11190" docExpressionCount="1104" docLength="12532" length="1" offset="1683" starttimestamp="1645820509543" timestamp="183500799">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="6127" _type="Insert" date="Sun Feb 27 18:20:27 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11191" docExpressionCount="1104" docLength="12533" length="1" offset="2356" starttimestamp="1645820509543" timestamp="183517745">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="6130" _type="Insert" date="Sun Feb 27 18:20:27 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11192" docExpressionCount="1104" docLength="12534" length="1" offset="2357" starttimestamp="1645820509543" timestamp="183517877">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6133" _type="Insert" date="Sun Feb 27 18:20:27 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11193" docExpressionCount="1104" docLength="12535" length="1" offset="2358" starttimestamp="1645820509543" timestamp="183518023">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="6136" _type="Insert" date="Sun Feb 27 18:20:27 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11194" docExpressionCount="1104" docLength="12536" length="1" offset="2359" starttimestamp="1645820509543" timestamp="183518108">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="6139" _type="Insert" date="Sun Feb 27 18:20:27 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11195" docExpressionCount="1104" docLength="12537" length="1" offset="2360" starttimestamp="1645820509543" timestamp="183518440">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6142" _type="Insert" date="Sun Feb 27 18:20:28 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11196" docExpressionCount="1104" docLength="12538" length="1" offset="2361" starttimestamp="1645820509543" timestamp="183518678">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="6145" _type="Insert" date="Sun Feb 27 18:20:28 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11197" docExpressionCount="1104" docLength="12539" length="1" offset="2362" starttimestamp="1645820509543" timestamp="183518894">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <DocumentChange __id="6148" _type="Insert" date="Sun Feb 27 18:20:28 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11198" docExpressionCount="1104" docLength="12540" length="1" offset="2363" starttimestamp="1645820509543" timestamp="183519041">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="6151" _type="Insert" date="Sun Feb 27 18:20:28 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11199" docExpressionCount="1104" docLength="12541" length="1" offset="2364" starttimestamp="1645820509543" timestamp="183519194">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="6154" _type="Insert" date="Sun Feb 27 18:20:29 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11200" docExpressionCount="1104" docLength="12542" length="1" offset="2365" starttimestamp="1645820509543" timestamp="183520112">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="6157" _type="Delete" date="Sun Feb 27 18:20:30 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11199" docExpressionCount="1104" docLength="12541" endLine="97" length="1" offset="2365" startLine="97" starttimestamp="1645820509543" timestamp="183520512">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="6160" _type="Insert" date="Sun Feb 27 18:20:30 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11200" docExpressionCount="1104" docLength="12542" length="1" offset="2365" starttimestamp="1645820509543" timestamp="183521029">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="6163" _type="Insert" date="Sun Feb 27 18:20:30 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11201" docExpressionCount="1104" docLength="12543" length="1" offset="2366" starttimestamp="1645820509543" timestamp="183521245">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6166" _type="Insert" date="Sun Feb 27 18:20:30 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11202" docExpressionCount="1104" docLength="12544" length="1" offset="2367" starttimestamp="1645820509543" timestamp="183521383">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="6169" _type="Insert" date="Sun Feb 27 18:20:31 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11203" docExpressionCount="1104" docLength="12545" length="1" offset="2368" starttimestamp="1645820509543" timestamp="183521552">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="6172" _type="Insert" date="Sun Feb 27 18:20:31 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11204" docExpressionCount="1104" docLength="12546" length="1" offset="2369" starttimestamp="1645820509543" timestamp="183521683">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="6175" _type="Insert" date="Sun Feb 27 18:20:31 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11205" docExpressionCount="1104" docLength="12547" length="1" offset="2370" starttimestamp="1645820509543" timestamp="183521784">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="6178" _type="Insert" date="Sun Feb 27 18:20:31 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11206" docExpressionCount="1104" docLength="12548" length="1" offset="2371" starttimestamp="1645820509543" timestamp="183522000">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="6181" _type="Insert" date="Sun Feb 27 18:20:31 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11207" docExpressionCount="1104" docLength="12549" length="1" offset="2372" starttimestamp="1645820509543" timestamp="183522268">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="6161" _type="InsertStringCommand" date="Sun Feb 27 18:20:30 EST 2022" starttimestamp="1645820509543" timestamp="183521029" timestamp2="183521029">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6162" _type="InsertStringCommand" date="Sun Feb 27 18:20:30 EST 2022" starttimestamp="1645820509543" timestamp="183521029" timestamp2="183521029">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6164" _type="InsertStringCommand" date="Sun Feb 27 18:20:30 EST 2022" starttimestamp="1645820509543" timestamp="183521245" timestamp2="183521245">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6165" _type="InsertStringCommand" date="Sun Feb 27 18:20:30 EST 2022" starttimestamp="1645820509543" timestamp="183521245" timestamp2="183521245">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6167" _type="InsertStringCommand" date="Sun Feb 27 18:20:30 EST 2022" starttimestamp="1645820509543" timestamp="183521399" timestamp2="183521399">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6168" _type="InsertStringCommand" date="Sun Feb 27 18:20:30 EST 2022" starttimestamp="1645820509543" timestamp="183521399" timestamp2="183521399">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6170" _type="InsertStringCommand" date="Sun Feb 27 18:20:31 EST 2022" starttimestamp="1645820509543" timestamp="183521567" timestamp2="183521567">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6171" _type="InsertStringCommand" date="Sun Feb 27 18:20:31 EST 2022" starttimestamp="1645820509543" timestamp="183521567" timestamp2="183521567">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6173" _type="InsertStringCommand" date="Sun Feb 27 18:20:31 EST 2022" starttimestamp="1645820509543" timestamp="183521683" timestamp2="183521683">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6174" _type="InsertStringCommand" date="Sun Feb 27 18:20:31 EST 2022" starttimestamp="1645820509543" timestamp="183521683" timestamp2="183521683">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6176" _type="InsertStringCommand" date="Sun Feb 27 18:20:31 EST 2022" starttimestamp="1645820509543" timestamp="183521784" timestamp2="183521784">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6177" _type="InsertStringCommand" date="Sun Feb 27 18:20:31 EST 2022" starttimestamp="1645820509543" timestamp="183521784" timestamp2="183521784">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6179" _type="InsertStringCommand" date="Sun Feb 27 18:20:31 EST 2022" starttimestamp="1645820509543" timestamp="183522015" timestamp2="183522015">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6180" _type="InsertStringCommand" date="Sun Feb 27 18:20:31 EST 2022" starttimestamp="1645820509543" timestamp="183522015" timestamp2="183522015">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6182" _type="InsertStringCommand" date="Sun Feb 27 18:20:31 EST 2022" starttimestamp="1645820509543" timestamp="183522268" timestamp2="183522268">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6183" _type="InsertStringCommand" date="Sun Feb 27 18:20:31 EST 2022" starttimestamp="1645820509543" timestamp="183522268" timestamp2="183522268">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6185" _type="InsertStringCommand" date="Sun Feb 27 18:20:31 EST 2022" starttimestamp="1645820509543" timestamp="183522453" timestamp2="183522453">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6186" _type="InsertStringCommand" date="Sun Feb 27 18:20:31 EST 2022" starttimestamp="1645820509543" timestamp="183522453" timestamp2="183522453">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6188" _type="InsertStringCommand" date="Sun Feb 27 18:20:32 EST 2022" starttimestamp="1645820509543" timestamp="183522873" timestamp2="183522873">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6189" _type="InsertStringCommand" date="Sun Feb 27 18:20:32 EST 2022" starttimestamp="1645820509543" timestamp="183522873" timestamp2="183522873">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6190" _type="SelectTextCommand" caretOffset="2291" date="Sun Feb 27 18:20:35 EST 2022" end="2294" start="2291" starttimestamp="1645820509543" timestamp="183525463" />
  <Command __id="6191" _type="SelectTextCommand" caretOffset="2291" date="Sun Feb 27 18:20:35 EST 2022" end="2294" start="2291" starttimestamp="1645820509543" timestamp="183525463" />
  <Command __id="6193" _type="InsertStringCommand" date="Sun Feb 27 18:20:35 EST 2022" starttimestamp="1645820509543" timestamp="183525616" timestamp2="183525616">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6194" _type="InsertStringCommand" date="Sun Feb 27 18:20:35 EST 2022" starttimestamp="1645820509543" timestamp="183525616" timestamp2="183525616">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6196" _type="InsertStringCommand" date="Sun Feb 27 18:20:35 EST 2022" starttimestamp="1645820509543" timestamp="183526249" timestamp2="183526249">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6197" _type="InsertStringCommand" date="Sun Feb 27 18:20:35 EST 2022" starttimestamp="1645820509543" timestamp="183526249" timestamp2="183526249">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6199" _type="InsertStringCommand" date="Sun Feb 27 18:20:35 EST 2022" starttimestamp="1645820509543" timestamp="183526317" timestamp2="183526317">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6200" _type="InsertStringCommand" date="Sun Feb 27 18:20:35 EST 2022" starttimestamp="1645820509543" timestamp="183526317" timestamp2="183526317">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6201" _type="MoveCaretCommand" caretOffset="2297" date="Sun Feb 27 18:20:37 EST 2022" docOffset="2375" starttimestamp="1645820509543" timestamp="183527667" />
  <Command __id="6202" _type="MoveCaretCommand" caretOffset="2297" date="Sun Feb 27 18:20:37 EST 2022" docOffset="2375" starttimestamp="1645820509543" timestamp="183527667" />
  <Command __id="6204" _type="InsertStringCommand" date="Sun Feb 27 18:20:37 EST 2022" starttimestamp="1645820509543" timestamp="183528422" timestamp2="183528422">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6205" _type="InsertStringCommand" date="Sun Feb 27 18:20:37 EST 2022" starttimestamp="1645820509543" timestamp="183528422" timestamp2="183528422">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6206" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 18:20:38 EST 2022" starttimestamp="1645820509543" timestamp="183529431" />
  <Command __id="6207" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:20:39 EST 2022" starttimestamp="1645820509543" timestamp="183529524" />
  <Command __id="6208" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:20:39 EST 2022" starttimestamp="1645820509543" timestamp="183529539" />
  <Command __id="6209" _type="MoveCaretCommand" caretOffset="2096" date="Sun Feb 27 18:20:39 EST 2022" docOffset="2174" starttimestamp="1645820509543" timestamp="183530103" />
  <Command __id="6210" _type="MoveCaretCommand" caretOffset="2096" date="Sun Feb 27 18:20:39 EST 2022" docOffset="2174" starttimestamp="1645820509543" timestamp="183530103" />
  <Command __id="6211" _type="MoveCaretCommand" caretOffset="1831" date="Sun Feb 27 18:20:39 EST 2022" docOffset="1909" starttimestamp="1645820509543" timestamp="183530403" />
  <Command __id="6212" _type="MoveCaretCommand" caretOffset="1831" date="Sun Feb 27 18:20:39 EST 2022" docOffset="1909" starttimestamp="1645820509543" timestamp="183530403" />
  <Command __id="6213" _type="MoveCaretCommand" caretOffset="1683" date="Sun Feb 27 18:20:40 EST 2022" docOffset="1761" starttimestamp="1645820509543" timestamp="183530688" />
  <Command __id="6214" _type="MoveCaretCommand" caretOffset="1683" date="Sun Feb 27 18:20:40 EST 2022" docOffset="1761" starttimestamp="1645820509543" timestamp="183530688" />
  <Command __id="6215" _type="MoveCaretCommand" caretOffset="1808" date="Sun Feb 27 18:20:40 EST 2022" docOffset="1886" starttimestamp="1645820509543" timestamp="183531042" />
  <Command __id="6216" _type="MoveCaretCommand" caretOffset="1808" date="Sun Feb 27 18:20:40 EST 2022" docOffset="1886" starttimestamp="1645820509543" timestamp="183531042" />
  <Command __id="6217" _type="MoveCaretCommand" caretOffset="1683" date="Sun Feb 27 18:20:40 EST 2022" docOffset="1761" starttimestamp="1645820509543" timestamp="183531289" />
  <Command __id="6218" _type="MoveCaretCommand" caretOffset="1683" date="Sun Feb 27 18:20:40 EST 2022" docOffset="1761" starttimestamp="1645820509543" timestamp="183531289" />
  <Command __id="6219" _type="MoveCaretCommand" caretOffset="1775" date="Sun Feb 27 18:20:41 EST 2022" docOffset="1853" starttimestamp="1645820509543" timestamp="183531643" />
  <Command __id="6220" _type="MoveCaretCommand" caretOffset="1775" date="Sun Feb 27 18:20:41 EST 2022" docOffset="1853" starttimestamp="1645820509543" timestamp="183531643" />
  <Command __id="6221" _type="MoveCaretCommand" caretOffset="1701" date="Sun Feb 27 18:20:41 EST 2022" docOffset="1779" starttimestamp="1645820509543" timestamp="183531875" />
  <Command __id="6222" _type="MoveCaretCommand" caretOffset="1701" date="Sun Feb 27 18:20:41 EST 2022" docOffset="1779" starttimestamp="1645820509543" timestamp="183531875" />
  <Command __id="6223" _type="MoveCaretCommand" caretOffset="1760" date="Sun Feb 27 18:20:41 EST 2022" docOffset="1838" starttimestamp="1645820509543" timestamp="183532144" />
  <Command __id="6224" _type="MoveCaretCommand" caretOffset="1760" date="Sun Feb 27 18:20:41 EST 2022" docOffset="1838" starttimestamp="1645820509543" timestamp="183532144" />
  <Command __id="6225" _type="MoveCaretCommand" caretOffset="1735" date="Sun Feb 27 18:20:41 EST 2022" docOffset="1813" starttimestamp="1645820509543" timestamp="183532423" />
  <Command __id="6226" _type="MoveCaretCommand" caretOffset="1735" date="Sun Feb 27 18:20:41 EST 2022" docOffset="1813" starttimestamp="1645820509543" timestamp="183532423" />
  <Command __id="6227" _type="MoveCaretCommand" caretOffset="1760" date="Sun Feb 27 18:20:42 EST 2022" docOffset="1838" starttimestamp="1645820509543" timestamp="183532808" />
  <Command __id="6228" _type="MoveCaretCommand" caretOffset="1760" date="Sun Feb 27 18:20:42 EST 2022" docOffset="1838" starttimestamp="1645820509543" timestamp="183532808" />
  <Command __id="6229" _type="MoveCaretCommand" caretOffset="1760" date="Sun Feb 27 18:20:42 EST 2022" docOffset="1838" starttimestamp="1645820509543" timestamp="183533293" />
  <Command __id="6230" _type="MoveCaretCommand" caretOffset="1760" date="Sun Feb 27 18:20:42 EST 2022" docOffset="1838" starttimestamp="1645820509543" timestamp="183533293" />
  <Command __id="6231" _type="MoveCaretCommand" caretOffset="1736" date="Sun Feb 27 18:20:51 EST 2022" docOffset="1814" starttimestamp="1645820509543" timestamp="183542054" />
  <Command __id="6232" _type="MoveCaretCommand" caretOffset="1736" date="Sun Feb 27 18:20:51 EST 2022" docOffset="1814" starttimestamp="1645820509543" timestamp="183542054" />
  <Command __id="6234" _type="InsertStringCommand" date="Sun Feb 27 18:20:52 EST 2022" starttimestamp="1645820509543" timestamp="183542802" timestamp2="183542802">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6235" _type="InsertStringCommand" date="Sun Feb 27 18:20:52 EST 2022" starttimestamp="1645820509543" timestamp="183542802" timestamp2="183542802">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6237" _type="InsertStringCommand" date="Sun Feb 27 18:20:52 EST 2022" starttimestamp="1645820509543" timestamp="183543018" timestamp2="183543018">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6238" _type="InsertStringCommand" date="Sun Feb 27 18:20:52 EST 2022" starttimestamp="1645820509543" timestamp="183543018" timestamp2="183543018">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6240" _type="InsertStringCommand" date="Sun Feb 27 18:20:52 EST 2022" starttimestamp="1645820509543" timestamp="183543133" timestamp2="183543133">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6241" _type="InsertStringCommand" date="Sun Feb 27 18:20:52 EST 2022" starttimestamp="1645820509543" timestamp="183543133" timestamp2="183543133">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6243" _type="InsertStringCommand" date="Sun Feb 27 18:20:52 EST 2022" starttimestamp="1645820509543" timestamp="183543418" timestamp2="183543418">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6244" _type="InsertStringCommand" date="Sun Feb 27 18:20:52 EST 2022" starttimestamp="1645820509543" timestamp="183543418" timestamp2="183543418">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6246" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:53 EST 2022" starttimestamp="1645820509543" timestamp="183543671" />
  <Command __id="6247" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:53 EST 2022" starttimestamp="1645820509543" timestamp="183543671" />
  <Command __id="6249" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:53 EST 2022" starttimestamp="1645820509543" timestamp="183543856" />
  <Command __id="6250" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:53 EST 2022" starttimestamp="1645820509543" timestamp="183543856" />
  <Command __id="6252" _type="InsertStringCommand" date="Sun Feb 27 18:20:53 EST 2022" starttimestamp="1645820509543" timestamp="183544056" timestamp2="183544056">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="6253" _type="InsertStringCommand" date="Sun Feb 27 18:20:53 EST 2022" starttimestamp="1645820509543" timestamp="183544056" timestamp2="183544056">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="6255" _type="InsertStringCommand" date="Sun Feb 27 18:20:53 EST 2022" starttimestamp="1645820509543" timestamp="183544219" timestamp2="183544219">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="6256" _type="InsertStringCommand" date="Sun Feb 27 18:20:53 EST 2022" starttimestamp="1645820509543" timestamp="183544219" timestamp2="183544219">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="6258" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:53 EST 2022" starttimestamp="1645820509543" timestamp="183544404" />
  <Command __id="6259" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:53 EST 2022" starttimestamp="1645820509543" timestamp="183544404" />
  <Command __id="6261" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:54 EST 2022" starttimestamp="1645820509543" timestamp="183544573" />
  <Command __id="6262" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:54 EST 2022" starttimestamp="1645820509543" timestamp="183544573" />
  <Command __id="6264" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:54 EST 2022" starttimestamp="1645820509543" timestamp="183544735" />
  <Command __id="6265" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:54 EST 2022" starttimestamp="1645820509543" timestamp="183544735" />
  <DocumentChange __id="6184" _type="Insert" date="Sun Feb 27 18:20:31 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11208" docExpressionCount="1104" docLength="12550" length="1" offset="2373" starttimestamp="1645820509543" timestamp="183522447">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="6187" _type="Insert" date="Sun Feb 27 18:20:32 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11209" docExpressionCount="1104" docLength="12551" length="1" offset="2374" starttimestamp="1645820509543" timestamp="183522857">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="6192" _type="Replace" date="Sun Feb 27 18:20:35 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11207" docExpressionCount="1104" docLength="12549" endLine="97" insertionLength="1" int_docASTNodeCount="1575" int_docActiveCodeLength="11206" int_docExpressionCount="1104" int_docLength="12548" length="3" offset="2369" startLine="97" starttimestamp="1645820509543" timestamp="183525616">
    <deletedText><![CDATA[lca]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6195" _type="Insert" date="Sun Feb 27 18:20:35 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11208" docExpressionCount="1104" docLength="12550" length="1" offset="2370" starttimestamp="1645820509543" timestamp="183526249">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="6198" _type="Insert" date="Sun Feb 27 18:20:35 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11209" docExpressionCount="1104" docLength="12551" length="1" offset="2371" starttimestamp="1645820509543" timestamp="183526317">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="6203" _type="Insert" date="Sun Feb 27 18:20:37 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11210" docExpressionCount="1104" docLength="12552" length="1" offset="2375" starttimestamp="1645820509543" timestamp="183528407">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="6233" _type="Insert" date="Sun Feb 27 18:20:52 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11218" docExpressionCount="1104" docLength="12560" length="8" offset="1814" starttimestamp="1645820509543" timestamp="183542802">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <DocumentChange __id="6236" _type="Insert" date="Sun Feb 27 18:20:52 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12561" length="1" offset="1822" starttimestamp="1645820509543" timestamp="183543018">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="6239" _type="Insert" date="Sun Feb 27 18:20:52 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11218" docExpressionCount="1104" docLength="12562" length="1" offset="1823" starttimestamp="1645820509543" timestamp="183543118">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="6242" _type="Insert" date="Sun Feb 27 18:20:52 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11218" docExpressionCount="1104" docLength="12563" length="1" offset="1824" starttimestamp="1645820509543" timestamp="183543402">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6245" _type="Delete" date="Sun Feb 27 18:20:53 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11218" docExpressionCount="1104" docLength="12562" endLine="77" length="1" offset="1824" startLine="77" starttimestamp="1645820509543" timestamp="183543671">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6248" _type="Delete" date="Sun Feb 27 18:20:53 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12561" endLine="77" length="1" offset="1823" startLine="77" starttimestamp="1645820509543" timestamp="183543850">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="6251" _type="Insert" date="Sun Feb 27 18:20:53 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11220" docExpressionCount="1104" docLength="12562" length="1" offset="1823" starttimestamp="1645820509543" timestamp="183544056">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6254" _type="Insert" date="Sun Feb 27 18:20:53 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11221" docExpressionCount="1104" docLength="12563" length="1" offset="1824" starttimestamp="1645820509543" timestamp="183544219">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6257" _type="Delete" date="Sun Feb 27 18:20:53 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11220" docExpressionCount="1104" docLength="12562" endLine="77" length="1" offset="1824" startLine="77" starttimestamp="1645820509543" timestamp="183544404">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6260" _type="Delete" date="Sun Feb 27 18:20:54 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12561" endLine="77" length="1" offset="1823" startLine="77" starttimestamp="1645820509543" timestamp="183544573">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6263" _type="Delete" date="Sun Feb 27 18:20:54 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11218" docExpressionCount="1104" docLength="12560" endLine="77" length="1" offset="1822" startLine="77" starttimestamp="1645820509543" timestamp="183544735">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="6266" _type="Insert" date="Sun Feb 27 18:20:54 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12561" length="1" offset="1822" starttimestamp="1645820509543" timestamp="183544873">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6269" _type="Insert" date="Sun Feb 27 18:20:54 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11220" docExpressionCount="1104" docLength="12562" length="1" offset="1823" starttimestamp="1645820509543" timestamp="183545189">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="6272" _type="Insert" date="Sun Feb 27 18:20:54 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12563" length="1" offset="1824" starttimestamp="1645820509543" timestamp="183545358">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="6275" _type="Insert" date="Sun Feb 27 18:20:55 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12564" length="1" offset="1825" starttimestamp="1645820509543" timestamp="183545952">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="6267" _type="InsertStringCommand" date="Sun Feb 27 18:20:54 EST 2022" starttimestamp="1645820509543" timestamp="183544873" timestamp2="183544873">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="6268" _type="InsertStringCommand" date="Sun Feb 27 18:20:54 EST 2022" starttimestamp="1645820509543" timestamp="183544873" timestamp2="183544873">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="6270" _type="InsertStringCommand" date="Sun Feb 27 18:20:54 EST 2022" starttimestamp="1645820509543" timestamp="183545205" timestamp2="183545205">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6271" _type="InsertStringCommand" date="Sun Feb 27 18:20:54 EST 2022" starttimestamp="1645820509543" timestamp="183545205" timestamp2="183545205">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6273" _type="InsertStringCommand" date="Sun Feb 27 18:20:54 EST 2022" starttimestamp="1645820509543" timestamp="183545358" timestamp2="183545358">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6274" _type="InsertStringCommand" date="Sun Feb 27 18:20:54 EST 2022" starttimestamp="1645820509543" timestamp="183545358" timestamp2="183545358">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6276" _type="InsertStringCommand" date="Sun Feb 27 18:20:55 EST 2022" starttimestamp="1645820509543" timestamp="183545952" timestamp2="183545952">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6277" _type="InsertStringCommand" date="Sun Feb 27 18:20:55 EST 2022" starttimestamp="1645820509543" timestamp="183545952" timestamp2="183545952">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6279" _type="InsertStringCommand" date="Sun Feb 27 18:20:56 EST 2022" starttimestamp="1645820509543" timestamp="183547262" timestamp2="183547262">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="6280" _type="InsertStringCommand" date="Sun Feb 27 18:20:56 EST 2022" starttimestamp="1645820509543" timestamp="183547262" timestamp2="183547262">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="6282" _type="InsertStringCommand" date="Sun Feb 27 18:20:57 EST 2022" starttimestamp="1645820509543" timestamp="183547563" timestamp2="183547563">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6283" _type="InsertStringCommand" date="Sun Feb 27 18:20:57 EST 2022" starttimestamp="1645820509543" timestamp="183547563" timestamp2="183547563">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6285" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:57 EST 2022" starttimestamp="1645820509543" timestamp="183548041" />
  <Command __id="6286" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:57 EST 2022" starttimestamp="1645820509543" timestamp="183548041" />
  <Command __id="6288" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:57 EST 2022" starttimestamp="1645820509543" timestamp="183548195" />
  <Command __id="6289" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:20:57 EST 2022" starttimestamp="1645820509543" timestamp="183548195" />
  <Command __id="6291" _type="InsertStringCommand" date="Sun Feb 27 18:20:58 EST 2022" starttimestamp="1645820509543" timestamp="183548980" timestamp2="183548980">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="6292" _type="InsertStringCommand" date="Sun Feb 27 18:20:58 EST 2022" starttimestamp="1645820509543" timestamp="183548980" timestamp2="183548980">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="6294" _type="InsertStringCommand" date="Sun Feb 27 18:20:59 EST 2022" starttimestamp="1645820509543" timestamp="183549481" timestamp2="183549481">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6295" _type="InsertStringCommand" date="Sun Feb 27 18:20:59 EST 2022" starttimestamp="1645820509543" timestamp="183549481" timestamp2="183549481">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6297" _type="InsertStringCommand" date="Sun Feb 27 18:20:59 EST 2022" starttimestamp="1645820509543" timestamp="183549597" timestamp2="183549597">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6298" _type="InsertStringCommand" date="Sun Feb 27 18:20:59 EST 2022" starttimestamp="1645820509543" timestamp="183549597" timestamp2="183549597">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6300" _type="InsertStringCommand" date="Sun Feb 27 18:20:59 EST 2022" starttimestamp="1645820509543" timestamp="183549681" timestamp2="183549681">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6301" _type="InsertStringCommand" date="Sun Feb 27 18:20:59 EST 2022" starttimestamp="1645820509543" timestamp="183549681" timestamp2="183549681">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6303" _type="InsertStringCommand" date="Sun Feb 27 18:20:59 EST 2022" starttimestamp="1645820509543" timestamp="183549982" timestamp2="183549982">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6304" _type="InsertStringCommand" date="Sun Feb 27 18:20:59 EST 2022" starttimestamp="1645820509543" timestamp="183549998" timestamp2="183549998">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6306" _type="InsertStringCommand" date="Sun Feb 27 18:21:00 EST 2022" starttimestamp="1645820509543" timestamp="183550530" timestamp2="183550530">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="6307" _type="InsertStringCommand" date="Sun Feb 27 18:21:00 EST 2022" starttimestamp="1645820509543" timestamp="183550546" timestamp2="183550546">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="6309" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:00 EST 2022" starttimestamp="1645820509543" timestamp="183550946" />
  <Command __id="6310" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:00 EST 2022" starttimestamp="1645820509543" timestamp="183550946" />
  <Command __id="6312" _type="InsertStringCommand" date="Sun Feb 27 18:21:00 EST 2022" starttimestamp="1645820509543" timestamp="183551084" timestamp2="183551084">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6313" _type="InsertStringCommand" date="Sun Feb 27 18:21:00 EST 2022" starttimestamp="1645820509543" timestamp="183551084" timestamp2="183551084">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6315" _type="InsertStringCommand" date="Sun Feb 27 18:21:00 EST 2022" starttimestamp="1645820509543" timestamp="183551301" timestamp2="183551301">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="6316" _type="InsertStringCommand" date="Sun Feb 27 18:21:00 EST 2022" starttimestamp="1645820509543" timestamp="183551301" timestamp2="183551301">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="6318" _type="InsertStringCommand" date="Sun Feb 27 18:21:01 EST 2022" starttimestamp="1645820509543" timestamp="183551516" timestamp2="183551516">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6319" _type="InsertStringCommand" date="Sun Feb 27 18:21:01 EST 2022" starttimestamp="1645820509543" timestamp="183551516" timestamp2="183551516">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6321" _type="InsertStringCommand" date="Sun Feb 27 18:21:01 EST 2022" starttimestamp="1645820509543" timestamp="183551717" timestamp2="183551717">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6322" _type="InsertStringCommand" date="Sun Feb 27 18:21:01 EST 2022" starttimestamp="1645820509543" timestamp="183551717" timestamp2="183551717">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6324" _type="InsertStringCommand" date="Sun Feb 27 18:21:01 EST 2022" starttimestamp="1645820509543" timestamp="183551948" timestamp2="183551948">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6325" _type="InsertStringCommand" date="Sun Feb 27 18:21:01 EST 2022" starttimestamp="1645820509543" timestamp="183551948" timestamp2="183551948">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6327" _type="InsertStringCommand" date="Sun Feb 27 18:21:01 EST 2022" starttimestamp="1645820509543" timestamp="183552133" timestamp2="183552133">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6328" _type="InsertStringCommand" date="Sun Feb 27 18:21:01 EST 2022" starttimestamp="1645820509543" timestamp="183552133" timestamp2="183552133">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6330" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:01 EST 2022" starttimestamp="1645820509543" timestamp="183552449" />
  <Command __id="6331" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:01 EST 2022" starttimestamp="1645820509543" timestamp="183552449" />
  <Command __id="6333" _type="InsertStringCommand" date="Sun Feb 27 18:21:02 EST 2022" starttimestamp="1645820509543" timestamp="183552787" timestamp2="183552787">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6334" _type="InsertStringCommand" date="Sun Feb 27 18:21:02 EST 2022" starttimestamp="1645820509543" timestamp="183552787" timestamp2="183552787">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6336" _type="InsertStringCommand" date="Sun Feb 27 18:21:02 EST 2022" starttimestamp="1645820509543" timestamp="183552918" timestamp2="183552918">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6337" _type="InsertStringCommand" date="Sun Feb 27 18:21:02 EST 2022" starttimestamp="1645820509543" timestamp="183552918" timestamp2="183552918">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="6278" _type="Insert" date="Sun Feb 27 18:20:56 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12565" length="1" offset="1826" starttimestamp="1645820509543" timestamp="183547262">
    <text><![CDATA[F]]></text>
  </DocumentChange>
  <DocumentChange __id="6281" _type="Insert" date="Sun Feb 27 18:20:57 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12566" length="1" offset="1827" starttimestamp="1645820509543" timestamp="183547563">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="6284" _type="Delete" date="Sun Feb 27 18:20:57 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12565" endLine="77" length="1" offset="1827" startLine="77" starttimestamp="1645820509543" timestamp="183548041">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="6287" _type="Delete" date="Sun Feb 27 18:20:57 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12564" endLine="77" length="1" offset="1826" startLine="77" starttimestamp="1645820509543" timestamp="183548195">
    <text><![CDATA[F]]></text>
  </DocumentChange>
  <DocumentChange __id="6290" _type="Insert" date="Sun Feb 27 18:20:58 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12565" length="1" offset="1826" starttimestamp="1645820509543" timestamp="183548964">
    <text><![CDATA[F]]></text>
  </DocumentChange>
  <DocumentChange __id="6293" _type="Insert" date="Sun Feb 27 18:20:59 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12566" length="1" offset="1827" starttimestamp="1645820509543" timestamp="183549465">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="6296" _type="Insert" date="Sun Feb 27 18:20:59 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12567" length="1" offset="1828" starttimestamp="1645820509543" timestamp="183549581">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="6299" _type="Insert" date="Sun Feb 27 18:20:59 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12568" length="1" offset="1829" starttimestamp="1645820509543" timestamp="183549681">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="6302" _type="Insert" date="Sun Feb 27 18:20:59 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12569" length="1" offset="1830" starttimestamp="1645820509543" timestamp="183549982">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="6305" _type="Insert" date="Sun Feb 27 18:21:00 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12570" length="1" offset="1831" starttimestamp="1645820509543" timestamp="183550530">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <DocumentChange __id="6308" _type="Delete" date="Sun Feb 27 18:21:00 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12569" endLine="77" length="1" offset="1831" startLine="77" starttimestamp="1645820509543" timestamp="183550946">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <DocumentChange __id="6311" _type="Insert" date="Sun Feb 27 18:21:00 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12570" length="1" offset="1831" starttimestamp="1645820509543" timestamp="183551069">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6314" _type="Insert" date="Sun Feb 27 18:21:00 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12571" length="1" offset="1832" starttimestamp="1645820509543" timestamp="183551285">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <DocumentChange __id="6317" _type="Insert" date="Sun Feb 27 18:21:01 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12572" length="1" offset="1833" starttimestamp="1645820509543" timestamp="183551516">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="6320" _type="Insert" date="Sun Feb 27 18:21:01 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12573" length="1" offset="1834" starttimestamp="1645820509543" timestamp="183551717">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="6323" _type="Insert" date="Sun Feb 27 18:21:01 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12574" length="1" offset="1835" starttimestamp="1645820509543" timestamp="183551948">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="6326" _type="Insert" date="Sun Feb 27 18:21:01 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12575" length="1" offset="1836" starttimestamp="1645820509543" timestamp="183552117">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="6329" _type="Delete" date="Sun Feb 27 18:21:01 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12574" endLine="77" length="1" offset="1836" startLine="77" starttimestamp="1645820509543" timestamp="183552449">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="6332" _type="Insert" date="Sun Feb 27 18:21:02 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12575" length="1" offset="1836" starttimestamp="1645820509543" timestamp="183552787">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="6335" _type="Insert" date="Sun Feb 27 18:21:02 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12576" length="1" offset="1837" starttimestamp="1645820509543" timestamp="183552918">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="6338" _type="Insert" date="Sun Feb 27 18:21:02 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12577" length="1" offset="1838" starttimestamp="1645820509543" timestamp="183553050">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="6341" _type="Insert" date="Sun Feb 27 18:21:02 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12578" length="1" offset="1839" starttimestamp="1645820509543" timestamp="183553320">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="6344" _type="Insert" date="Sun Feb 27 18:21:02 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12579" length="1" offset="1840" starttimestamp="1645820509543" timestamp="183553404">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="6347" _type="Insert" date="Sun Feb 27 18:21:03 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12580" length="1" offset="1841" starttimestamp="1645820509543" timestamp="183553489">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="6339" _type="InsertStringCommand" date="Sun Feb 27 18:21:02 EST 2022" starttimestamp="1645820509543" timestamp="183553050" timestamp2="183553050">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6340" _type="InsertStringCommand" date="Sun Feb 27 18:21:02 EST 2022" starttimestamp="1645820509543" timestamp="183553050" timestamp2="183553050">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6342" _type="InsertStringCommand" date="Sun Feb 27 18:21:02 EST 2022" starttimestamp="1645820509543" timestamp="183553320" timestamp2="183553320">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6343" _type="InsertStringCommand" date="Sun Feb 27 18:21:02 EST 2022" starttimestamp="1645820509543" timestamp="183553320" timestamp2="183553320">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6345" _type="InsertStringCommand" date="Sun Feb 27 18:21:02 EST 2022" starttimestamp="1645820509543" timestamp="183553420" timestamp2="183553420">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6346" _type="InsertStringCommand" date="Sun Feb 27 18:21:02 EST 2022" starttimestamp="1645820509543" timestamp="183553420" timestamp2="183553420">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6348" _type="InsertStringCommand" date="Sun Feb 27 18:21:03 EST 2022" starttimestamp="1645820509543" timestamp="183553505" timestamp2="183553505">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6349" _type="InsertStringCommand" date="Sun Feb 27 18:21:03 EST 2022" starttimestamp="1645820509543" timestamp="183553505" timestamp2="183553505">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6351" _type="InsertStringCommand" date="Sun Feb 27 18:21:03 EST 2022" starttimestamp="1645820509543" timestamp="183553605" timestamp2="183553605">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6352" _type="InsertStringCommand" date="Sun Feb 27 18:21:03 EST 2022" starttimestamp="1645820509543" timestamp="183553605" timestamp2="183553605">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6353" _type="MoveCaretCommand" caretOffset="1843" date="Sun Feb 27 18:21:04 EST 2022" docOffset="1921" starttimestamp="1645820509543" timestamp="183554907" />
  <Command __id="6354" _type="MoveCaretCommand" caretOffset="1843" date="Sun Feb 27 18:21:04 EST 2022" docOffset="1921" starttimestamp="1645820509543" timestamp="183554907" />
  <Command __id="6355" _type="MoveCaretCommand" caretOffset="2258" date="Sun Feb 27 18:21:23 EST 2022" docOffset="2336" starttimestamp="1645820509543" timestamp="183574125" />
  <Command __id="6356" _type="MoveCaretCommand" caretOffset="2258" date="Sun Feb 27 18:21:23 EST 2022" docOffset="2336" starttimestamp="1645820509543" timestamp="183574125" />
  <Command __id="6357" _type="MoveCaretCommand" caretOffset="2245" date="Sun Feb 27 18:21:24 EST 2022" docOffset="2323" starttimestamp="1645820509543" timestamp="183575073" />
  <Command __id="6358" _type="MoveCaretCommand" caretOffset="2245" date="Sun Feb 27 18:21:24 EST 2022" docOffset="2323" starttimestamp="1645820509543" timestamp="183575073" />
  <Command __id="6359" _type="MoveCaretCommand" caretOffset="2237" date="Sun Feb 27 18:21:25 EST 2022" docOffset="2315" starttimestamp="1645820509543" timestamp="183575643" />
  <Command __id="6360" _type="MoveCaretCommand" caretOffset="2237" date="Sun Feb 27 18:21:25 EST 2022" docOffset="2315" starttimestamp="1645820509543" timestamp="183575643" />
  <DocumentChange __id="6350" _type="Insert" date="Sun Feb 27 18:21:03 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11219" docExpressionCount="1104" docLength="12581" length="1" offset="1842" starttimestamp="1645820509543" timestamp="183553573">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="6361" _type="MoveCaretCommand" caretOffset="2345" date="Sun Feb 27 18:21:28 EST 2022" docOffset="2423" starttimestamp="1645820509543" timestamp="183579134" />
  <Command __id="6362" _type="MoveCaretCommand" caretOffset="2345" date="Sun Feb 27 18:21:28 EST 2022" docOffset="2423" starttimestamp="1645820509543" timestamp="183579134" />
  <Command __id="6363" _type="MoveCaretCommand" caretOffset="2338" date="Sun Feb 27 18:21:29 EST 2022" docOffset="2416" starttimestamp="1645820509543" timestamp="183580036" />
  <Command __id="6364" _type="MoveCaretCommand" caretOffset="2338" date="Sun Feb 27 18:21:29 EST 2022" docOffset="2416" starttimestamp="1645820509543" timestamp="183580036" />
  <DocumentChange __id="6365" _type="Insert" date="Sun Feb 27 18:21:30 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11226" docExpressionCount="1104" docLength="12588" length="7" offset="2416" starttimestamp="1645820509543" timestamp="183581054">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <Command __id="6366" _type="InsertStringCommand" date="Sun Feb 27 18:21:30 EST 2022" starttimestamp="1645820509543" timestamp="183581054" timestamp2="183581054">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6367" _type="InsertStringCommand" date="Sun Feb 27 18:21:30 EST 2022" starttimestamp="1645820509543" timestamp="183581054" timestamp2="183581054">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6368" _type="Delete" date="Sun Feb 27 18:21:30 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11225" docExpressionCount="1104" docLength="12587" endLine="100" length="1" offset="2422" startLine="100" starttimestamp="1645820509543" timestamp="183581422">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="6369" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:30 EST 2022" starttimestamp="1645820509543" timestamp="183581422" />
  <Command __id="6370" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:30 EST 2022" starttimestamp="1645820509543" timestamp="183581422" />
  <DocumentChange __id="6371" _type="Insert" date="Sun Feb 27 18:21:31 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11226" docExpressionCount="1105" docLength="12588" length="1" offset="2422" starttimestamp="1645820509543" timestamp="183581739">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="6372" _type="InsertStringCommand" date="Sun Feb 27 18:21:31 EST 2022" starttimestamp="1645820509543" timestamp="183581739" timestamp2="183581739">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="6373" _type="InsertStringCommand" date="Sun Feb 27 18:21:31 EST 2022" starttimestamp="1645820509543" timestamp="183581739" timestamp2="183581739">
    <data><![CDATA[b]]></data>
  </Command>
  <DocumentChange __id="6374" _type="Insert" date="Sun Feb 27 18:21:31 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11227" docExpressionCount="1105" docLength="12589" length="1" offset="2423" starttimestamp="1645820509543" timestamp="183581986">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="6375" _type="InsertStringCommand" date="Sun Feb 27 18:21:31 EST 2022" starttimestamp="1645820509543" timestamp="183581986" timestamp2="183581986">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6376" _type="InsertStringCommand" date="Sun Feb 27 18:21:31 EST 2022" starttimestamp="1645820509543" timestamp="183581986" timestamp2="183581986">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="6377" _type="Insert" date="Sun Feb 27 18:21:31 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11228" docExpressionCount="1105" docLength="12590" length="1" offset="2424" starttimestamp="1645820509543" timestamp="183582118">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="6378" _type="InsertStringCommand" date="Sun Feb 27 18:21:31 EST 2022" starttimestamp="1645820509543" timestamp="183582124" timestamp2="183582124">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6379" _type="InsertStringCommand" date="Sun Feb 27 18:21:31 EST 2022" starttimestamp="1645820509543" timestamp="183582124" timestamp2="183582124">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="6380" _type="Insert" date="Sun Feb 27 18:21:31 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11229" docExpressionCount="1105" docLength="12591" length="1" offset="2425" starttimestamp="1645820509543" timestamp="183582256">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="6381" _type="InsertStringCommand" date="Sun Feb 27 18:21:31 EST 2022" starttimestamp="1645820509543" timestamp="183582256" timestamp2="183582256">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6382" _type="InsertStringCommand" date="Sun Feb 27 18:21:31 EST 2022" starttimestamp="1645820509543" timestamp="183582256" timestamp2="183582256">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="6383" _type="Delete" date="Sun Feb 27 18:21:32 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11228" docExpressionCount="1105" docLength="12590" endLine="100" length="1" offset="2425" startLine="100" starttimestamp="1645820509543" timestamp="183582556">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="6384" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:32 EST 2022" starttimestamp="1645820509543" timestamp="183582556" />
  <Command __id="6385" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:32 EST 2022" starttimestamp="1645820509543" timestamp="183582556" />
  <DocumentChange __id="6386" _type="Delete" date="Sun Feb 27 18:21:32 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11227" docExpressionCount="1105" docLength="12589" endLine="100" length="1" offset="2424" startLine="100" starttimestamp="1645820509543" timestamp="183582761">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="6387" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:32 EST 2022" starttimestamp="1645820509543" timestamp="183582761" />
  <Command __id="6388" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:32 EST 2022" starttimestamp="1645820509543" timestamp="183582761" />
  <DocumentChange __id="6389" _type="Delete" date="Sun Feb 27 18:21:32 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11226" docExpressionCount="1105" docLength="12588" endLine="100" length="1" offset="2423" startLine="100" starttimestamp="1645820509543" timestamp="183582908">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="6390" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:32 EST 2022" starttimestamp="1645820509543" timestamp="183582908" />
  <Command __id="6391" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:32 EST 2022" starttimestamp="1645820509543" timestamp="183582908" />
  <DocumentChange __id="6392" _type="Delete" date="Sun Feb 27 18:21:32 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11225" docExpressionCount="1104" docLength="12587" endLine="100" length="1" offset="2422" startLine="100" starttimestamp="1645820509543" timestamp="183583162">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="6393" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:32 EST 2022" starttimestamp="1645820509543" timestamp="183583162" />
  <Command __id="6394" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:32 EST 2022" starttimestamp="1645820509543" timestamp="183583162" />
  <DocumentChange __id="6395" _type="Replace" date="Sun Feb 27 18:21:32 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11226" docExpressionCount="1104" docLength="12588" endLine="100" insertionLength="5" int_docASTNodeCount="1575" int_docActiveCodeLength="11221" int_docExpressionCount="1104" int_docLength="12583" length="4" offset="2418" startLine="100" starttimestamp="1645820509543" timestamp="183583293">
    <deletedText><![CDATA[				]]></deletedText>
    <insertedText><![CDATA[					]]></insertedText>
  </DocumentChange>
  <Command __id="6396" _type="InsertStringCommand" date="Sun Feb 27 18:21:32 EST 2022" starttimestamp="1645820509543" timestamp="183583324" timestamp2="183583324">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="6397" _type="InsertStringCommand" date="Sun Feb 27 18:21:32 EST 2022" starttimestamp="1645820509543" timestamp="183583324" timestamp2="183583324">
    <data><![CDATA[	]]></data>
  </Command>
  <DocumentChange __id="6398" _type="Insert" date="Sun Feb 27 18:21:33 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11227" docExpressionCount="1105" docLength="12589" length="1" offset="2423" starttimestamp="1645820509543" timestamp="183583794">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="6399" _type="InsertStringCommand" date="Sun Feb 27 18:21:33 EST 2022" starttimestamp="1645820509543" timestamp="183583794" timestamp2="183583794">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="6400" _type="InsertStringCommand" date="Sun Feb 27 18:21:33 EST 2022" starttimestamp="1645820509543" timestamp="183583794" timestamp2="183583794">
    <data><![CDATA[b]]></data>
  </Command>
  <DocumentChange __id="6401" _type="Insert" date="Sun Feb 27 18:21:33 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11228" docExpressionCount="1105" docLength="12590" length="1" offset="2424" starttimestamp="1645820509543" timestamp="183584010">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="6402" _type="InsertStringCommand" date="Sun Feb 27 18:21:33 EST 2022" starttimestamp="1645820509543" timestamp="183584025" timestamp2="183584025">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6403" _type="InsertStringCommand" date="Sun Feb 27 18:21:33 EST 2022" starttimestamp="1645820509543" timestamp="183584025" timestamp2="183584025">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="6404" _type="Insert" date="Sun Feb 27 18:21:33 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11229" docExpressionCount="1105" docLength="12591" length="1" offset="2425" starttimestamp="1645820509543" timestamp="183584148">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="6405" _type="InsertStringCommand" date="Sun Feb 27 18:21:33 EST 2022" starttimestamp="1645820509543" timestamp="183584148" timestamp2="183584148">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6406" _type="InsertStringCommand" date="Sun Feb 27 18:21:33 EST 2022" starttimestamp="1645820509543" timestamp="183584148" timestamp2="183584148">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="6407" _type="Insert" date="Sun Feb 27 18:21:33 EST 2022" docASTNodeCount="1577" docActiveCodeLength="11230" docExpressionCount="1105" docLength="12592" length="1" offset="2426" starttimestamp="1645820509543" timestamp="183584226">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="6408" _type="InsertStringCommand" date="Sun Feb 27 18:21:33 EST 2022" starttimestamp="1645820509543" timestamp="183584226" timestamp2="183584226">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6409" _type="InsertStringCommand" date="Sun Feb 27 18:21:33 EST 2022" starttimestamp="1645820509543" timestamp="183584226" timestamp2="183584226">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="6410" _type="Insert" date="Sun Feb 27 18:21:33 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11231" docExpressionCount="1104" docLength="12593" length="1" offset="2427" starttimestamp="1645820509543" timestamp="183584326">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="6411" _type="InsertStringCommand" date="Sun Feb 27 18:21:33 EST 2022" starttimestamp="1645820509543" timestamp="183584326" timestamp2="183584326">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="6412" _type="InsertStringCommand" date="Sun Feb 27 18:21:33 EST 2022" starttimestamp="1645820509543" timestamp="183584326" timestamp2="183584326">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="6414" _type="InsertStringCommand" date="Sun Feb 27 18:21:34 EST 2022" starttimestamp="1645820509543" timestamp="183584680" timestamp2="183584680">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6415" _type="InsertStringCommand" date="Sun Feb 27 18:21:34 EST 2022" starttimestamp="1645820509543" timestamp="183584680" timestamp2="183584680">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6416" _type="MoveCaretCommand" caretOffset="2364" date="Sun Feb 27 18:21:36 EST 2022" docOffset="2442" starttimestamp="1645820509543" timestamp="183586530" />
  <Command __id="6417" _type="MoveCaretCommand" caretOffset="2364" date="Sun Feb 27 18:21:36 EST 2022" docOffset="2442" starttimestamp="1645820509543" timestamp="183586530" />
  <Command __id="6418" _type="MoveCaretCommand" caretOffset="2287" date="Sun Feb 27 18:21:41 EST 2022" docOffset="2365" starttimestamp="1645820509543" timestamp="183591937" />
  <Command __id="6419" _type="MoveCaretCommand" caretOffset="2287" date="Sun Feb 27 18:21:41 EST 2022" docOffset="2365" starttimestamp="1645820509543" timestamp="183591937" />
  <Command __id="6420" _type="MoveCaretCommand" caretOffset="2228" date="Sun Feb 27 18:21:41 EST 2022" docOffset="2306" starttimestamp="1645820509543" timestamp="183592222" />
  <Command __id="6421" _type="MoveCaretCommand" caretOffset="2228" date="Sun Feb 27 18:21:41 EST 2022" docOffset="2306" starttimestamp="1645820509543" timestamp="183592222" />
  <Command __id="6422" _type="MoveCaretCommand" caretOffset="2118" date="Sun Feb 27 18:21:42 EST 2022" docOffset="2196" starttimestamp="1645820509543" timestamp="183592976" />
  <Command __id="6423" _type="MoveCaretCommand" caretOffset="2118" date="Sun Feb 27 18:21:42 EST 2022" docOffset="2196" starttimestamp="1645820509543" timestamp="183592976" />
  <DocumentChange __id="6413" _type="Insert" date="Sun Feb 27 18:21:34 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11232" docExpressionCount="1104" docLength="12594" length="1" offset="2428" starttimestamp="1645820509543" timestamp="183584680">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="6426" _type="Insert" date="Sun Feb 27 18:21:44 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11242" docExpressionCount="1104" docLength="12604" length="10" offset="1921" starttimestamp="1645820509543" timestamp="183594863">
    <text><![CDATA[
								]]></text>
  </DocumentChange>
  <DocumentChange __id="6429" _type="Delete" date="Sun Feb 27 18:21:44 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11241" docExpressionCount="1104" docLength="12603" endLine="81" length="1" offset="1930" startLine="81" starttimestamp="1645820509543" timestamp="183595326">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="6424" _type="MoveCaretCommand" caretOffset="1843" date="Sun Feb 27 18:21:43 EST 2022" docOffset="1921" starttimestamp="1645820509543" timestamp="183594125" />
  <Command __id="6425" _type="MoveCaretCommand" caretOffset="1843" date="Sun Feb 27 18:21:43 EST 2022" docOffset="1921" starttimestamp="1645820509543" timestamp="183594125" />
  <Command __id="6427" _type="InsertStringCommand" date="Sun Feb 27 18:21:44 EST 2022" starttimestamp="1645820509543" timestamp="183594863" timestamp2="183594863">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6428" _type="InsertStringCommand" date="Sun Feb 27 18:21:44 EST 2022" starttimestamp="1645820509543" timestamp="183594863" timestamp2="183594863">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6430" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:44 EST 2022" starttimestamp="1645820509543" timestamp="183595326" />
  <Command __id="6431" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:44 EST 2022" starttimestamp="1645820509543" timestamp="183595326" />
  <Command __id="6433" _type="InsertStringCommand" date="Sun Feb 27 18:21:45 EST 2022" starttimestamp="1645820509543" timestamp="183596442" timestamp2="183596442">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6434" _type="InsertStringCommand" date="Sun Feb 27 18:21:45 EST 2022" starttimestamp="1645820509543" timestamp="183596442" timestamp2="183596442">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6436" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:46 EST 2022" starttimestamp="1645820509543" timestamp="183597096" />
  <Command __id="6437" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:21:46 EST 2022" starttimestamp="1645820509543" timestamp="183597096" />
  <Command __id="6439" _type="InsertStringCommand" date="Sun Feb 27 18:21:47 EST 2022" starttimestamp="1645820509543" timestamp="183598013" timestamp2="183598013">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6440" _type="InsertStringCommand" date="Sun Feb 27 18:21:47 EST 2022" starttimestamp="1645820509543" timestamp="183598013" timestamp2="183598013">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6442" _type="InsertStringCommand" date="Sun Feb 27 18:21:47 EST 2022" starttimestamp="1645820509543" timestamp="183598166" timestamp2="183598166">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6443" _type="InsertStringCommand" date="Sun Feb 27 18:21:47 EST 2022" starttimestamp="1645820509543" timestamp="183598166" timestamp2="183598166">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6444" _type="MoveCaretCommand" caretOffset="1878" date="Sun Feb 27 18:22:33 EST 2022" docOffset="1956" starttimestamp="1645820509543" timestamp="183643852" />
  <Command __id="6445" _type="MoveCaretCommand" caretOffset="1878" date="Sun Feb 27 18:22:33 EST 2022" docOffset="1956" starttimestamp="1645820509543" timestamp="183643852" />
  <Command __id="6446" _type="SelectTextCommand" caretOffset="1879" date="Sun Feb 27 18:22:33 EST 2022" end="1879" start="1877" starttimestamp="1645820509543" timestamp="183643999" />
  <Command __id="6447" _type="SelectTextCommand" caretOffset="1879" date="Sun Feb 27 18:22:33 EST 2022" end="1879" start="1877" starttimestamp="1645820509543" timestamp="183643999" />
  <Command __id="6448" _type="MoveCaretCommand" caretOffset="2173" date="Sun Feb 27 18:22:33 EST 2022" docOffset="2251" starttimestamp="1645820509543" timestamp="183644432" />
  <Command __id="6449" _type="MoveCaretCommand" caretOffset="2173" date="Sun Feb 27 18:22:33 EST 2022" docOffset="2251" starttimestamp="1645820509543" timestamp="183644432" />
  <Command __id="6450" _type="MoveCaretCommand" caretOffset="2257" date="Sun Feb 27 18:22:34 EST 2022" docOffset="2335" starttimestamp="1645820509543" timestamp="183644817" />
  <Command __id="6451" _type="MoveCaretCommand" caretOffset="2257" date="Sun Feb 27 18:22:34 EST 2022" docOffset="2335" starttimestamp="1645820509543" timestamp="183644817" />
  <Command __id="6452" _type="MoveCaretCommand" caretOffset="2257" date="Sun Feb 27 18:22:34 EST 2022" docOffset="2335" starttimestamp="1645820509543" timestamp="183645217" />
  <Command __id="6453" _type="MoveCaretCommand" caretOffset="2257" date="Sun Feb 27 18:22:34 EST 2022" docOffset="2335" starttimestamp="1645820509543" timestamp="183645217" />
  <DocumentChange __id="6432" _type="Insert" date="Sun Feb 27 18:21:45 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11251" docExpressionCount="1104" docLength="12613" length="10" offset="1930" starttimestamp="1645820509543" timestamp="183596442">
    <text><![CDATA[
								]]></text>
  </DocumentChange>
  <DocumentChange __id="6435" _type="Delete" date="Sun Feb 27 18:21:46 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12612" endLine="82" length="1" offset="1939" startLine="82" starttimestamp="1645820509543" timestamp="183597096">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6438" _type="Insert" date="Sun Feb 27 18:21:47 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11251" docExpressionCount="1104" docLength="12613" length="1" offset="1939" starttimestamp="1645820509543" timestamp="183598013">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="6441" _type="Insert" date="Sun Feb 27 18:21:47 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12614" length="1" offset="1940" starttimestamp="1645820509543" timestamp="183598144">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="6454" _type="MoveCaretCommand" caretOffset="1863" date="Sun Feb 27 18:22:35 EST 2022" docOffset="1941" starttimestamp="1645820509543" timestamp="183646442" />
  <Command __id="6455" _type="MoveCaretCommand" caretOffset="1863" date="Sun Feb 27 18:22:35 EST 2022" docOffset="1941" starttimestamp="1645820509543" timestamp="183646442" />
  <DocumentChange __id="6456" _type="Insert" date="Sun Feb 27 18:22:40 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12615" length="1" offset="1941" starttimestamp="1645820509543" timestamp="183650896">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="6457" _type="InsertStringCommand" date="Sun Feb 27 18:22:40 EST 2022" starttimestamp="1645820509543" timestamp="183650911" timestamp2="183650911">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6458" _type="InsertStringCommand" date="Sun Feb 27 18:22:40 EST 2022" starttimestamp="1645820509543" timestamp="183650911" timestamp2="183650911">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="6459" _type="Insert" date="Sun Feb 27 18:22:41 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12616" length="1" offset="1942" starttimestamp="1645820509543" timestamp="183652029">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <Command __id="6460" _type="InsertStringCommand" date="Sun Feb 27 18:22:41 EST 2022" starttimestamp="1645820509543" timestamp="183652045" timestamp2="183652045">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="6461" _type="InsertStringCommand" date="Sun Feb 27 18:22:41 EST 2022" starttimestamp="1645820509543" timestamp="183652045" timestamp2="183652045">
    <data><![CDATA[M]]></data>
  </Command>
  <DocumentChange __id="6462" _type="Insert" date="Sun Feb 27 18:22:41 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12617" length="1" offset="1943" starttimestamp="1645820509543" timestamp="183652299">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="6463" _type="InsertStringCommand" date="Sun Feb 27 18:22:41 EST 2022" starttimestamp="1645820509543" timestamp="183652299" timestamp2="183652299">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6464" _type="InsertStringCommand" date="Sun Feb 27 18:22:41 EST 2022" starttimestamp="1645820509543" timestamp="183652299" timestamp2="183652299">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="6465" _type="Insert" date="Sun Feb 27 18:22:41 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12618" length="1" offset="1944" starttimestamp="1645820509543" timestamp="183652452">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <Command __id="6466" _type="InsertStringCommand" date="Sun Feb 27 18:22:41 EST 2022" starttimestamp="1645820509543" timestamp="183652452" timestamp2="183652452">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="6467" _type="InsertStringCommand" date="Sun Feb 27 18:22:41 EST 2022" starttimestamp="1645820509543" timestamp="183652452" timestamp2="183652452">
    <data><![CDATA[h]]></data>
  </Command>
  <DocumentChange __id="6468" _type="Insert" date="Sun Feb 27 18:22:42 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12619" length="1" offset="1945" starttimestamp="1645820509543" timestamp="183652700">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="6469" _type="InsertStringCommand" date="Sun Feb 27 18:22:42 EST 2022" starttimestamp="1645820509543" timestamp="183652715" timestamp2="183652715">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6470" _type="InsertStringCommand" date="Sun Feb 27 18:22:42 EST 2022" starttimestamp="1645820509543" timestamp="183652715" timestamp2="183652715">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="6471" _type="Delete" date="Sun Feb 27 18:22:42 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12618" endLine="82" length="1" offset="1945" startLine="82" starttimestamp="1645820509543" timestamp="183653032">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="6472" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:42 EST 2022" starttimestamp="1645820509543" timestamp="183653032" />
  <Command __id="6473" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:42 EST 2022" starttimestamp="1645820509543" timestamp="183653032" />
  <DocumentChange __id="6474" _type="Delete" date="Sun Feb 27 18:22:42 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12617" endLine="82" length="1" offset="1944" startLine="82" starttimestamp="1645820509543" timestamp="183653170">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <Command __id="6475" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:42 EST 2022" starttimestamp="1645820509543" timestamp="183653170" />
  <Command __id="6476" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:42 EST 2022" starttimestamp="1645820509543" timestamp="183653170" />
  <DocumentChange __id="6477" _type="Insert" date="Sun Feb 27 18:22:42 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12618" length="1" offset="1944" starttimestamp="1645820509543" timestamp="183653217">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="6478" _type="InsertStringCommand" date="Sun Feb 27 18:22:42 EST 2022" starttimestamp="1645820509543" timestamp="183653217" timestamp2="183653217">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6479" _type="InsertStringCommand" date="Sun Feb 27 18:22:42 EST 2022" starttimestamp="1645820509543" timestamp="183653217" timestamp2="183653217">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="6480" _type="Insert" date="Sun Feb 27 18:22:42 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12619" length="1" offset="1945" starttimestamp="1645820509543" timestamp="183653348">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <Command __id="6481" _type="InsertStringCommand" date="Sun Feb 27 18:22:42 EST 2022" starttimestamp="1645820509543" timestamp="183653348" timestamp2="183653348">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="6482" _type="InsertStringCommand" date="Sun Feb 27 18:22:42 EST 2022" starttimestamp="1645820509543" timestamp="183653355" timestamp2="183653355">
    <data><![CDATA[h]]></data>
  </Command>
  <DocumentChange __id="6483" _type="Insert" date="Sun Feb 27 18:22:42 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12620" length="1" offset="1946" starttimestamp="1645820509543" timestamp="183653454">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="6484" _type="InsertStringCommand" date="Sun Feb 27 18:22:42 EST 2022" starttimestamp="1645820509543" timestamp="183653454" timestamp2="183653454">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6485" _type="InsertStringCommand" date="Sun Feb 27 18:22:42 EST 2022" starttimestamp="1645820509543" timestamp="183653454" timestamp2="183653454">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="6486" _type="Insert" date="Sun Feb 27 18:22:43 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12621" length="1" offset="1947" starttimestamp="1645820509543" timestamp="183653554">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="6487" _type="InsertStringCommand" date="Sun Feb 27 18:22:43 EST 2022" starttimestamp="1645820509543" timestamp="183653570" timestamp2="183653570">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6488" _type="InsertStringCommand" date="Sun Feb 27 18:22:43 EST 2022" starttimestamp="1645820509543" timestamp="183653570" timestamp2="183653570">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="6489" _type="Insert" date="Sun Feb 27 18:22:43 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12622" length="1" offset="1948" starttimestamp="1645820509543" timestamp="183653933">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="6490" _type="InsertStringCommand" date="Sun Feb 27 18:22:43 EST 2022" starttimestamp="1645820509543" timestamp="183653948" timestamp2="183653948">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="6491" _type="InsertStringCommand" date="Sun Feb 27 18:22:43 EST 2022" starttimestamp="1645820509543" timestamp="183653955" timestamp2="183653955">
    <data><![CDATA[D]]></data>
  </Command>
  <DocumentChange __id="6492" _type="Delete" date="Sun Feb 27 18:22:43 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12621" endLine="82" length="1" offset="1948" startLine="82" starttimestamp="1645820509543" timestamp="183654202">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="6493" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:43 EST 2022" starttimestamp="1645820509543" timestamp="183654202" />
  <Command __id="6494" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:43 EST 2022" starttimestamp="1645820509543" timestamp="183654202" />
  <DocumentChange __id="6495" _type="Insert" date="Sun Feb 27 18:22:43 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12622" length="1" offset="1948" starttimestamp="1645820509543" timestamp="183654318">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="6496" _type="InsertStringCommand" date="Sun Feb 27 18:22:43 EST 2022" starttimestamp="1645820509543" timestamp="183654334" timestamp2="183654334">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6497" _type="InsertStringCommand" date="Sun Feb 27 18:22:43 EST 2022" starttimestamp="1645820509543" timestamp="183654334" timestamp2="183654334">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="6498" _type="Insert" date="Sun Feb 27 18:22:44 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12623" length="1" offset="1949" starttimestamp="1645820509543" timestamp="183654519">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="6499" _type="InsertStringCommand" date="Sun Feb 27 18:22:44 EST 2022" starttimestamp="1645820509543" timestamp="183654534" timestamp2="183654534">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6500" _type="InsertStringCommand" date="Sun Feb 27 18:22:44 EST 2022" starttimestamp="1645820509543" timestamp="183654534" timestamp2="183654534">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="6501" _type="Insert" date="Sun Feb 27 18:22:44 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12624" length="1" offset="1950" starttimestamp="1645820509543" timestamp="183654804">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="6502" _type="InsertStringCommand" date="Sun Feb 27 18:22:44 EST 2022" starttimestamp="1645820509543" timestamp="183654820" timestamp2="183654820">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="6503" _type="InsertStringCommand" date="Sun Feb 27 18:22:44 EST 2022" starttimestamp="1645820509543" timestamp="183654820" timestamp2="183654820">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="6504" _type="Delete" date="Sun Feb 27 18:22:44 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12623" endLine="82" length="1" offset="1950" startLine="82" starttimestamp="1645820509543" timestamp="183655158">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="6505" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:44 EST 2022" starttimestamp="1645820509543" timestamp="183655173" />
  <Command __id="6506" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:44 EST 2022" starttimestamp="1645820509543" timestamp="183655173" />
  <DocumentChange __id="6507" _type="Delete" date="Sun Feb 27 18:22:44 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12622" endLine="82" length="1" offset="1949" startLine="82" starttimestamp="1645820509543" timestamp="183655321">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="6508" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:44 EST 2022" starttimestamp="1645820509543" timestamp="183655321" />
  <Command __id="6509" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:44 EST 2022" starttimestamp="1645820509543" timestamp="183655336" />
  <DocumentChange __id="6510" _type="Insert" date="Sun Feb 27 18:22:45 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12623" length="1" offset="1949" starttimestamp="1645820509543" timestamp="183655459">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="6511" _type="InsertStringCommand" date="Sun Feb 27 18:22:45 EST 2022" starttimestamp="1645820509543" timestamp="183655459" timestamp2="183655459">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="6512" _type="InsertStringCommand" date="Sun Feb 27 18:22:45 EST 2022" starttimestamp="1645820509543" timestamp="183655459" timestamp2="183655459">
    <data><![CDATA[D]]></data>
  </Command>
  <DocumentChange __id="6513" _type="Insert" date="Sun Feb 27 18:22:45 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12624" length="1" offset="1950" starttimestamp="1645820509543" timestamp="183655837">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="6514" _type="InsertStringCommand" date="Sun Feb 27 18:22:45 EST 2022" starttimestamp="1645820509543" timestamp="183655837" timestamp2="183655837">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6515" _type="InsertStringCommand" date="Sun Feb 27 18:22:45 EST 2022" starttimestamp="1645820509543" timestamp="183655837" timestamp2="183655837">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="6516" _type="Insert" date="Sun Feb 27 18:22:45 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12625" length="1" offset="1951" starttimestamp="1645820509543" timestamp="183656059">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="6517" _type="InsertStringCommand" date="Sun Feb 27 18:22:45 EST 2022" starttimestamp="1645820509543" timestamp="183656059" timestamp2="183656059">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6518" _type="InsertStringCommand" date="Sun Feb 27 18:22:45 EST 2022" starttimestamp="1645820509543" timestamp="183656059" timestamp2="183656059">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="6519" _type="Insert" date="Sun Feb 27 18:22:45 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12626" length="1" offset="1952" starttimestamp="1645820509543" timestamp="183656137">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="6520" _type="InsertStringCommand" date="Sun Feb 27 18:22:45 EST 2022" starttimestamp="1645820509543" timestamp="183656137" timestamp2="183656137">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6521" _type="InsertStringCommand" date="Sun Feb 27 18:22:45 EST 2022" starttimestamp="1645820509543" timestamp="183656137" timestamp2="183656137">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="6522" _type="Insert" date="Sun Feb 27 18:22:45 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12627" length="1" offset="1953" starttimestamp="1645820509543" timestamp="183656321">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="6523" _type="InsertStringCommand" date="Sun Feb 27 18:22:45 EST 2022" starttimestamp="1645820509543" timestamp="183656321" timestamp2="183656321">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6524" _type="InsertStringCommand" date="Sun Feb 27 18:22:45 EST 2022" starttimestamp="1645820509543" timestamp="183656321" timestamp2="183656321">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="6525" _type="Insert" date="Sun Feb 27 18:22:46 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12628" length="1" offset="1954" starttimestamp="1645820509543" timestamp="183656709">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="6526" _type="InsertStringCommand" date="Sun Feb 27 18:22:46 EST 2022" starttimestamp="1645820509543" timestamp="183656709" timestamp2="183656709">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6527" _type="InsertStringCommand" date="Sun Feb 27 18:22:46 EST 2022" starttimestamp="1645820509543" timestamp="183656709" timestamp2="183656709">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="6528" _type="Insert" date="Sun Feb 27 18:22:46 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12629" length="1" offset="1955" starttimestamp="1645820509543" timestamp="183656825">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="6529" _type="InsertStringCommand" date="Sun Feb 27 18:22:46 EST 2022" starttimestamp="1645820509543" timestamp="183656832" timestamp2="183656832">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6530" _type="InsertStringCommand" date="Sun Feb 27 18:22:46 EST 2022" starttimestamp="1645820509543" timestamp="183656832" timestamp2="183656832">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="6531" _type="Insert" date="Sun Feb 27 18:22:46 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12630" length="1" offset="1956" starttimestamp="1645820509543" timestamp="183657279">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="6532" _type="InsertStringCommand" date="Sun Feb 27 18:22:46 EST 2022" starttimestamp="1645820509543" timestamp="183657279" timestamp2="183657279">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6533" _type="InsertStringCommand" date="Sun Feb 27 18:22:46 EST 2022" starttimestamp="1645820509543" timestamp="183657279" timestamp2="183657279">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="6534" _type="Insert" date="Sun Feb 27 18:22:46 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12631" length="1" offset="1957" starttimestamp="1645820509543" timestamp="183657364">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="6535" _type="InsertStringCommand" date="Sun Feb 27 18:22:46 EST 2022" starttimestamp="1645820509543" timestamp="183657364" timestamp2="183657364">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6536" _type="InsertStringCommand" date="Sun Feb 27 18:22:46 EST 2022" starttimestamp="1645820509543" timestamp="183657364" timestamp2="183657364">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="6537" _type="Insert" date="Sun Feb 27 18:22:46 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12632" length="1" offset="1958" starttimestamp="1645820509543" timestamp="183657449">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="6538" _type="InsertStringCommand" date="Sun Feb 27 18:22:47 EST 2022" starttimestamp="1645820509543" timestamp="183657464" timestamp2="183657464">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6539" _type="InsertStringCommand" date="Sun Feb 27 18:22:47 EST 2022" starttimestamp="1645820509543" timestamp="183657464" timestamp2="183657464">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="6540" _type="Insert" date="Sun Feb 27 18:22:47 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11250" docExpressionCount="1104" docLength="12633" length="1" offset="1959" starttimestamp="1645820509543" timestamp="183657533">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="6541" _type="InsertStringCommand" date="Sun Feb 27 18:22:47 EST 2022" starttimestamp="1645820509543" timestamp="183657533" timestamp2="183657533">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6542" _type="InsertStringCommand" date="Sun Feb 27 18:22:47 EST 2022" starttimestamp="1645820509543" timestamp="183657533" timestamp2="183657533">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="6543" _type="Insert" date="Sun Feb 27 18:22:47 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11260" docExpressionCount="1104" docLength="12643" length="10" offset="1960" starttimestamp="1645820509543" timestamp="183658081">
    <text><![CDATA[
								]]></text>
  </DocumentChange>
  <Command __id="6544" _type="InsertStringCommand" date="Sun Feb 27 18:22:47 EST 2022" starttimestamp="1645820509543" timestamp="183658096" timestamp2="183658096">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6545" _type="InsertStringCommand" date="Sun Feb 27 18:22:47 EST 2022" starttimestamp="1645820509543" timestamp="183658096" timestamp2="183658096">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6546" _type="Delete" date="Sun Feb 27 18:22:48 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11259" docExpressionCount="1104" docLength="12642" endLine="83" length="1" offset="1969" startLine="83" starttimestamp="1645820509543" timestamp="183658627">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="6547" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:48 EST 2022" starttimestamp="1645820509543" timestamp="183658634" />
  <Command __id="6548" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:48 EST 2022" starttimestamp="1645820509543" timestamp="183658634" />
  <DocumentChange __id="6549" _type="Insert" date="Sun Feb 27 18:22:48 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11260" docExpressionCount="1105" docLength="12643" length="1" offset="1969" starttimestamp="1645820509543" timestamp="183658749">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="6550" _type="InsertStringCommand" date="Sun Feb 27 18:22:48 EST 2022" starttimestamp="1645820509543" timestamp="183658765" timestamp2="183658765">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6551" _type="InsertStringCommand" date="Sun Feb 27 18:22:48 EST 2022" starttimestamp="1645820509543" timestamp="183658765" timestamp2="183658765">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="6552" _type="Insert" date="Sun Feb 27 18:22:48 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11261" docExpressionCount="1105" docLength="12644" length="1" offset="1970" starttimestamp="1645820509543" timestamp="183658881">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="6553" _type="InsertStringCommand" date="Sun Feb 27 18:22:48 EST 2022" starttimestamp="1645820509543" timestamp="183658881" timestamp2="183658881">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6554" _type="InsertStringCommand" date="Sun Feb 27 18:22:48 EST 2022" starttimestamp="1645820509543" timestamp="183658881" timestamp2="183658881">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="6555" _type="Insert" date="Sun Feb 27 18:22:48 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11262" docExpressionCount="1105" docLength="12645" length="1" offset="1971" starttimestamp="1645820509543" timestamp="183659050">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="6556" _type="InsertStringCommand" date="Sun Feb 27 18:22:48 EST 2022" starttimestamp="1645820509543" timestamp="183659066" timestamp2="183659066">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6557" _type="InsertStringCommand" date="Sun Feb 27 18:22:48 EST 2022" starttimestamp="1645820509543" timestamp="183659066" timestamp2="183659066">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="6558" _type="Replace" date="Sun Feb 27 18:22:48 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11263" docExpressionCount="1104" docLength="12646" endLine="83" insertionLength="11" int_docASTNodeCount="1576" int_docActiveCodeLength="11252" int_docExpressionCount="1104" int_docLength="12635" length="10" offset="1962" startLine="83" starttimestamp="1645820509543" timestamp="183659150">
    <deletedText><![CDATA[							cas]]></deletedText>
    <insertedText><![CDATA[							case]]></insertedText>
  </DocumentChange>
  <Command __id="6559" _type="InsertStringCommand" date="Sun Feb 27 18:22:48 EST 2022" starttimestamp="1645820509543" timestamp="183659166" timestamp2="183659166">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6560" _type="InsertStringCommand" date="Sun Feb 27 18:22:48 EST 2022" starttimestamp="1645820509543" timestamp="183659166" timestamp2="183659166">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="6561" _type="Insert" date="Sun Feb 27 18:22:48 EST 2022" docASTNodeCount="1576" docActiveCodeLength="11264" docExpressionCount="1104" docLength="12647" length="1" offset="1973" starttimestamp="1645820509543" timestamp="183659266">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="6562" _type="InsertStringCommand" date="Sun Feb 27 18:22:48 EST 2022" starttimestamp="1645820509543" timestamp="183659281" timestamp2="183659281">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6563" _type="InsertStringCommand" date="Sun Feb 27 18:22:48 EST 2022" starttimestamp="1645820509543" timestamp="183659281" timestamp2="183659281">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="6564" _type="Insert" date="Sun Feb 27 18:22:49 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11265" docExpressionCount="1105" docLength="12648" length="1" offset="1974" starttimestamp="1645820509543" timestamp="183659866">
    <text><![CDATA[L]]></text>
  </DocumentChange>
  <Command __id="6565" _type="InsertStringCommand" date="Sun Feb 27 18:22:49 EST 2022" starttimestamp="1645820509543" timestamp="183659881" timestamp2="183659881">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="6566" _type="InsertStringCommand" date="Sun Feb 27 18:22:49 EST 2022" starttimestamp="1645820509543" timestamp="183659881" timestamp2="183659881">
    <data><![CDATA[L]]></data>
  </Command>
  <DocumentChange __id="6567" _type="Insert" date="Sun Feb 27 18:22:49 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11266" docExpressionCount="1105" docLength="12649" length="1" offset="1975" starttimestamp="1645820509543" timestamp="183660182">
    <text><![CDATA[P]]></text>
  </DocumentChange>
  <Command __id="6568" _type="InsertStringCommand" date="Sun Feb 27 18:22:49 EST 2022" starttimestamp="1645820509543" timestamp="183660182" timestamp2="183660182">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="6569" _type="InsertStringCommand" date="Sun Feb 27 18:22:49 EST 2022" starttimestamp="1645820509543" timestamp="183660182" timestamp2="183660182">
    <data><![CDATA[P]]></data>
  </Command>
  <DocumentChange __id="6570" _type="Insert" date="Sun Feb 27 18:22:50 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11267" docExpressionCount="1105" docLength="12650" length="1" offset="1976" starttimestamp="1645820509543" timestamp="183660514">
    <text><![CDATA[A]]></text>
  </DocumentChange>
  <Command __id="6571" _type="InsertStringCommand" date="Sun Feb 27 18:22:50 EST 2022" starttimestamp="1645820509543" timestamp="183660530" timestamp2="183660530">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="6572" _type="InsertStringCommand" date="Sun Feb 27 18:22:50 EST 2022" starttimestamp="1645820509543" timestamp="183660530" timestamp2="183660530">
    <data><![CDATA[A]]></data>
  </Command>
  <DocumentChange __id="6573" _type="Insert" date="Sun Feb 27 18:22:50 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11268" docExpressionCount="1105" docLength="12651" length="1" offset="1977" starttimestamp="1645820509543" timestamp="183660914">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <Command __id="6574" _type="InsertStringCommand" date="Sun Feb 27 18:22:50 EST 2022" starttimestamp="1645820509543" timestamp="183660930" timestamp2="183660930">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="6575" _type="InsertStringCommand" date="Sun Feb 27 18:22:50 EST 2022" starttimestamp="1645820509543" timestamp="183660930" timestamp2="183660930">
    <data><![CDATA[R]]></data>
  </Command>
  <DocumentChange __id="6576" _type="Insert" date="Sun Feb 27 18:22:50 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11269" docExpressionCount="1105" docLength="12652" length="1" offset="1978" starttimestamp="1645820509543" timestamp="183660999">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="6577" _type="InsertStringCommand" date="Sun Feb 27 18:22:50 EST 2022" starttimestamp="1645820509543" timestamp="183660999" timestamp2="183660999">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="6578" _type="InsertStringCommand" date="Sun Feb 27 18:22:50 EST 2022" starttimestamp="1645820509543" timestamp="183660999" timestamp2="183660999">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="6579" _type="Insert" date="Sun Feb 27 18:22:50 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11270" docExpressionCount="1105" docLength="12653" length="1" offset="1979" starttimestamp="1645820509543" timestamp="183661137">
    <text><![CDATA[N]]></text>
  </DocumentChange>
  <Command __id="6580" _type="InsertStringCommand" date="Sun Feb 27 18:22:50 EST 2022" starttimestamp="1645820509543" timestamp="183661152" timestamp2="183661152">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="6581" _type="InsertStringCommand" date="Sun Feb 27 18:22:50 EST 2022" starttimestamp="1645820509543" timestamp="183661152" timestamp2="183661152">
    <data><![CDATA[N]]></data>
  </Command>
  <DocumentChange __id="6582" _type="Insert" date="Sun Feb 27 18:22:51 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11271" docExpressionCount="1105" docLength="12654" length="1" offset="1980" starttimestamp="1645820509543" timestamp="183661537">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <Command __id="6583" _type="InsertStringCommand" date="Sun Feb 27 18:22:51 EST 2022" starttimestamp="1645820509543" timestamp="183661537" timestamp2="183661537">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="6584" _type="InsertStringCommand" date="Sun Feb 27 18:22:51 EST 2022" starttimestamp="1645820509543" timestamp="183661537" timestamp2="183661537">
    <data><![CDATA[:]]></data>
  </Command>
  <DocumentChange __id="6585" _type="Insert" date="Sun Feb 27 18:22:51 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11281" docExpressionCount="1105" docLength="12664" length="10" offset="1981" starttimestamp="1645820509543" timestamp="183661985">
    <text><![CDATA[
								]]></text>
  </DocumentChange>
  <Command __id="6586" _type="InsertStringCommand" date="Sun Feb 27 18:22:51 EST 2022" starttimestamp="1645820509543" timestamp="183662001" timestamp2="183662001">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6587" _type="InsertStringCommand" date="Sun Feb 27 18:22:51 EST 2022" starttimestamp="1645820509543" timestamp="183662001" timestamp2="183662001">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6588" _type="Insert" date="Sun Feb 27 18:22:55 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11282" docExpressionCount="1106" docLength="12665" length="1" offset="1991" starttimestamp="1645820509543" timestamp="183665789">
    <text><![CDATA[A]]></text>
  </DocumentChange>
  <Command __id="6589" _type="InsertStringCommand" date="Sun Feb 27 18:22:55 EST 2022" starttimestamp="1645820509543" timestamp="183665789" timestamp2="183665789">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="6590" _type="InsertStringCommand" date="Sun Feb 27 18:22:55 EST 2022" starttimestamp="1645820509543" timestamp="183665789" timestamp2="183665789">
    <data><![CDATA[A]]></data>
  </Command>
  <DocumentChange __id="6591" _type="Insert" date="Sun Feb 27 18:22:55 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11283" docExpressionCount="1106" docLength="12666" length="1" offset="1992" starttimestamp="1645820509543" timestamp="183665989">
    <text><![CDATA[C]]></text>
  </DocumentChange>
  <Command __id="6592" _type="InsertStringCommand" date="Sun Feb 27 18:22:55 EST 2022" starttimestamp="1645820509543" timestamp="183665989" timestamp2="183665989">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="6593" _type="InsertStringCommand" date="Sun Feb 27 18:22:55 EST 2022" starttimestamp="1645820509543" timestamp="183665989" timestamp2="183665989">
    <data><![CDATA[C]]></data>
  </Command>
  <DocumentChange __id="6594" _type="Delete" date="Sun Feb 27 18:22:55 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11282" docExpressionCount="1106" docLength="12665" endLine="84" length="1" offset="1992" startLine="84" starttimestamp="1645820509543" timestamp="183666189">
    <text><![CDATA[C]]></text>
  </DocumentChange>
  <Command __id="6595" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:55 EST 2022" starttimestamp="1645820509543" timestamp="183666189" />
  <Command __id="6596" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:55 EST 2022" starttimestamp="1645820509543" timestamp="183666189" />
  <DocumentChange __id="6597" _type="Delete" date="Sun Feb 27 18:22:56 EST 2022" docASTNodeCount="1578" docActiveCodeLength="11281" docExpressionCount="1105" docLength="12664" endLine="84" length="1" offset="1991" startLine="84" starttimestamp="1645820509543" timestamp="183666474">
    <text><![CDATA[A]]></text>
  </DocumentChange>
  <Command __id="6598" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:56 EST 2022" starttimestamp="1645820509543" timestamp="183666474" />
  <Command __id="6599" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:56 EST 2022" starttimestamp="1645820509543" timestamp="183666489" />
  <DocumentChange __id="6600" _type="Insert" date="Sun Feb 27 18:22:56 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11282" docExpressionCount="1106" docLength="12665" length="1" offset="1991" starttimestamp="1645820509543" timestamp="183666605">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="6601" _type="InsertStringCommand" date="Sun Feb 27 18:22:56 EST 2022" starttimestamp="1645820509543" timestamp="183666605" timestamp2="183666605">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6602" _type="InsertStringCommand" date="Sun Feb 27 18:22:56 EST 2022" starttimestamp="1645820509543" timestamp="183666605" timestamp2="183666605">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="6603" _type="Insert" date="Sun Feb 27 18:22:56 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11283" docExpressionCount="1106" docLength="12666" length="1" offset="1992" starttimestamp="1645820509543" timestamp="183666759">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="6604" _type="InsertStringCommand" date="Sun Feb 27 18:22:56 EST 2022" starttimestamp="1645820509543" timestamp="183666759" timestamp2="183666759">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6605" _type="InsertStringCommand" date="Sun Feb 27 18:22:56 EST 2022" starttimestamp="1645820509543" timestamp="183666759" timestamp2="183666759">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="6606" _type="Insert" date="Sun Feb 27 18:22:56 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11284" docExpressionCount="1106" docLength="12667" length="1" offset="1993" starttimestamp="1645820509543" timestamp="183666937">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="6607" _type="InsertStringCommand" date="Sun Feb 27 18:22:56 EST 2022" starttimestamp="1645820509543" timestamp="183666937" timestamp2="183666937">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6608" _type="InsertStringCommand" date="Sun Feb 27 18:22:56 EST 2022" starttimestamp="1645820509543" timestamp="183666937" timestamp2="183666937">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="6609" _type="Insert" date="Sun Feb 27 18:22:56 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11285" docExpressionCount="1106" docLength="12668" length="1" offset="1994" starttimestamp="1645820509543" timestamp="183667175">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="6610" _type="InsertStringCommand" date="Sun Feb 27 18:22:56 EST 2022" starttimestamp="1645820509543" timestamp="183667175" timestamp2="183667175">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6611" _type="InsertStringCommand" date="Sun Feb 27 18:22:56 EST 2022" starttimestamp="1645820509543" timestamp="183667175" timestamp2="183667175">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="6612" _type="Insert" date="Sun Feb 27 18:22:56 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11286" docExpressionCount="1106" docLength="12669" length="1" offset="1995" starttimestamp="1645820509543" timestamp="183667444">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="6613" _type="InsertStringCommand" date="Sun Feb 27 18:22:57 EST 2022" starttimestamp="1645820509543" timestamp="183667460" timestamp2="183667460">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="6614" _type="InsertStringCommand" date="Sun Feb 27 18:22:57 EST 2022" starttimestamp="1645820509543" timestamp="183667460" timestamp2="183667460">
    <data><![CDATA[p]]></data>
  </Command>
  <DocumentChange __id="6615" _type="Delete" date="Sun Feb 27 18:22:58 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11285" docExpressionCount="1106" docLength="12668" endLine="84" length="1" offset="1995" startLine="84" starttimestamp="1645820509543" timestamp="183669178">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="6616" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:58 EST 2022" starttimestamp="1645820509543" timestamp="183669178" />
  <Command __id="6617" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:58 EST 2022" starttimestamp="1645820509543" timestamp="183669178" />
  <DocumentChange __id="6618" _type="Delete" date="Sun Feb 27 18:22:58 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11284" docExpressionCount="1106" docLength="12667" endLine="84" length="1" offset="1994" startLine="84" starttimestamp="1645820509543" timestamp="183669363">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="6619" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:58 EST 2022" starttimestamp="1645820509543" timestamp="183669363" />
  <Command __id="6620" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:58 EST 2022" starttimestamp="1645820509543" timestamp="183669363" />
  <DocumentChange __id="6621" _type="Delete" date="Sun Feb 27 18:22:59 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11283" docExpressionCount="1106" docLength="12666" endLine="84" length="1" offset="1993" startLine="84" starttimestamp="1645820509543" timestamp="183669525">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="6622" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:59 EST 2022" starttimestamp="1645820509543" timestamp="183669525" />
  <Command __id="6623" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:22:59 EST 2022" starttimestamp="1645820509543" timestamp="183669525" />
  <DocumentChange __id="6624" _type="Insert" date="Sun Feb 27 18:22:59 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11284" docExpressionCount="1106" docLength="12667" length="1" offset="1993" starttimestamp="1645820509543" timestamp="183670126">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="6625" _type="InsertStringCommand" date="Sun Feb 27 18:22:59 EST 2022" starttimestamp="1645820509543" timestamp="183670126" timestamp2="183670126">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6626" _type="InsertStringCommand" date="Sun Feb 27 18:22:59 EST 2022" starttimestamp="1645820509543" timestamp="183670126" timestamp2="183670126">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="6627" _type="Insert" date="Sun Feb 27 18:22:59 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11285" docExpressionCount="1106" docLength="12668" length="1" offset="1994" starttimestamp="1645820509543" timestamp="183670380">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="6628" _type="InsertStringCommand" date="Sun Feb 27 18:22:59 EST 2022" starttimestamp="1645820509543" timestamp="183670380" timestamp2="183670380">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6629" _type="InsertStringCommand" date="Sun Feb 27 18:22:59 EST 2022" starttimestamp="1645820509543" timestamp="183670380" timestamp2="183670380">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="6630" _type="Insert" date="Sun Feb 27 18:22:59 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11286" docExpressionCount="1106" docLength="12669" length="1" offset="1995" starttimestamp="1645820509543" timestamp="183670448">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="6631" _type="InsertStringCommand" date="Sun Feb 27 18:23:00 EST 2022" starttimestamp="1645820509543" timestamp="183670464" timestamp2="183670464">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="6632" _type="InsertStringCommand" date="Sun Feb 27 18:23:00 EST 2022" starttimestamp="1645820509543" timestamp="183670464" timestamp2="183670464">
    <data><![CDATA[p]]></data>
  </Command>
  <DocumentChange __id="6633" _type="Insert" date="Sun Feb 27 18:23:00 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11287" docExpressionCount="1106" docLength="12670" length="1" offset="1996" starttimestamp="1645820509543" timestamp="183670595">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="6634" _type="InsertStringCommand" date="Sun Feb 27 18:23:00 EST 2022" starttimestamp="1645820509543" timestamp="183670611" timestamp2="183670611">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6635" _type="InsertStringCommand" date="Sun Feb 27 18:23:00 EST 2022" starttimestamp="1645820509543" timestamp="183670611" timestamp2="183670611">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="6636" _type="Insert" date="Sun Feb 27 18:23:00 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11288" docExpressionCount="1106" docLength="12671" length="1" offset="1997" starttimestamp="1645820509543" timestamp="183671112">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <Command __id="6637" _type="InsertStringCommand" date="Sun Feb 27 18:23:00 EST 2022" starttimestamp="1645820509543" timestamp="183671112" timestamp2="183671112">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="6638" _type="InsertStringCommand" date="Sun Feb 27 18:23:00 EST 2022" starttimestamp="1645820509543" timestamp="183671112" timestamp2="183671112">
    <data><![CDATA[I]]></data>
  </Command>
  <DocumentChange __id="6639" _type="Insert" date="Sun Feb 27 18:23:00 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11289" docExpressionCount="1106" docLength="12672" length="1" offset="1998" starttimestamp="1645820509543" timestamp="183671366">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <Command __id="6640" _type="InsertStringCommand" date="Sun Feb 27 18:23:00 EST 2022" starttimestamp="1645820509543" timestamp="183671366" timestamp2="183671366">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="6641" _type="InsertStringCommand" date="Sun Feb 27 18:23:00 EST 2022" starttimestamp="1645820509543" timestamp="183671366" timestamp2="183671366">
    <data><![CDATA[T]]></data>
  </Command>
  <DocumentChange __id="6642" _type="Delete" date="Sun Feb 27 18:23:01 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11288" docExpressionCount="1106" docLength="12671" endLine="84" length="1" offset="1998" startLine="84" starttimestamp="1645820509543" timestamp="183671597">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <Command __id="6643" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:23:01 EST 2022" starttimestamp="1645820509543" timestamp="183671597" />
  <Command __id="6644" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:23:01 EST 2022" starttimestamp="1645820509543" timestamp="183671597" />
  <DocumentChange __id="6645" _type="Insert" date="Sun Feb 27 18:23:01 EST 2022" docASTNodeCount="1580" docActiveCodeLength="11289" docExpressionCount="1106" docLength="12672" length="1" offset="1998" starttimestamp="1645820509543" timestamp="183671867">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="6646" _type="InsertStringCommand" date="Sun Feb 27 18:23:01 EST 2022" starttimestamp="1645820509543" timestamp="183671867" timestamp2="183671867">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6647" _type="InsertStringCommand" date="Sun Feb 27 18:23:01 EST 2022" starttimestamp="1645820509543" timestamp="183671867" timestamp2="183671867">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="6648" _type="Insert" date="Sun Feb 27 18:23:01 EST 2022" docASTNodeCount="1581" docActiveCodeLength="11291" docExpressionCount="1107" docLength="12674" length="2" offset="1999" starttimestamp="1645820509543" timestamp="183672151">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="6649" _type="InsertStringCommand" date="Sun Feb 27 18:23:01 EST 2022" starttimestamp="1645820509543" timestamp="183672151" timestamp2="183672151">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="6650" _type="InsertStringCommand" date="Sun Feb 27 18:23:01 EST 2022" starttimestamp="1645820509543" timestamp="183672167" timestamp2="183672167">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="6651" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:23:02 EST 2022" starttimestamp="1645820509543" timestamp="183672715" />
  <Command __id="6652" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:23:02 EST 2022" starttimestamp="1645820509543" timestamp="183672715" />
  <Command __id="6654" _type="InsertStringCommand" date="Sun Feb 27 18:23:02 EST 2022" starttimestamp="1645820509543" timestamp="183673131" timestamp2="183673131">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6655" _type="InsertStringCommand" date="Sun Feb 27 18:23:02 EST 2022" starttimestamp="1645820509543" timestamp="183673131" timestamp2="183673131">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6656" _type="SelectTextCommand" caretOffset="1926" date="Sun Feb 27 18:23:08 EST 2022" end="1996" start="1926" starttimestamp="1645820509543" timestamp="183678539" />
  <Command __id="6657" _type="SelectTextCommand" caretOffset="1926" date="Sun Feb 27 18:23:08 EST 2022" end="1996" start="1926" starttimestamp="1645820509543" timestamp="183678539" />
  <Command __id="6659" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:23:09 EST 2022" starttimestamp="1645820509543" timestamp="183679509" />
  <Command __id="6660" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:23:09 EST 2022" starttimestamp="1645820509543" timestamp="183679509" />
  <Command __id="6662" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:23:09 EST 2022" starttimestamp="1645820509543" timestamp="183679794" />
  <Command __id="6663" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:23:09 EST 2022" starttimestamp="1645820509543" timestamp="183679794" />
  <DocumentChange __id="6653" _type="Insert" date="Sun Feb 27 18:23:02 EST 2022" docASTNodeCount="1581" docActiveCodeLength="11292" docExpressionCount="1107" docLength="12675" length="1" offset="2001" starttimestamp="1645820509543" timestamp="183673115">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="6658" _type="Delete" date="Sun Feb 27 18:23:09 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11222" docExpressionCount="1099" docLength="12605" endLine="87" length="70" offset="2004" startLine="85" starttimestamp="1645820509543" timestamp="183679509">
    <text><![CDATA[							case ID:
								parseId();
								accept(TokenKind.LPAREN);]]></text>
  </DocumentChange>
  <DocumentChange __id="6661" _type="Delete" date="Sun Feb 27 18:23:09 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11220" docExpressionCount="1099" docLength="12603" endLine="85" length="2" offset="2002" startLine="84" starttimestamp="1645820509543" timestamp="183679794">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="6664" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 18:23:10 EST 2022" starttimestamp="1645820509543" timestamp="183680906" />
  <Command __id="6665" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:23:10 EST 2022" starttimestamp="1645820509543" timestamp="183680996" />
  <Command __id="6666" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:23:10 EST 2022" starttimestamp="1645820509543" timestamp="183681012" />
  <Command __id="6667" _type="MoveCaretCommand" caretOffset="2029" date="Sun Feb 27 18:23:10 EST 2022" docOffset="2107" starttimestamp="1645820509543" timestamp="183681344" />
  <Command __id="6668" _type="MoveCaretCommand" caretOffset="2029" date="Sun Feb 27 18:23:10 EST 2022" docOffset="2107" starttimestamp="1645820509543" timestamp="183681344" />
  <Command __id="6669" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:24:04 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="183734531">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="6670" _type="MoveCaretCommand" caretOffset="196" date="Sun Feb 27 18:24:04 EST 2022" docOffset="196" starttimestamp="1645820509543" timestamp="183734615" />
  <Command __id="6671" _type="RunCommand" date="Sun Feb 27 18:24:04 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183735417" type="Run" />
  <Command __id="6672" _type="RunCommand" date="Sun Feb 27 18:24:04 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183735417" type="Run" />
  <Command __id="6673" _type="RunCommand" date="Sun Feb 27 18:24:05 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183735548" type="Run" />
  <Command __id="6674" _type="RunCommand" date="Sun Feb 27 18:24:05 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183735548" type="Run" />
  <Command __id="6675" _type="EHExceptionCommand" date="Sun Feb 27 18:24:05 EST 2022" starttimestamp="1645820509543" timestamp="183735595" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
In scanner =
=
0
;
try
In scanner =
=
!
(
a
In scanner =
==
a
)
;
}
public
static
boolean
hasErrors
(
)
{
return
numErrors
>
0
;
}
public
void
reportError
(
String
message
)
{
System
.
out
.
println
(
message
)
;
Parse error: parsing statement, in subcase ID, current token is: numErrors
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="6677" _type="ShellCommand" date="Sun Feb 27 18:24:29 EST 2022" starttimestamp="1645820509543" timestamp="183760430" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6678" _type="ShellCommand" date="Sun Feb 27 18:24:32 EST 2022" starttimestamp="1645820509543" timestamp="183762617" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6680" _type="MoveCaretCommand" caretOffset="2029" date="Sun Feb 27 18:24:32 EST 2022" docOffset="2107" starttimestamp="1645820509543" timestamp="183763455" />
  <Command __id="6681" _type="MoveCaretCommand" caretOffset="4221" date="Sun Feb 27 18:24:35 EST 2022" docOffset="4299" starttimestamp="1645820509543" timestamp="183765559" />
  <Command __id="6682" _type="MoveCaretCommand" caretOffset="4221" date="Sun Feb 27 18:24:35 EST 2022" docOffset="4299" starttimestamp="1645820509543" timestamp="183765559" />
  <Command __id="6676" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:24:09 EST 2022" docASTNodeCount="63" docActiveCodeLength="362" docExpressionCount="26" docLength="362" projectName="pa1" starttimestamp="1645820509543" timestamp="183739627">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public "), Diff(INSERT,"static "), Diff(EQUAL,"boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
    <snapshot><![CDATA[class ErrorReporter {

		private int numErrors;
		public static boolean gg;

		static void ErrorReporter(int j, boolean k, boo[] a1) {
			numErrors = 0;
			try = !(a == a);
		}

		public static boolean hasErrors() {
			return numErrors > 0;
		}

		public void reportError(String message) {
			System.out.println(message);
			numErrors++;
		}	
}]]></snapshot>
  </Command>
  <Command __id="6679" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:24:32 EST 2022" docASTNodeCount="1570" docActiveCodeLength="11220" docExpressionCount="1099" docLength="12603" projectName="pa1" starttimestamp="1645820509543" timestamp="183763402">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				"), Diff(INSERT,"// Method Declaration¶				"), Diff(EQUAL,"case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				"), Diff(INSERT,"// both possible¶				"), Diff(EQUAL,"default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶						"), Diff(INSERT,"	// Field Declaration¶							"), Diff(EQUAL,"case SEMICOLON:¶							"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶							"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶						"), Diff(DELETE,"case ID:¶							parseId();"), Diff(INSERT,"	¶							// Method Declaration¶							case LPAREN:"), Diff(EQUAL,"¶							"), Diff(INSERT,"	"), Diff(EQUAL,"accept"), Diff(DELETE,"(TokenKind.LPAREN"), Diff(INSERT,"It("), Diff(EQUAL,");¶							"), Diff(INSERT,"	"), Diff(EQUAL,"if (startsType(currentToken.kind)) {¶								"), Diff(INSERT,"	"), Diff(EQUAL,"parseParameterList();¶							"), Diff(INSERT,"	"), Diff(EQUAL,"}¶							"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RPAREN);¶							"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.LCURLY);¶							"), Diff(INSERT,"	"), Diff(EQUAL,"¶							"), Diff(INSERT,"	"), Diff(EQUAL,"while (startsStatement(currentToken.kind)) {¶								"), Diff(INSERT,"	"), Diff(EQUAL,"parseStatement();¶							"), Diff(INSERT,"	"), Diff(EQUAL,"}¶							"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RCURLY);¶							"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations"), Diff(DELETE,"");¶					}"), Diff(INSERT,", no types declared.");¶					}¶					break;"), Diff(EQUAL,"¶					¶			}¶		}¶		System.out.println("out here end of program: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:			¶//			System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			acceptIt();¶//			System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			switch (currentToken.kind) {¶			// in Type¶			case ID:¶				acceptIt();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// in Reference¶			case EQUAL:¶//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				acceptIt();¶//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶				}¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			// both¶			case LBRACKET: ¶				acceptIt();¶				// in Type¶				if (currentToken.kind == TokenKind.RBRACKET) {¶					acceptIt();¶					accept(TokenKind.ID);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					// in Reference¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case DOT:¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					case EQUAL:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LBRACKET: ¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					default:¶						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				}¶			default:¶				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶	¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶			// starts with reference¶			case ID: case THIS:¶				acceptIt();¶				// dealing with (.id)*¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					// reference[expression]¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					// reference(arglist?)¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						break;¶						¶					// just reference¶					default:¶						break;¶//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶				¶			case UNOP: case MINUS:¶				acceptIt();¶				parseExpression();¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				break;¶			¶			case NUM: case TRUE: case FALSE:¶				acceptIt();¶				break;¶			¶			case NEW:¶				acceptIt();¶				switch (currentToken.kind) {¶				case ID:¶					acceptIt();¶					switch (currentToken.kind) {¶					case LPAREN:¶						acceptIt();¶						accept(TokenKind.RPAREN);¶						break;¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					}¶				¶				case INT:¶					acceptIt();¶					accept(TokenKind.LBRACKET);¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				default:¶					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶			¶			default:¶				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				break;¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				// Method Declaration
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				// both possible
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
							// Field Declaration
							case SEMICOLON:
								accept(TokenKind.SEMICOLON);
								break;
							
							// Method Declaration
							case LPAREN:
								acceptIt();
								if (startsType(currentToken.kind)) {
									parseParameterList();
								}
								accept(TokenKind.RPAREN);
								accept(TokenKind.LCURLY);
								
								while (startsStatement(currentToken.kind)) {
									parseStatement();
								}
								accept(TokenKind.RCURLY);
								break;
						}
					}
					else {
						parseError("Parsing wrong in declarations, no types declared.");
					}
					break;
					
			}
		}
		System.out.println("out here end of program: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:			
//			System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");
			acceptIt();
//			System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");
			switch (currentToken.kind) {
			// in Type
			case ID:
				acceptIt();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			// in Reference
			case EQUAL:
//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				acceptIt();
//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
				}
				accept(TokenKind.SEMICOLON);
				break;
			
			// both
			case LBRACKET: 
				acceptIt();
				// in Type
				if (currentToken.kind == TokenKind.RBRACKET) {
					acceptIt();
					accept(TokenKind.ID);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				} else {
					// in Reference
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case DOT:
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					case EQUAL:
						acceptIt();
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LBRACKET: 
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					default:
						parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
				}
			default:
				parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}

	
	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
			// starts with reference
			case ID: case THIS:
				acceptIt();
				// dealing with (.id)*
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					// reference[expression]
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					// reference(arglist?)
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						break;
						
					// just reference
					default:
						break;
//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
				
			case UNOP: case MINUS:
				acceptIt();
				parseExpression();
				break;
			
			case LPAREN:
				acceptIt();
				parseExpression();
				accept(TokenKind.RPAREN);
				break;
			
			case NUM: case TRUE: case FALSE:
				acceptIt();
				break;
			
			case NEW:
				acceptIt();
				switch (currentToken.kind) {
				case ID:
					acceptIt();
					switch (currentToken.kind) {
					case LPAREN:
						acceptIt();
						accept(TokenKind.RPAREN);
						break;
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					}
				
				case INT:
					acceptIt();
					accept(TokenKind.LBRACKET);
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				default:
					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
			
			default:
				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				break;
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="6683" _type="MoveCaretCommand" caretOffset="3026" date="Sun Feb 27 18:24:51 EST 2022" docOffset="3104" starttimestamp="1645820509543" timestamp="183782412" />
  <Command __id="6684" _type="MoveCaretCommand" caretOffset="3026" date="Sun Feb 27 18:24:51 EST 2022" docOffset="3104" starttimestamp="1645820509543" timestamp="183782412" />
  <DocumentChange __id="6685" _type="Delete" date="Sun Feb 27 18:24:55 EST 2022" docASTNodeCount="1586" docActiveCodeLength="11319" docExpressionCount="1114" docLength="12601" endLine="131" length="2" offset="3067" startLine="131" starttimestamp="1645820509543" timestamp="183786072">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="6686" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 18:24:55 EST 2022" starttimestamp="1645820509543" timestamp="183786103" />
  <Command __id="6687" _type="MoveCaretCommand" caretOffset="3137" date="Sun Feb 27 18:24:56 EST 2022" docOffset="3215" starttimestamp="1645820509543" timestamp="183786651" />
  <Command __id="6688" _type="MoveCaretCommand" caretOffset="3137" date="Sun Feb 27 18:24:56 EST 2022" docOffset="3215" starttimestamp="1645820509543" timestamp="183786651" />
  <Command __id="6690" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 18:24:56 EST 2022" starttimestamp="1645820509543" timestamp="183786836" />
  <Command __id="6694" _type="RunCommand" date="Sun Feb 27 18:24:59 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183790128" type="Run" />
  <Command __id="6695" _type="RunCommand" date="Sun Feb 27 18:24:59 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183790128" type="Run" />
  <Command __id="6696" _type="RunCommand" date="Sun Feb 27 18:24:59 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183790244" type="Run" />
  <Command __id="6697" _type="RunCommand" date="Sun Feb 27 18:24:59 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="183790244" type="Run" />
  <Command __id="6698" _type="EHExceptionCommand" date="Sun Feb 27 18:24:59 EST 2022" starttimestamp="1645820509543" timestamp="183790298" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
in here0, ID is***numErrors***
numErrors
In scanner =
in here1, EQUAL is***=***
=
0
;
in here0, ID is***try***
try
In scanner =
in here1, EQUAL is***=***
=
!
(
a
In scanner =
==
a
)
;
}
public
static
boolean
hasErrors
(
)
{
return
numErrors
>
0
;
}
public
void
reportError
(
String
message
)
{
in here0, ID is***System***
System
in here1, DOT is***.***
.
out
.
println
(
message
)
;
Parse error: parsing statement, in subcase ID, current token is: numErrors
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="6699" _type="SelectTextCommand" caretOffset="5438" date="Sun Feb 27 18:26:06 EST 2022" end="5438" start="3240" starttimestamp="1645820509543" timestamp="183857293" />
  <Command __id="6700" _type="SelectTextCommand" caretOffset="5438" date="Sun Feb 27 18:26:06 EST 2022" end="5438" start="3240" starttimestamp="1645820509543" timestamp="183857293" />
  <Command __id="6701" _type="MoveCaretCommand" caretOffset="5804" date="Sun Feb 27 18:26:07 EST 2022" docOffset="5882" starttimestamp="1645820509543" timestamp="183857625" />
  <Command __id="6702" _type="MoveCaretCommand" caretOffset="5804" date="Sun Feb 27 18:26:07 EST 2022" docOffset="5882" starttimestamp="1645820509543" timestamp="183857625" />
  <Command __id="6703" _type="SelectTextCommand" caretOffset="3266" date="Sun Feb 27 18:26:17 EST 2022" end="3272" start="3266" starttimestamp="1645820509543" timestamp="183868372" />
  <Command __id="6704" _type="SelectTextCommand" caretOffset="3266" date="Sun Feb 27 18:26:17 EST 2022" end="3272" start="3266" starttimestamp="1645820509543" timestamp="183868372" />
  <Command __id="6705" _type="MoveCaretCommand" caretOffset="3283" date="Sun Feb 27 18:26:18 EST 2022" docOffset="3361" starttimestamp="1645820509543" timestamp="183868935" />
  <Command __id="6706" _type="MoveCaretCommand" caretOffset="3283" date="Sun Feb 27 18:26:18 EST 2022" docOffset="3361" starttimestamp="1645820509543" timestamp="183868935" />
  <Command __id="6707" _type="SelectTextCommand" caretOffset="3272" date="Sun Feb 27 18:26:20 EST 2022" end="3283" start="3272" starttimestamp="1645820509543" timestamp="183870490" />
  <Command __id="6708" _type="SelectTextCommand" caretOffset="3272" date="Sun Feb 27 18:26:20 EST 2022" end="3283" start="3272" starttimestamp="1645820509543" timestamp="183870490" />
  <Command __id="6709" _type="MoveCaretCommand" caretOffset="3283" date="Sun Feb 27 18:26:20 EST 2022" docOffset="3361" starttimestamp="1645820509543" timestamp="183870822" />
  <Command __id="6710" _type="MoveCaretCommand" caretOffset="3283" date="Sun Feb 27 18:26:20 EST 2022" docOffset="3361" starttimestamp="1645820509543" timestamp="183870822" />
  <Command __id="6711" _type="MoveCaretCommand" caretOffset="3237" date="Sun Feb 27 18:26:53 EST 2022" docOffset="3315" starttimestamp="1645820509543" timestamp="183903790" />
  <Command __id="6712" _type="MoveCaretCommand" caretOffset="3237" date="Sun Feb 27 18:26:53 EST 2022" docOffset="3315" starttimestamp="1645820509543" timestamp="183903790" />
  <DocumentChange __id="6689" _type="Delete" date="Sun Feb 27 18:24:56 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11418" docExpressionCount="1129" docLength="12599" endLine="133" length="2" offset="3184" startLine="133" starttimestamp="1645820509543" timestamp="183786820">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6715" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11419" docExpressionCount="1129" docLength="12600" length="1" offset="3318" starttimestamp="1645820509543" timestamp="183917089">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6716" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11420" docExpressionCount="1129" docLength="12601" length="1" offset="3334" starttimestamp="1645820509543" timestamp="183917089">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6717" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11421" docExpressionCount="1129" docLength="12602" length="1" offset="3348" starttimestamp="1645820509543" timestamp="183917089">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6718" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11422" docExpressionCount="1129" docLength="12603" length="1" offset="3366" starttimestamp="1645820509543" timestamp="183917089">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6719" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11423" docExpressionCount="1129" docLength="12604" length="1" offset="3397" starttimestamp="1645820509543" timestamp="183917089">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6720" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11424" docExpressionCount="1129" docLength="12605" length="1" offset="3422" starttimestamp="1645820509543" timestamp="183917105">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6721" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11425" docExpressionCount="1129" docLength="12606" length="1" offset="3457" starttimestamp="1645820509543" timestamp="183917105">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6722" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11426" docExpressionCount="1129" docLength="12607" length="1" offset="3470" starttimestamp="1645820509543" timestamp="183917105">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6723" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11427" docExpressionCount="1129" docLength="12608" length="1" offset="3476" starttimestamp="1645820509543" timestamp="183917105">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6724" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11428" docExpressionCount="1129" docLength="12609" length="1" offset="3497" starttimestamp="1645820509543" timestamp="183917112">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6725" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11429" docExpressionCount="1129" docLength="12610" length="1" offset="3514" starttimestamp="1645820509543" timestamp="183917112">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6726" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11430" docExpressionCount="1129" docLength="12611" length="1" offset="3615" starttimestamp="1645820509543" timestamp="183917112">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6727" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11431" docExpressionCount="1129" docLength="12612" length="1" offset="3633" starttimestamp="1645820509543" timestamp="183917112">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6728" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11432" docExpressionCount="1129" docLength="12613" length="1" offset="3734" starttimestamp="1645820509543" timestamp="183917112">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6729" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11433" docExpressionCount="1129" docLength="12614" length="1" offset="3759" starttimestamp="1645820509543" timestamp="183917112">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6730" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11434" docExpressionCount="1129" docLength="12615" length="1" offset="3794" starttimestamp="1645820509543" timestamp="183917112">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6731" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11435" docExpressionCount="1129" docLength="12616" length="1" offset="3807" starttimestamp="1645820509543" timestamp="183917112">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6732" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11436" docExpressionCount="1129" docLength="12617" length="1" offset="3813" starttimestamp="1645820509543" timestamp="183917112">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6733" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11437" docExpressionCount="1129" docLength="12618" length="1" offset="3831" starttimestamp="1645820509543" timestamp="183917112">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6734" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11438" docExpressionCount="1129" docLength="12619" length="1" offset="3849" starttimestamp="1645820509543" timestamp="183917127">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6735" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11439" docExpressionCount="1129" docLength="12620" length="1" offset="3900" starttimestamp="1645820509543" timestamp="183917127">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6736" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11440" docExpressionCount="1129" docLength="12621" length="1" offset="3919" starttimestamp="1645820509543" timestamp="183917127">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6737" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11441" docExpressionCount="1129" docLength="12622" length="1" offset="3934" starttimestamp="1645820509543" timestamp="183917127">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6738" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11442" docExpressionCount="1129" docLength="12623" length="1" offset="3962" starttimestamp="1645820509543" timestamp="183917127">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6739" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11443" docExpressionCount="1129" docLength="12624" length="1" offset="3995" starttimestamp="1645820509543" timestamp="183917127">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6740" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11444" docExpressionCount="1129" docLength="12625" length="1" offset="4003" starttimestamp="1645820509543" timestamp="183917127">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6741" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11445" docExpressionCount="1129" docLength="12626" length="1" offset="4038" starttimestamp="1645820509543" timestamp="183917127">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6742" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11446" docExpressionCount="1129" docLength="12627" length="1" offset="4051" starttimestamp="1645820509543" timestamp="183917158">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6743" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11447" docExpressionCount="1129" docLength="12628" length="1" offset="4057" starttimestamp="1645820509543" timestamp="183917158">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6744" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11448" docExpressionCount="1129" docLength="12629" length="1" offset="4070" starttimestamp="1645820509543" timestamp="183917158">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6745" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11449" docExpressionCount="1129" docLength="12630" length="1" offset="4091" starttimestamp="1645820509543" timestamp="183917158">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6746" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11450" docExpressionCount="1129" docLength="12631" length="1" offset="4109" starttimestamp="1645820509543" timestamp="183917158">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6747" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11451" docExpressionCount="1129" docLength="12632" length="1" offset="4126" starttimestamp="1645820509543" timestamp="183917158">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6748" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11452" docExpressionCount="1129" docLength="12633" length="1" offset="4179" starttimestamp="1645820509543" timestamp="183917158">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6749" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11453" docExpressionCount="1129" docLength="12634" length="1" offset="4198" starttimestamp="1645820509543" timestamp="183917174">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6750" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11454" docExpressionCount="1129" docLength="12635" length="1" offset="4227" starttimestamp="1645820509543" timestamp="183917174">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6751" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11455" docExpressionCount="1129" docLength="12636" length="1" offset="4259" starttimestamp="1645820509543" timestamp="183917174">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6752" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11456" docExpressionCount="1129" docLength="12637" length="1" offset="4285" starttimestamp="1645820509543" timestamp="183917190">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6753" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11457" docExpressionCount="1129" docLength="12638" length="1" offset="4321" starttimestamp="1645820509543" timestamp="183917190">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6754" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11458" docExpressionCount="1129" docLength="12639" length="1" offset="4336" starttimestamp="1645820509543" timestamp="183917190">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6755" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11459" docExpressionCount="1129" docLength="12640" length="1" offset="4359" starttimestamp="1645820509543" timestamp="183917190">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6756" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11460" docExpressionCount="1129" docLength="12641" length="1" offset="4385" starttimestamp="1645820509543" timestamp="183917190">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6757" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11461" docExpressionCount="1129" docLength="12642" length="1" offset="4420" starttimestamp="1645820509543" timestamp="183917205">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6758" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11462" docExpressionCount="1129" docLength="12643" length="1" offset="4452" starttimestamp="1645820509543" timestamp="183917205">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6759" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11463" docExpressionCount="1129" docLength="12644" length="1" offset="4478" starttimestamp="1645820509543" timestamp="183917205">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6760" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11464" docExpressionCount="1129" docLength="12645" length="1" offset="4514" starttimestamp="1645820509543" timestamp="183917212">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6761" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11465" docExpressionCount="1129" docLength="12646" length="1" offset="4522" starttimestamp="1645820509543" timestamp="183917212">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6762" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11466" docExpressionCount="1129" docLength="12647" length="1" offset="4535" starttimestamp="1645820509543" timestamp="183917212">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6763" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11467" docExpressionCount="1129" docLength="12648" length="1" offset="4541" starttimestamp="1645820509543" timestamp="183917212">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6764" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11468" docExpressionCount="1129" docLength="12649" length="1" offset="4556" starttimestamp="1645820509543" timestamp="183917212">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6765" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11469" docExpressionCount="1129" docLength="12650" length="1" offset="4607" starttimestamp="1645820509543" timestamp="183917212">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6766" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11470" docExpressionCount="1129" docLength="12651" length="1" offset="4626" starttimestamp="1645820509543" timestamp="183917212">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6767" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11471" docExpressionCount="1129" docLength="12652" length="1" offset="4655" starttimestamp="1645820509543" timestamp="183917227">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6768" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11472" docExpressionCount="1129" docLength="12653" length="1" offset="4663" starttimestamp="1645820509543" timestamp="183917227">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6769" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11473" docExpressionCount="1129" docLength="12654" length="1" offset="4698" starttimestamp="1645820509543" timestamp="183917227">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6770" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11474" docExpressionCount="1129" docLength="12655" length="1" offset="4717" starttimestamp="1645820509543" timestamp="183917227">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6771" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11475" docExpressionCount="1129" docLength="12656" length="1" offset="4737" starttimestamp="1645820509543" timestamp="183917243">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6772" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11476" docExpressionCount="1129" docLength="12657" length="1" offset="4764" starttimestamp="1645820509543" timestamp="183917243">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6773" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11477" docExpressionCount="1129" docLength="12658" length="1" offset="4801" starttimestamp="1645820509543" timestamp="183917243">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6774" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11478" docExpressionCount="1129" docLength="12659" length="1" offset="4816" starttimestamp="1645820509543" timestamp="183917243">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6775" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11479" docExpressionCount="1129" docLength="12660" length="1" offset="4824" starttimestamp="1645820509543" timestamp="183917243">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6776" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11480" docExpressionCount="1129" docLength="12661" length="1" offset="4847" starttimestamp="1645820509543" timestamp="183917259">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6777" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11481" docExpressionCount="1129" docLength="12662" length="1" offset="4867" starttimestamp="1645820509543" timestamp="183917259">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6778" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11482" docExpressionCount="1129" docLength="12663" length="1" offset="4894" starttimestamp="1645820509543" timestamp="183917259">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6779" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11483" docExpressionCount="1129" docLength="12664" length="1" offset="4930" starttimestamp="1645820509543" timestamp="183917259">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6780" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11484" docExpressionCount="1129" docLength="12665" length="1" offset="4963" starttimestamp="1645820509543" timestamp="183917259">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6781" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11485" docExpressionCount="1129" docLength="12666" length="1" offset="4990" starttimestamp="1645820509543" timestamp="183917274">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6782" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11486" docExpressionCount="1129" docLength="12667" length="1" offset="5027" starttimestamp="1645820509543" timestamp="183917274">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6783" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11487" docExpressionCount="1129" docLength="12668" length="1" offset="5042" starttimestamp="1645820509543" timestamp="183917274">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6784" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11488" docExpressionCount="1129" docLength="12669" length="1" offset="5050" starttimestamp="1645820509543" timestamp="183917290">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6785" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11489" docExpressionCount="1129" docLength="12670" length="1" offset="5070" starttimestamp="1645820509543" timestamp="183917290">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="6713" _type="SelectTextCommand" caretOffset="3240" date="Sun Feb 27 18:27:05 EST 2022" end="5313" start="3240" starttimestamp="1645820509543" timestamp="183916304" />
  <Command __id="6714" _type="SelectTextCommand" caretOffset="3240" date="Sun Feb 27 18:27:05 EST 2022" end="5313" start="3240" starttimestamp="1645820509543" timestamp="183916304" />
  <Command __id="6800" _type="InsertStringCommand" date="Sun Feb 27 18:27:06 EST 2022" starttimestamp="1645820509543" timestamp="183917359" timestamp2="183917359">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="6801" _type="InsertStringCommand" date="Sun Feb 27 18:27:06 EST 2022" starttimestamp="1645820509543" timestamp="183917359" timestamp2="183917359">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="6802" _type="MoveCaretCommand" caretOffset="3300" date="Sun Feb 27 18:27:07 EST 2022" docOffset="3378" starttimestamp="1645820509543" timestamp="183917852" />
  <Command __id="6803" _type="MoveCaretCommand" caretOffset="3300" date="Sun Feb 27 18:27:07 EST 2022" docOffset="3378" starttimestamp="1645820509543" timestamp="183917852" />
  <Command __id="6804" _type="MoveCaretCommand" caretOffset="3238" date="Sun Feb 27 18:27:08 EST 2022" docOffset="3316" starttimestamp="1645820509543" timestamp="183918591" />
  <Command __id="6805" _type="MoveCaretCommand" caretOffset="3238" date="Sun Feb 27 18:27:08 EST 2022" docOffset="3316" starttimestamp="1645820509543" timestamp="183918591" />
  <Command __id="6806" _type="MoveCaretCommand" caretOffset="3237" date="Sun Feb 27 18:27:09 EST 2022" docOffset="3315" starttimestamp="1645820509543" timestamp="183919492" />
  <Command __id="6807" _type="MoveCaretCommand" caretOffset="3237" date="Sun Feb 27 18:27:09 EST 2022" docOffset="3315" starttimestamp="1645820509543" timestamp="183919492" />
  <DocumentChange __id="6786" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11490" docExpressionCount="1129" docLength="12671" length="1" offset="5090" starttimestamp="1645820509543" timestamp="183917306">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6787" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11491" docExpressionCount="1129" docLength="12672" length="1" offset="5143" starttimestamp="1645820509543" timestamp="183917306">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6788" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11492" docExpressionCount="1129" docLength="12673" length="1" offset="5164" starttimestamp="1645820509543" timestamp="183917312">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6789" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11493" docExpressionCount="1129" docLength="12674" length="1" offset="5181" starttimestamp="1645820509543" timestamp="183917312">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6790" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11494" docExpressionCount="1129" docLength="12675" length="1" offset="5211" starttimestamp="1645820509543" timestamp="183917312">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6791" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11495" docExpressionCount="1129" docLength="12676" length="1" offset="5246" starttimestamp="1645820509543" timestamp="183917312">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6792" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11496" docExpressionCount="1129" docLength="12677" length="1" offset="5256" starttimestamp="1645820509543" timestamp="183917312">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6793" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11497" docExpressionCount="1129" docLength="12678" length="1" offset="5293" starttimestamp="1645820509543" timestamp="183917328">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6794" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11498" docExpressionCount="1129" docLength="12679" length="1" offset="5308" starttimestamp="1645820509543" timestamp="183917328">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6795" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11499" docExpressionCount="1129" docLength="12680" length="1" offset="5316" starttimestamp="1645820509543" timestamp="183917328">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6796" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11500" docExpressionCount="1129" docLength="12681" length="1" offset="5332" starttimestamp="1645820509543" timestamp="183917328">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6797" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11501" docExpressionCount="1129" docLength="12682" length="1" offset="5448" starttimestamp="1645820509543" timestamp="183917328">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6798" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11502" docExpressionCount="1129" docLength="12683" length="1" offset="5456" starttimestamp="1645820509543" timestamp="183917343">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6799" _type="Insert" date="Sun Feb 27 18:27:06 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11503" docExpressionCount="1129" docLength="12684" length="1" offset="5470" starttimestamp="1645820509543" timestamp="183917343">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="6813" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:27:48 EST 2022" docASTNodeCount="63" docActiveCodeLength="362" docExpressionCount="26" docLength="362" projectName="pa1" starttimestamp="1645820509543" timestamp="183959363">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="6814" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:27:52 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="183962601">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="6816" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:27:52 EST 2022" docASTNodeCount="63" docActiveCodeLength="362" docExpressionCount="26" docLength="362" projectName="pa1" starttimestamp="1645820509543" timestamp="183963039">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="6808" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 18:27:12 EST 2022" starttimestamp="1645820509543" timestamp="183922667" />
  <Command __id="6809" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:27:12 EST 2022" starttimestamp="1645820509543" timestamp="183922760" />
  <Command __id="6810" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:27:12 EST 2022" starttimestamp="1645820509543" timestamp="183922760" />
  <Command __id="6811" _type="MoveCaretCommand" caretOffset="5409" date="Sun Feb 27 18:27:13 EST 2022" docOffset="5487" starttimestamp="1645820509543" timestamp="183923730" />
  <Command __id="6812" _type="MoveCaretCommand" caretOffset="5409" date="Sun Feb 27 18:27:13 EST 2022" docOffset="5487" starttimestamp="1645820509543" timestamp="183923730" />
  <Command __id="6815" _type="MoveCaretCommand" caretOffset="196" date="Sun Feb 27 18:27:52 EST 2022" docOffset="196" starttimestamp="1645820509543" timestamp="183962685" />
  <Command __id="6818" _type="MoveCaretCommand" caretOffset="5409" date="Sun Feb 27 18:29:46 EST 2022" docOffset="5487" starttimestamp="1645820509543" timestamp="184077405" />
  <Command __id="6819" _type="MoveCaretCommand" caretOffset="2602" date="Sun Feb 27 18:30:00 EST 2022" docOffset="2680" starttimestamp="1645820509543" timestamp="184090607" />
  <Command __id="6820" _type="MoveCaretCommand" caretOffset="2602" date="Sun Feb 27 18:30:00 EST 2022" docOffset="2680" starttimestamp="1645820509543" timestamp="184090607" />
  <Command __id="6821" _type="MoveCaretCommand" caretOffset="7041" date="Sun Feb 27 18:30:09 EST 2022" docOffset="7119" starttimestamp="1645820509543" timestamp="184099738" />
  <Command __id="6822" _type="MoveCaretCommand" caretOffset="7041" date="Sun Feb 27 18:30:09 EST 2022" docOffset="7119" starttimestamp="1645820509543" timestamp="184099738" />
  <Command __id="6824" _type="InsertStringCommand" date="Sun Feb 27 18:30:10 EST 2022" starttimestamp="1645820509543" timestamp="184100624" timestamp2="184100624">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6825" _type="InsertStringCommand" date="Sun Feb 27 18:30:10 EST 2022" starttimestamp="1645820509543" timestamp="184100624" timestamp2="184100624">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6827" _type="InsertStringCommand" date="Sun Feb 27 18:30:10 EST 2022" starttimestamp="1645820509543" timestamp="184101118" timestamp2="184101118">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="6828" _type="InsertStringCommand" date="Sun Feb 27 18:30:10 EST 2022" starttimestamp="1645820509543" timestamp="184101118" timestamp2="184101118">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="6830" _type="InsertStringCommand" date="Sun Feb 27 18:30:10 EST 2022" starttimestamp="1645820509543" timestamp="184101324" timestamp2="184101324">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6831" _type="InsertStringCommand" date="Sun Feb 27 18:30:10 EST 2022" starttimestamp="1645820509543" timestamp="184101324" timestamp2="184101324">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6833" _type="InsertStringCommand" date="Sun Feb 27 18:30:10 EST 2022" starttimestamp="1645820509543" timestamp="184101340" timestamp2="184101340">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6834" _type="InsertStringCommand" date="Sun Feb 27 18:30:10 EST 2022" starttimestamp="1645820509543" timestamp="184101340" timestamp2="184101340">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6836" _type="InsertStringCommand" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184101471" timestamp2="184101471">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6837" _type="InsertStringCommand" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184101471" timestamp2="184101471">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6839" _type="InsertStringCommand" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184101487" timestamp2="184101487">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6840" _type="InsertStringCommand" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184101487" timestamp2="184101487">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6842" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184101724" />
  <Command __id="6843" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184101724" />
  <Command __id="6845" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184101871" />
  <Command __id="6846" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184101871" />
  <Command __id="6848" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184102041" />
  <Command __id="6849" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184102041" />
  <Command __id="6851" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184102203" />
  <Command __id="6852" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184102203" />
  <Command __id="6854" _type="InsertStringCommand" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184102287" timestamp2="184102287">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6855" _type="InsertStringCommand" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184102287" timestamp2="184102287">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6857" _type="InsertStringCommand" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184102341" timestamp2="184102341">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6858" _type="InsertStringCommand" date="Sun Feb 27 18:30:11 EST 2022" starttimestamp="1645820509543" timestamp="184102341" timestamp2="184102341">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6860" _type="InsertStringCommand" date="Sun Feb 27 18:30:12 EST 2022" starttimestamp="1645820509543" timestamp="184102457" timestamp2="184102457">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6861" _type="InsertStringCommand" date="Sun Feb 27 18:30:12 EST 2022" starttimestamp="1645820509543" timestamp="184102457" timestamp2="184102457">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6863" _type="InsertStringCommand" date="Sun Feb 27 18:30:12 EST 2022" starttimestamp="1645820509543" timestamp="184102587" timestamp2="184102587">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="6864" _type="InsertStringCommand" date="Sun Feb 27 18:30:12 EST 2022" starttimestamp="1645820509543" timestamp="184102587" timestamp2="184102587">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="6866" _type="InsertStringCommand" date="Sun Feb 27 18:30:12 EST 2022" starttimestamp="1645820509543" timestamp="184103019" timestamp2="184103019">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6867" _type="InsertStringCommand" date="Sun Feb 27 18:30:12 EST 2022" starttimestamp="1645820509543" timestamp="184103019" timestamp2="184103019">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6817" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:29:46 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11503" docExpressionCount="1129" docLength="12684" projectName="pa1" starttimestamp="1645820509543" timestamp="184077351">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				// Method Declaration¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				// both possible¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶							// Field Declaration¶							case SEMICOLON:¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							// Method Declaration¶							case LPAREN:¶								acceptIt();¶								if (startsType(currentToken.kind)) {¶									parseParameterList();¶								}¶								accept(TokenKind.RPAREN);¶								accept(TokenKind.LCURLY);¶								¶								while (startsStatement(currentToken.kind)) {¶									parseStatement();¶								}¶								accept(TokenKind.RCURLY);¶								break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations, no types declared.");¶					}¶					break;¶					¶			}¶		}¶		System.out.println("out here end of program: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		case LCURLY:¶			acceptIt();¶			while (startsStatement(currentToken.kind)) {¶				parseStatement();¶			}¶//			System.out.println("in here: " + currentToken);¶			accept(TokenKind.RCURLY);¶			break;¶			¶		case INT: case BOOLEAN:¶			parseType();¶			parseId();¶			accept(TokenKind.EQUAL);¶			parseExpression();¶			accept(TokenKind.SEMICOLON);¶			break;¶		¶		case ID:			¶"), Diff(DELETE,"//"), Diff(EQUAL,"			System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			acceptIt();¶"), Diff(DELETE,"//"), Diff(EQUAL,"			System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			switch (currentToken.kind) {¶			"), Diff(INSERT,"	"), Diff(EQUAL,"// in Type¶			"), Diff(INSERT,"	"), Diff(EQUAL,"case ID:¶				"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.EQUAL);¶				"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶				"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶			"), Diff(INSERT,"	"), Diff(EQUAL,"¶			"), Diff(INSERT,"	"), Diff(EQUAL,"// in Reference¶			"), Diff(INSERT,"	"), Diff(EQUAL,"case EQUAL:¶"), Diff(INSERT,"	"), Diff(EQUAL,"//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶"), Diff(INSERT,"	"), Diff(EQUAL,"//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶				"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶				"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶			"), Diff(INSERT,"	"), Diff(EQUAL,"¶			"), Diff(INSERT,"	"), Diff(EQUAL,"case LPAREN:¶				"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"if (currentToken.kind == TokenKind.RPAREN) {¶					"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"} else {¶					"), Diff(INSERT,"	"), Diff(EQUAL,"parseArgumentList();¶					"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RPAREN);¶				"), Diff(INSERT,"	"), Diff(EQUAL,"}¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶				"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶			"), Diff(INSERT,"	"), Diff(EQUAL,"¶			"), Diff(INSERT,"	"), Diff(EQUAL,"// both¶			"), Diff(INSERT,"	"), Diff(EQUAL,"case LBRACKET: ¶				"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"// in Type¶				"), Diff(INSERT,"	"), Diff(EQUAL,"if (currentToken.kind == TokenKind.RBRACKET) {¶					"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶					"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.ID);¶					"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.EQUAL);¶					"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶					"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶				"), Diff(INSERT,"	"), Diff(EQUAL,"} else {¶					"), Diff(INSERT,"	"), Diff(EQUAL,"// in Reference¶					"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶					"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RBRACKET);¶					"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.EQUAL);¶					"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶					"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶				"), Diff(INSERT,"	"), Diff(EQUAL,"}¶				"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶			"), Diff(INSERT,"	"), Diff(EQUAL,"¶			"), Diff(INSERT,"	"), Diff(EQUAL,"case DOT:¶				"), Diff(INSERT,"	"), Diff(EQUAL,"while (currentToken.kind == TokenKind.DOT) {¶					"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶					"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.ID);¶				"), Diff(INSERT,"	"), Diff(EQUAL,"}¶				"), Diff(INSERT,"	"), Diff(EQUAL,"switch (currentToken.kind) {¶					"), Diff(INSERT,"	"), Diff(EQUAL,"case EQUAL:¶						"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶						"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶						"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶						"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶					"), Diff(INSERT,"	"), Diff(EQUAL,"¶					"), Diff(INSERT,"	"), Diff(EQUAL,"case LBRACKET: ¶						"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶						"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶						"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RBRACKET);¶						"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.EQUAL);¶						"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶						"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶						"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶					"), Diff(INSERT,"	"), Diff(EQUAL,"¶					"), Diff(INSERT,"	"), Diff(EQUAL,"case LPAREN:¶						"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶						"), Diff(INSERT,"	"), Diff(EQUAL,"if (currentToken.kind == TokenKind.RPAREN) {¶							"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶						"), Diff(INSERT,"	"), Diff(EQUAL,"} else {¶							"), Diff(INSERT,"	"), Diff(EQUAL,"parseArgumentList();¶							"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RPAREN);¶						"), Diff(INSERT,"	"), Diff(EQUAL,"}¶						"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶						"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶					"), Diff(INSERT,"	"), Diff(EQUAL,"¶					"), Diff(INSERT,"	"), Diff(EQUAL,"default:¶						"), Diff(INSERT,"	"), Diff(EQUAL,"parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶				"), Diff(INSERT,"	"), Diff(EQUAL,"}¶			"), Diff(INSERT,"	"), Diff(EQUAL,"default:¶				"), Diff(INSERT,"	"), Diff(EQUAL,"parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶			} else {¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶			}¶			break;¶		¶		case IF:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			if (currentToken.kind == TokenKind.ELSE) {¶				acceptIt();¶				parseStatement();¶			}¶			break;¶			¶		case WHILE:¶			acceptIt();¶			accept(TokenKind.LPAREN);¶			parseExpression();¶			accept(TokenKind.RPAREN);¶			parseStatement();¶			break;¶		¶		default:¶			parseError("parsing statement, current token is:" + currentToken);¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶	¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶			// starts with reference¶			case ID: case THIS:¶				acceptIt();¶				// dealing with (.id)*¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					// reference[expression]¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					// reference(arglist?)¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						break;¶						¶					// just reference¶					default:¶						break;¶//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶				¶			case UNOP: case MINUS:¶				acceptIt();¶				parseExpression();¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				break;¶			¶			case NUM: case TRUE: case FALSE:¶				acceptIt();¶				break;¶			¶			case NEW:¶				acceptIt();¶				switch (currentToken.kind) {¶				case ID:¶					acceptIt();¶					switch (currentToken.kind) {¶					case LPAREN:¶						acceptIt();¶						accept(TokenKind.RPAREN);¶						break;¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					}¶				¶				case INT:¶					acceptIt();¶					accept(TokenKind.LBRACKET);¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				default:¶					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶			¶			default:¶				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				break;¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				// Method Declaration
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				// both possible
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
							// Field Declaration
							case SEMICOLON:
								accept(TokenKind.SEMICOLON);
								break;
							
							// Method Declaration
							case LPAREN:
								acceptIt();
								if (startsType(currentToken.kind)) {
									parseParameterList();
								}
								accept(TokenKind.RPAREN);
								accept(TokenKind.LCURLY);
								
								while (startsStatement(currentToken.kind)) {
									parseStatement();
								}
								accept(TokenKind.RCURLY);
								break;
						}
					}
					else {
						parseError("Parsing wrong in declarations, no types declared.");
					}
					break;
					
			}
		}
		System.out.println("out here end of program: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
		case LCURLY:
			acceptIt();
			while (startsStatement(currentToken.kind)) {
				parseStatement();
			}
//			System.out.println("in here: " + currentToken);
			accept(TokenKind.RCURLY);
			break;
			
		case INT: case BOOLEAN:
			parseType();
			parseId();
			accept(TokenKind.EQUAL);
			parseExpression();
			accept(TokenKind.SEMICOLON);
			break;
		
		case ID:			
			System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");
			acceptIt();
			System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");
			switch (currentToken.kind) {
				// in Type
				case ID:
					acceptIt();
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
					break;
				
				// in Reference
				case EQUAL:
	//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");
					acceptIt();
	//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");
					parseExpression();
					accept(TokenKind.SEMICOLON);
					break;
				
				case LPAREN:
					acceptIt();
					if (currentToken.kind == TokenKind.RPAREN) {
						acceptIt();
					} else {
						parseArgumentList();
						accept(TokenKind.RPAREN);
					}
					accept(TokenKind.SEMICOLON);
					break;
				
				// both
				case LBRACKET: 
					acceptIt();
					// in Type
					if (currentToken.kind == TokenKind.RBRACKET) {
						acceptIt();
						accept(TokenKind.ID);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
					} else {
						// in Reference
						parseExpression();
						accept(TokenKind.RBRACKET);
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
					}
					break;
				
				case DOT:
					while (currentToken.kind == TokenKind.DOT) {
						acceptIt();
						accept(TokenKind.ID);
					}
					switch (currentToken.kind) {
						case EQUAL:
							acceptIt();
							parseExpression();
							accept(TokenKind.SEMICOLON);
							break;
						
						case LBRACKET: 
							acceptIt();
							parseExpression();
							accept(TokenKind.RBRACKET);
							accept(TokenKind.EQUAL);
							parseExpression();
							accept(TokenKind.SEMICOLON);
							break;
						
						case LPAREN:
							acceptIt();
							if (currentToken.kind == TokenKind.RPAREN) {
								acceptIt();
							} else {
								parseArgumentList();
								accept(TokenKind.RPAREN);
							}
							accept(TokenKind.SEMICOLON);
							break;
						
						default:
							parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
					}
				default:
					parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
			}
			break;
		
		case THIS:
			acceptIt();
			while (currentToken.kind == TokenKind.DOT) {
				acceptIt();
				accept(TokenKind.ID);
			}
			switch (currentToken.kind) {
			case EQUAL:
				acceptIt();
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case LBRACKET:
				acceptIt();
				parseExpression();
				accept(TokenKind.RBRACKET);
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
				
			case LPAREN:
				acceptIt();
				if (currentToken.kind == TokenKind.RPAREN) {
					acceptIt();
					accept(TokenKind.SEMICOLON);
				} else {
					parseArgumentList();
					accept(TokenKind.RPAREN);
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			default:
				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
			}
			break;
			
		case RETURN:
			acceptIt();
			if (currentToken.kind == TokenKind.SEMICOLON) {
				acceptIt();
			} else {
				parseExpression();
				accept(TokenKind.SEMICOLON);
			}
			break;
		
		case IF:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			if (currentToken.kind == TokenKind.ELSE) {
				acceptIt();
				parseStatement();
			}
			break;
			
		case WHILE:
			acceptIt();
			accept(TokenKind.LPAREN);
			parseExpression();
			accept(TokenKind.RPAREN);
			parseStatement();
			break;
		
		default:
			parseError("parsing statement, current token is:" + currentToken);
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}

	
	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
			// starts with reference
			case ID: case THIS:
				acceptIt();
				// dealing with (.id)*
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					// reference[expression]
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					// reference(arglist?)
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						break;
						
					// just reference
					default:
						break;
//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
				
			case UNOP: case MINUS:
				acceptIt();
				parseExpression();
				break;
			
			case LPAREN:
				acceptIt();
				parseExpression();
				accept(TokenKind.RPAREN);
				break;
			
			case NUM: case TRUE: case FALSE:
				acceptIt();
				break;
			
			case NEW:
				acceptIt();
				switch (currentToken.kind) {
				case ID:
					acceptIt();
					switch (currentToken.kind) {
					case LPAREN:
						acceptIt();
						accept(TokenKind.RPAREN);
						break;
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					}
				
				case INT:
					acceptIt();
					accept(TokenKind.LBRACKET);
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				default:
					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
			
			default:
				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				break;
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="6823" _type="Insert" date="Sun Feb 27 18:30:10 EST 2022" docASTNodeCount="1602" docActiveCodeLength="11508" docExpressionCount="1129" docLength="12689" length="5" offset="7119" starttimestamp="1645820509543" timestamp="184100617">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="6826" _type="Insert" date="Sun Feb 27 18:30:10 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11509" docExpressionCount="1130" docLength="12690" length="1" offset="7124" starttimestamp="1645820509543" timestamp="184101118">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="6829" _type="Insert" date="Sun Feb 27 18:30:10 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11510" docExpressionCount="1130" docLength="12691" length="1" offset="7125" starttimestamp="1645820509543" timestamp="184101324">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="6832" _type="Insert" date="Sun Feb 27 18:30:10 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11511" docExpressionCount="1130" docLength="12692" length="1" offset="7126" starttimestamp="1645820509543" timestamp="184101340">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="6835" _type="Insert" date="Sun Feb 27 18:30:11 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11512" docExpressionCount="1130" docLength="12693" length="1" offset="7127" starttimestamp="1645820509543" timestamp="184101471">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="6838" _type="Insert" date="Sun Feb 27 18:30:11 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11513" docExpressionCount="1130" docLength="12694" length="1" offset="7128" starttimestamp="1645820509543" timestamp="184101487">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="6841" _type="Delete" date="Sun Feb 27 18:30:11 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11512" docExpressionCount="1130" docLength="12693" endLine="294" length="1" offset="7128" startLine="294" starttimestamp="1645820509543" timestamp="184101724">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="6844" _type="Delete" date="Sun Feb 27 18:30:11 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11511" docExpressionCount="1130" docLength="12692" endLine="294" length="1" offset="7127" startLine="294" starttimestamp="1645820509543" timestamp="184101871">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="6847" _type="Delete" date="Sun Feb 27 18:30:11 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11510" docExpressionCount="1130" docLength="12691" endLine="294" length="1" offset="7126" startLine="294" starttimestamp="1645820509543" timestamp="184102041">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="6850" _type="Delete" date="Sun Feb 27 18:30:11 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11509" docExpressionCount="1130" docLength="12690" endLine="294" length="1" offset="7125" startLine="294" starttimestamp="1645820509543" timestamp="184102188">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="6853" _type="Insert" date="Sun Feb 27 18:30:11 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11510" docExpressionCount="1130" docLength="12691" length="1" offset="7125" starttimestamp="1645820509543" timestamp="184102287">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="6856" _type="Insert" date="Sun Feb 27 18:30:11 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11511" docExpressionCount="1130" docLength="12692" length="1" offset="7126" starttimestamp="1645820509543" timestamp="184102341">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="6859" _type="Insert" date="Sun Feb 27 18:30:11 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11512" docExpressionCount="1130" docLength="12693" length="1" offset="7127" starttimestamp="1645820509543" timestamp="184102441">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="6862" _type="Insert" date="Sun Feb 27 18:30:12 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11513" docExpressionCount="1129" docLength="12694" length="1" offset="7128" starttimestamp="1645820509543" timestamp="184102577">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="6865" _type="Insert" date="Sun Feb 27 18:30:12 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11514" docExpressionCount="1129" docLength="12695" length="1" offset="7129" starttimestamp="1645820509543" timestamp="184103004">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="6870" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11515" docExpressionCount="1129" docLength="12696" length="1" offset="2683" starttimestamp="1645820509543" timestamp="184111062">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6871" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11516" docExpressionCount="1129" docLength="12697" length="1" offset="2700" starttimestamp="1645820509543" timestamp="184111062">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6872" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11517" docExpressionCount="1129" docLength="12698" length="1" offset="2717" starttimestamp="1645820509543" timestamp="184111078">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6873" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11518" docExpressionCount="1129" docLength="12699" length="1" offset="2767" starttimestamp="1645820509543" timestamp="184111078">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6874" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11519" docExpressionCount="1129" docLength="12700" length="1" offset="2791" starttimestamp="1645820509543" timestamp="184111078">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6875" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11520" docExpressionCount="1129" docLength="12701" length="1" offset="2798" starttimestamp="1645820509543" timestamp="184111078">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6876" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11521" docExpressionCount="1129" docLength="12702" length="1" offset="2853" starttimestamp="1645820509543" timestamp="184111078">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6877" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11522" docExpressionCount="1129" docLength="12703" length="1" offset="2884" starttimestamp="1645820509543" timestamp="184111078">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6878" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11523" docExpressionCount="1129" docLength="12704" length="1" offset="2896" starttimestamp="1645820509543" timestamp="184111078">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6879" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11524" docExpressionCount="1129" docLength="12705" length="1" offset="2902" starttimestamp="1645820509543" timestamp="184111093">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6880" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11525" docExpressionCount="1129" docLength="12706" length="1" offset="2930" starttimestamp="1645820509543" timestamp="184111093">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6881" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11526" docExpressionCount="1129" docLength="12707" length="1" offset="2948" starttimestamp="1645820509543" timestamp="184111093">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6882" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11527" docExpressionCount="1129" docLength="12708" length="1" offset="2964" starttimestamp="1645820509543" timestamp="184111100">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6883" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11528" docExpressionCount="1129" docLength="12709" length="1" offset="2994" starttimestamp="1645820509543" timestamp="184111116">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6884" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11529" docExpressionCount="1129" docLength="12710" length="1" offset="3018" starttimestamp="1645820509543" timestamp="184111116">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6885" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11530" docExpressionCount="1129" docLength="12711" length="1" offset="3052" starttimestamp="1645820509543" timestamp="184111116">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6886" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11531" docExpressionCount="1129" docLength="12712" length="1" offset="3064" starttimestamp="1645820509543" timestamp="184111116">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6887" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11532" docExpressionCount="1129" docLength="12713" length="1" offset="3069" starttimestamp="1645820509543" timestamp="184111116">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6888" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11533" docExpressionCount="1129" docLength="12714" length="1" offset="3085" starttimestamp="1645820509543" timestamp="184111116">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6889" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11534" docExpressionCount="1129" docLength="12715" length="1" offset="3187" starttimestamp="1645820509543" timestamp="184111116">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6890" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11535" docExpressionCount="1129" docLength="12716" length="1" offset="3204" starttimestamp="1645820509543" timestamp="184111131">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6891" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11536" docExpressionCount="1129" docLength="12717" length="1" offset="3306" starttimestamp="1645820509543" timestamp="184111131">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6892" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11537" docExpressionCount="1129" docLength="12718" length="1" offset="3340" starttimestamp="1645820509543" timestamp="184111131">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6893" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11538" docExpressionCount="1129" docLength="12719" length="1" offset="3357" starttimestamp="1645820509543" timestamp="184111131">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6894" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11539" docExpressionCount="1129" docLength="12720" length="1" offset="3372" starttimestamp="1645820509543" timestamp="184111131">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6895" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11540" docExpressionCount="1129" docLength="12721" length="1" offset="3391" starttimestamp="1645820509543" timestamp="184111131">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6896" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11541" docExpressionCount="1129" docLength="12722" length="1" offset="3423" starttimestamp="1645820509543" timestamp="184111131">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6897" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11542" docExpressionCount="1129" docLength="12723" length="1" offset="3449" starttimestamp="1645820509543" timestamp="184111147">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6898" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11543" docExpressionCount="1129" docLength="12724" length="1" offset="3485" starttimestamp="1645820509543" timestamp="184111147">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6899" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11544" docExpressionCount="1129" docLength="12725" length="1" offset="3499" starttimestamp="1645820509543" timestamp="184111147">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6900" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11545" docExpressionCount="1129" docLength="12726" length="1" offset="3506" starttimestamp="1645820509543" timestamp="184111147">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6901" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11546" docExpressionCount="1129" docLength="12727" length="1" offset="3528" starttimestamp="1645820509543" timestamp="184111147">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6902" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11547" docExpressionCount="1129" docLength="12728" length="1" offset="3546" starttimestamp="1645820509543" timestamp="184111147">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6903" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11548" docExpressionCount="1129" docLength="12729" length="1" offset="3648" starttimestamp="1645820509543" timestamp="184111162">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6904" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11549" docExpressionCount="1129" docLength="12730" length="1" offset="3667" starttimestamp="1645820509543" timestamp="184111162">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6905" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11550" docExpressionCount="1129" docLength="12731" length="1" offset="3769" starttimestamp="1645820509543" timestamp="184111162">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6906" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11551" docExpressionCount="1129" docLength="12732" length="1" offset="3795" starttimestamp="1645820509543" timestamp="184111162">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6907" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11552" docExpressionCount="1129" docLength="12733" length="1" offset="3831" starttimestamp="1645820509543" timestamp="184111162">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6908" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11553" docExpressionCount="1129" docLength="12734" length="1" offset="3845" starttimestamp="1645820509543" timestamp="184111162">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6909" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11554" docExpressionCount="1129" docLength="12735" length="1" offset="3852" starttimestamp="1645820509543" timestamp="184111162">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6910" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11555" docExpressionCount="1129" docLength="12736" length="1" offset="3871" starttimestamp="1645820509543" timestamp="184111178">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6911" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11556" docExpressionCount="1129" docLength="12737" length="1" offset="3890" starttimestamp="1645820509543" timestamp="184111178">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6912" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11557" docExpressionCount="1129" docLength="12738" length="1" offset="3942" starttimestamp="1645820509543" timestamp="184111178">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6913" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11558" docExpressionCount="1129" docLength="12739" length="1" offset="3962" starttimestamp="1645820509543" timestamp="184111178">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6914" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11559" docExpressionCount="1129" docLength="12740" length="1" offset="3978" starttimestamp="1645820509543" timestamp="184111178">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6915" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11560" docExpressionCount="1129" docLength="12741" length="1" offset="4007" starttimestamp="1645820509543" timestamp="184111178">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6916" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11561" docExpressionCount="1129" docLength="12742" length="1" offset="4041" starttimestamp="1645820509543" timestamp="184111178">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6917" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11562" docExpressionCount="1129" docLength="12743" length="1" offset="4050" starttimestamp="1645820509543" timestamp="184111194">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6918" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11563" docExpressionCount="1129" docLength="12744" length="1" offset="4086" starttimestamp="1645820509543" timestamp="184111194">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6919" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11564" docExpressionCount="1129" docLength="12745" length="1" offset="4100" starttimestamp="1645820509543" timestamp="184111216">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6920" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11565" docExpressionCount="1129" docLength="12746" length="1" offset="4107" starttimestamp="1645820509543" timestamp="184111216">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6921" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11566" docExpressionCount="1129" docLength="12747" length="1" offset="4121" starttimestamp="1645820509543" timestamp="184111216">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6922" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11567" docExpressionCount="1129" docLength="12748" length="1" offset="4143" starttimestamp="1645820509543" timestamp="184111216">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6923" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11568" docExpressionCount="1129" docLength="12749" length="1" offset="4162" starttimestamp="1645820509543" timestamp="184111216">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6924" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11569" docExpressionCount="1129" docLength="12750" length="1" offset="4180" starttimestamp="1645820509543" timestamp="184111216">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6925" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11570" docExpressionCount="1129" docLength="12751" length="1" offset="4234" starttimestamp="1645820509543" timestamp="184111231">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6926" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11571" docExpressionCount="1129" docLength="12752" length="1" offset="4254" starttimestamp="1645820509543" timestamp="184111231">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6927" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11572" docExpressionCount="1129" docLength="12753" length="1" offset="4284" starttimestamp="1645820509543" timestamp="184111231">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6928" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11573" docExpressionCount="1129" docLength="12754" length="1" offset="4317" starttimestamp="1645820509543" timestamp="184111231">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6929" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11574" docExpressionCount="1129" docLength="12755" length="1" offset="4344" starttimestamp="1645820509543" timestamp="184111231">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6930" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11575" docExpressionCount="1129" docLength="12756" length="1" offset="4381" starttimestamp="1645820509543" timestamp="184111231">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6931" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11576" docExpressionCount="1129" docLength="12757" length="1" offset="4397" starttimestamp="1645820509543" timestamp="184111247">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6932" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11577" docExpressionCount="1129" docLength="12758" length="1" offset="4421" starttimestamp="1645820509543" timestamp="184111247">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6933" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11578" docExpressionCount="1129" docLength="12759" length="1" offset="4448" starttimestamp="1645820509543" timestamp="184111247">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6934" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11579" docExpressionCount="1129" docLength="12760" length="1" offset="4484" starttimestamp="1645820509543" timestamp="184111247">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6935" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11580" docExpressionCount="1129" docLength="12761" length="1" offset="4517" starttimestamp="1645820509543" timestamp="184111247">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6936" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11581" docExpressionCount="1129" docLength="12762" length="1" offset="4544" starttimestamp="1645820509543" timestamp="184111247">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6937" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11582" docExpressionCount="1129" docLength="12763" length="1" offset="4581" starttimestamp="1645820509543" timestamp="184111263">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6938" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11583" docExpressionCount="1129" docLength="12764" length="1" offset="4590" starttimestamp="1645820509543" timestamp="184111263">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6939" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11584" docExpressionCount="1129" docLength="12765" length="1" offset="4604" starttimestamp="1645820509543" timestamp="184111263">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6940" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11585" docExpressionCount="1129" docLength="12766" length="1" offset="4611" starttimestamp="1645820509543" timestamp="184111263">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6941" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11586" docExpressionCount="1129" docLength="12767" length="1" offset="4627" starttimestamp="1645820509543" timestamp="184111263">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6942" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11587" docExpressionCount="1129" docLength="12768" length="1" offset="4679" starttimestamp="1645820509543" timestamp="184111263">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6943" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11588" docExpressionCount="1129" docLength="12769" length="1" offset="4699" starttimestamp="1645820509543" timestamp="184111278">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6944" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11589" docExpressionCount="1129" docLength="12770" length="1" offset="4729" starttimestamp="1645820509543" timestamp="184111278">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6945" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11590" docExpressionCount="1129" docLength="12771" length="1" offset="4738" starttimestamp="1645820509543" timestamp="184111278">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6946" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11591" docExpressionCount="1129" docLength="12772" length="1" offset="4774" starttimestamp="1645820509543" timestamp="184111278">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6947" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11592" docExpressionCount="1129" docLength="12773" length="1" offset="4794" starttimestamp="1645820509543" timestamp="184111278">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6948" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11593" docExpressionCount="1129" docLength="12774" length="1" offset="4815" starttimestamp="1645820509543" timestamp="184111278">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6949" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11594" docExpressionCount="1129" docLength="12775" length="1" offset="4843" starttimestamp="1645820509543" timestamp="184111294">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6950" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11595" docExpressionCount="1129" docLength="12776" length="1" offset="4881" starttimestamp="1645820509543" timestamp="184111294">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6951" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11596" docExpressionCount="1129" docLength="12777" length="1" offset="4897" starttimestamp="1645820509543" timestamp="184111300">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6952" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11597" docExpressionCount="1129" docLength="12778" length="1" offset="4906" starttimestamp="1645820509543" timestamp="184111300">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6953" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11598" docExpressionCount="1129" docLength="12779" length="1" offset="4930" starttimestamp="1645820509543" timestamp="184111316">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6954" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11599" docExpressionCount="1129" docLength="12780" length="1" offset="4951" starttimestamp="1645820509543" timestamp="184111316">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6955" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11600" docExpressionCount="1129" docLength="12781" length="1" offset="4979" starttimestamp="1645820509543" timestamp="184111316">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6956" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11601" docExpressionCount="1129" docLength="12782" length="1" offset="5016" starttimestamp="1645820509543" timestamp="184111316">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6957" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11602" docExpressionCount="1129" docLength="12783" length="1" offset="5050" starttimestamp="1645820509543" timestamp="184111332">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6958" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11603" docExpressionCount="1129" docLength="12784" length="1" offset="5078" starttimestamp="1645820509543" timestamp="184111332">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6959" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11604" docExpressionCount="1129" docLength="12785" length="1" offset="5116" starttimestamp="1645820509543" timestamp="184111332">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6960" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11605" docExpressionCount="1129" docLength="12786" length="1" offset="5132" starttimestamp="1645820509543" timestamp="184111332">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6961" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11606" docExpressionCount="1129" docLength="12787" length="1" offset="5141" starttimestamp="1645820509543" timestamp="184111332">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6962" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11607" docExpressionCount="1129" docLength="12788" length="1" offset="5162" starttimestamp="1645820509543" timestamp="184111347">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6963" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11608" docExpressionCount="1129" docLength="12789" length="1" offset="5183" starttimestamp="1645820509543" timestamp="184111347">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6964" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11609" docExpressionCount="1129" docLength="12790" length="1" offset="5237" starttimestamp="1645820509543" timestamp="184111347">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6965" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11610" docExpressionCount="1129" docLength="12791" length="1" offset="5259" starttimestamp="1645820509543" timestamp="184111347">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6966" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11611" docExpressionCount="1129" docLength="12792" length="1" offset="5277" starttimestamp="1645820509543" timestamp="184111347">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6967" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11612" docExpressionCount="1129" docLength="12793" length="1" offset="5308" starttimestamp="1645820509543" timestamp="184111347">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6968" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11613" docExpressionCount="1129" docLength="12794" length="1" offset="5344" starttimestamp="1645820509543" timestamp="184111363">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6969" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11614" docExpressionCount="1129" docLength="12795" length="1" offset="5355" starttimestamp="1645820509543" timestamp="184111363">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6970" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11615" docExpressionCount="1129" docLength="12796" length="1" offset="5393" starttimestamp="1645820509543" timestamp="184111363">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6971" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11616" docExpressionCount="1129" docLength="12797" length="1" offset="5409" starttimestamp="1645820509543" timestamp="184111363">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6972" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11617" docExpressionCount="1129" docLength="12798" length="1" offset="5418" starttimestamp="1645820509543" timestamp="184111363">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6973" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11618" docExpressionCount="1129" docLength="12799" length="1" offset="5435" starttimestamp="1645820509543" timestamp="184111363">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6974" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11619" docExpressionCount="1129" docLength="12800" length="1" offset="5552" starttimestamp="1645820509543" timestamp="184111363">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6975" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11620" docExpressionCount="1129" docLength="12801" length="1" offset="5561" starttimestamp="1645820509543" timestamp="184111416">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6976" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11621" docExpressionCount="1129" docLength="12802" length="1" offset="5576" starttimestamp="1645820509543" timestamp="184111416">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6977" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11622" docExpressionCount="1129" docLength="12803" length="1" offset="5675" starttimestamp="1645820509543" timestamp="184111416">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6978" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11623" docExpressionCount="1129" docLength="12804" length="1" offset="5682" starttimestamp="1645820509543" timestamp="184111416">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6979" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11624" docExpressionCount="1129" docLength="12805" length="1" offset="5694" starttimestamp="1645820509543" timestamp="184111416">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6980" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11625" docExpressionCount="1129" docLength="12806" length="1" offset="5699" starttimestamp="1645820509543" timestamp="184111416">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6981" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11626" docExpressionCount="1129" docLength="12807" length="1" offset="5714" starttimestamp="1645820509543" timestamp="184111416">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6982" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11627" docExpressionCount="1129" docLength="12808" length="1" offset="5731" starttimestamp="1645820509543" timestamp="184111432">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6983" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11628" docExpressionCount="1129" docLength="12809" length="1" offset="5781" starttimestamp="1645820509543" timestamp="184111432">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6984" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11629" docExpressionCount="1129" docLength="12810" length="1" offset="5799" starttimestamp="1645820509543" timestamp="184111432">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6985" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11630" docExpressionCount="1129" docLength="12811" length="1" offset="5827" starttimestamp="1645820509543" timestamp="184111432">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6986" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11631" docExpressionCount="1129" docLength="12812" length="1" offset="5834" starttimestamp="1645820509543" timestamp="184111432">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6987" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11632" docExpressionCount="1129" docLength="12813" length="1" offset="5868" starttimestamp="1645820509543" timestamp="184111432">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6988" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11633" docExpressionCount="1129" docLength="12814" length="1" offset="5885" starttimestamp="1645820509543" timestamp="184111432">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6989" _type="Insert" date="Sun Feb 27 18:30:20 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11634" docExpressionCount="1129" docLength="12815" length="1" offset="5903" starttimestamp="1645820509543" timestamp="184111448">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6990" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11635" docExpressionCount="1129" docLength="12816" length="1" offset="5928" starttimestamp="1645820509543" timestamp="184111463">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6991" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11636" docExpressionCount="1129" docLength="12817" length="1" offset="5963" starttimestamp="1645820509543" timestamp="184111463">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6992" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11637" docExpressionCount="1129" docLength="12818" length="1" offset="5976" starttimestamp="1645820509543" timestamp="184111463">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6993" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11638" docExpressionCount="1129" docLength="12819" length="1" offset="5982" starttimestamp="1645820509543" timestamp="184111463">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6994" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11639" docExpressionCount="1129" docLength="12820" length="1" offset="6002" starttimestamp="1645820509543" timestamp="184111463">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6995" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11640" docExpressionCount="1129" docLength="12821" length="1" offset="6020" starttimestamp="1645820509543" timestamp="184111479">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6996" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11641" docExpressionCount="1129" docLength="12822" length="1" offset="6045" starttimestamp="1645820509543" timestamp="184111479">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6997" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11642" docExpressionCount="1129" docLength="12823" length="1" offset="6079" starttimestamp="1645820509543" timestamp="184111479">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6998" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11643" docExpressionCount="1129" docLength="12824" length="1" offset="6110" starttimestamp="1645820509543" timestamp="184111479">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="6999" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11644" docExpressionCount="1129" docLength="12825" length="1" offset="6135" starttimestamp="1645820509543" timestamp="184111479">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7000" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11645" docExpressionCount="1129" docLength="12826" length="1" offset="6170" starttimestamp="1645820509543" timestamp="184111479">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7001" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11646" docExpressionCount="1129" docLength="12827" length="1" offset="6183" starttimestamp="1645820509543" timestamp="184111494">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7002" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11647" docExpressionCount="1129" docLength="12828" length="1" offset="6190" starttimestamp="1645820509543" timestamp="184111494">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7003" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11648" docExpressionCount="1129" docLength="12829" length="1" offset="6208" starttimestamp="1645820509543" timestamp="184111501">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7004" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11649" docExpressionCount="1129" docLength="12830" length="1" offset="6226" starttimestamp="1645820509543" timestamp="184111501">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7005" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11650" docExpressionCount="1129" docLength="12831" length="1" offset="6277" starttimestamp="1645820509543" timestamp="184111501">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7006" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11651" docExpressionCount="1129" docLength="12832" length="1" offset="6296" starttimestamp="1645820509543" timestamp="184111517">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7007" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11652" docExpressionCount="1129" docLength="12833" length="1" offset="6332" starttimestamp="1645820509543" timestamp="184111517">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7008" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11653" docExpressionCount="1129" docLength="12834" length="1" offset="6347" starttimestamp="1645820509543" timestamp="184111517">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7009" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11654" docExpressionCount="1129" docLength="12835" length="1" offset="6375" starttimestamp="1645820509543" timestamp="184111517">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7010" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11655" docExpressionCount="1129" docLength="12836" length="1" offset="6408" starttimestamp="1645820509543" timestamp="184111517">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7011" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11656" docExpressionCount="1129" docLength="12837" length="1" offset="6444" starttimestamp="1645820509543" timestamp="184111532">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7012" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11657" docExpressionCount="1129" docLength="12838" length="1" offset="6452" starttimestamp="1645820509543" timestamp="184111532">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7013" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11658" docExpressionCount="1129" docLength="12839" length="1" offset="6465" starttimestamp="1645820509543" timestamp="184111532">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7014" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11659" docExpressionCount="1129" docLength="12840" length="1" offset="6471" starttimestamp="1645820509543" timestamp="184111532">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7015" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11660" docExpressionCount="1129" docLength="12841" length="1" offset="6485" starttimestamp="1645820509543" timestamp="184111532">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7016" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11661" docExpressionCount="1129" docLength="12842" length="1" offset="6576" starttimestamp="1645820509543" timestamp="184111532">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7017" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11662" docExpressionCount="1129" docLength="12843" length="1" offset="6583" starttimestamp="1645820509543" timestamp="184111548">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7018" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11663" docExpressionCount="1129" docLength="12844" length="1" offset="6595" starttimestamp="1645820509543" timestamp="184111548">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7019" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11664" docExpressionCount="1129" docLength="12845" length="1" offset="6601" starttimestamp="1645820509543" timestamp="184111548">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7020" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11665" docExpressionCount="1129" docLength="12846" length="1" offset="6618" starttimestamp="1645820509543" timestamp="184111548">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7021" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11666" docExpressionCount="1129" docLength="12847" length="1" offset="6635" starttimestamp="1645820509543" timestamp="184111563">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7022" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11667" docExpressionCount="1129" docLength="12848" length="1" offset="6688" starttimestamp="1645820509543" timestamp="184111563">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7023" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11668" docExpressionCount="1129" docLength="12849" length="1" offset="6706" starttimestamp="1645820509543" timestamp="184111563">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7024" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11669" docExpressionCount="1129" docLength="12850" length="1" offset="6720" starttimestamp="1645820509543" timestamp="184111563">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7025" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11670" docExpressionCount="1129" docLength="12851" length="1" offset="6745" starttimestamp="1645820509543" timestamp="184111563">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7026" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11671" docExpressionCount="1129" docLength="12852" length="1" offset="6780" starttimestamp="1645820509543" timestamp="184111579">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7027" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11672" docExpressionCount="1129" docLength="12853" length="1" offset="6787" starttimestamp="1645820509543" timestamp="184111579">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7028" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11673" docExpressionCount="1129" docLength="12854" length="1" offset="6799" starttimestamp="1645820509543" timestamp="184111579">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7029" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11674" docExpressionCount="1129" docLength="12855" length="1" offset="6804" starttimestamp="1645820509543" timestamp="184111579">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7030" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11675" docExpressionCount="1129" docLength="12856" length="1" offset="6817" starttimestamp="1645820509543" timestamp="184111579">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7031" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11676" docExpressionCount="1129" docLength="12857" length="1" offset="6834" starttimestamp="1645820509543" timestamp="184111579">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7032" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11677" docExpressionCount="1129" docLength="12858" length="1" offset="6865" starttimestamp="1645820509543" timestamp="184111579">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7033" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11678" docExpressionCount="1129" docLength="12859" length="1" offset="6889" starttimestamp="1645820509543" timestamp="184111595">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7034" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11679" docExpressionCount="1129" docLength="12860" length="1" offset="6920" starttimestamp="1645820509543" timestamp="184111595">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7035" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11680" docExpressionCount="1129" docLength="12861" length="1" offset="6943" starttimestamp="1645820509543" timestamp="184111601">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7036" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11681" docExpressionCount="1129" docLength="12862" length="1" offset="6991" starttimestamp="1645820509543" timestamp="184111601">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7037" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11682" docExpressionCount="1129" docLength="12863" length="1" offset="7009" starttimestamp="1645820509543" timestamp="184111601">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7038" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11683" docExpressionCount="1129" docLength="12864" length="1" offset="7033" starttimestamp="1645820509543" timestamp="184111601">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7039" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11684" docExpressionCount="1129" docLength="12865" length="1" offset="7040" starttimestamp="1645820509543" timestamp="184111617">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7040" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11685" docExpressionCount="1129" docLength="12866" length="1" offset="7052" starttimestamp="1645820509543" timestamp="184111617">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7041" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11686" docExpressionCount="1129" docLength="12867" length="1" offset="7058" starttimestamp="1645820509543" timestamp="184111632">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7042" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11687" docExpressionCount="1129" docLength="12868" length="1" offset="7074" starttimestamp="1645820509543" timestamp="184111632">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7043" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11688" docExpressionCount="1129" docLength="12869" length="1" offset="7091" starttimestamp="1645820509543" timestamp="184111632">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7044" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11689" docExpressionCount="1129" docLength="12870" length="1" offset="7122" starttimestamp="1645820509543" timestamp="184111632">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7045" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11690" docExpressionCount="1129" docLength="12871" length="1" offset="7146" starttimestamp="1645820509543" timestamp="184111632">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="6868" _type="SelectTextCommand" caretOffset="2605" date="Sun Feb 27 18:30:20 EST 2022" end="7052" start="2605" starttimestamp="1645820509543" timestamp="184110799" />
  <Command __id="6869" _type="SelectTextCommand" caretOffset="2605" date="Sun Feb 27 18:30:20 EST 2022" end="7052" start="2605" starttimestamp="1645820509543" timestamp="184110799" />
  <Command __id="7052" _type="InsertStringCommand" date="Sun Feb 27 18:30:21 EST 2022" starttimestamp="1645820509543" timestamp="184111664" timestamp2="184111664">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="7053" _type="InsertStringCommand" date="Sun Feb 27 18:30:21 EST 2022" starttimestamp="1645820509543" timestamp="184111664" timestamp2="184111664">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="7054" _type="MoveCaretCommand" caretOffset="2650" date="Sun Feb 27 18:30:21 EST 2022" docOffset="2728" starttimestamp="1645820509543" timestamp="184112419" />
  <Command __id="7055" _type="MoveCaretCommand" caretOffset="2650" date="Sun Feb 27 18:30:21 EST 2022" docOffset="2728" starttimestamp="1645820509543" timestamp="184112419" />
  <Command __id="7056" _type="ShellCommand" date="Sun Feb 27 18:30:22 EST 2022" starttimestamp="1645820509543" timestamp="184113120" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7057" _type="ShellCommand" date="Sun Feb 27 18:30:24 EST 2022" starttimestamp="1645820509543" timestamp="184114607" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7058" _type="EclipseCommand" commandID="org.eclipse.ui.file.close" date="Sun Feb 27 18:30:24 EST 2022" starttimestamp="1645820509543" timestamp="184114623" />
  <Command __id="7059" _type="MoveCaretCommand" caretOffset="2755" date="Sun Feb 27 18:30:24 EST 2022" docOffset="2833" starttimestamp="1645820509543" timestamp="184114970" />
  <Command __id="7060" _type="MoveCaretCommand" caretOffset="2755" date="Sun Feb 27 18:30:24 EST 2022" docOffset="2833" starttimestamp="1645820509543" timestamp="184114970" />
  <Command __id="7061" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 18:30:24 EST 2022" starttimestamp="1645820509543" timestamp="184115233" />
  <Command __id="7062" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:30:24 EST 2022" starttimestamp="1645820509543" timestamp="184115323" />
  <Command __id="7063" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:30:24 EST 2022" starttimestamp="1645820509543" timestamp="184115339" />
  <DocumentChange __id="7046" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11691" docExpressionCount="1129" docLength="12872" length="1" offset="7177" starttimestamp="1645820509543" timestamp="184111632">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7047" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11692" docExpressionCount="1129" docLength="12873" length="1" offset="7200" starttimestamp="1645820509543" timestamp="184111632">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7048" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11693" docExpressionCount="1129" docLength="12874" length="1" offset="7212" starttimestamp="1645820509543" timestamp="184111648">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7049" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11694" docExpressionCount="1129" docLength="12875" length="1" offset="7217" starttimestamp="1645820509543" timestamp="184111648">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7050" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11695" docExpressionCount="1129" docLength="12876" length="1" offset="7230" starttimestamp="1645820509543" timestamp="184111648">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="7051" _type="Insert" date="Sun Feb 27 18:30:21 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11696" docExpressionCount="1129" docLength="12877" length="1" offset="7302" starttimestamp="1645820509543" timestamp="184111648">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="7066" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:31:05 EST 2022" docASTNodeCount="63" docActiveCodeLength="362" docExpressionCount="26" docLength="362" projectName="pa1" starttimestamp="1645820509543" timestamp="184156356">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶			numErrors++;¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="7067" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:31:08 EST 2022" starttimestamp="1645820509543" timestamp="184158748" />
  <Command __id="7068" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:31:08 EST 2022" starttimestamp="1645820509543" timestamp="184158748" />
  <Command __id="7069" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:31:12 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="184162616">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="7076" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:31:13 EST 2022" docASTNodeCount="60" docActiveCodeLength="345" docExpressionCount="24" docLength="345" projectName="pa1" starttimestamp="1645820509543" timestamp="184164188">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶		"), Diff(DELETE,"	numErrors++;¶		"), Diff(EQUAL,"}	¶}")]]]></diff>
    <snapshot><![CDATA[class ErrorReporter {

		private int numErrors;
		public static boolean gg;

		static void ErrorReporter(int j, boolean k, boo[] a1) {
			numErrors = 0;
			try = !(a == a);
		}

		public static boolean hasErrors() {
			return numErrors > 0;
		}

		public void reportError(String message) {
			System.out.println(message);
		}	
}]]></snapshot>
  </Command>
  <Command __id="7070" _type="MoveCaretCommand" caretOffset="196" date="Sun Feb 27 18:31:12 EST 2022" docOffset="196" starttimestamp="1645820509543" timestamp="184162701" />
  <Command __id="7071" _type="RunCommand" date="Sun Feb 27 18:31:13 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184163687" type="Run" />
  <Command __id="7072" _type="RunCommand" date="Sun Feb 27 18:31:13 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184163687" type="Run" />
  <Command __id="7073" _type="RunCommand" date="Sun Feb 27 18:31:13 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184163818" type="Run" />
  <Command __id="7074" _type="RunCommand" date="Sun Feb 27 18:31:13 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184163818" type="Run" />
  <Command __id="7075" _type="EHExceptionCommand" date="Sun Feb 27 18:31:13 EST 2022" starttimestamp="1645820509543" timestamp="184163850" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
in here0, ID is***numErrors***
numErrors
In scanner =
in here1, EQUAL is***=***
=
0
;
in here0, ID is***try***
try
In scanner =
in here1, EQUAL is***=***
=
!
(
a
In scanner =
==
a
)
;
}
public
static
boolean
hasErrors
(
)
{
return
numErrors
>
0
;
}
public
void
reportError
(
String
message
)
{
in here0, ID is***System***
System
in here1, DOT is***.***
.
out
.
println
(
message
)
;
Parse error: parsing statement, in subcase ID, current token is: }
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="7078" _type="MoveCaretCommand" caretOffset="2710" date="Sun Feb 27 18:31:46 EST 2022" docOffset="2788" starttimestamp="1645820509543" timestamp="184197000" />
  <Command __id="7079" _type="MoveCaretCommand" caretOffset="634" date="Sun Feb 27 18:31:48 EST 2022" docOffset="712" starttimestamp="1645820509543" timestamp="184199058" />
  <Command __id="7080" _type="MoveCaretCommand" caretOffset="634" date="Sun Feb 27 18:31:48 EST 2022" docOffset="712" starttimestamp="1645820509543" timestamp="184199058" />
  <Command __id="7081" _type="MoveCaretCommand" caretOffset="2001" date="Sun Feb 27 18:31:53 EST 2022" docOffset="2079" starttimestamp="1645820509543" timestamp="184203928" />
  <Command __id="7082" _type="MoveCaretCommand" caretOffset="2001" date="Sun Feb 27 18:31:53 EST 2022" docOffset="2079" starttimestamp="1645820509543" timestamp="184203928" />
  <Command __id="7083" _type="MoveCaretCommand" caretOffset="2127" date="Sun Feb 27 18:31:53 EST 2022" docOffset="2205" starttimestamp="1645820509543" timestamp="184204250" />
  <Command __id="7084" _type="MoveCaretCommand" caretOffset="2127" date="Sun Feb 27 18:31:53 EST 2022" docOffset="2205" starttimestamp="1645820509543" timestamp="184204250" />
  <Command __id="7085" _type="MoveCaretCommand" caretOffset="2220" date="Sun Feb 27 18:31:54 EST 2022" docOffset="2298" starttimestamp="1645820509543" timestamp="184205184" />
  <Command __id="7086" _type="MoveCaretCommand" caretOffset="2220" date="Sun Feb 27 18:31:54 EST 2022" docOffset="2298" starttimestamp="1645820509543" timestamp="184205184" />
  <Command __id="7087" _type="MoveCaretCommand" caretOffset="2221" date="Sun Feb 27 18:31:55 EST 2022" docOffset="2299" starttimestamp="1645820509543" timestamp="184205553" />
  <Command __id="7088" _type="MoveCaretCommand" caretOffset="2221" date="Sun Feb 27 18:31:55 EST 2022" docOffset="2299" starttimestamp="1645820509543" timestamp="184205553" />
  <Command __id="7077" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:31:46 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11696" docExpressionCount="1129" docLength="12877" projectName="pa1" starttimestamp="1645820509543" timestamp="184196737">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				// Method Declaration¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				// both possible¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶							// Field Declaration¶							case SEMICOLON:¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							// Method Declaration¶							case LPAREN:¶								acceptIt();¶								if (startsType(currentToken.kind)) {¶									parseParameterList();¶								}¶								accept(TokenKind.RPAREN);¶								accept(TokenKind.LCURLY);¶								¶								while (startsStatement(currentToken.kind)) {¶									parseStatement();¶								}¶								accept(TokenKind.RCURLY);¶								break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations, no types declared.");¶					}¶					break;¶					¶			}¶		}¶		System.out.println("out here end of program: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶		"), Diff(INSERT,"	"), Diff(EQUAL,"case LCURLY:¶			"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"while (startsStatement(currentToken.kind)) {¶				"), Diff(INSERT,"	"), Diff(EQUAL,"parseStatement();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"}¶"), Diff(INSERT,"	"), Diff(EQUAL,"//			System.out.println("in here: " + currentToken);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RCURLY);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶			"), Diff(INSERT,"	"), Diff(EQUAL,"¶		"), Diff(INSERT,"	"), Diff(EQUAL,"case INT: case BOOLEAN:¶			"), Diff(INSERT,"	"), Diff(EQUAL,"parseType();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"parseId();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.EQUAL);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶		"), Diff(INSERT,"	"), Diff(EQUAL,"¶		"), Diff(INSERT,"	"), Diff(EQUAL,"case ID:			¶			"), Diff(INSERT,"	"), Diff(EQUAL,"System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶			"), Diff(INSERT,"	"), Diff(EQUAL,"switch (currentToken.kind) {¶				"), Diff(INSERT,"	"), Diff(EQUAL,"// in Type¶				"), Diff(INSERT,"	"), Diff(EQUAL,"case ID:¶					"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶					"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.EQUAL);¶					"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶					"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶					"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶				"), Diff(INSERT,"	"), Diff(EQUAL,"¶				"), Diff(INSERT,"	"), Diff(EQUAL,"// in Reference¶				"), Diff(INSERT,"	"), Diff(EQUAL,"case EQUAL:¶	"), Diff(INSERT,"	"), Diff(EQUAL,"//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶					"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶	"), Diff(INSERT,"	"), Diff(EQUAL,"//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶					"), Diff(INSERT,"	parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// both¶					case LBRACKET: ¶						acceptIt();¶						// in Type¶						if (currentToken.kind == TokenKind.RBRACKET) {¶							acceptIt();¶							accept(TokenKind.ID);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						} else {¶							// in Reference¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						}¶						break;¶					¶					case DOT:¶						while (currentToken.kind == TokenKind.DOT) {¶							acceptIt();¶							accept(TokenKind.ID);¶						}¶						switch (currentToken.kind) {¶							case EQUAL:¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LBRACKET: ¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.RBRACKET);¶								accept(TokenKind.EQUAL);¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LPAREN:¶								acceptIt();¶								if (currentToken.kind == TokenKind.RPAREN) {¶									acceptIt();¶								} else {¶									parseArgumentList();¶									accept(TokenKind.RPAREN);¶								}¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							default:¶								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶						}¶					default:¶						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶				}¶				break;¶			¶			case THIS:¶				acceptIt();¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶				case EQUAL:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶				¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					"), Diff(EQUAL,"parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶				"), Diff(INSERT,"	"), Diff(EQUAL,"¶				case LPAREN:¶					acceptIt();¶					if (currentToken.kind == TokenKind.RPAREN) {¶						acceptIt();¶					"), Diff(INSERT,"	accept(TokenKind.SEMICOLON);¶					"), Diff(EQUAL,"} else {¶						parseArgumentList();¶						accept(TokenKind.RPAREN);¶					"), Diff(DELETE,"}¶					accept(TokenKind.SEMICOLON);¶					break;¶				¶				// both¶				case LBRACKET: ¶					acceptIt();¶					// in Type¶					if (currentToken.kind == TokenKind.RBRACKET) {¶						acceptIt();¶						accept(TokenKind.ID);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶					} else {¶						// in Reference¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶					}¶					break;¶				¶				case DOT:¶					while (currentToken.kind == TokenKind.DOT) {¶						acceptIt();¶						accept(TokenKind.ID);¶					}¶					switch (currentToken.kind) {¶						case EQUAL:¶							acceptIt();¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶							break;¶						¶						case LBRACKET: ¶							acceptIt();¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶							break;¶						¶						case LPAREN:¶							acceptIt();¶							if (currentToken.kind == TokenKind.RPAREN) {¶								acceptIt();¶							} else {¶								parseArgumentList();¶								accept(TokenKind.RPAREN);¶							}¶							accept(TokenKind.SEMICOLON);¶							break;¶						¶		"), Diff(INSERT,"	accept(TokenKind.SEMICOLON);¶					}¶					break;¶				¶"), Diff(EQUAL,"				default:¶					"), Diff(DELETE,"		"), Diff(EQUAL,"parseError("parsing statement, in subcase "), Diff(DELETE,"ID, in subcase DOT, current token is: " + currentToken.spelling);¶					}¶				default:¶					parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶			}¶			break;¶		¶		case THIS:¶			acceptIt();¶			while (currentToken.kind == TokenKind.DOT) {¶				acceptIt();¶				accept(TokenKind.ID);¶			}¶			switch (currentToken.kind) {¶			case EQUAL:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case LBRACKET:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RBRACKET);¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶				¶			case LPAREN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.RPAREN) {¶					acceptIt();¶					accept(TokenKind.SEMICOLON);¶				} else {¶					parseArgumentList();¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			default:¶				parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶			}¶			break;¶			¶		case RETURN:¶			acceptIt();¶			if (currentToken.kind == TokenKind.SEMICOLON) {¶				acceptIt();¶"), Diff(INSERT,"THIS, current token is: " + currentToken);¶				}¶				break;¶				¶			case RETURN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.SEMICOLON) {¶					acceptIt();¶	"), Diff(EQUAL,"			} else {¶				"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.SEMICOLON);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"}¶			"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶		"), Diff(INSERT,"	"), Diff(EQUAL,"¶		"), Diff(INSERT,"	"), Diff(EQUAL,"case IF:¶			"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.LPAREN);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RPAREN);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"parseStatement();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"if (currentToken.kind == TokenKind.ELSE) {¶				"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶				"), Diff(INSERT,"	"), Diff(EQUAL,"parseStatement();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"}¶			"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶			"), Diff(INSERT,"	"), Diff(EQUAL,"¶		"), Diff(INSERT,"	"), Diff(EQUAL,"case WHILE:¶			"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.LPAREN);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RPAREN);¶			"), Diff(INSERT,"	"), Diff(EQUAL,"parseStatement();¶			"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶		"), Diff(INSERT,"	"), Diff(EQUAL,"¶		"), Diff(INSERT,"	"), Diff(EQUAL,"default:¶			"), Diff(INSERT,"	"), Diff(EQUAL,"parseError("parsing statement, current token is:" + currentToken);¶		"), Diff(INSERT,"		break;¶		"), Diff(EQUAL,"}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶	¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶			// starts with reference¶			case ID: case THIS:¶				acceptIt();¶				// dealing with (.id)*¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					// reference[expression]¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					// reference(arglist?)¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						break;¶						¶					// just reference¶					default:¶						break;¶//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶				¶			case UNOP: case MINUS:¶				acceptIt();¶				parseExpression();¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				break;¶			¶			case NUM: case TRUE: case FALSE:¶				acceptIt();¶				break;¶			¶			case NEW:¶				acceptIt();¶				switch (currentToken.kind) {¶				case ID:¶					acceptIt();¶					switch (currentToken.kind) {¶					case LPAREN:¶						acceptIt();¶						accept(TokenKind.RPAREN);¶						break;¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					}¶				¶				case INT:¶					acceptIt();¶					accept(TokenKind.LBRACKET);¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				default:¶					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶			¶			default:¶				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				break;¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				// Method Declaration
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				// both possible
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
							// Field Declaration
							case SEMICOLON:
								accept(TokenKind.SEMICOLON);
								break;
							
							// Method Declaration
							case LPAREN:
								acceptIt();
								if (startsType(currentToken.kind)) {
									parseParameterList();
								}
								accept(TokenKind.RPAREN);
								accept(TokenKind.LCURLY);
								
								while (startsStatement(currentToken.kind)) {
									parseStatement();
								}
								accept(TokenKind.RCURLY);
								break;
						}
					}
					else {
						parseError("Parsing wrong in declarations, no types declared.");
					}
					break;
					
			}
		}
		System.out.println("out here end of program: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
			case LCURLY:
				acceptIt();
				while (startsStatement(currentToken.kind)) {
					parseStatement();
				}
	//			System.out.println("in here: " + currentToken);
				accept(TokenKind.RCURLY);
				break;
				
			case INT: case BOOLEAN:
				parseType();
				parseId();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case ID:			
				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");
				acceptIt();
				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");
				switch (currentToken.kind) {
					// in Type
					case ID:
						acceptIt();
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					// in Reference
					case EQUAL:
		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");
						acceptIt();
		//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					// both
					case LBRACKET: 
						acceptIt();
						// in Type
						if (currentToken.kind == TokenKind.RBRACKET) {
							acceptIt();
							accept(TokenKind.ID);
							accept(TokenKind.EQUAL);
							parseExpression();
							accept(TokenKind.SEMICOLON);
						} else {
							// in Reference
							parseExpression();
							accept(TokenKind.RBRACKET);
							accept(TokenKind.EQUAL);
							parseExpression();
							accept(TokenKind.SEMICOLON);
						}
						break;
					
					case DOT:
						while (currentToken.kind == TokenKind.DOT) {
							acceptIt();
							accept(TokenKind.ID);
						}
						switch (currentToken.kind) {
							case EQUAL:
								acceptIt();
								parseExpression();
								accept(TokenKind.SEMICOLON);
								break;
							
							case LBRACKET: 
								acceptIt();
								parseExpression();
								accept(TokenKind.RBRACKET);
								accept(TokenKind.EQUAL);
								parseExpression();
								accept(TokenKind.SEMICOLON);
								break;
							
							case LPAREN:
								acceptIt();
								if (currentToken.kind == TokenKind.RPAREN) {
									acceptIt();
								} else {
									parseArgumentList();
									accept(TokenKind.RPAREN);
								}
								accept(TokenKind.SEMICOLON);
								break;
							
							default:
								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
						}
					default:
						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
				}
				break;
			
			case THIS:
				acceptIt();
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
				case EQUAL:
					acceptIt();
					parseExpression();
					accept(TokenKind.SEMICOLON);
					break;
				
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
					break;
					
				case LPAREN:
					acceptIt();
					if (currentToken.kind == TokenKind.RPAREN) {
						acceptIt();
						accept(TokenKind.SEMICOLON);
					} else {
						parseArgumentList();
						accept(TokenKind.RPAREN);
						accept(TokenKind.SEMICOLON);
					}
					break;
				
				default:
					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
				}
				break;
				
			case RETURN:
				acceptIt();
				if (currentToken.kind == TokenKind.SEMICOLON) {
					acceptIt();
				} else {
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case IF:
				acceptIt();
				accept(TokenKind.LPAREN);
				parseExpression();
				accept(TokenKind.RPAREN);
				parseStatement();
				if (currentToken.kind == TokenKind.ELSE) {
					acceptIt();
					parseStatement();
				}
				break;
				
			case WHILE:
				acceptIt();
				accept(TokenKind.LPAREN);
				parseExpression();
				accept(TokenKind.RPAREN);
				parseStatement();
				break;
			
			default:
				parseError("parsing statement, current token is:" + currentToken);
				break;
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}

	
	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
			// starts with reference
			case ID: case THIS:
				acceptIt();
				// dealing with (.id)*
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					// reference[expression]
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					// reference(arglist?)
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						break;
						
					// just reference
					default:
						break;
//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
				
			case UNOP: case MINUS:
				acceptIt();
				parseExpression();
				break;
			
			case LPAREN:
				acceptIt();
				parseExpression();
				accept(TokenKind.RPAREN);
				break;
			
			case NUM: case TRUE: case FALSE:
				acceptIt();
				break;
			
			case NEW:
				acceptIt();
				switch (currentToken.kind) {
				case ID:
					acceptIt();
					switch (currentToken.kind) {
					case LPAREN:
						acceptIt();
						accept(TokenKind.RPAREN);
						break;
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					}
				
				case INT:
					acceptIt();
					accept(TokenKind.LBRACKET);
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				default:
					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
			
			default:
				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				break;
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="7089" _type="MoveCaretCommand" caretOffset="2147" date="Sun Feb 27 18:32:39 EST 2022" docOffset="2225" starttimestamp="1645820509543" timestamp="184250418" />
  <Command __id="7090" _type="MoveCaretCommand" caretOffset="2147" date="Sun Feb 27 18:32:39 EST 2022" docOffset="2225" starttimestamp="1645820509543" timestamp="184250418" />
  <DocumentChange __id="7091" _type="Insert" date="Sun Feb 27 18:32:41 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11707" docExpressionCount="1129" docLength="12888" length="11" offset="2225" starttimestamp="1645820509543" timestamp="184251550">
    <text><![CDATA[
									]]></text>
  </DocumentChange>
  <Command __id="7092" _type="InsertStringCommand" date="Sun Feb 27 18:32:41 EST 2022" starttimestamp="1645820509543" timestamp="184251565" timestamp2="184251565">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7093" _type="InsertStringCommand" date="Sun Feb 27 18:32:41 EST 2022" starttimestamp="1645820509543" timestamp="184251565" timestamp2="184251565">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="7094" _type="Insert" date="Sun Feb 27 18:32:41 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11708" docExpressionCount="1129" docLength="12889" length="1" offset="2236" starttimestamp="1645820509543" timestamp="184252410">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="7095" _type="InsertStringCommand" date="Sun Feb 27 18:32:41 EST 2022" starttimestamp="1645820509543" timestamp="184252420" timestamp2="184252420">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7096" _type="InsertStringCommand" date="Sun Feb 27 18:32:41 EST 2022" starttimestamp="1645820509543" timestamp="184252420" timestamp2="184252420">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="7097" _type="Insert" date="Sun Feb 27 18:32:42 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11707" docExpressionCount="1129" docLength="12890" length="1" offset="2237" starttimestamp="1645820509543" timestamp="184252750">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="7098" _type="InsertStringCommand" date="Sun Feb 27 18:32:42 EST 2022" starttimestamp="1645820509543" timestamp="184252765" timestamp2="184252765">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7099" _type="InsertStringCommand" date="Sun Feb 27 18:32:42 EST 2022" starttimestamp="1645820509543" timestamp="184252765" timestamp2="184252765">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="7100" _type="Insert" date="Sun Feb 27 18:32:42 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11707" docExpressionCount="1129" docLength="12891" length="1" offset="2238" starttimestamp="1645820509543" timestamp="184253183">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="7101" _type="InsertStringCommand" date="Sun Feb 27 18:32:42 EST 2022" starttimestamp="1645820509543" timestamp="184253190" timestamp2="184253190">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7102" _type="InsertStringCommand" date="Sun Feb 27 18:32:42 EST 2022" starttimestamp="1645820509543" timestamp="184253190" timestamp2="184253190">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="7103" _type="Delete" date="Sun Feb 27 18:32:43 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11707" docExpressionCount="1129" docLength="12890" endLine="92" length="1" offset="2238" startLine="92" starttimestamp="1645820509543" timestamp="184253553">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="7104" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:43 EST 2022" starttimestamp="1645820509543" timestamp="184253557" />
  <Command __id="7105" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:43 EST 2022" starttimestamp="1645820509543" timestamp="184253557" />
  <DocumentChange __id="7106" _type="Delete" date="Sun Feb 27 18:32:43 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11708" docExpressionCount="1129" docLength="12889" endLine="92" length="1" offset="2237" startLine="92" starttimestamp="1645820509543" timestamp="184253696">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="7107" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:43 EST 2022" starttimestamp="1645820509543" timestamp="184253696" />
  <Command __id="7108" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:43 EST 2022" starttimestamp="1645820509543" timestamp="184253704" />
  <DocumentChange __id="7109" _type="Delete" date="Sun Feb 27 18:32:43 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11707" docExpressionCount="1129" docLength="12888" endLine="92" length="1" offset="2236" startLine="92" starttimestamp="1645820509543" timestamp="184253817">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="7110" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:43 EST 2022" starttimestamp="1645820509543" timestamp="184253832" />
  <Command __id="7111" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:43 EST 2022" starttimestamp="1645820509543" timestamp="184253832" />
  <DocumentChange __id="7112" _type="Insert" date="Sun Feb 27 18:32:43 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11708" docExpressionCount="1130" docLength="12889" length="1" offset="2236" starttimestamp="1645820509543" timestamp="184254102">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="7113" _type="InsertStringCommand" date="Sun Feb 27 18:32:43 EST 2022" starttimestamp="1645820509543" timestamp="184254102" timestamp2="184254102">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="7114" _type="InsertStringCommand" date="Sun Feb 27 18:32:43 EST 2022" starttimestamp="1645820509543" timestamp="184254102" timestamp2="184254102">
    <data><![CDATA[S]]></data>
  </Command>
  <DocumentChange __id="7115" _type="Insert" date="Sun Feb 27 18:32:43 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11709" docExpressionCount="1130" docLength="12890" length="1" offset="2237" starttimestamp="1645820509543" timestamp="184254218">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="7116" _type="InsertStringCommand" date="Sun Feb 27 18:32:43 EST 2022" starttimestamp="1645820509543" timestamp="184254218" timestamp2="184254218">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="7117" _type="InsertStringCommand" date="Sun Feb 27 18:32:43 EST 2022" starttimestamp="1645820509543" timestamp="184254218" timestamp2="184254218">
    <data><![CDATA[	]]></data>
  </Command>
  <DocumentChange __id="7118" _type="Insert" date="Sun Feb 27 18:32:43 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11710" docExpressionCount="1131" docLength="12891" length="1" offset="2238" starttimestamp="1645820509543" timestamp="184254356">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="7119" _type="InsertStringCommand" date="Sun Feb 27 18:32:43 EST 2022" starttimestamp="1645820509543" timestamp="184254371" timestamp2="184254371">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="7120" _type="InsertStringCommand" date="Sun Feb 27 18:32:43 EST 2022" starttimestamp="1645820509543" timestamp="184254371" timestamp2="184254371">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="7121" _type="Delete" date="Sun Feb 27 18:32:44 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11709" docExpressionCount="1130" docLength="12890" endLine="92" length="1" offset="2238" startLine="92" starttimestamp="1645820509543" timestamp="184254603">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="7122" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:44 EST 2022" starttimestamp="1645820509543" timestamp="184254619" />
  <Command __id="7123" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:44 EST 2022" starttimestamp="1645820509543" timestamp="184254619" />
  <DocumentChange __id="7124" _type="Delete" date="Sun Feb 27 18:32:44 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11708" docExpressionCount="1130" docLength="12889" endLine="92" length="1" offset="2237" startLine="92" starttimestamp="1645820509543" timestamp="184254769">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="7125" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:44 EST 2022" starttimestamp="1645820509543" timestamp="184254777" />
  <Command __id="7126" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:44 EST 2022" starttimestamp="1645820509543" timestamp="184254777" />
  <DocumentChange __id="7127" _type="Delete" date="Sun Feb 27 18:32:44 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11707" docExpressionCount="1129" docLength="12888" endLine="92" length="1" offset="2236" startLine="92" starttimestamp="1645820509543" timestamp="184254916">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="7128" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:44 EST 2022" starttimestamp="1645820509543" timestamp="184254916" />
  <Command __id="7129" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:44 EST 2022" starttimestamp="1645820509543" timestamp="184254916" />
  <DocumentChange __id="7130" _type="Insert" date="Sun Feb 27 18:32:44 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11708" docExpressionCount="1130" docLength="12889" length="1" offset="2236" starttimestamp="1645820509543" timestamp="184255016">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="7131" _type="InsertStringCommand" date="Sun Feb 27 18:32:44 EST 2022" starttimestamp="1645820509543" timestamp="184255016" timestamp2="184255016">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7132" _type="InsertStringCommand" date="Sun Feb 27 18:32:44 EST 2022" starttimestamp="1645820509543" timestamp="184255016" timestamp2="184255016">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="7133" _type="Delete" date="Sun Feb 27 18:32:44 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11707" docExpressionCount="1129" docLength="12888" endLine="92" length="1" offset="2236" startLine="92" starttimestamp="1645820509543" timestamp="184255332">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="7134" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:44 EST 2022" starttimestamp="1645820509543" timestamp="184255339" />
  <Command __id="7135" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:44 EST 2022" starttimestamp="1645820509543" timestamp="184255339" />
  <DocumentChange __id="7136" _type="Insert" date="Sun Feb 27 18:32:45 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11708" docExpressionCount="1130" docLength="12889" length="1" offset="2236" starttimestamp="1645820509543" timestamp="184255817">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="7137" _type="InsertStringCommand" date="Sun Feb 27 18:32:45 EST 2022" starttimestamp="1645820509543" timestamp="184255817" timestamp2="184255817">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="7138" _type="InsertStringCommand" date="Sun Feb 27 18:32:45 EST 2022" starttimestamp="1645820509543" timestamp="184255817" timestamp2="184255817">
    <data><![CDATA[S]]></data>
  </Command>
  <DocumentChange __id="7139" _type="Insert" date="Sun Feb 27 18:32:45 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11709" docExpressionCount="1130" docLength="12890" length="1" offset="2237" starttimestamp="1645820509543" timestamp="184256055">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="7140" _type="InsertStringCommand" date="Sun Feb 27 18:32:45 EST 2022" starttimestamp="1645820509543" timestamp="184256055" timestamp2="184256055">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="7141" _type="InsertStringCommand" date="Sun Feb 27 18:32:45 EST 2022" starttimestamp="1645820509543" timestamp="184256055" timestamp2="184256055">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="7142" _type="Insert" date="Sun Feb 27 18:32:45 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11710" docExpressionCount="1130" docLength="12891" length="1" offset="2238" starttimestamp="1645820509543" timestamp="184256118">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="7143" _type="InsertStringCommand" date="Sun Feb 27 18:32:45 EST 2022" starttimestamp="1645820509543" timestamp="184256118" timestamp2="184256118">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7144" _type="InsertStringCommand" date="Sun Feb 27 18:32:45 EST 2022" starttimestamp="1645820509543" timestamp="184256118" timestamp2="184256118">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="7145" _type="Insert" date="Sun Feb 27 18:32:45 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11711" docExpressionCount="1130" docLength="12892" length="1" offset="2239" starttimestamp="1645820509543" timestamp="184256340">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="7146" _type="InsertStringCommand" date="Sun Feb 27 18:32:45 EST 2022" starttimestamp="1645820509543" timestamp="184256340" timestamp2="184256340">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7147" _type="InsertStringCommand" date="Sun Feb 27 18:32:45 EST 2022" starttimestamp="1645820509543" timestamp="184256340" timestamp2="184256340">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="7148" _type="Insert" date="Sun Feb 27 18:32:46 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11712" docExpressionCount="1130" docLength="12893" length="1" offset="2240" starttimestamp="1645820509543" timestamp="184256471">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="7149" _type="InsertStringCommand" date="Sun Feb 27 18:32:46 EST 2022" starttimestamp="1645820509543" timestamp="184256471" timestamp2="184256471">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7150" _type="InsertStringCommand" date="Sun Feb 27 18:32:46 EST 2022" starttimestamp="1645820509543" timestamp="184256471" timestamp2="184256471">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="7151" _type="Insert" date="Sun Feb 27 18:32:46 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11713" docExpressionCount="1130" docLength="12894" length="1" offset="2241" starttimestamp="1645820509543" timestamp="184256602">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="7152" _type="InsertStringCommand" date="Sun Feb 27 18:32:46 EST 2022" starttimestamp="1645820509543" timestamp="184256602" timestamp2="184256602">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="7153" _type="InsertStringCommand" date="Sun Feb 27 18:32:46 EST 2022" starttimestamp="1645820509543" timestamp="184256602" timestamp2="184256602">
    <data><![CDATA[,]]></data>
  </Command>
  <DocumentChange __id="7154" _type="Delete" date="Sun Feb 27 18:32:46 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11712" docExpressionCount="1130" docLength="12893" endLine="92" length="1" offset="2241" startLine="92" starttimestamp="1645820509543" timestamp="184257040">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="7155" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:46 EST 2022" starttimestamp="1645820509543" timestamp="184257056" />
  <Command __id="7156" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:46 EST 2022" starttimestamp="1645820509543" timestamp="184257056" />
  <DocumentChange __id="7157" _type="Insert" date="Sun Feb 27 18:32:46 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11713" docExpressionCount="1130" docLength="12894" length="1" offset="2241" starttimestamp="1645820509543" timestamp="184257203">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="7158" _type="InsertStringCommand" date="Sun Feb 27 18:32:46 EST 2022" starttimestamp="1645820509543" timestamp="184257218" timestamp2="184257218">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="7159" _type="InsertStringCommand" date="Sun Feb 27 18:32:46 EST 2022" starttimestamp="1645820509543" timestamp="184257218" timestamp2="184257218">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="7160" _type="Insert" date="Sun Feb 27 18:32:46 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11714" docExpressionCount="1130" docLength="12895" length="1" offset="2242" starttimestamp="1645820509543" timestamp="184257403">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="7161" _type="InsertStringCommand" date="Sun Feb 27 18:32:46 EST 2022" starttimestamp="1645820509543" timestamp="184257403" timestamp2="184257403">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7162" _type="InsertStringCommand" date="Sun Feb 27 18:32:46 EST 2022" starttimestamp="1645820509543" timestamp="184257403" timestamp2="184257403">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7163" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 18:32:46 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="184257403" />
  <DocumentChange __id="7164" _type="Insert" date="Sun Feb 27 18:32:47 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11715" docExpressionCount="1132" docLength="12896" length="1" offset="2243" starttimestamp="1645820509543" timestamp="184258235">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="7165" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 18:32:48 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="184258558" />
  <DocumentChange __id="7166" _type="Replace" date="Sun Feb 27 18:32:48 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11717" docExpressionCount="1132" docLength="12898" endLine="92" insertionLength="3" int_docASTNodeCount="1604" int_docActiveCodeLength="11714" int_docExpressionCount="1130" int_docLength="12895" length="1" offset="2243" startLine="92" starttimestamp="1645820509543" timestamp="184258558">
    <deletedText><![CDATA[o]]></deletedText>
    <insertedText><![CDATA[out]]></insertedText>
  </DocumentChange>
  <Command __id="7167" _type="InsertStringCommand" date="Sun Feb 27 18:32:48 EST 2022" starttimestamp="1645820509543" timestamp="184258573" timestamp2="184258573">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7168" _type="InsertStringCommand" date="Sun Feb 27 18:32:48 EST 2022" starttimestamp="1645820509543" timestamp="184258573" timestamp2="184258573">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="7169" _type="Insert" date="Sun Feb 27 18:32:48 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11718" docExpressionCount="1132" docLength="12899" length="1" offset="2246" starttimestamp="1645820509543" timestamp="184258889">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="7170" _type="InsertStringCommand" date="Sun Feb 27 18:32:48 EST 2022" starttimestamp="1645820509543" timestamp="184258905" timestamp2="184258905">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7171" _type="InsertStringCommand" date="Sun Feb 27 18:32:48 EST 2022" starttimestamp="1645820509543" timestamp="184258905" timestamp2="184258905">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7172" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 18:32:48 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="184258905" />
  <DocumentChange __id="7173" _type="Insert" date="Sun Feb 27 18:32:48 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11719" docExpressionCount="1134" docLength="12900" length="1" offset="2247" starttimestamp="1645820509543" timestamp="184259243">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="7174" _type="Insert" date="Sun Feb 27 18:32:48 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11720" docExpressionCount="1134" docLength="12901" length="1" offset="2248" starttimestamp="1645820509543" timestamp="184259390">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="7175" _type="Insert" date="Sun Feb 27 18:32:48 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11721" docExpressionCount="1134" docLength="12902" length="1" offset="2249" starttimestamp="1645820509543" timestamp="184259444">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="7176" _type="Insert" date="Sun Feb 27 18:32:49 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11722" docExpressionCount="1134" docLength="12903" length="1" offset="2250" starttimestamp="1645820509543" timestamp="184259506">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="7177" _type="Insert" date="Sun Feb 27 18:32:49 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11723" docExpressionCount="1134" docLength="12904" length="1" offset="2251" starttimestamp="1645820509543" timestamp="184259622">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="7178" _type="Insert" date="Sun Feb 27 18:32:49 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11724" docExpressionCount="1134" docLength="12905" length="1" offset="2252" starttimestamp="1645820509543" timestamp="184259691">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="7179" _type="Insert" date="Sun Feb 27 18:32:49 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11725" docExpressionCount="1134" docLength="12906" length="1" offset="2253" starttimestamp="1645820509543" timestamp="184259744">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="7180" _type="Insert" date="Sun Feb 27 18:32:49 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11726" docExpressionCount="1134" docLength="12907" length="1" offset="2254" starttimestamp="1645820509543" timestamp="184260038">
    <text><![CDATA[9]]></text>
  </DocumentChange>
  <Command __id="7181" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 18:32:49 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="184260044" />
  <DocumentChange __id="7182" _type="Delete" date="Sun Feb 27 18:32:49 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11725" docExpressionCount="1134" docLength="12906" endLine="92" length="1" offset="2254" startLine="92" starttimestamp="1645820509543" timestamp="184260446">
    <text><![CDATA[9]]></text>
  </DocumentChange>
  <Command __id="7183" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:49 EST 2022" starttimestamp="1645820509543" timestamp="184260446" />
  <Command __id="7184" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:49 EST 2022" starttimestamp="1645820509543" timestamp="184260446" />
  <DocumentChange __id="7185" _type="Insert" date="Sun Feb 27 18:32:50 EST 2022" docASTNodeCount="1609" docActiveCodeLength="11727" docExpressionCount="1134" docLength="12908" length="2" offset="2254" starttimestamp="1645820509543" timestamp="184260847">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="7186" _type="InsertStringCommand" date="Sun Feb 27 18:32:50 EST 2022" starttimestamp="1645820509543" timestamp="184260862" timestamp2="184260862">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="7187" _type="InsertStringCommand" date="Sun Feb 27 18:32:50 EST 2022" starttimestamp="1645820509543" timestamp="184260862" timestamp2="184260862">
    <data><![CDATA[(]]></data>
  </Command>
  <DocumentChange __id="7188" _type="Insert" date="Sun Feb 27 18:32:51 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11729" docExpressionCount="1135" docLength="12910" length="2" offset="2255" starttimestamp="1645820509543" timestamp="184262064">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <Command __id="7189" _type="InsertStringCommand" date="Sun Feb 27 18:32:51 EST 2022" starttimestamp="1645820509543" timestamp="184262080" timestamp2="184262080">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="7190" _type="InsertStringCommand" date="Sun Feb 27 18:32:51 EST 2022" starttimestamp="1645820509543" timestamp="184262080" timestamp2="184262080">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="7191" _type="InsertStringCommand" date="Sun Feb 27 18:32:51 EST 2022" starttimestamp="1645820509543" timestamp="184262196" timestamp2="184262196">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="7192" _type="InsertStringCommand" date="Sun Feb 27 18:32:51 EST 2022" starttimestamp="1645820509543" timestamp="184262196" timestamp2="184262196">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="7193" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:32:52 EST 2022" starttimestamp="1645820509543" timestamp="184262512" />
  <Command __id="7194" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:32:52 EST 2022" starttimestamp="1645820509543" timestamp="184262512" />
  <DocumentChange __id="7195" _type="Insert" date="Sun Feb 27 18:32:52 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11730" docExpressionCount="1135" docLength="12911" length="1" offset="2256" starttimestamp="1645820509543" timestamp="184263012">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <Command __id="7196" _type="InsertStringCommand" date="Sun Feb 27 18:32:52 EST 2022" starttimestamp="1645820509543" timestamp="184263012" timestamp2="184263012">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="7197" _type="InsertStringCommand" date="Sun Feb 27 18:32:52 EST 2022" starttimestamp="1645820509543" timestamp="184263012" timestamp2="184263012">
    <data><![CDATA[I]]></data>
  </Command>
  <DocumentChange __id="7198" _type="Insert" date="Sun Feb 27 18:32:52 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11731" docExpressionCount="1135" docLength="12912" length="1" offset="2257" starttimestamp="1645820509543" timestamp="184263150">
    <text><![CDATA[N]]></text>
  </DocumentChange>
  <Command __id="7199" _type="InsertStringCommand" date="Sun Feb 27 18:32:52 EST 2022" starttimestamp="1645820509543" timestamp="184263150" timestamp2="184263150">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="7200" _type="InsertStringCommand" date="Sun Feb 27 18:32:52 EST 2022" starttimestamp="1645820509543" timestamp="184263150" timestamp2="184263150">
    <data><![CDATA[N]]></data>
  </Command>
  <DocumentChange __id="7201" _type="Insert" date="Sun Feb 27 18:32:52 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11732" docExpressionCount="1135" docLength="12913" length="1" offset="2258" starttimestamp="1645820509543" timestamp="184263366">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="7202" _type="InsertStringCommand" date="Sun Feb 27 18:32:52 EST 2022" starttimestamp="1645820509543" timestamp="184263366" timestamp2="184263366">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7203" _type="InsertStringCommand" date="Sun Feb 27 18:32:52 EST 2022" starttimestamp="1645820509543" timestamp="184263366" timestamp2="184263366">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="7204" _type="Insert" date="Sun Feb 27 18:32:53 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11733" docExpressionCount="1135" docLength="12914" length="1" offset="2259" starttimestamp="1645820509543" timestamp="184263466">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="7205" _type="InsertStringCommand" date="Sun Feb 27 18:32:53 EST 2022" starttimestamp="1645820509543" timestamp="184263466" timestamp2="184263466">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="7206" _type="InsertStringCommand" date="Sun Feb 27 18:32:53 EST 2022" starttimestamp="1645820509543" timestamp="184263466" timestamp2="184263466">
    <data><![CDATA[D]]></data>
  </Command>
  <DocumentChange __id="7207" _type="Insert" date="Sun Feb 27 18:32:53 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11734" docExpressionCount="1135" docLength="12915" length="1" offset="2260" starttimestamp="1645820509543" timestamp="184263766">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <Command __id="7208" _type="InsertStringCommand" date="Sun Feb 27 18:32:53 EST 2022" starttimestamp="1645820509543" timestamp="184263766" timestamp2="184263766">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="7209" _type="InsertStringCommand" date="Sun Feb 27 18:32:53 EST 2022" starttimestamp="1645820509543" timestamp="184263766" timestamp2="184263766">
    <data><![CDATA[M]]></data>
  </Command>
  <DocumentChange __id="7210" _type="Delete" date="Sun Feb 27 18:32:53 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11733" docExpressionCount="1135" docLength="12914" endLine="92" length="1" offset="2260" startLine="92" starttimestamp="1645820509543" timestamp="184264151">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <Command __id="7211" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:53 EST 2022" starttimestamp="1645820509543" timestamp="184264151" />
  <Command __id="7212" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:53 EST 2022" starttimestamp="1645820509543" timestamp="184264151" />
  <DocumentChange __id="7213" _type="Delete" date="Sun Feb 27 18:32:53 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11732" docExpressionCount="1135" docLength="12913" endLine="92" length="1" offset="2259" startLine="92" starttimestamp="1645820509543" timestamp="184264283">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="7214" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:53 EST 2022" starttimestamp="1645820509543" timestamp="184264283" />
  <Command __id="7215" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:53 EST 2022" starttimestamp="1645820509543" timestamp="184264283" />
  <DocumentChange __id="7216" _type="Insert" date="Sun Feb 27 18:32:53 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11733" docExpressionCount="1135" docLength="12914" length="1" offset="2259" starttimestamp="1645820509543" timestamp="184264414">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="7217" _type="InsertStringCommand" date="Sun Feb 27 18:32:53 EST 2022" starttimestamp="1645820509543" timestamp="184264414" timestamp2="184264414">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="7218" _type="InsertStringCommand" date="Sun Feb 27 18:32:53 EST 2022" starttimestamp="1645820509543" timestamp="184264414" timestamp2="184264414">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="7219" _type="Insert" date="Sun Feb 27 18:32:54 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11734" docExpressionCount="1135" docLength="12915" length="1" offset="2260" starttimestamp="1645820509543" timestamp="184264482">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <Command __id="7220" _type="InsertStringCommand" date="Sun Feb 27 18:32:54 EST 2022" starttimestamp="1645820509543" timestamp="184264498" timestamp2="184264498">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="7221" _type="InsertStringCommand" date="Sun Feb 27 18:32:54 EST 2022" starttimestamp="1645820509543" timestamp="184264498" timestamp2="184264498">
    <data><![CDATA[M]]></data>
  </Command>
  <DocumentChange __id="7222" _type="Insert" date="Sun Feb 27 18:32:54 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11735" docExpressionCount="1135" docLength="12916" length="1" offset="2261" starttimestamp="1645820509543" timestamp="184264667">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <Command __id="7223" _type="InsertStringCommand" date="Sun Feb 27 18:32:54 EST 2022" starttimestamp="1645820509543" timestamp="184264667" timestamp2="184264667">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="7224" _type="InsertStringCommand" date="Sun Feb 27 18:32:54 EST 2022" starttimestamp="1645820509543" timestamp="184264667" timestamp2="184264667">
    <data><![CDATA[T]]></data>
  </Command>
  <DocumentChange __id="7225" _type="Insert" date="Sun Feb 27 18:32:54 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11736" docExpressionCount="1135" docLength="12917" length="1" offset="2262" starttimestamp="1645820509543" timestamp="184264752">
    <text><![CDATA[H]]></text>
  </DocumentChange>
  <Command __id="7226" _type="InsertStringCommand" date="Sun Feb 27 18:32:54 EST 2022" starttimestamp="1645820509543" timestamp="184264752" timestamp2="184264752">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="7227" _type="InsertStringCommand" date="Sun Feb 27 18:32:54 EST 2022" starttimestamp="1645820509543" timestamp="184264752" timestamp2="184264752">
    <data><![CDATA[H]]></data>
  </Command>
  <DocumentChange __id="7228" _type="Insert" date="Sun Feb 27 18:32:54 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11737" docExpressionCount="1135" docLength="12918" length="1" offset="2263" starttimestamp="1645820509543" timestamp="184264830">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <Command __id="7229" _type="InsertStringCommand" date="Sun Feb 27 18:32:54 EST 2022" starttimestamp="1645820509543" timestamp="184264830" timestamp2="184264830">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="7230" _type="InsertStringCommand" date="Sun Feb 27 18:32:54 EST 2022" starttimestamp="1645820509543" timestamp="184264830" timestamp2="184264830">
    <data><![CDATA[O]]></data>
  </Command>
  <DocumentChange __id="7231" _type="Delete" date="Sun Feb 27 18:32:54 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11736" docExpressionCount="1135" docLength="12917" endLine="92" length="1" offset="2263" startLine="92" starttimestamp="1645820509543" timestamp="184265153">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <Command __id="7232" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:54 EST 2022" starttimestamp="1645820509543" timestamp="184265153" />
  <Command __id="7233" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:54 EST 2022" starttimestamp="1645820509543" timestamp="184265153" />
  <DocumentChange __id="7234" _type="Delete" date="Sun Feb 27 18:32:54 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11735" docExpressionCount="1135" docLength="12916" endLine="92" length="1" offset="2262" startLine="92" starttimestamp="1645820509543" timestamp="184265316">
    <text><![CDATA[H]]></text>
  </DocumentChange>
  <Command __id="7235" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:54 EST 2022" starttimestamp="1645820509543" timestamp="184265316" />
  <Command __id="7236" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:54 EST 2022" starttimestamp="1645820509543" timestamp="184265316" />
  <DocumentChange __id="7237" _type="Delete" date="Sun Feb 27 18:32:55 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11734" docExpressionCount="1135" docLength="12915" endLine="92" length="1" offset="2261" startLine="92" starttimestamp="1645820509543" timestamp="184265469">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <Command __id="7238" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184265469" />
  <Command __id="7239" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184265469" />
  <DocumentChange __id="7240" _type="Delete" date="Sun Feb 27 18:32:55 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11733" docExpressionCount="1135" docLength="12914" endLine="92" length="1" offset="2260" startLine="92" starttimestamp="1645820509543" timestamp="184265632">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <Command __id="7241" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184265632" />
  <Command __id="7242" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184265632" />
  <DocumentChange __id="7243" _type="Delete" date="Sun Feb 27 18:32:55 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11732" docExpressionCount="1135" docLength="12913" endLine="92" length="1" offset="2259" startLine="92" starttimestamp="1645820509543" timestamp="184265817">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="7244" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184265832" />
  <Command __id="7245" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184265832" />
  <DocumentChange __id="7246" _type="Insert" date="Sun Feb 27 18:32:55 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11733" docExpressionCount="1135" docLength="12914" length="1" offset="2259" starttimestamp="1645820509543" timestamp="184266033">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <Command __id="7247" _type="InsertStringCommand" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184266033" timestamp2="184266033">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="7248" _type="InsertStringCommand" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184266033" timestamp2="184266033">
    <data><![CDATA[M]]></data>
  </Command>
  <DocumentChange __id="7249" _type="Insert" date="Sun Feb 27 18:32:55 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11734" docExpressionCount="1135" docLength="12915" length="1" offset="2260" starttimestamp="1645820509543" timestamp="184266117">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="7250" _type="InsertStringCommand" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184266117" timestamp2="184266117">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="7251" _type="InsertStringCommand" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184266117" timestamp2="184266117">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="7252" _type="Insert" date="Sun Feb 27 18:32:55 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11735" docExpressionCount="1135" docLength="12916" length="1" offset="2261" starttimestamp="1645820509543" timestamp="184266255">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <Command __id="7253" _type="InsertStringCommand" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184266255" timestamp2="184266255">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="7254" _type="InsertStringCommand" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184266255" timestamp2="184266255">
    <data><![CDATA[T]]></data>
  </Command>
  <DocumentChange __id="7255" _type="Insert" date="Sun Feb 27 18:32:55 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11736" docExpressionCount="1135" docLength="12917" length="1" offset="2262" starttimestamp="1645820509543" timestamp="184266318">
    <text><![CDATA[H]]></text>
  </DocumentChange>
  <Command __id="7256" _type="InsertStringCommand" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184266318" timestamp2="184266318">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="7257" _type="InsertStringCommand" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184266318" timestamp2="184266318">
    <data><![CDATA[H]]></data>
  </Command>
  <DocumentChange __id="7258" _type="Insert" date="Sun Feb 27 18:32:55 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11737" docExpressionCount="1135" docLength="12918" length="1" offset="2263" starttimestamp="1645820509543" timestamp="184266402">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <Command __id="7259" _type="InsertStringCommand" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184266402" timestamp2="184266402">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="7260" _type="InsertStringCommand" date="Sun Feb 27 18:32:55 EST 2022" starttimestamp="1645820509543" timestamp="184266402" timestamp2="184266402">
    <data><![CDATA[O]]></data>
  </Command>
  <DocumentChange __id="7261" _type="Insert" date="Sun Feb 27 18:32:56 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11738" docExpressionCount="1135" docLength="12919" length="1" offset="2264" starttimestamp="1645820509543" timestamp="184266556">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="7262" _type="InsertStringCommand" date="Sun Feb 27 18:32:56 EST 2022" starttimestamp="1645820509543" timestamp="184266556" timestamp2="184266556">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="7263" _type="InsertStringCommand" date="Sun Feb 27 18:32:56 EST 2022" starttimestamp="1645820509543" timestamp="184266556" timestamp2="184266556">
    <data><![CDATA[D]]></data>
  </Command>
  <DocumentChange __id="7264" _type="Insert" date="Sun Feb 27 18:32:56 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11739" docExpressionCount="1135" docLength="12920" length="1" offset="2265" starttimestamp="1645820509543" timestamp="184266787">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="7265" _type="InsertStringCommand" date="Sun Feb 27 18:32:56 EST 2022" starttimestamp="1645820509543" timestamp="184266787" timestamp2="184266787">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7266" _type="InsertStringCommand" date="Sun Feb 27 18:32:56 EST 2022" starttimestamp="1645820509543" timestamp="184266787" timestamp2="184266787">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="7267" _type="Insert" date="Sun Feb 27 18:32:56 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11740" docExpressionCount="1135" docLength="12921" length="1" offset="2266" starttimestamp="1645820509543" timestamp="184266956">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="7268" _type="InsertStringCommand" date="Sun Feb 27 18:32:56 EST 2022" starttimestamp="1645820509543" timestamp="184266956" timestamp2="184266956">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="7269" _type="InsertStringCommand" date="Sun Feb 27 18:32:56 EST 2022" starttimestamp="1645820509543" timestamp="184266956" timestamp2="184266956">
    <data><![CDATA[D]]></data>
  </Command>
  <DocumentChange __id="7270" _type="Insert" date="Sun Feb 27 18:32:56 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11741" docExpressionCount="1135" docLength="12922" length="1" offset="2267" starttimestamp="1645820509543" timestamp="184267119">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="7271" _type="InsertStringCommand" date="Sun Feb 27 18:32:56 EST 2022" starttimestamp="1645820509543" timestamp="184267134" timestamp2="184267134">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="7272" _type="InsertStringCommand" date="Sun Feb 27 18:32:56 EST 2022" starttimestamp="1645820509543" timestamp="184267134" timestamp2="184267134">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="7273" _type="Insert" date="Sun Feb 27 18:32:56 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11742" docExpressionCount="1135" docLength="12923" length="1" offset="2268" starttimestamp="1645820509543" timestamp="184267435">
    <text><![CDATA[C]]></text>
  </DocumentChange>
  <Command __id="7274" _type="InsertStringCommand" date="Sun Feb 27 18:32:56 EST 2022" starttimestamp="1645820509543" timestamp="184267435" timestamp2="184267435">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="7275" _type="InsertStringCommand" date="Sun Feb 27 18:32:56 EST 2022" starttimestamp="1645820509543" timestamp="184267435" timestamp2="184267435">
    <data><![CDATA[C]]></data>
  </Command>
  <DocumentChange __id="7276" _type="Insert" date="Sun Feb 27 18:32:57 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11743" docExpressionCount="1135" docLength="12924" length="1" offset="2269" starttimestamp="1645820509543" timestamp="184267535">
    <text><![CDATA[L]]></text>
  </DocumentChange>
  <Command __id="7277" _type="InsertStringCommand" date="Sun Feb 27 18:32:57 EST 2022" starttimestamp="1645820509543" timestamp="184267551" timestamp2="184267551">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="7278" _type="InsertStringCommand" date="Sun Feb 27 18:32:57 EST 2022" starttimestamp="1645820509543" timestamp="184267551" timestamp2="184267551">
    <data><![CDATA[L]]></data>
  </Command>
  <DocumentChange __id="7279" _type="Insert" date="Sun Feb 27 18:32:57 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11744" docExpressionCount="1135" docLength="12925" length="1" offset="2270" starttimestamp="1645820509543" timestamp="184267657">
    <text><![CDATA[A]]></text>
  </DocumentChange>
  <Command __id="7280" _type="InsertStringCommand" date="Sun Feb 27 18:32:57 EST 2022" starttimestamp="1645820509543" timestamp="184267657" timestamp2="184267657">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="7281" _type="InsertStringCommand" date="Sun Feb 27 18:32:57 EST 2022" starttimestamp="1645820509543" timestamp="184267657" timestamp2="184267657">
    <data><![CDATA[A]]></data>
  </Command>
  <DocumentChange __id="7282" _type="Insert" date="Sun Feb 27 18:32:57 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11745" docExpressionCount="1135" docLength="12926" length="1" offset="2271" starttimestamp="1645820509543" timestamp="184268189">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <Command __id="7283" _type="InsertStringCommand" date="Sun Feb 27 18:32:57 EST 2022" starttimestamp="1645820509543" timestamp="184268189" timestamp2="184268189">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="7284" _type="InsertStringCommand" date="Sun Feb 27 18:32:57 EST 2022" starttimestamp="1645820509543" timestamp="184268189" timestamp2="184268189">
    <data><![CDATA[R]]></data>
  </Command>
  <DocumentChange __id="7285" _type="Insert" date="Sun Feb 27 18:32:57 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11746" docExpressionCount="1135" docLength="12927" length="1" offset="2272" starttimestamp="1645820509543" timestamp="184268321">
    <text><![CDATA[A]]></text>
  </DocumentChange>
  <Command __id="7286" _type="InsertStringCommand" date="Sun Feb 27 18:32:57 EST 2022" starttimestamp="1645820509543" timestamp="184268321" timestamp2="184268321">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="7287" _type="InsertStringCommand" date="Sun Feb 27 18:32:57 EST 2022" starttimestamp="1645820509543" timestamp="184268321" timestamp2="184268321">
    <data><![CDATA[A]]></data>
  </Command>
  <DocumentChange __id="7288" _type="Insert" date="Sun Feb 27 18:32:58 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11747" docExpressionCount="1135" docLength="12928" length="1" offset="2273" starttimestamp="1645820509543" timestamp="184268506">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <Command __id="7289" _type="InsertStringCommand" date="Sun Feb 27 18:32:58 EST 2022" starttimestamp="1645820509543" timestamp="184268522" timestamp2="184268522">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="7290" _type="InsertStringCommand" date="Sun Feb 27 18:32:58 EST 2022" starttimestamp="1645820509543" timestamp="184268522" timestamp2="184268522">
    <data><![CDATA[T]]></data>
  </Command>
  <DocumentChange __id="7291" _type="Insert" date="Sun Feb 27 18:32:58 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11748" docExpressionCount="1135" docLength="12929" length="1" offset="2274" starttimestamp="1645820509543" timestamp="184268622">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <Command __id="7292" _type="InsertStringCommand" date="Sun Feb 27 18:32:58 EST 2022" starttimestamp="1645820509543" timestamp="184268622" timestamp2="184268622">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="7293" _type="InsertStringCommand" date="Sun Feb 27 18:32:58 EST 2022" starttimestamp="1645820509543" timestamp="184268622" timestamp2="184268622">
    <data><![CDATA[I]]></data>
  </Command>
  <DocumentChange __id="7294" _type="Insert" date="Sun Feb 27 18:32:58 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11749" docExpressionCount="1135" docLength="12930" length="1" offset="2275" starttimestamp="1645820509543" timestamp="184268675">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <Command __id="7295" _type="InsertStringCommand" date="Sun Feb 27 18:32:58 EST 2022" starttimestamp="1645820509543" timestamp="184268691" timestamp2="184268691">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="7296" _type="InsertStringCommand" date="Sun Feb 27 18:32:58 EST 2022" starttimestamp="1645820509543" timestamp="184268691" timestamp2="184268691">
    <data><![CDATA[O]]></data>
  </Command>
  <DocumentChange __id="7297" _type="Insert" date="Sun Feb 27 18:32:58 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11750" docExpressionCount="1135" docLength="12931" length="1" offset="2276" starttimestamp="1645820509543" timestamp="184268775">
    <text><![CDATA[N]]></text>
  </DocumentChange>
  <Command __id="7298" _type="InsertStringCommand" date="Sun Feb 27 18:32:58 EST 2022" starttimestamp="1645820509543" timestamp="184268775" timestamp2="184268775">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="7299" _type="InsertStringCommand" date="Sun Feb 27 18:32:58 EST 2022" starttimestamp="1645820509543" timestamp="184268775" timestamp2="184268775">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="7300" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:32:58 EST 2022" starttimestamp="1645820509543" timestamp="184269404" />
  <Command __id="7301" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:32:58 EST 2022" starttimestamp="1645820509543" timestamp="184269404" />
  <Command __id="7302" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:32:59 EST 2022" starttimestamp="1645820509543" timestamp="184269557" />
  <Command __id="7303" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:32:59 EST 2022" starttimestamp="1645820509543" timestamp="184269557" />
  <Command __id="7305" _type="InsertStringCommand" date="Sun Feb 27 18:32:59 EST 2022" starttimestamp="1645820509543" timestamp="184270190" timestamp2="184270190">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7306" _type="InsertStringCommand" date="Sun Feb 27 18:32:59 EST 2022" starttimestamp="1645820509543" timestamp="184270190" timestamp2="184270190">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7310" _type="RunCommand" date="Sun Feb 27 18:33:02 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184272879" type="Run" />
  <Command __id="7311" _type="RunCommand" date="Sun Feb 27 18:33:02 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184272879" type="Run" />
  <Command __id="7312" _type="RunCommand" date="Sun Feb 27 18:33:02 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184272995" type="Run" />
  <Command __id="7313" _type="RunCommand" date="Sun Feb 27 18:33:02 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184272995" type="Run" />
  <Command __id="7314" _type="EHExceptionCommand" date="Sun Feb 27 18:33:02 EST 2022" starttimestamp="1645820509543" timestamp="184273048" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
in here0, ID is***numErrors***
numErrors
In scanner =
in here1, EQUAL is***=***
=
0
;
in here0, ID is***try***
try
In scanner =
in here1, EQUAL is***=***
=
!
(
a
In scanner =
==
a
)
;
}
public
static
boolean
hasErrors
(
)
{
IN METHOD DECLARATION
return
numErrors
>
0
;
}
public
void
reportError
(
String
message
)
{
in here0, ID is***System***
System
in here1, DOT is***.***
.
out
.
println
(
message
)
;
Parse error: parsing statement, in subcase ID, current token is: }
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="7315" _type="MoveCaretCommand" caretOffset="2230" date="Sun Feb 27 18:34:21 EST 2022" docOffset="2308" starttimestamp="1645820509543" timestamp="184352383" />
  <Command __id="7316" _type="MoveCaretCommand" caretOffset="2230" date="Sun Feb 27 18:34:21 EST 2022" docOffset="2308" starttimestamp="1645820509543" timestamp="184352383" />
  <Command __id="7317" _type="SelectTextCommand" caretOffset="2158" date="Sun Feb 27 18:34:25 EST 2022" end="2202" start="2158" starttimestamp="1645820509543" timestamp="184355670" />
  <Command __id="7318" _type="SelectTextCommand" caretOffset="2158" date="Sun Feb 27 18:34:25 EST 2022" end="2202" start="2158" starttimestamp="1645820509543" timestamp="184355670" />
  <Command __id="7319" _type="CopyCommand" date="Sun Feb 27 18:34:25 EST 2022" starttimestamp="1645820509543" timestamp="184355817" />
  <Command __id="7320" _type="MoveCaretCommand" caretOffset="2230" date="Sun Feb 27 18:34:25 EST 2022" docOffset="2308" starttimestamp="1645820509543" timestamp="184356456" />
  <Command __id="7321" _type="MoveCaretCommand" caretOffset="2230" date="Sun Feb 27 18:34:25 EST 2022" docOffset="2308" starttimestamp="1645820509543" timestamp="184356456" />
  <Command __id="7323" _type="InsertStringCommand" date="Sun Feb 27 18:34:26 EST 2022" starttimestamp="1645820509543" timestamp="184357004" timestamp2="184357004">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7324" _type="InsertStringCommand" date="Sun Feb 27 18:34:26 EST 2022" starttimestamp="1645820509543" timestamp="184357004" timestamp2="184357004">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7326" _type="PasteCommand" date="Sun Feb 27 18:34:26 EST 2022" starttimestamp="1645820509543" timestamp="184357172" />
  <Command __id="7327" _type="SelectTextCommand" caretOffset="2263" date="Sun Feb 27 18:34:28 EST 2022" end="2263" start="2261" starttimestamp="1645820509543" timestamp="184359438" />
  <Command __id="7328" _type="SelectTextCommand" caretOffset="2263" date="Sun Feb 27 18:34:28 EST 2022" end="2263" start="2261" starttimestamp="1645820509543" timestamp="184359438" />
  <Command __id="7330" _type="InsertStringCommand" date="Sun Feb 27 18:34:29 EST 2022" starttimestamp="1645820509543" timestamp="184360039" timestamp2="184360039">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7331" _type="InsertStringCommand" date="Sun Feb 27 18:34:29 EST 2022" starttimestamp="1645820509543" timestamp="184360039" timestamp2="184360039">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7333" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:34:29 EST 2022" starttimestamp="1645820509543" timestamp="184360361" />
  <Command __id="7334" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:34:29 EST 2022" starttimestamp="1645820509543" timestamp="184360361" />
  <Command __id="7336" _type="InsertStringCommand" date="Sun Feb 27 18:34:30 EST 2022" starttimestamp="1645820509543" timestamp="184360877" timestamp2="184360877">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="7337" _type="InsertStringCommand" date="Sun Feb 27 18:34:30 EST 2022" starttimestamp="1645820509543" timestamp="184360877" timestamp2="184360877">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="7339" _type="InsertStringCommand" date="Sun Feb 27 18:34:30 EST 2022" starttimestamp="1645820509543" timestamp="184361061" timestamp2="184361061">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="7340" _type="InsertStringCommand" date="Sun Feb 27 18:34:30 EST 2022" starttimestamp="1645820509543" timestamp="184361061" timestamp2="184361061">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="7342" _type="InsertStringCommand" date="Sun Feb 27 18:34:30 EST 2022" starttimestamp="1645820509543" timestamp="184361177" timestamp2="184361177">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="7343" _type="InsertStringCommand" date="Sun Feb 27 18:34:30 EST 2022" starttimestamp="1645820509543" timestamp="184361193" timestamp2="184361193">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="7347" _type="RunCommand" date="Sun Feb 27 18:34:33 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184364097" type="Run" />
  <Command __id="7348" _type="RunCommand" date="Sun Feb 27 18:34:33 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184364097" type="Run" />
  <Command __id="7349" _type="RunCommand" date="Sun Feb 27 18:34:33 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184364228" type="Run" />
  <Command __id="7350" _type="RunCommand" date="Sun Feb 27 18:34:33 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184364228" type="Run" />
  <Command __id="7351" _type="EHExceptionCommand" date="Sun Feb 27 18:34:33 EST 2022" starttimestamp="1645820509543" timestamp="184364266" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
in here0, ID is***numErrors***
numErrors
In scanner =
in here1, EQUAL is***=***
=
0
;
in here0, ID is***try***
try
In scanner =
in here1, EQUAL is***=***
=
!
(
a
In scanner =
==
a
)
;
}
public
static
boolean
hasErrors
(
)
{
IN METHOD DECLARATION
return
numErrors
>
0
;
OUT METHOD DECLARATION
}
public
void
reportError
(
String
message
)
{
in here0, ID is***System***
System
in here1, DOT is***.***
.
out
.
println
(
message
)
;
Parse error: parsing statement, in subcase ID, current token is: }
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="7352" _type="MoveCaretCommand" caretOffset="3138" date="Sun Feb 27 18:35:02 EST 2022" docOffset="3216" starttimestamp="1645820509543" timestamp="184392550" />
  <Command __id="7353" _type="MoveCaretCommand" caretOffset="3138" date="Sun Feb 27 18:35:02 EST 2022" docOffset="3216" starttimestamp="1645820509543" timestamp="184392550" />
  <Command __id="7355" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 18:35:02 EST 2022" starttimestamp="1645820509543" timestamp="184393451" />
  <Command __id="7356" _type="MoveCaretCommand" caretOffset="3258" date="Sun Feb 27 18:35:04 EST 2022" docOffset="3336" starttimestamp="1645820509543" timestamp="184394468" />
  <Command __id="7357" _type="MoveCaretCommand" caretOffset="3258" date="Sun Feb 27 18:35:04 EST 2022" docOffset="3336" starttimestamp="1645820509543" timestamp="184394468" />
  <Command __id="7359" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 18:35:04 EST 2022" starttimestamp="1645820509543" timestamp="184395301" />
  <Command __id="7363" _type="RunCommand" date="Sun Feb 27 18:35:08 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184399229" type="Run" />
  <Command __id="7364" _type="RunCommand" date="Sun Feb 27 18:35:08 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184399229" type="Run" />
  <Command __id="7365" _type="RunCommand" date="Sun Feb 27 18:35:08 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184399344" type="Run" />
  <Command __id="7366" _type="RunCommand" date="Sun Feb 27 18:35:08 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184399344" type="Run" />
  <Command __id="7367" _type="EHExceptionCommand" date="Sun Feb 27 18:35:08 EST 2022" starttimestamp="1645820509543" timestamp="184399398" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATEprivate
int
numErrors
;
public
static
boolean
gg
;
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
In scanner =
=
0
;
try
In scanner =
=
!
(
a
In scanner =
==
a
)
;
}
public
static
boolean
hasErrors
(
)
{
IN METHOD DECLARATION
return
numErrors
>
0
;
OUT METHOD DECLARATION
}
public
void
reportError
(
String
message
)
{
System
.
out
.
println
(
message
)
;
Parse error: parsing statement, in subcase ID, current token is: }
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="7368" _type="ShellCommand" date="Sun Feb 27 18:36:50 EST 2022" starttimestamp="1645820509543" timestamp="184500978" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7369" _type="ShellCommand" date="Sun Feb 27 18:36:50 EST 2022" starttimestamp="1645820509543" timestamp="184501264" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="7304" _type="Insert" date="Sun Feb 27 18:32:59 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11751" docExpressionCount="1135" docLength="12932" length="1" offset="2279" starttimestamp="1645820509543" timestamp="184270174">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="7322" _type="Insert" date="Sun Feb 27 18:34:26 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11762" docExpressionCount="1135" docLength="12943" length="11" offset="2308" starttimestamp="1645820509543" timestamp="184357004">
    <text><![CDATA[
									]]></text>
  </DocumentChange>
  <DocumentChange __id="7325" _type="Replace" date="Sun Feb 27 18:34:26 EST 2022" docASTNodeCount="1617" docActiveCodeLength="11806" docExpressionCount="1141" docLength="12987" endLine="94" insertionLength="53" int_docASTNodeCount="1610" int_docActiveCodeLength="11753" int_docExpressionCount="1135" int_docLength="12934" length="9" offset="2310" startLine="94" starttimestamp="1645820509543" timestamp="184357172">
    <deletedText><![CDATA[									]]></deletedText>
    <insertedText><![CDATA[									System.out.println("IN METHOD DECLARATION");]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7329" _type="Replace" date="Sun Feb 27 18:34:29 EST 2022" docASTNodeCount="1617" docActiveCodeLength="11805" docExpressionCount="1141" docLength="12986" endLine="94" insertionLength="1" int_docASTNodeCount="1617" int_docActiveCodeLength="11804" int_docExpressionCount="1141" int_docLength="12985" length="2" offset="2339" startLine="94" starttimestamp="1645820509543" timestamp="184360039">
    <deletedText><![CDATA[IN]]></deletedText>
    <insertedText><![CDATA[o]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7332" _type="Delete" date="Sun Feb 27 18:34:29 EST 2022" docASTNodeCount="1617" docActiveCodeLength="11804" docExpressionCount="1141" docLength="12985" endLine="94" length="1" offset="2339" startLine="94" starttimestamp="1645820509543" timestamp="184360361">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="7335" _type="Insert" date="Sun Feb 27 18:34:30 EST 2022" docASTNodeCount="1617" docActiveCodeLength="11805" docExpressionCount="1141" docLength="12986" length="1" offset="2339" starttimestamp="1645820509543" timestamp="184360861">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <DocumentChange __id="7338" _type="Insert" date="Sun Feb 27 18:34:30 EST 2022" docASTNodeCount="1617" docActiveCodeLength="11806" docExpressionCount="1141" docLength="12987" length="1" offset="2340" starttimestamp="1645820509543" timestamp="184361055">
    <text><![CDATA[U]]></text>
  </DocumentChange>
  <DocumentChange __id="7341" _type="Insert" date="Sun Feb 27 18:34:30 EST 2022" docASTNodeCount="1617" docActiveCodeLength="11807" docExpressionCount="1141" docLength="12988" length="1" offset="2341" starttimestamp="1645820509543" timestamp="184361177">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <DocumentChange __id="7354" _type="Insert" date="Sun Feb 27 18:35:02 EST 2022" docASTNodeCount="1601" docActiveCodeLength="11707" docExpressionCount="1126" docLength="12990" length="2" offset="3196" starttimestamp="1645820509543" timestamp="184393435">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="7358" _type="Insert" date="Sun Feb 27 18:35:04 EST 2022" docASTNodeCount="1585" docActiveCodeLength="11607" docExpressionCount="1111" docLength="12992" length="2" offset="3317" starttimestamp="1645820509543" timestamp="184395286">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7370" _type="MoveCaretCommand" caretOffset="1113" date="Sun Feb 27 18:37:21 EST 2022" docOffset="1191" starttimestamp="1645820509543" timestamp="184531838" />
  <Command __id="7371" _type="MoveCaretCommand" caretOffset="1113" date="Sun Feb 27 18:37:21 EST 2022" docOffset="1191" starttimestamp="1645820509543" timestamp="184531838" />
  <DocumentChange __id="7372" _type="Insert" date="Sun Feb 27 18:37:26 EST 2022" docASTNodeCount="1585" docActiveCodeLength="11612" docExpressionCount="1111" docLength="12997" length="5" offset="1191" starttimestamp="1645820509543" timestamp="184536710">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="7373" _type="InsertStringCommand" date="Sun Feb 27 18:37:26 EST 2022" starttimestamp="1645820509543" timestamp="184536710" timestamp2="184536710">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7374" _type="InsertStringCommand" date="Sun Feb 27 18:37:26 EST 2022" starttimestamp="1645820509543" timestamp="184536725" timestamp2="184536725">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="7375" _type="Insert" date="Sun Feb 27 18:37:32 EST 2022" docASTNodeCount="1587" docActiveCodeLength="11613" docExpressionCount="1112" docLength="12998" length="1" offset="1196" starttimestamp="1645820509543" timestamp="184542959">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="7376" _type="InsertStringCommand" date="Sun Feb 27 18:37:32 EST 2022" starttimestamp="1645820509543" timestamp="184542959" timestamp2="184542959">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="7377" _type="InsertStringCommand" date="Sun Feb 27 18:37:32 EST 2022" starttimestamp="1645820509543" timestamp="184542959" timestamp2="184542959">
    <data><![CDATA[S]]></data>
  </Command>
  <DocumentChange __id="7378" _type="Insert" date="Sun Feb 27 18:37:32 EST 2022" docASTNodeCount="1587" docActiveCodeLength="11614" docExpressionCount="1112" docLength="12999" length="1" offset="1197" starttimestamp="1645820509543" timestamp="184543212">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="7379" _type="InsertStringCommand" date="Sun Feb 27 18:37:32 EST 2022" starttimestamp="1645820509543" timestamp="184543228" timestamp2="184543228">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="7380" _type="InsertStringCommand" date="Sun Feb 27 18:37:32 EST 2022" starttimestamp="1645820509543" timestamp="184543228" timestamp2="184543228">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="7381" _type="Insert" date="Sun Feb 27 18:37:32 EST 2022" docASTNodeCount="1587" docActiveCodeLength="11615" docExpressionCount="1112" docLength="13000" length="1" offset="1198" starttimestamp="1645820509543" timestamp="184543313">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="7382" _type="InsertStringCommand" date="Sun Feb 27 18:37:32 EST 2022" starttimestamp="1645820509543" timestamp="184543313" timestamp2="184543313">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7383" _type="InsertStringCommand" date="Sun Feb 27 18:37:32 EST 2022" starttimestamp="1645820509543" timestamp="184543313" timestamp2="184543313">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="7384" _type="Insert" date="Sun Feb 27 18:37:33 EST 2022" docASTNodeCount="1587" docActiveCodeLength="11616" docExpressionCount="1112" docLength="13001" length="1" offset="1199" starttimestamp="1645820509543" timestamp="184543525">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="7385" _type="InsertStringCommand" date="Sun Feb 27 18:37:33 EST 2022" starttimestamp="1645820509543" timestamp="184543541" timestamp2="184543541">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7386" _type="InsertStringCommand" date="Sun Feb 27 18:37:33 EST 2022" starttimestamp="1645820509543" timestamp="184543541" timestamp2="184543541">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="7387" _type="Insert" date="Sun Feb 27 18:37:33 EST 2022" docASTNodeCount="1587" docActiveCodeLength="11617" docExpressionCount="1112" docLength="13002" length="1" offset="1200" starttimestamp="1645820509543" timestamp="184543657">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="7388" _type="InsertStringCommand" date="Sun Feb 27 18:37:33 EST 2022" starttimestamp="1645820509543" timestamp="184543657" timestamp2="184543657">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7389" _type="InsertStringCommand" date="Sun Feb 27 18:37:33 EST 2022" starttimestamp="1645820509543" timestamp="184543657" timestamp2="184543657">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="7390" _type="Insert" date="Sun Feb 27 18:37:33 EST 2022" docASTNodeCount="1587" docActiveCodeLength="11618" docExpressionCount="1112" docLength="13003" length="1" offset="1201" starttimestamp="1645820509543" timestamp="184543726">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="7391" _type="InsertStringCommand" date="Sun Feb 27 18:37:33 EST 2022" starttimestamp="1645820509543" timestamp="184543726" timestamp2="184543726">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="7392" _type="InsertStringCommand" date="Sun Feb 27 18:37:33 EST 2022" starttimestamp="1645820509543" timestamp="184543726" timestamp2="184543726">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="7393" _type="Insert" date="Sun Feb 27 18:37:33 EST 2022" docASTNodeCount="1586" docActiveCodeLength="11619" docExpressionCount="1112" docLength="13004" length="1" offset="1202" starttimestamp="1645820509543" timestamp="184544095">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="7394" _type="InsertStringCommand" date="Sun Feb 27 18:37:33 EST 2022" starttimestamp="1645820509543" timestamp="184544095" timestamp2="184544095">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7395" _type="InsertStringCommand" date="Sun Feb 27 18:37:33 EST 2022" starttimestamp="1645820509543" timestamp="184544095" timestamp2="184544095">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7396" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 18:37:33 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="184544095" />
  <DocumentChange __id="7397" _type="Insert" date="Sun Feb 27 18:37:33 EST 2022" docASTNodeCount="1589" docActiveCodeLength="11620" docExpressionCount="1114" docLength="13005" length="1" offset="1203" starttimestamp="1645820509543" timestamp="184544342">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="7398" _type="Insert" date="Sun Feb 27 18:37:34 EST 2022" docASTNodeCount="1589" docActiveCodeLength="11621" docExpressionCount="1114" docLength="13006" length="1" offset="1204" starttimestamp="1645820509543" timestamp="184544458">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="7399" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 18:37:34 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="184544743" />
  <DocumentChange __id="7400" _type="Replace" date="Sun Feb 27 18:37:34 EST 2022" docASTNodeCount="1589" docActiveCodeLength="11622" docExpressionCount="1114" docLength="13007" endLine="51" insertionLength="3" int_docASTNodeCount="1586" int_docActiveCodeLength="11619" int_docExpressionCount="1112" int_docLength="13004" length="2" offset="1203" startLine="51" starttimestamp="1645820509543" timestamp="184544743">
    <deletedText><![CDATA[ou]]></deletedText>
    <insertedText><![CDATA[out]]></insertedText>
  </DocumentChange>
  <Command __id="7401" _type="InsertStringCommand" date="Sun Feb 27 18:37:34 EST 2022" starttimestamp="1645820509543" timestamp="184544743" timestamp2="184544743">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7402" _type="InsertStringCommand" date="Sun Feb 27 18:37:34 EST 2022" starttimestamp="1645820509543" timestamp="184544743" timestamp2="184544743">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="7403" _type="Insert" date="Sun Feb 27 18:37:34 EST 2022" docASTNodeCount="1588" docActiveCodeLength="11623" docExpressionCount="1114" docLength="13008" length="1" offset="1206" starttimestamp="1645820509543" timestamp="184545080">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="7404" _type="InsertStringCommand" date="Sun Feb 27 18:37:34 EST 2022" starttimestamp="1645820509543" timestamp="184545080" timestamp2="184545080">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7405" _type="InsertStringCommand" date="Sun Feb 27 18:37:34 EST 2022" starttimestamp="1645820509543" timestamp="184545080" timestamp2="184545080">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7406" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 18:37:34 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="184545096" />
  <DocumentChange __id="7407" _type="Insert" date="Sun Feb 27 18:37:34 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11624" docExpressionCount="1116" docLength="13009" length="1" offset="1207" starttimestamp="1645820509543" timestamp="184545396">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="7408" _type="Insert" date="Sun Feb 27 18:37:35 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11625" docExpressionCount="1116" docLength="13010" length="1" offset="1208" starttimestamp="1645820509543" timestamp="184545559">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="7409" _type="Insert" date="Sun Feb 27 18:37:35 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11626" docExpressionCount="1116" docLength="13011" length="1" offset="1209" starttimestamp="1645820509543" timestamp="184545660">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="7410" _type="Insert" date="Sun Feb 27 18:37:35 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11627" docExpressionCount="1116" docLength="13012" length="1" offset="1210" starttimestamp="1645820509543" timestamp="184545744">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="7411" _type="Insert" date="Sun Feb 27 18:37:35 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11628" docExpressionCount="1116" docLength="13013" length="1" offset="1211" starttimestamp="1645820509543" timestamp="184545813">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="7412" _type="Insert" date="Sun Feb 27 18:37:35 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11629" docExpressionCount="1116" docLength="13014" length="1" offset="1212" starttimestamp="1645820509543" timestamp="184546082">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="7413" _type="Insert" date="Sun Feb 27 18:37:35 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11630" docExpressionCount="1116" docLength="13015" length="1" offset="1213" starttimestamp="1645820509543" timestamp="184546213">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="7414" _type="Insert" date="Sun Feb 27 18:37:36 EST 2022" docASTNodeCount="1591" docActiveCodeLength="11632" docExpressionCount="1116" docLength="13017" length="2" offset="1214" starttimestamp="1645820509543" timestamp="184546498">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="7415" _type="Insert" date="Sun Feb 27 18:37:36 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11634" docExpressionCount="1117" docLength="13019" length="2" offset="1215" starttimestamp="1645820509543" timestamp="184547377">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <Command __id="7416" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 18:37:36 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="184547399" />
  <Command __id="7417" _type="InsertStringCommand" date="Sun Feb 27 18:37:37 EST 2022" starttimestamp="1645820509543" timestamp="184547499" timestamp2="184547499">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="7418" _type="InsertStringCommand" date="Sun Feb 27 18:37:37 EST 2022" starttimestamp="1645820509543" timestamp="184547499" timestamp2="184547499">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="7419" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:37 EST 2022" starttimestamp="1645820509543" timestamp="184547762" />
  <Command __id="7420" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:37 EST 2022" starttimestamp="1645820509543" timestamp="184547762" />
  <DocumentChange __id="7421" _type="Insert" date="Sun Feb 27 18:37:37 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11635" docExpressionCount="1117" docLength="13020" length="1" offset="1216" starttimestamp="1645820509543" timestamp="184548000">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="7422" _type="InsertStringCommand" date="Sun Feb 27 18:37:37 EST 2022" starttimestamp="1645820509543" timestamp="184548000" timestamp2="184548000">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7423" _type="InsertStringCommand" date="Sun Feb 27 18:37:37 EST 2022" starttimestamp="1645820509543" timestamp="184548000" timestamp2="184548000">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="7424" _type="Insert" date="Sun Feb 27 18:37:37 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11636" docExpressionCount="1117" docLength="13021" length="1" offset="1217" starttimestamp="1645820509543" timestamp="184548200">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="7425" _type="InsertStringCommand" date="Sun Feb 27 18:37:37 EST 2022" starttimestamp="1645820509543" timestamp="184548200" timestamp2="184548200">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7426" _type="InsertStringCommand" date="Sun Feb 27 18:37:37 EST 2022" starttimestamp="1645820509543" timestamp="184548200" timestamp2="184548200">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="7427" _type="Insert" date="Sun Feb 27 18:37:37 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11637" docExpressionCount="1117" docLength="13022" length="1" offset="1218" starttimestamp="1645820509543" timestamp="184548348">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="7428" _type="InsertStringCommand" date="Sun Feb 27 18:37:37 EST 2022" starttimestamp="1645820509543" timestamp="184548348" timestamp2="184548348">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7429" _type="InsertStringCommand" date="Sun Feb 27 18:37:37 EST 2022" starttimestamp="1645820509543" timestamp="184548348" timestamp2="184548348">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="7430" _type="Insert" date="Sun Feb 27 18:37:38 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11638" docExpressionCount="1117" docLength="13023" length="1" offset="1219" starttimestamp="1645820509543" timestamp="184548501">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="7431" _type="InsertStringCommand" date="Sun Feb 27 18:37:38 EST 2022" starttimestamp="1645820509543" timestamp="184548501" timestamp2="184548501">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7432" _type="InsertStringCommand" date="Sun Feb 27 18:37:38 EST 2022" starttimestamp="1645820509543" timestamp="184548501" timestamp2="184548501">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="7433" _type="Insert" date="Sun Feb 27 18:37:38 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11639" docExpressionCount="1117" docLength="13024" length="1" offset="1220" starttimestamp="1645820509543" timestamp="184549092">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="7434" _type="InsertStringCommand" date="Sun Feb 27 18:37:38 EST 2022" starttimestamp="1645820509543" timestamp="184549092" timestamp2="184549092">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7435" _type="InsertStringCommand" date="Sun Feb 27 18:37:38 EST 2022" starttimestamp="1645820509543" timestamp="184549092" timestamp2="184549092">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="7436" _type="Insert" date="Sun Feb 27 18:37:38 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11640" docExpressionCount="1117" docLength="13025" length="1" offset="1221" starttimestamp="1645820509543" timestamp="184549201">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="7437" _type="InsertStringCommand" date="Sun Feb 27 18:37:38 EST 2022" starttimestamp="1645820509543" timestamp="184549201" timestamp2="184549201">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7438" _type="InsertStringCommand" date="Sun Feb 27 18:37:38 EST 2022" starttimestamp="1645820509543" timestamp="184549201" timestamp2="184549201">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="7439" _type="Insert" date="Sun Feb 27 18:37:38 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11641" docExpressionCount="1117" docLength="13026" length="1" offset="1222" starttimestamp="1645820509543" timestamp="184549286">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="7440" _type="InsertStringCommand" date="Sun Feb 27 18:37:38 EST 2022" starttimestamp="1645820509543" timestamp="184549286" timestamp2="184549286">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7441" _type="InsertStringCommand" date="Sun Feb 27 18:37:38 EST 2022" starttimestamp="1645820509543" timestamp="184549286" timestamp2="184549286">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="7442" _type="Insert" date="Sun Feb 27 18:37:38 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11642" docExpressionCount="1117" docLength="13027" length="1" offset="1223" starttimestamp="1645820509543" timestamp="184549371">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <Command __id="7443" _type="InsertStringCommand" date="Sun Feb 27 18:37:38 EST 2022" starttimestamp="1645820509543" timestamp="184549373" timestamp2="184549373">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="7444" _type="InsertStringCommand" date="Sun Feb 27 18:37:38 EST 2022" starttimestamp="1645820509543" timestamp="184549373" timestamp2="184549373">
    <data><![CDATA[g]]></data>
  </Command>
  <DocumentChange __id="7445" _type="Insert" date="Sun Feb 27 18:37:39 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11643" docExpressionCount="1117" docLength="13028" length="1" offset="1224" starttimestamp="1645820509543" timestamp="184549627">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="7446" _type="InsertStringCommand" date="Sun Feb 27 18:37:39 EST 2022" starttimestamp="1645820509543" timestamp="184549627" timestamp2="184549627">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7447" _type="InsertStringCommand" date="Sun Feb 27 18:37:39 EST 2022" starttimestamp="1645820509543" timestamp="184549627" timestamp2="184549627">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="7448" _type="Insert" date="Sun Feb 27 18:37:39 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11644" docExpressionCount="1117" docLength="13029" length="1" offset="1225" starttimestamp="1645820509543" timestamp="184549795">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="7449" _type="InsertStringCommand" date="Sun Feb 27 18:37:39 EST 2022" starttimestamp="1645820509543" timestamp="184549795" timestamp2="184549795">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7450" _type="InsertStringCommand" date="Sun Feb 27 18:37:39 EST 2022" starttimestamp="1645820509543" timestamp="184549795" timestamp2="184549795">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="7451" _type="Insert" date="Sun Feb 27 18:37:39 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11645" docExpressionCount="1117" docLength="13030" length="1" offset="1226" starttimestamp="1645820509543" timestamp="184550011">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="7452" _type="InsertStringCommand" date="Sun Feb 27 18:37:39 EST 2022" starttimestamp="1645820509543" timestamp="184550011" timestamp2="184550011">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7453" _type="InsertStringCommand" date="Sun Feb 27 18:37:39 EST 2022" starttimestamp="1645820509543" timestamp="184550011" timestamp2="184550011">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="7454" _type="Insert" date="Sun Feb 27 18:37:39 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11646" docExpressionCount="1117" docLength="13031" length="1" offset="1227" starttimestamp="1645820509543" timestamp="184550243">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="7455" _type="InsertStringCommand" date="Sun Feb 27 18:37:39 EST 2022" starttimestamp="1645820509543" timestamp="184550243" timestamp2="184550243">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="7456" _type="InsertStringCommand" date="Sun Feb 27 18:37:39 EST 2022" starttimestamp="1645820509543" timestamp="184550249" timestamp2="184550249">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="7457" _type="Insert" date="Sun Feb 27 18:37:39 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11647" docExpressionCount="1117" docLength="13032" length="1" offset="1228" starttimestamp="1645820509543" timestamp="184550349">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="7458" _type="InsertStringCommand" date="Sun Feb 27 18:37:39 EST 2022" starttimestamp="1645820509543" timestamp="184550349" timestamp2="184550349">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="7459" _type="InsertStringCommand" date="Sun Feb 27 18:37:39 EST 2022" starttimestamp="1645820509543" timestamp="184550349" timestamp2="184550349">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="7460" _type="Insert" date="Sun Feb 27 18:37:40 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11648" docExpressionCount="1117" docLength="13033" length="1" offset="1229" starttimestamp="1645820509543" timestamp="184550464">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="7461" _type="InsertStringCommand" date="Sun Feb 27 18:37:40 EST 2022" starttimestamp="1645820509543" timestamp="184550464" timestamp2="184550464">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7462" _type="InsertStringCommand" date="Sun Feb 27 18:37:40 EST 2022" starttimestamp="1645820509543" timestamp="184550464" timestamp2="184550464">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="7463" _type="Insert" date="Sun Feb 27 18:37:40 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11649" docExpressionCount="1117" docLength="13034" length="1" offset="1230" starttimestamp="1645820509543" timestamp="184550627">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="7464" _type="InsertStringCommand" date="Sun Feb 27 18:37:40 EST 2022" starttimestamp="1645820509543" timestamp="184550627" timestamp2="184550627">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7465" _type="InsertStringCommand" date="Sun Feb 27 18:37:40 EST 2022" starttimestamp="1645820509543" timestamp="184550627" timestamp2="184550627">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="7466" _type="Insert" date="Sun Feb 27 18:37:40 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11650" docExpressionCount="1117" docLength="13035" length="1" offset="1231" starttimestamp="1645820509543" timestamp="184550866">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="7467" _type="InsertStringCommand" date="Sun Feb 27 18:37:40 EST 2022" starttimestamp="1645820509543" timestamp="184550866" timestamp2="184550866">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7468" _type="InsertStringCommand" date="Sun Feb 27 18:37:40 EST 2022" starttimestamp="1645820509543" timestamp="184550866" timestamp2="184550866">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="7469" _type="Insert" date="Sun Feb 27 18:37:40 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11651" docExpressionCount="1117" docLength="13036" length="1" offset="1232" starttimestamp="1645820509543" timestamp="184551050">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="7470" _type="InsertStringCommand" date="Sun Feb 27 18:37:40 EST 2022" starttimestamp="1645820509543" timestamp="184551050" timestamp2="184551050">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7471" _type="InsertStringCommand" date="Sun Feb 27 18:37:40 EST 2022" starttimestamp="1645820509543" timestamp="184551050" timestamp2="184551050">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="7472" _type="Insert" date="Sun Feb 27 18:37:40 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11652" docExpressionCount="1117" docLength="13037" length="1" offset="1233" starttimestamp="1645820509543" timestamp="184551097">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="7473" _type="InsertStringCommand" date="Sun Feb 27 18:37:40 EST 2022" starttimestamp="1645820509543" timestamp="184551097" timestamp2="184551097">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7474" _type="InsertStringCommand" date="Sun Feb 27 18:37:40 EST 2022" starttimestamp="1645820509543" timestamp="184551097" timestamp2="184551097">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="7475" _type="Insert" date="Sun Feb 27 18:37:40 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11653" docExpressionCount="1117" docLength="13038" length="1" offset="1234" starttimestamp="1645820509543" timestamp="184551198">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="7476" _type="InsertStringCommand" date="Sun Feb 27 18:37:40 EST 2022" starttimestamp="1645820509543" timestamp="184551198" timestamp2="184551198">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7477" _type="InsertStringCommand" date="Sun Feb 27 18:37:40 EST 2022" starttimestamp="1645820509543" timestamp="184551198" timestamp2="184551198">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="7478" _type="Insert" date="Sun Feb 27 18:37:40 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11654" docExpressionCount="1117" docLength="13039" length="1" offset="1235" starttimestamp="1645820509543" timestamp="184551282">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="7479" _type="InsertStringCommand" date="Sun Feb 27 18:37:40 EST 2022" starttimestamp="1645820509543" timestamp="184551282" timestamp2="184551282">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7480" _type="InsertStringCommand" date="Sun Feb 27 18:37:40 EST 2022" starttimestamp="1645820509543" timestamp="184551282" timestamp2="184551282">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="7481" _type="Delete" date="Sun Feb 27 18:37:41 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11653" docExpressionCount="1117" docLength="13038" endLine="51" length="1" offset="1235" startLine="51" starttimestamp="1645820509543" timestamp="184551498">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="7482" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:41 EST 2022" starttimestamp="1645820509543" timestamp="184551498" />
  <Command __id="7483" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:41 EST 2022" starttimestamp="1645820509543" timestamp="184551498" />
  <DocumentChange __id="7484" _type="Delete" date="Sun Feb 27 18:37:41 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11652" docExpressionCount="1117" docLength="13037" endLine="51" length="1" offset="1234" startLine="51" starttimestamp="1645820509543" timestamp="184551645">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="7485" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:41 EST 2022" starttimestamp="1645820509543" timestamp="184551651" />
  <Command __id="7486" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:41 EST 2022" starttimestamp="1645820509543" timestamp="184551651" />
  <DocumentChange __id="7487" _type="Delete" date="Sun Feb 27 18:37:41 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11651" docExpressionCount="1117" docLength="13036" endLine="51" length="1" offset="1233" startLine="51" starttimestamp="1645820509543" timestamp="184551830">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="7488" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:41 EST 2022" starttimestamp="1645820509543" timestamp="184551830" />
  <Command __id="7489" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:41 EST 2022" starttimestamp="1645820509543" timestamp="184551830" />
  <DocumentChange __id="7490" _type="Delete" date="Sun Feb 27 18:37:41 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11650" docExpressionCount="1117" docLength="13035" endLine="51" length="1" offset="1232" startLine="51" starttimestamp="1645820509543" timestamp="184552199">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="7491" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:41 EST 2022" starttimestamp="1645820509543" timestamp="184552199" />
  <Command __id="7492" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:41 EST 2022" starttimestamp="1645820509543" timestamp="184552199" />
  <DocumentChange __id="7493" _type="Insert" date="Sun Feb 27 18:37:41 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11651" docExpressionCount="1117" docLength="13036" length="1" offset="1232" starttimestamp="1645820509543" timestamp="184552299">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="7494" _type="InsertStringCommand" date="Sun Feb 27 18:37:41 EST 2022" starttimestamp="1645820509543" timestamp="184552299" timestamp2="184552299">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7495" _type="InsertStringCommand" date="Sun Feb 27 18:37:41 EST 2022" starttimestamp="1645820509543" timestamp="184552299" timestamp2="184552299">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="7496" _type="Insert" date="Sun Feb 27 18:37:41 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11652" docExpressionCount="1117" docLength="13037" length="1" offset="1233" starttimestamp="1645820509543" timestamp="184552418">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="7497" _type="InsertStringCommand" date="Sun Feb 27 18:37:41 EST 2022" starttimestamp="1645820509543" timestamp="184552420" timestamp2="184552420">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7498" _type="InsertStringCommand" date="Sun Feb 27 18:37:41 EST 2022" starttimestamp="1645820509543" timestamp="184552420" timestamp2="184552420">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="7499" _type="Insert" date="Sun Feb 27 18:37:42 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11653" docExpressionCount="1117" docLength="13038" length="1" offset="1234" starttimestamp="1645820509543" timestamp="184552568">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="7500" _type="InsertStringCommand" date="Sun Feb 27 18:37:42 EST 2022" starttimestamp="1645820509543" timestamp="184552568" timestamp2="184552568">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7501" _type="InsertStringCommand" date="Sun Feb 27 18:37:42 EST 2022" starttimestamp="1645820509543" timestamp="184552568" timestamp2="184552568">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="7502" _type="Insert" date="Sun Feb 27 18:37:42 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11654" docExpressionCount="1117" docLength="13039" length="1" offset="1235" starttimestamp="1645820509543" timestamp="184552615">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="7503" _type="InsertStringCommand" date="Sun Feb 27 18:37:42 EST 2022" starttimestamp="1645820509543" timestamp="184552615" timestamp2="184552615">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7504" _type="InsertStringCommand" date="Sun Feb 27 18:37:42 EST 2022" starttimestamp="1645820509543" timestamp="184552615" timestamp2="184552615">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="7505" _type="Insert" date="Sun Feb 27 18:37:42 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11655" docExpressionCount="1117" docLength="13040" length="1" offset="1236" starttimestamp="1645820509543" timestamp="184553400">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="7506" _type="InsertStringCommand" date="Sun Feb 27 18:37:42 EST 2022" starttimestamp="1645820509543" timestamp="184553400" timestamp2="184553400">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7507" _type="InsertStringCommand" date="Sun Feb 27 18:37:42 EST 2022" starttimestamp="1645820509543" timestamp="184553400" timestamp2="184553400">
    <data><![CDATA[.]]></data>
  </Command>
  <DocumentChange __id="7508" _type="Insert" date="Sun Feb 27 18:37:43 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11656" docExpressionCount="1117" docLength="13041" length="1" offset="1237" starttimestamp="1645820509543" timestamp="184553554">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="7509" _type="InsertStringCommand" date="Sun Feb 27 18:37:43 EST 2022" starttimestamp="1645820509543" timestamp="184553556" timestamp2="184553556">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7510" _type="InsertStringCommand" date="Sun Feb 27 18:37:43 EST 2022" starttimestamp="1645820509543" timestamp="184553556" timestamp2="184553556">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7512" _type="InsertStringCommand" date="Sun Feb 27 18:37:43 EST 2022" starttimestamp="1645820509543" timestamp="184553701" timestamp2="184553701">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7513" _type="InsertStringCommand" date="Sun Feb 27 18:37:43 EST 2022" starttimestamp="1645820509543" timestamp="184553701" timestamp2="184553701">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7514" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:44 EST 2022" starttimestamp="1645820509543" timestamp="184555002" />
  <Command __id="7515" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:44 EST 2022" starttimestamp="1645820509543" timestamp="184555018" />
  <Command __id="7516" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:44 EST 2022" starttimestamp="1645820509543" timestamp="184555187" />
  <Command __id="7517" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:44 EST 2022" starttimestamp="1645820509543" timestamp="184555187" />
  <Command __id="7519" _type="InsertStringCommand" date="Sun Feb 27 18:37:45 EST 2022" starttimestamp="1645820509543" timestamp="184555956" timestamp2="184555956">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="7520" _type="InsertStringCommand" date="Sun Feb 27 18:37:45 EST 2022" starttimestamp="1645820509543" timestamp="184555956" timestamp2="184555956">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="7521" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:46 EST 2022" starttimestamp="1645820509543" timestamp="184556721" />
  <Command __id="7522" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:46 EST 2022" starttimestamp="1645820509543" timestamp="184556721" />
  <Command __id="7523" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:46 EST 2022" starttimestamp="1645820509543" timestamp="184556874" />
  <Command __id="7524" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:46 EST 2022" starttimestamp="1645820509543" timestamp="184556874" />
  <Command __id="7525" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:46 EST 2022" starttimestamp="1645820509543" timestamp="184557036" />
  <Command __id="7526" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:46 EST 2022" starttimestamp="1645820509543" timestamp="184557036" />
  <Command __id="7527" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:46 EST 2022" starttimestamp="1645820509543" timestamp="184557174" />
  <Command __id="7528" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:46 EST 2022" starttimestamp="1645820509543" timestamp="184557174" />
  <Command __id="7529" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:47 EST 2022" starttimestamp="1645820509543" timestamp="184557458" />
  <Command __id="7530" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:47 EST 2022" starttimestamp="1645820509543" timestamp="184557458" />
  <Command __id="7532" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:47 EST 2022" starttimestamp="1645820509543" timestamp="184557759" />
  <Command __id="7533" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:47 EST 2022" starttimestamp="1645820509543" timestamp="184557759" />
  <Command __id="7535" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:47 EST 2022" starttimestamp="1645820509543" timestamp="184557937" />
  <Command __id="7536" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:47 EST 2022" starttimestamp="1645820509543" timestamp="184557937" />
  <Command __id="7538" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:47 EST 2022" starttimestamp="1645820509543" timestamp="184558075" />
  <Command __id="7539" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:47 EST 2022" starttimestamp="1645820509543" timestamp="184558075" />
  <Command __id="7540" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:47 EST 2022" starttimestamp="1645820509543" timestamp="184558337" />
  <Command __id="7541" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:47 EST 2022" starttimestamp="1645820509543" timestamp="184558337" />
  <Command __id="7542" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184558838" />
  <Command __id="7543" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184558838" />
  <Command __id="7544" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184558875" />
  <Command __id="7545" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184558875" />
  <Command __id="7546" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184558907" />
  <Command __id="7547" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184558907" />
  <Command __id="7548" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184558938" />
  <Command __id="7549" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184558938" />
  <Command __id="7550" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184558976" />
  <Command __id="7551" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184558976" />
  <Command __id="7552" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559007" />
  <Command __id="7553" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559007" />
  <Command __id="7554" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559038" />
  <Command __id="7555" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559038" />
  <Command __id="7556" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559076" />
  <Command __id="7557" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559076" />
  <Command __id="7558" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559107" />
  <Command __id="7559" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559107" />
  <Command __id="7560" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559139" />
  <Command __id="7561" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559139" />
  <Command __id="7562" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559177" />
  <Command __id="7563" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559177" />
  <Command __id="7564" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559208" />
  <Command __id="7565" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559208" />
  <Command __id="7566" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559239" />
  <Command __id="7567" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559239" />
  <Command __id="7568" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559277" />
  <Command __id="7569" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559277" />
  <Command __id="7570" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559308" />
  <Command __id="7571" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559308" />
  <Command __id="7572" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559339" />
  <Command __id="7573" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559339" />
  <Command __id="7574" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559377" />
  <Command __id="7575" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:48 EST 2022" starttimestamp="1645820509543" timestamp="184559377" />
  <Command __id="7576" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:49 EST 2022" starttimestamp="1645820509543" timestamp="184559518" />
  <Command __id="7577" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:49 EST 2022" starttimestamp="1645820509543" timestamp="184559518" />
  <Command __id="7578" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:49 EST 2022" starttimestamp="1645820509543" timestamp="184559650" />
  <Command __id="7579" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 18:37:49 EST 2022" starttimestamp="1645820509543" timestamp="184559650" />
  <Command __id="7581" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184560535" timestamp2="184560535">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7582" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184560535" timestamp2="184560535">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7584" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561021" timestamp2="184561021">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7585" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561021" timestamp2="184561021">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7587" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561068" timestamp2="184561068">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7588" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561068" timestamp2="184561068">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7590" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561105" timestamp2="184561105">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7591" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561105" timestamp2="184561105">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7593" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561121" timestamp2="184561121">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7594" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561121" timestamp2="184561121">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7596" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561152" timestamp2="184561152">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7597" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561152" timestamp2="184561152">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7599" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561205" timestamp2="184561205">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7600" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561205" timestamp2="184561205">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7602" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561221" timestamp2="184561221">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7603" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561221" timestamp2="184561221">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7605" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561252" timestamp2="184561252">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7606" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561252" timestamp2="184561252">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7608" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561283" timestamp2="184561283">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7609" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561283" timestamp2="184561283">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7611" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561321" timestamp2="184561321">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7612" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561321" timestamp2="184561321">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7614" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561368" timestamp2="184561368">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7615" _type="InsertStringCommand" date="Sun Feb 27 18:37:50 EST 2022" starttimestamp="1645820509543" timestamp="184561368" timestamp2="184561368">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7616" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184561637" />
  <Command __id="7617" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184561637" />
  <Command __id="7618" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562122" />
  <Command __id="7619" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562122" />
  <Command __id="7620" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562169" />
  <Command __id="7621" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562169" />
  <Command __id="7622" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562207" />
  <Command __id="7623" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562207" />
  <Command __id="7624" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562222" />
  <Command __id="7625" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562222" />
  <Command __id="7626" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562254" />
  <Command __id="7627" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562254" />
  <Command __id="7628" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562300" />
  <Command __id="7629" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562300" />
  <Command __id="7630" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562323" />
  <Command __id="7631" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562323" />
  <Command __id="7632" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562354" />
  <Command __id="7633" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562354" />
  <Command __id="7634" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562401" />
  <Command __id="7635" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562401" />
  <Command __id="7636" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562423" />
  <Command __id="7637" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562423" />
  <Command __id="7638" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562454" />
  <Command __id="7639" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:51 EST 2022" starttimestamp="1645820509543" timestamp="184562454" />
  <Command __id="7640" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184562485" />
  <Command __id="7641" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184562485" />
  <Command __id="7642" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184562523" />
  <Command __id="7643" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184562523" />
  <Command __id="7644" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184562554" />
  <Command __id="7645" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184562554" />
  <Command __id="7646" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184562586" />
  <Command __id="7647" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184562586" />
  <Command __id="7648" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184562624" />
  <Command __id="7649" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184562624" />
  <DocumentChange __id="7511" _type="Insert" date="Sun Feb 27 18:37:43 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11657" docExpressionCount="1117" docLength="13042" length="1" offset="1238" starttimestamp="1645820509543" timestamp="184553701">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="7518" _type="Insert" date="Sun Feb 27 18:37:45 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11658" docExpressionCount="1117" docLength="13043" length="1" offset="1241" starttimestamp="1645820509543" timestamp="184555956">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <DocumentChange __id="7531" _type="Delete" date="Sun Feb 27 18:37:47 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11657" docExpressionCount="1117" docLength="13042" endLine="51" length="1" offset="1238" startLine="51" starttimestamp="1645820509543" timestamp="184557759">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="7534" _type="Delete" date="Sun Feb 27 18:37:47 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11656" docExpressionCount="1117" docLength="13041" endLine="51" length="1" offset="1237" startLine="51" starttimestamp="1645820509543" timestamp="184557921">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="7537" _type="Delete" date="Sun Feb 27 18:37:47 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11655" docExpressionCount="1117" docLength="13040" endLine="51" length="1" offset="1236" startLine="51" starttimestamp="1645820509543" timestamp="184558075">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="7580" _type="Insert" date="Sun Feb 27 18:37:50 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11656" docExpressionCount="1117" docLength="13041" length="1" offset="1216" starttimestamp="1645820509543" timestamp="184560535">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7583" _type="Insert" date="Sun Feb 27 18:37:50 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11657" docExpressionCount="1117" docLength="13042" length="1" offset="1217" starttimestamp="1645820509543" timestamp="184561021">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7586" _type="Insert" date="Sun Feb 27 18:37:50 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11658" docExpressionCount="1117" docLength="13043" length="1" offset="1218" starttimestamp="1645820509543" timestamp="184561068">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7589" _type="Insert" date="Sun Feb 27 18:37:50 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11659" docExpressionCount="1117" docLength="13044" length="1" offset="1219" starttimestamp="1645820509543" timestamp="184561099">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7592" _type="Insert" date="Sun Feb 27 18:37:50 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11660" docExpressionCount="1117" docLength="13045" length="1" offset="1220" starttimestamp="1645820509543" timestamp="184561121">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7595" _type="Insert" date="Sun Feb 27 18:37:50 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11661" docExpressionCount="1117" docLength="13046" length="1" offset="1221" starttimestamp="1645820509543" timestamp="184561152">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7598" _type="Insert" date="Sun Feb 27 18:37:50 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11662" docExpressionCount="1117" docLength="13047" length="1" offset="1222" starttimestamp="1645820509543" timestamp="184561199">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7601" _type="Insert" date="Sun Feb 27 18:37:50 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11663" docExpressionCount="1117" docLength="13048" length="1" offset="1223" starttimestamp="1645820509543" timestamp="184561221">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7604" _type="Insert" date="Sun Feb 27 18:37:50 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11664" docExpressionCount="1117" docLength="13049" length="1" offset="1224" starttimestamp="1645820509543" timestamp="184561252">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7607" _type="Insert" date="Sun Feb 27 18:37:50 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11665" docExpressionCount="1117" docLength="13050" length="1" offset="1225" starttimestamp="1645820509543" timestamp="184561283">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7610" _type="Insert" date="Sun Feb 27 18:37:50 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11666" docExpressionCount="1117" docLength="13051" length="1" offset="1226" starttimestamp="1645820509543" timestamp="184561321">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7613" _type="Insert" date="Sun Feb 27 18:37:50 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11667" docExpressionCount="1117" docLength="13052" length="1" offset="1227" starttimestamp="1645820509543" timestamp="184561353">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7656" _type="Insert" date="Sun Feb 27 18:37:53 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11668" docExpressionCount="1117" docLength="13053" length="1" offset="1248" starttimestamp="1645820509543" timestamp="184563941">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7659" _type="Insert" date="Sun Feb 27 18:37:53 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11669" docExpressionCount="1117" docLength="13054" length="1" offset="1249" starttimestamp="1645820509543" timestamp="184564456">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7662" _type="Insert" date="Sun Feb 27 18:37:54 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11670" docExpressionCount="1117" docLength="13055" length="1" offset="1250" starttimestamp="1645820509543" timestamp="184564487">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7665" _type="Insert" date="Sun Feb 27 18:37:54 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11671" docExpressionCount="1117" docLength="13056" length="1" offset="1251" starttimestamp="1645820509543" timestamp="184564525">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7668" _type="Insert" date="Sun Feb 27 18:37:54 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11672" docExpressionCount="1117" docLength="13057" length="1" offset="1252" starttimestamp="1645820509543" timestamp="184564541">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7671" _type="Insert" date="Sun Feb 27 18:37:54 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11673" docExpressionCount="1117" docLength="13058" length="1" offset="1253" starttimestamp="1645820509543" timestamp="184564588">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7674" _type="Insert" date="Sun Feb 27 18:37:54 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11674" docExpressionCount="1117" docLength="13059" length="1" offset="1254" starttimestamp="1645820509543" timestamp="184564626">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <Command __id="7650" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184562824" />
  <Command __id="7651" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184562839" />
  <Command __id="7652" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184563008" />
  <Command __id="7653" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184563008" />
  <Command __id="7654" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184563156" />
  <Command __id="7655" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:37:52 EST 2022" starttimestamp="1645820509543" timestamp="184563156" />
  <Command __id="7657" _type="InsertStringCommand" date="Sun Feb 27 18:37:53 EST 2022" starttimestamp="1645820509543" timestamp="184563956" timestamp2="184563956">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7658" _type="InsertStringCommand" date="Sun Feb 27 18:37:53 EST 2022" starttimestamp="1645820509543" timestamp="184563956" timestamp2="184563956">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7660" _type="InsertStringCommand" date="Sun Feb 27 18:37:53 EST 2022" starttimestamp="1645820509543" timestamp="184564456" timestamp2="184564456">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7661" _type="InsertStringCommand" date="Sun Feb 27 18:37:53 EST 2022" starttimestamp="1645820509543" timestamp="184564456" timestamp2="184564456">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7663" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564487" timestamp2="184564487">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7664" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564487" timestamp2="184564487">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7666" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564525" timestamp2="184564525">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7667" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564525" timestamp2="184564525">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7669" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564541" timestamp2="184564541">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7670" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564541" timestamp2="184564541">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7672" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564588" timestamp2="184564588">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7673" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564588" timestamp2="184564588">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7675" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564641" timestamp2="184564641">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7676" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564641" timestamp2="184564641">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7678" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564641" timestamp2="184564641">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7679" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564641" timestamp2="184564641">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7681" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564672" timestamp2="184564672">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7682" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564672" timestamp2="184564672">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7684" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564957" timestamp2="184564957">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7685" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184564957" timestamp2="184564957">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7687" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184565111" timestamp2="184565111">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7688" _type="InsertStringCommand" date="Sun Feb 27 18:37:54 EST 2022" starttimestamp="1645820509543" timestamp="184565111" timestamp2="184565111">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="7689" _type="MoveCaretCommand" caretOffset="1113" date="Sun Feb 27 18:37:56 EST 2022" docOffset="1191" starttimestamp="1645820509543" timestamp="184566677" />
  <Command __id="7690" _type="MoveCaretCommand" caretOffset="1113" date="Sun Feb 27 18:37:56 EST 2022" docOffset="1191" starttimestamp="1645820509543" timestamp="184566677" />
  <Command __id="7691" _type="MoveCaretCommand" caretOffset="1184" date="Sun Feb 27 18:37:56 EST 2022" docOffset="1262" starttimestamp="1645820509543" timestamp="184567015" />
  <Command __id="7692" _type="MoveCaretCommand" caretOffset="1184" date="Sun Feb 27 18:37:56 EST 2022" docOffset="1262" starttimestamp="1645820509543" timestamp="184567015" />
  <Command __id="7694" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:57 EST 2022" starttimestamp="1645820509543" timestamp="184567531" />
  <Command __id="7695" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:37:57 EST 2022" starttimestamp="1645820509543" timestamp="184567531" />
  <Command __id="7697" _type="InsertStringCommand" date="Sun Feb 27 18:37:57 EST 2022" starttimestamp="1645820509543" timestamp="184567709" timestamp2="184567709">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7698" _type="InsertStringCommand" date="Sun Feb 27 18:37:57 EST 2022" starttimestamp="1645820509543" timestamp="184567709" timestamp2="184567709">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7699" _type="SelectTextCommand" caretOffset="1118" date="Sun Feb 27 18:37:59 EST 2022" end="1184" start="1118" starttimestamp="1645820509543" timestamp="184570212" />
  <Command __id="7700" _type="SelectTextCommand" caretOffset="1118" date="Sun Feb 27 18:37:59 EST 2022" end="1184" start="1118" starttimestamp="1645820509543" timestamp="184570212" />
  <Command __id="7701" _type="CopyCommand" date="Sun Feb 27 18:38:00 EST 2022" starttimestamp="1645820509543" timestamp="184570598" />
  <Command __id="7702" _type="MoveCaretCommand" caretOffset="1301" date="Sun Feb 27 18:38:05 EST 2022" docOffset="1379" starttimestamp="1645820509543" timestamp="184575488" />
  <Command __id="7703" _type="MoveCaretCommand" caretOffset="1301" date="Sun Feb 27 18:38:05 EST 2022" docOffset="1379" starttimestamp="1645820509543" timestamp="184575488" />
  <Command __id="7704" _type="MoveCaretCommand" caretOffset="1113" date="Sun Feb 27 18:38:06 EST 2022" docOffset="1191" starttimestamp="1645820509543" timestamp="184576946" />
  <Command __id="7705" _type="MoveCaretCommand" caretOffset="1113" date="Sun Feb 27 18:38:06 EST 2022" docOffset="1191" starttimestamp="1645820509543" timestamp="184576946" />
  <Command __id="7706" _type="MoveCaretCommand" caretOffset="2555" date="Sun Feb 27 18:38:08 EST 2022" docOffset="2633" starttimestamp="1645820509543" timestamp="184578934" />
  <Command __id="7707" _type="MoveCaretCommand" caretOffset="2555" date="Sun Feb 27 18:38:08 EST 2022" docOffset="2633" starttimestamp="1645820509543" timestamp="184578934" />
  <Command __id="7709" _type="InsertStringCommand" date="Sun Feb 27 18:38:09 EST 2022" starttimestamp="1645820509543" timestamp="184579765" timestamp2="184579765">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7710" _type="InsertStringCommand" date="Sun Feb 27 18:38:09 EST 2022" starttimestamp="1645820509543" timestamp="184579765" timestamp2="184579765">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7712" _type="PasteCommand" date="Sun Feb 27 18:38:09 EST 2022" starttimestamp="1645820509543" timestamp="184580249" />
  <Command __id="7713" _type="MoveCaretCommand" caretOffset="2595" date="Sun Feb 27 18:38:11 EST 2022" docOffset="2673" starttimestamp="1645820509543" timestamp="184582254" />
  <Command __id="7714" _type="MoveCaretCommand" caretOffset="2595" date="Sun Feb 27 18:38:11 EST 2022" docOffset="2673" starttimestamp="1645820509543" timestamp="184582254" />
  <Command __id="7715" _type="SelectTextCommand" caretOffset="2600" date="Sun Feb 27 18:38:11 EST 2022" end="2600" start="2592" starttimestamp="1645820509543" timestamp="184582408" />
  <Command __id="7716" _type="SelectTextCommand" caretOffset="2600" date="Sun Feb 27 18:38:11 EST 2022" end="2600" start="2592" starttimestamp="1645820509543" timestamp="184582408" />
  <Command __id="7718" _type="InsertStringCommand" date="Sun Feb 27 18:38:12 EST 2022" starttimestamp="1645820509543" timestamp="184582709" timestamp2="184582709">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7719" _type="InsertStringCommand" date="Sun Feb 27 18:38:12 EST 2022" starttimestamp="1645820509543" timestamp="184582709" timestamp2="184582709">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7721" _type="InsertStringCommand" date="Sun Feb 27 18:38:12 EST 2022" starttimestamp="1645820509543" timestamp="184582903" timestamp2="184582903">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7722" _type="InsertStringCommand" date="Sun Feb 27 18:38:12 EST 2022" starttimestamp="1645820509543" timestamp="184582903" timestamp2="184582903">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7724" _type="InsertStringCommand" date="Sun Feb 27 18:38:12 EST 2022" starttimestamp="1645820509543" timestamp="184583056" timestamp2="184583056">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7725" _type="InsertStringCommand" date="Sun Feb 27 18:38:12 EST 2022" starttimestamp="1645820509543" timestamp="184583056" timestamp2="184583056">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7727" _type="InsertStringCommand" date="Sun Feb 27 18:38:12 EST 2022" starttimestamp="1645820509543" timestamp="184583304" timestamp2="184583304">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7728" _type="InsertStringCommand" date="Sun Feb 27 18:38:12 EST 2022" starttimestamp="1645820509543" timestamp="184583304" timestamp2="184583304">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7730" _type="InsertStringCommand" date="Sun Feb 27 18:38:13 EST 2022" starttimestamp="1645820509543" timestamp="184583457" timestamp2="184583457">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7731" _type="InsertStringCommand" date="Sun Feb 27 18:38:13 EST 2022" starttimestamp="1645820509543" timestamp="184583457" timestamp2="184583457">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7733" _type="InsertStringCommand" date="Sun Feb 27 18:38:13 EST 2022" starttimestamp="1645820509543" timestamp="184583510" timestamp2="184583510">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="7734" _type="InsertStringCommand" date="Sun Feb 27 18:38:13 EST 2022" starttimestamp="1645820509543" timestamp="184583510" timestamp2="184583510">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="7736" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:13 EST 2022" starttimestamp="1645820509543" timestamp="184584189" />
  <Command __id="7737" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:13 EST 2022" starttimestamp="1645820509543" timestamp="184584189" />
  <Command __id="7739" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:13 EST 2022" starttimestamp="1645820509543" timestamp="184584358" />
  <Command __id="7740" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:13 EST 2022" starttimestamp="1645820509543" timestamp="184584358" />
  <Command __id="7742" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:14 EST 2022" starttimestamp="1645820509543" timestamp="184584511" />
  <Command __id="7743" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:14 EST 2022" starttimestamp="1645820509543" timestamp="184584511" />
  <Command __id="7745" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:14 EST 2022" starttimestamp="1645820509543" timestamp="184584673" />
  <Command __id="7746" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:14 EST 2022" starttimestamp="1645820509543" timestamp="184584673" />
  <DocumentChange __id="7677" _type="Insert" date="Sun Feb 27 18:37:54 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11675" docExpressionCount="1117" docLength="13060" length="1" offset="1255" starttimestamp="1645820509543" timestamp="184564641">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7680" _type="Insert" date="Sun Feb 27 18:37:54 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11676" docExpressionCount="1117" docLength="13061" length="1" offset="1256" starttimestamp="1645820509543" timestamp="184564672">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7683" _type="Insert" date="Sun Feb 27 18:37:54 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11677" docExpressionCount="1117" docLength="13062" length="1" offset="1257" starttimestamp="1645820509543" timestamp="184564942">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7686" _type="Insert" date="Sun Feb 27 18:37:54 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11678" docExpressionCount="1117" docLength="13063" length="1" offset="1258" starttimestamp="1645820509543" timestamp="184565111">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <DocumentChange __id="7693" _type="Delete" date="Sun Feb 27 18:37:57 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11677" docExpressionCount="1117" docLength="13062" endLine="51" length="1" offset="1261" startLine="51" starttimestamp="1645820509543" timestamp="184567531">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <DocumentChange __id="7696" _type="Insert" date="Sun Feb 27 18:37:57 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11678" docExpressionCount="1117" docLength="13063" length="1" offset="1261" starttimestamp="1645820509543" timestamp="184567693">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="7708" _type="Insert" date="Sun Feb 27 18:38:09 EST 2022" docASTNodeCount="1592" docActiveCodeLength="11683" docExpressionCount="1117" docLength="13068" length="5" offset="2633" starttimestamp="1645820509543" timestamp="184579749">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="7711" _type="Replace" date="Sun Feb 27 18:38:09 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11749" docExpressionCount="1123" docLength="13134" endLine="107" insertionLength="69" int_docASTNodeCount="1592" int_docActiveCodeLength="11680" int_docExpressionCount="1117" int_docLength="13065" length="3" offset="2635" startLine="107" starttimestamp="1645820509543" timestamp="184580249">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			System.out.println("------------starting declaration-----------");]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7717" _type="Replace" date="Sun Feb 27 18:38:12 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11742" docExpressionCount="1123" docLength="13127" endLine="107" insertionLength="1" int_docASTNodeCount="1599" int_docActiveCodeLength="11741" int_docExpressionCount="1123" int_docLength="13126" length="8" offset="2670" startLine="107" starttimestamp="1645820509543" timestamp="184582703">
    <deletedText><![CDATA[starting]]></deletedText>
    <insertedText><![CDATA[e]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7720" _type="Insert" date="Sun Feb 27 18:38:12 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11743" docExpressionCount="1123" docLength="13128" length="1" offset="2671" starttimestamp="1645820509543" timestamp="184582887">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="7723" _type="Insert" date="Sun Feb 27 18:38:12 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11744" docExpressionCount="1123" docLength="13129" length="1" offset="2672" starttimestamp="1645820509543" timestamp="184583056">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="7726" _type="Insert" date="Sun Feb 27 18:38:12 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11745" docExpressionCount="1123" docLength="13130" length="1" offset="2673" starttimestamp="1645820509543" timestamp="184583304">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="7729" _type="Insert" date="Sun Feb 27 18:38:13 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11746" docExpressionCount="1123" docLength="13131" length="1" offset="2674" starttimestamp="1645820509543" timestamp="184583457">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="7732" _type="Insert" date="Sun Feb 27 18:38:13 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11747" docExpressionCount="1123" docLength="13132" length="1" offset="2675" starttimestamp="1645820509543" timestamp="184583510">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="7735" _type="Delete" date="Sun Feb 27 18:38:13 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11746" docExpressionCount="1123" docLength="13131" endLine="107" length="1" offset="2675" startLine="107" starttimestamp="1645820509543" timestamp="184584189">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="7738" _type="Delete" date="Sun Feb 27 18:38:13 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11745" docExpressionCount="1123" docLength="13130" endLine="107" length="1" offset="2674" startLine="107" starttimestamp="1645820509543" timestamp="184584358">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="7741" _type="Delete" date="Sun Feb 27 18:38:14 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11744" docExpressionCount="1123" docLength="13129" endLine="107" length="1" offset="2673" startLine="107" starttimestamp="1645820509543" timestamp="184584511">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="7744" _type="Delete" date="Sun Feb 27 18:38:14 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11743" docExpressionCount="1123" docLength="13128" endLine="107" length="1" offset="2672" startLine="107" starttimestamp="1645820509543" timestamp="184584673">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="7747" _type="Delete" date="Sun Feb 27 18:38:14 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11742" docExpressionCount="1123" docLength="13127" endLine="107" length="1" offset="2671" startLine="107" starttimestamp="1645820509543" timestamp="184584811">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="7750" _type="Insert" date="Sun Feb 27 18:38:14 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11743" docExpressionCount="1123" docLength="13128" length="1" offset="2671" starttimestamp="1645820509543" timestamp="184585075">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="7753" _type="Insert" date="Sun Feb 27 18:38:14 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11744" docExpressionCount="1123" docLength="13129" length="1" offset="2672" starttimestamp="1645820509543" timestamp="184585175">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="7756" _type="Insert" date="Sun Feb 27 18:38:14 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11745" docExpressionCount="1123" docLength="13130" length="1" offset="2673" starttimestamp="1645820509543" timestamp="184585312">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="7759" _type="Insert" date="Sun Feb 27 18:38:14 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11746" docExpressionCount="1123" docLength="13131" length="1" offset="2674" starttimestamp="1645820509543" timestamp="184585328">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="7762" _type="Delete" date="Sun Feb 27 18:38:15 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11745" docExpressionCount="1123" docLength="13130" endLine="107" length="1" offset="2674" startLine="107" starttimestamp="1645820509543" timestamp="184585591">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="7748" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:14 EST 2022" starttimestamp="1645820509543" timestamp="184584827" />
  <Command __id="7749" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:14 EST 2022" starttimestamp="1645820509543" timestamp="184584827" />
  <Command __id="7751" _type="InsertStringCommand" date="Sun Feb 27 18:38:14 EST 2022" starttimestamp="1645820509543" timestamp="184585075" timestamp2="184585075">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7752" _type="InsertStringCommand" date="Sun Feb 27 18:38:14 EST 2022" starttimestamp="1645820509543" timestamp="184585075" timestamp2="184585075">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7754" _type="InsertStringCommand" date="Sun Feb 27 18:38:14 EST 2022" starttimestamp="1645820509543" timestamp="184585175" timestamp2="184585175">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7755" _type="InsertStringCommand" date="Sun Feb 27 18:38:14 EST 2022" starttimestamp="1645820509543" timestamp="184585175" timestamp2="184585175">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7757" _type="InsertStringCommand" date="Sun Feb 27 18:38:14 EST 2022" starttimestamp="1645820509543" timestamp="184585312" timestamp2="184585312">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="7758" _type="InsertStringCommand" date="Sun Feb 27 18:38:14 EST 2022" starttimestamp="1645820509543" timestamp="184585312" timestamp2="184585312">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="7760" _type="InsertStringCommand" date="Sun Feb 27 18:38:14 EST 2022" starttimestamp="1645820509543" timestamp="184585328" timestamp2="184585328">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7761" _type="InsertStringCommand" date="Sun Feb 27 18:38:14 EST 2022" starttimestamp="1645820509543" timestamp="184585328" timestamp2="184585328">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7763" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:15 EST 2022" starttimestamp="1645820509543" timestamp="184585591" />
  <Command __id="7764" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:15 EST 2022" starttimestamp="1645820509543" timestamp="184585591" />
  <Command __id="7766" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:15 EST 2022" starttimestamp="1645820509543" timestamp="184585760" />
  <Command __id="7767" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:15 EST 2022" starttimestamp="1645820509543" timestamp="184585760" />
  <Command __id="7769" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:15 EST 2022" starttimestamp="1645820509543" timestamp="184585891" />
  <Command __id="7770" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:38:15 EST 2022" starttimestamp="1645820509543" timestamp="184585891" />
  <Command __id="7772" _type="InsertStringCommand" date="Sun Feb 27 18:38:15 EST 2022" starttimestamp="1645820509543" timestamp="184586014" timestamp2="184586014">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7773" _type="InsertStringCommand" date="Sun Feb 27 18:38:15 EST 2022" starttimestamp="1645820509543" timestamp="184586014" timestamp2="184586014">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7775" _type="InsertStringCommand" date="Sun Feb 27 18:38:15 EST 2022" starttimestamp="1645820509543" timestamp="184586130" timestamp2="184586130">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7776" _type="InsertStringCommand" date="Sun Feb 27 18:38:15 EST 2022" starttimestamp="1645820509543" timestamp="184586130" timestamp2="184586130">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7778" _type="InsertStringCommand" date="Sun Feb 27 18:38:15 EST 2022" starttimestamp="1645820509543" timestamp="184586177" timestamp2="184586177">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7779" _type="InsertStringCommand" date="Sun Feb 27 18:38:15 EST 2022" starttimestamp="1645820509543" timestamp="184586177" timestamp2="184586177">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7781" _type="InsertStringCommand" date="Sun Feb 27 18:38:15 EST 2022" starttimestamp="1645820509543" timestamp="184586293" timestamp2="184586293">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="7782" _type="InsertStringCommand" date="Sun Feb 27 18:38:15 EST 2022" starttimestamp="1645820509543" timestamp="184586293" timestamp2="184586293">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="7786" _type="RunCommand" date="Sun Feb 27 18:38:18 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184588566" type="Run" />
  <Command __id="7787" _type="RunCommand" date="Sun Feb 27 18:38:18 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184588566" type="Run" />
  <Command __id="7788" _type="RunCommand" date="Sun Feb 27 18:38:18 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184588682" type="Run" />
  <Command __id="7789" _type="RunCommand" date="Sun Feb 27 18:38:18 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184588682" type="Run" />
  <Command __id="7790" _type="EHExceptionCommand" date="Sun Feb 27 18:38:18 EST 2022" starttimestamp="1645820509543" timestamp="184588719" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
PRIVATE------------starting declaration-----------
private
int
numErrors
;
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
gg
;
------------ending declaration-----------
------------starting declaration-----------
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
numErrors
In scanner =
=
0
;
try
In scanner =
=
!
(
a
In scanner =
==
a
)
;
}
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
hasErrors
(
)
{
IN METHOD DECLARATION
return
numErrors
>
0
;
OUT METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
void
reportError
(
String
message
)
{
System
.
out
.
println
(
message
)
;
Parse error: parsing statement, in subcase ID, current token is: }
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <DocumentChange __id="7765" _type="Delete" date="Sun Feb 27 18:38:15 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11744" docExpressionCount="1123" docLength="13129" endLine="107" length="1" offset="2673" startLine="107" starttimestamp="1645820509543" timestamp="184585744">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="7768" _type="Delete" date="Sun Feb 27 18:38:15 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11743" docExpressionCount="1123" docLength="13128" endLine="107" length="1" offset="2672" startLine="107" starttimestamp="1645820509543" timestamp="184585891">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="7771" _type="Insert" date="Sun Feb 27 18:38:15 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11744" docExpressionCount="1123" docLength="13129" length="1" offset="2672" starttimestamp="1645820509543" timestamp="184586007">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="7774" _type="Insert" date="Sun Feb 27 18:38:15 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11745" docExpressionCount="1123" docLength="13130" length="1" offset="2673" starttimestamp="1645820509543" timestamp="184586114">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="7777" _type="Insert" date="Sun Feb 27 18:38:15 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11746" docExpressionCount="1123" docLength="13131" length="1" offset="2674" starttimestamp="1645820509543" timestamp="184586161">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="7780" _type="Insert" date="Sun Feb 27 18:38:15 EST 2022" docASTNodeCount="1599" docActiveCodeLength="11747" docExpressionCount="1123" docLength="13132" length="1" offset="2675" starttimestamp="1645820509543" timestamp="184586293">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <Command __id="7791" _type="MoveCaretCommand" caretOffset="1063" date="Sun Feb 27 18:38:47 EST 2022" docOffset="1141" starttimestamp="1645820509543" timestamp="184617553" />
  <Command __id="7792" _type="MoveCaretCommand" caretOffset="1063" date="Sun Feb 27 18:38:47 EST 2022" docOffset="1141" starttimestamp="1645820509543" timestamp="184617553" />
  <Command __id="7794" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 18:38:48 EST 2022" starttimestamp="1645820509543" timestamp="184619209" />
  <DocumentChange __id="7793" _type="Insert" date="Sun Feb 27 18:38:48 EST 2022" docASTNodeCount="1590" docActiveCodeLength="11709" docExpressionCount="1115" docLength="13134" length="2" offset="1103" starttimestamp="1645820509543" timestamp="184619194">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7806" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:39:37 EST 2022" starttimestamp="1645820509543" timestamp="184668265" />
  <Command __id="7807" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:39:37 EST 2022" starttimestamp="1645820509543" timestamp="184668265" />
  <Command __id="7809" _type="MoveCaretCommand" caretOffset="1427" date="Sun Feb 27 18:39:38 EST 2022" docOffset="1505" starttimestamp="1645820509543" timestamp="184668581" />
  <Command __id="7810" _type="MoveCaretCommand" caretOffset="1427" date="Sun Feb 27 18:39:38 EST 2022" docOffset="1505" starttimestamp="1645820509543" timestamp="184668597" />
  <Command __id="7811" _type="MoveCaretCommand" caretOffset="1253" date="Sun Feb 27 18:39:38 EST 2022" docOffset="1331" starttimestamp="1645820509543" timestamp="184668898" />
  <Command __id="7812" _type="MoveCaretCommand" caretOffset="1253" date="Sun Feb 27 18:39:38 EST 2022" docOffset="1331" starttimestamp="1645820509543" timestamp="184668898" />
  <Command __id="7813" _type="MoveCaretCommand" caretOffset="1431" date="Sun Feb 27 18:39:38 EST 2022" docOffset="1509" starttimestamp="1645820509543" timestamp="184669168" />
  <Command __id="7814" _type="MoveCaretCommand" caretOffset="1431" date="Sun Feb 27 18:39:38 EST 2022" docOffset="1509" starttimestamp="1645820509543" timestamp="184669168" />
  <Command __id="7815" _type="MoveCaretCommand" caretOffset="1597" date="Sun Feb 27 18:39:50 EST 2022" docOffset="1675" starttimestamp="1645820509543" timestamp="184680533" />
  <Command __id="7816" _type="MoveCaretCommand" caretOffset="1597" date="Sun Feb 27 18:39:50 EST 2022" docOffset="1675" starttimestamp="1645820509543" timestamp="184680533" />
  <Command __id="7817" _type="MoveCaretCommand" caretOffset="1572" date="Sun Feb 27 18:39:50 EST 2022" docOffset="1650" starttimestamp="1645820509543" timestamp="184680971" />
  <Command __id="7818" _type="MoveCaretCommand" caretOffset="1572" date="Sun Feb 27 18:39:50 EST 2022" docOffset="1650" starttimestamp="1645820509543" timestamp="184680971" />
  <Command __id="7819" _type="SelectTextCommand" caretOffset="2275" date="Sun Feb 27 18:39:55 EST 2022" end="2275" start="2231" starttimestamp="1645820509543" timestamp="184686110" />
  <Command __id="7820" _type="SelectTextCommand" caretOffset="2275" date="Sun Feb 27 18:39:55 EST 2022" end="2275" start="2231" starttimestamp="1645820509543" timestamp="184686110" />
  <Command __id="7821" _type="CopyCommand" date="Sun Feb 27 18:39:55 EST 2022" starttimestamp="1645820509543" timestamp="184686325" />
  <Command __id="7822" _type="MoveCaretCommand" caretOffset="1597" date="Sun Feb 27 18:39:57 EST 2022" docOffset="1675" starttimestamp="1645820509543" timestamp="184687581" />
  <Command __id="7823" _type="MoveCaretCommand" caretOffset="1597" date="Sun Feb 27 18:39:57 EST 2022" docOffset="1675" starttimestamp="1645820509543" timestamp="184687581" />
  <Command __id="7824" _type="MoveCaretCommand" caretOffset="1572" date="Sun Feb 27 18:39:57 EST 2022" docOffset="1650" starttimestamp="1645820509543" timestamp="184687914" />
  <Command __id="7825" _type="MoveCaretCommand" caretOffset="1572" date="Sun Feb 27 18:39:57 EST 2022" docOffset="1650" starttimestamp="1645820509543" timestamp="184687914" />
  <Command __id="7827" _type="InsertStringCommand" date="Sun Feb 27 18:39:58 EST 2022" starttimestamp="1645820509543" timestamp="184688714" timestamp2="184688714">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7828" _type="InsertStringCommand" date="Sun Feb 27 18:39:58 EST 2022" starttimestamp="1645820509543" timestamp="184688714" timestamp2="184688714">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7830" _type="PasteCommand" date="Sun Feb 27 18:39:58 EST 2022" starttimestamp="1645820509543" timestamp="184688898" />
  <Command __id="7831" _type="MoveCaretCommand" caretOffset="1649" date="Sun Feb 27 18:39:59 EST 2022" docOffset="1727" starttimestamp="1645820509543" timestamp="184690117" />
  <Command __id="7832" _type="MoveCaretCommand" caretOffset="1649" date="Sun Feb 27 18:39:59 EST 2022" docOffset="1727" starttimestamp="1645820509543" timestamp="184690117" />
  <Command __id="7834" _type="InsertStringCommand" date="Sun Feb 27 18:40:00 EST 2022" starttimestamp="1645820509543" timestamp="184691017" timestamp2="184691017">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7835" _type="InsertStringCommand" date="Sun Feb 27 18:40:00 EST 2022" starttimestamp="1645820509543" timestamp="184691017" timestamp2="184691017">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7837" _type="PasteCommand" date="Sun Feb 27 18:40:00 EST 2022" starttimestamp="1645820509543" timestamp="184691233" />
  <Command __id="7838" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 18:40:01 EST 2022" starttimestamp="1645820509543" timestamp="184692139" />
  <Command __id="7839" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:40:01 EST 2022" starttimestamp="1645820509543" timestamp="184692234" />
  <Command __id="7840" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:40:01 EST 2022" starttimestamp="1645820509543" timestamp="184692249" />
  <Command __id="7841" _type="MoveCaretCommand" caretOffset="1621" date="Sun Feb 27 18:40:26 EST 2022" docOffset="1699" starttimestamp="1645820509543" timestamp="184716578" />
  <Command __id="7842" _type="MoveCaretCommand" caretOffset="1621" date="Sun Feb 27 18:40:26 EST 2022" docOffset="1699" starttimestamp="1645820509543" timestamp="184716578" />
  <Command __id="7803" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:39:19 EST 2022" docASTNodeCount="60" docActiveCodeLength="345" docExpressionCount="24" docLength="345" projectName="pa1" starttimestamp="1645820509543" timestamp="184649467">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="7808" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:39:38 EST 2022" docASTNodeCount="1590" docActiveCodeLength="11709" docExpressionCount="1115" docLength="13134" projectName="pa1" starttimestamp="1645820509543" timestamp="184668528">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶"), Diff(INSERT,"//"), Diff(EQUAL,"		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			"), Diff(INSERT,"System.out.println("------------starting declaration-----------");¶			"), Diff(EQUAL,"parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				// Method Declaration¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						parseStatement();¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				// both possible¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶							// Field Declaration¶							case SEMICOLON:¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							// Method Declaration¶							case LPAREN:¶								acceptIt();¶								if (startsType(currentToken.kind)) {¶									parseParameterList();¶								}¶								accept(TokenKind.RPAREN);¶								accept(TokenKind.LCURLY);¶								¶								while (startsStatement(currentToken.kind)) {¶									"), Diff(DELETE,"parseStatement("), Diff(INSERT,"System.out.println("IN METHOD DECLARATION");¶									parseStatement();¶									System.out.println("OUT METHOD DECLARATION""), Diff(EQUAL,");¶								}¶								accept(TokenKind.RCURLY);¶								break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations, no types declared.");¶					}¶					break;¶					¶			}¶		"), Diff(INSERT,"	System.out.println("------------ending declaration-----------");¶		"), Diff(EQUAL,"}¶		System.out.println("out here end of program: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶			case LCURLY:¶				acceptIt();¶				while (startsStatement(currentToken.kind)) {¶					parseStatement();¶				}¶	//			System.out.println("in here: " + currentToken);¶				accept(TokenKind.RCURLY);¶				break;¶				¶			case INT: case BOOLEAN:¶				parseType();¶				parseId();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case ID:			¶"), Diff(INSERT,"//"), Diff(EQUAL,"				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				acceptIt();¶"), Diff(INSERT,"//"), Diff(EQUAL,"				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				switch (currentToken.kind) {¶					// in Type¶					case ID:¶						acceptIt();¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// in Reference¶					case EQUAL:¶		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						acceptIt();¶		//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// both¶					case LBRACKET: ¶						acceptIt();¶						// in Type¶						if (currentToken.kind == TokenKind.RBRACKET) {¶							acceptIt();¶							accept(TokenKind.ID);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						} else {¶							// in Reference¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						}¶						break;¶					¶					case DOT:¶						while (currentToken.kind == TokenKind.DOT) {¶							acceptIt();¶							accept(TokenKind.ID);¶						}¶						switch (currentToken.kind) {¶							case EQUAL:¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LBRACKET: ¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.RBRACKET);¶								accept(TokenKind.EQUAL);¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LPAREN:¶								acceptIt();¶								if (currentToken.kind == TokenKind.RPAREN) {¶									acceptIt();¶								} else {¶									parseArgumentList();¶									accept(TokenKind.RPAREN);¶								}¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							default:¶								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶						}¶					default:¶						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶				}¶				break;¶			¶			case THIS:¶				acceptIt();¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶				case EQUAL:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶				¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶					¶				case LPAREN:¶					acceptIt();¶					if (currentToken.kind == TokenKind.RPAREN) {¶						acceptIt();¶						accept(TokenKind.SEMICOLON);¶					} else {¶						parseArgumentList();¶						accept(TokenKind.RPAREN);¶						accept(TokenKind.SEMICOLON);¶					}¶					break;¶				¶				default:¶					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶				}¶				break;¶				¶			case RETURN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.SEMICOLON) {¶					acceptIt();¶				} else {¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case IF:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				if (currentToken.kind == TokenKind.ELSE) {¶					acceptIt();¶					parseStatement();¶				}¶				break;¶				¶			case WHILE:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				break;¶			¶			default:¶				parseError("parsing statement, current token is:" + currentToken);¶				break;¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶	¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶			// starts with reference¶			case ID: case THIS:¶				acceptIt();¶				// dealing with (.id)*¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					// reference[expression]¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					// reference(arglist?)¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						break;¶						¶					// just reference¶					default:¶						break;¶//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶				¶			case UNOP: case MINUS:¶				acceptIt();¶				parseExpression();¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				break;¶			¶			case NUM: case TRUE: case FALSE:¶				acceptIt();¶				break;¶			¶			case NEW:¶				acceptIt();¶				switch (currentToken.kind) {¶				case ID:¶					acceptIt();¶					switch (currentToken.kind) {¶					case LPAREN:¶						acceptIt();¶						accept(TokenKind.RPAREN);¶						break;¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					}¶				¶				case INT:¶					acceptIt();¶					accept(TokenKind.LBRACKET);¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				default:¶					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶			¶			default:¶				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				break;¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
//		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			System.out.println("------------starting declaration-----------");
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				// Method Declaration
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						parseStatement();
					}
					accept(TokenKind.RCURLY);
					break;
					
				// both possible
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
							// Field Declaration
							case SEMICOLON:
								accept(TokenKind.SEMICOLON);
								break;
							
							// Method Declaration
							case LPAREN:
								acceptIt();
								if (startsType(currentToken.kind)) {
									parseParameterList();
								}
								accept(TokenKind.RPAREN);
								accept(TokenKind.LCURLY);
								
								while (startsStatement(currentToken.kind)) {
									System.out.println("IN METHOD DECLARATION");
									parseStatement();
									System.out.println("OUT METHOD DECLARATION");
								}
								accept(TokenKind.RCURLY);
								break;
						}
					}
					else {
						parseError("Parsing wrong in declarations, no types declared.");
					}
					break;
					
			}
			System.out.println("------------ending declaration-----------");
		}
		System.out.println("out here end of program: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
			case LCURLY:
				acceptIt();
				while (startsStatement(currentToken.kind)) {
					parseStatement();
				}
	//			System.out.println("in here: " + currentToken);
				accept(TokenKind.RCURLY);
				break;
				
			case INT: case BOOLEAN:
				parseType();
				parseId();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case ID:			
//				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");
				acceptIt();
//				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");
				switch (currentToken.kind) {
					// in Type
					case ID:
						acceptIt();
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					// in Reference
					case EQUAL:
		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");
						acceptIt();
		//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					// both
					case LBRACKET: 
						acceptIt();
						// in Type
						if (currentToken.kind == TokenKind.RBRACKET) {
							acceptIt();
							accept(TokenKind.ID);
							accept(TokenKind.EQUAL);
							parseExpression();
							accept(TokenKind.SEMICOLON);
						} else {
							// in Reference
							parseExpression();
							accept(TokenKind.RBRACKET);
							accept(TokenKind.EQUAL);
							parseExpression();
							accept(TokenKind.SEMICOLON);
						}
						break;
					
					case DOT:
						while (currentToken.kind == TokenKind.DOT) {
							acceptIt();
							accept(TokenKind.ID);
						}
						switch (currentToken.kind) {
							case EQUAL:
								acceptIt();
								parseExpression();
								accept(TokenKind.SEMICOLON);
								break;
							
							case LBRACKET: 
								acceptIt();
								parseExpression();
								accept(TokenKind.RBRACKET);
								accept(TokenKind.EQUAL);
								parseExpression();
								accept(TokenKind.SEMICOLON);
								break;
							
							case LPAREN:
								acceptIt();
								if (currentToken.kind == TokenKind.RPAREN) {
									acceptIt();
								} else {
									parseArgumentList();
									accept(TokenKind.RPAREN);
								}
								accept(TokenKind.SEMICOLON);
								break;
							
							default:
								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
						}
					default:
						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
				}
				break;
			
			case THIS:
				acceptIt();
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
				case EQUAL:
					acceptIt();
					parseExpression();
					accept(TokenKind.SEMICOLON);
					break;
				
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
					break;
					
				case LPAREN:
					acceptIt();
					if (currentToken.kind == TokenKind.RPAREN) {
						acceptIt();
						accept(TokenKind.SEMICOLON);
					} else {
						parseArgumentList();
						accept(TokenKind.RPAREN);
						accept(TokenKind.SEMICOLON);
					}
					break;
				
				default:
					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
				}
				break;
				
			case RETURN:
				acceptIt();
				if (currentToken.kind == TokenKind.SEMICOLON) {
					acceptIt();
				} else {
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case IF:
				acceptIt();
				accept(TokenKind.LPAREN);
				parseExpression();
				accept(TokenKind.RPAREN);
				parseStatement();
				if (currentToken.kind == TokenKind.ELSE) {
					acceptIt();
					parseStatement();
				}
				break;
				
			case WHILE:
				acceptIt();
				accept(TokenKind.LPAREN);
				parseExpression();
				accept(TokenKind.RPAREN);
				parseStatement();
				break;
			
			default:
				parseError("parsing statement, current token is:" + currentToken);
				break;
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}

	
	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
			// starts with reference
			case ID: case THIS:
				acceptIt();
				// dealing with (.id)*
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					// reference[expression]
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					// reference(arglist?)
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						break;
						
					// just reference
					default:
						break;
//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
				
			case UNOP: case MINUS:
				acceptIt();
				parseExpression();
				break;
			
			case LPAREN:
				acceptIt();
				parseExpression();
				accept(TokenKind.RPAREN);
				break;
			
			case NUM: case TRUE: case FALSE:
				acceptIt();
				break;
			
			case NEW:
				acceptIt();
				switch (currentToken.kind) {
				case ID:
					acceptIt();
					switch (currentToken.kind) {
					case LPAREN:
						acceptIt();
						accept(TokenKind.RPAREN);
						break;
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					}
				
				case INT:
					acceptIt();
					accept(TokenKind.LBRACKET);
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				default:
					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
			
			default:
				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				break;
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="7826" _type="Insert" date="Sun Feb 27 18:39:58 EST 2022" docASTNodeCount="1590" docActiveCodeLength="11717" docExpressionCount="1115" docLength="13142" length="8" offset="1650" starttimestamp="1645820509543" timestamp="184688714">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <DocumentChange __id="7829" _type="Replace" date="Sun Feb 27 18:39:58 EST 2022" docASTNodeCount="1597" docActiveCodeLength="11761" docExpressionCount="1121" docLength="13186" endLine="67" insertionLength="50" int_docASTNodeCount="1590" int_docActiveCodeLength="11711" int_docExpressionCount="1115" int_docLength="13136" length="6" offset="1652" startLine="67" starttimestamp="1645820509543" timestamp="184688898">
    <deletedText><![CDATA[						]]></deletedText>
    <insertedText><![CDATA[						System.out.println("IN METHOD DECLARATION");]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7833" _type="Insert" date="Sun Feb 27 18:40:00 EST 2022" docASTNodeCount="1597" docActiveCodeLength="11769" docExpressionCount="1121" docLength="13194" length="8" offset="1727" starttimestamp="1645820509543" timestamp="184691002">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <DocumentChange __id="7836" _type="Replace" date="Sun Feb 27 18:40:00 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11813" docExpressionCount="1127" docLength="13238" endLine="69" insertionLength="50" int_docASTNodeCount="1597" int_docActiveCodeLength="11763" int_docExpressionCount="1121" int_docLength="13188" length="6" offset="1729" startLine="69" starttimestamp="1645820509543" timestamp="184691233">
    <deletedText><![CDATA[						]]></deletedText>
    <insertedText><![CDATA[						System.out.println("IN METHOD DECLARATION");]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7845" _type="Insert" date="Sun Feb 27 18:40:28 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11814" docExpressionCount="1127" docLength="13239" length="1" offset="1680" starttimestamp="1645820509543" timestamp="184719268">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="7843" _type="MoveCaretCommand" caretOffset="1602" date="Sun Feb 27 18:40:28 EST 2022" docOffset="1680" starttimestamp="1645820509543" timestamp="184718937" />
  <Command __id="7844" _type="MoveCaretCommand" caretOffset="1602" date="Sun Feb 27 18:40:28 EST 2022" docOffset="1680" starttimestamp="1645820509543" timestamp="184718937" />
  <Command __id="7846" _type="InsertStringCommand" date="Sun Feb 27 18:40:28 EST 2022" starttimestamp="1645820509543" timestamp="184719268" timestamp2="184719268">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7847" _type="InsertStringCommand" date="Sun Feb 27 18:40:28 EST 2022" starttimestamp="1645820509543" timestamp="184719268" timestamp2="184719268">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7849" _type="InsertStringCommand" date="Sun Feb 27 18:40:29 EST 2022" starttimestamp="1645820509543" timestamp="184720455" timestamp2="184720455">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="7850" _type="InsertStringCommand" date="Sun Feb 27 18:40:29 EST 2022" starttimestamp="1645820509543" timestamp="184720455" timestamp2="184720455">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="7852" _type="InsertStringCommand" date="Sun Feb 27 18:40:30 EST 2022" starttimestamp="1645820509543" timestamp="184720586" timestamp2="184720586">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="7853" _type="InsertStringCommand" date="Sun Feb 27 18:40:30 EST 2022" starttimestamp="1645820509543" timestamp="184720586" timestamp2="184720586">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="7855" _type="InsertStringCommand" date="Sun Feb 27 18:40:30 EST 2022" starttimestamp="1645820509543" timestamp="184720702" timestamp2="184720702">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="7856" _type="InsertStringCommand" date="Sun Feb 27 18:40:30 EST 2022" starttimestamp="1645820509543" timestamp="184720702" timestamp2="184720702">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="7858" _type="InsertStringCommand" date="Sun Feb 27 18:40:30 EST 2022" starttimestamp="1645820509543" timestamp="184720823" timestamp2="184720823">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="7859" _type="InsertStringCommand" date="Sun Feb 27 18:40:30 EST 2022" starttimestamp="1645820509543" timestamp="184720823" timestamp2="184720823">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="7860" _type="MoveCaretCommand" caretOffset="1683" date="Sun Feb 27 18:40:32 EST 2022" docOffset="1761" starttimestamp="1645820509543" timestamp="184722458" />
  <Command __id="7861" _type="MoveCaretCommand" caretOffset="1683" date="Sun Feb 27 18:40:32 EST 2022" docOffset="1761" starttimestamp="1645820509543" timestamp="184722458" />
  <Command __id="7862" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:40:32 EST 2022" starttimestamp="1645820509543" timestamp="184723428" />
  <Command __id="7863" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 18:40:32 EST 2022" starttimestamp="1645820509543" timestamp="184723428" />
  <Command __id="7865" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:40:33 EST 2022" starttimestamp="1645820509543" timestamp="184723828" />
  <Command __id="7866" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:40:33 EST 2022" starttimestamp="1645820509543" timestamp="184723828" />
  <Command __id="7868" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:40:33 EST 2022" starttimestamp="1645820509543" timestamp="184723960" />
  <Command __id="7869" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 18:40:33 EST 2022" starttimestamp="1645820509543" timestamp="184723960" />
  <Command __id="7871" _type="InsertStringCommand" date="Sun Feb 27 18:40:34 EST 2022" starttimestamp="1645820509543" timestamp="184724608" timestamp2="184724608">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="7872" _type="InsertStringCommand" date="Sun Feb 27 18:40:34 EST 2022" starttimestamp="1645820509543" timestamp="184724608" timestamp2="184724608">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="7874" _type="InsertStringCommand" date="Sun Feb 27 18:40:34 EST 2022" starttimestamp="1645820509543" timestamp="184724708" timestamp2="184724708">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="7875" _type="InsertStringCommand" date="Sun Feb 27 18:40:34 EST 2022" starttimestamp="1645820509543" timestamp="184724708" timestamp2="184724708">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="7877" _type="InsertStringCommand" date="Sun Feb 27 18:40:34 EST 2022" starttimestamp="1645820509543" timestamp="184724861" timestamp2="184724861">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="7878" _type="InsertStringCommand" date="Sun Feb 27 18:40:34 EST 2022" starttimestamp="1645820509543" timestamp="184724861" timestamp2="184724861">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="7880" _type="InsertStringCommand" date="Sun Feb 27 18:40:34 EST 2022" starttimestamp="1645820509543" timestamp="184724961" timestamp2="184724961">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7881" _type="InsertStringCommand" date="Sun Feb 27 18:40:34 EST 2022" starttimestamp="1645820509543" timestamp="184724961" timestamp2="184724961">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7883" _type="InsertStringCommand" date="Sun Feb 27 18:40:34 EST 2022" starttimestamp="1645820509543" timestamp="184725224" timestamp2="184725224">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="7884" _type="InsertStringCommand" date="Sun Feb 27 18:40:34 EST 2022" starttimestamp="1645820509543" timestamp="184725224" timestamp2="184725224">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="7886" _type="InsertStringCommand" date="Sun Feb 27 18:40:34 EST 2022" starttimestamp="1645820509543" timestamp="184725293" timestamp2="184725293">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="7887" _type="InsertStringCommand" date="Sun Feb 27 18:40:34 EST 2022" starttimestamp="1645820509543" timestamp="184725293" timestamp2="184725293">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="7889" _type="InsertStringCommand" date="Sun Feb 27 18:40:34 EST 2022" starttimestamp="1645820509543" timestamp="184725408" timestamp2="184725408">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="7890" _type="InsertStringCommand" date="Sun Feb 27 18:40:34 EST 2022" starttimestamp="1645820509543" timestamp="184725408" timestamp2="184725408">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="7892" _type="InsertStringCommand" date="Sun Feb 27 18:40:35 EST 2022" starttimestamp="1645820509543" timestamp="184725577" timestamp2="184725577">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="7893" _type="InsertStringCommand" date="Sun Feb 27 18:40:35 EST 2022" starttimestamp="1645820509543" timestamp="184725577" timestamp2="184725577">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="7897" _type="RunCommand" date="Sun Feb 27 18:40:40 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184731018" type="Run" />
  <Command __id="7898" _type="RunCommand" date="Sun Feb 27 18:40:40 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184731018" type="Run" />
  <Command __id="7899" _type="RunCommand" date="Sun Feb 27 18:40:40 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184731156" type="Run" />
  <Command __id="7900" _type="RunCommand" date="Sun Feb 27 18:40:40 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184731156" type="Run" />
  <Command __id="7901" _type="EHExceptionCommand" date="Sun Feb 27 18:40:40 EST 2022" starttimestamp="1645820509543" timestamp="184731203" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
------------starting declaration-----------
private
int
numErrors
;
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
gg
;
------------ending declaration-----------
------------starting declaration-----------
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
IN VOID METHOD DECLARATION
numErrors
In scanner =
=
0
;
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
try
In scanner =
=
!
(
a
In scanner =
==
a
)
;
OUT VOID METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
hasErrors
(
)
{
IN METHOD DECLARATION
return
numErrors
>
0
;
OUT METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
void
reportError
(
String
message
)
{
IN VOID METHOD DECLARATION
System
.
out
.
println
(
message
)
;
Parse error: parsing statement, in subcase ID, current token is: }
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="7902" _type="MoveCaretCommand" caretOffset="3820" date="Sun Feb 27 18:42:02 EST 2022" docOffset="3898" starttimestamp="1645820509543" timestamp="184813408" />
  <Command __id="7903" _type="MoveCaretCommand" caretOffset="3820" date="Sun Feb 27 18:42:02 EST 2022" docOffset="3898" starttimestamp="1645820509543" timestamp="184813408" />
  <DocumentChange __id="7848" _type="Insert" date="Sun Feb 27 18:40:29 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11815" docExpressionCount="1127" docLength="13240" length="1" offset="1681" starttimestamp="1645820509543" timestamp="184720455">
    <text><![CDATA[V]]></text>
  </DocumentChange>
  <DocumentChange __id="7851" _type="Insert" date="Sun Feb 27 18:40:30 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11816" docExpressionCount="1127" docLength="13241" length="1" offset="1682" starttimestamp="1645820509543" timestamp="184720586">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <DocumentChange __id="7854" _type="Insert" date="Sun Feb 27 18:40:30 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11817" docExpressionCount="1127" docLength="13242" length="1" offset="1683" starttimestamp="1645820509543" timestamp="184720686">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="7857" _type="Insert" date="Sun Feb 27 18:40:30 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11818" docExpressionCount="1127" docLength="13243" length="1" offset="1684" starttimestamp="1645820509543" timestamp="184720823">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <DocumentChange __id="7864" _type="Delete" date="Sun Feb 27 18:40:33 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11817" docExpressionCount="1127" docLength="13242" endLine="69" length="1" offset="1761" startLine="69" starttimestamp="1645820509543" timestamp="184723828">
    <text><![CDATA[N]]></text>
  </DocumentChange>
  <DocumentChange __id="7867" _type="Delete" date="Sun Feb 27 18:40:33 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11816" docExpressionCount="1127" docLength="13241" endLine="69" length="1" offset="1760" startLine="69" starttimestamp="1645820509543" timestamp="184723960">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="7870" _type="Insert" date="Sun Feb 27 18:40:34 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11817" docExpressionCount="1127" docLength="13242" length="1" offset="1760" starttimestamp="1645820509543" timestamp="184724608">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <DocumentChange __id="7873" _type="Insert" date="Sun Feb 27 18:40:34 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11818" docExpressionCount="1127" docLength="13243" length="1" offset="1761" starttimestamp="1645820509543" timestamp="184724708">
    <text><![CDATA[U]]></text>
  </DocumentChange>
  <DocumentChange __id="7876" _type="Insert" date="Sun Feb 27 18:40:34 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11819" docExpressionCount="1127" docLength="13244" length="1" offset="1762" starttimestamp="1645820509543" timestamp="184724861">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <DocumentChange __id="7879" _type="Insert" date="Sun Feb 27 18:40:34 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11820" docExpressionCount="1127" docLength="13245" length="1" offset="1763" starttimestamp="1645820509543" timestamp="184724961">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="7882" _type="Insert" date="Sun Feb 27 18:40:34 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11821" docExpressionCount="1127" docLength="13246" length="1" offset="1764" starttimestamp="1645820509543" timestamp="184725224">
    <text><![CDATA[V]]></text>
  </DocumentChange>
  <DocumentChange __id="7885" _type="Insert" date="Sun Feb 27 18:40:34 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11822" docExpressionCount="1127" docLength="13247" length="1" offset="1765" starttimestamp="1645820509543" timestamp="184725293">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <DocumentChange __id="7888" _type="Insert" date="Sun Feb 27 18:40:34 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11823" docExpressionCount="1127" docLength="13248" length="1" offset="1766" starttimestamp="1645820509543" timestamp="184725393">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="7891" _type="Insert" date="Sun Feb 27 18:40:35 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11824" docExpressionCount="1127" docLength="13249" length="1" offset="1767" starttimestamp="1645820509543" timestamp="184725561">
    <text><![CDATA[D]]></text>
  </DocumentChange>
  <Command __id="7904" _type="MoveCaretCommand" caretOffset="5853" date="Sun Feb 27 18:43:18 EST 2022" docOffset="5931" starttimestamp="1645820509543" timestamp="184888650" />
  <Command __id="7905" _type="MoveCaretCommand" caretOffset="5853" date="Sun Feb 27 18:43:18 EST 2022" docOffset="5931" starttimestamp="1645820509543" timestamp="184888650" />
  <DocumentChange __id="7906" _type="Insert" date="Sun Feb 27 18:43:21 EST 2022" docASTNodeCount="1604" docActiveCodeLength="11832" docExpressionCount="1127" docLength="13257" length="8" offset="5931" starttimestamp="1645820509543" timestamp="184891807">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <Command __id="7907" _type="InsertStringCommand" date="Sun Feb 27 18:43:21 EST 2022" starttimestamp="1645820509543" timestamp="184891807" timestamp2="184891807">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7908" _type="InsertStringCommand" date="Sun Feb 27 18:43:21 EST 2022" starttimestamp="1645820509543" timestamp="184891807" timestamp2="184891807">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="7909" _type="Insert" date="Sun Feb 27 18:43:21 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11833" docExpressionCount="1128" docLength="13258" length="1" offset="5939" starttimestamp="1645820509543" timestamp="184892139">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="7910" _type="InsertStringCommand" date="Sun Feb 27 18:43:21 EST 2022" starttimestamp="1645820509543" timestamp="184892139" timestamp2="184892139">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="7911" _type="InsertStringCommand" date="Sun Feb 27 18:43:21 EST 2022" starttimestamp="1645820509543" timestamp="184892139" timestamp2="184892139">
    <data><![CDATA[b]]></data>
  </Command>
  <DocumentChange __id="7912" _type="Insert" date="Sun Feb 27 18:43:21 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11834" docExpressionCount="1128" docLength="13259" length="1" offset="5940" starttimestamp="1645820509543" timestamp="184892377">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="7913" _type="InsertStringCommand" date="Sun Feb 27 18:43:21 EST 2022" starttimestamp="1645820509543" timestamp="184892377" timestamp2="184892377">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7914" _type="InsertStringCommand" date="Sun Feb 27 18:43:21 EST 2022" starttimestamp="1645820509543" timestamp="184892377" timestamp2="184892377">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="7915" _type="Insert" date="Sun Feb 27 18:43:22 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11835" docExpressionCount="1128" docLength="13260" length="1" offset="5941" starttimestamp="1645820509543" timestamp="184892671">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="7916" _type="InsertStringCommand" date="Sun Feb 27 18:43:22 EST 2022" starttimestamp="1645820509543" timestamp="184892677" timestamp2="184892677">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7917" _type="InsertStringCommand" date="Sun Feb 27 18:43:22 EST 2022" starttimestamp="1645820509543" timestamp="184892677" timestamp2="184892677">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="7918" _type="Insert" date="Sun Feb 27 18:43:22 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11836" docExpressionCount="1128" docLength="13261" length="1" offset="5942" starttimestamp="1645820509543" timestamp="184892755">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="7919" _type="InsertStringCommand" date="Sun Feb 27 18:43:22 EST 2022" starttimestamp="1645820509543" timestamp="184892771" timestamp2="184892771">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7920" _type="InsertStringCommand" date="Sun Feb 27 18:43:22 EST 2022" starttimestamp="1645820509543" timestamp="184892771" timestamp2="184892771">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="7921" _type="Insert" date="Sun Feb 27 18:43:22 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11837" docExpressionCount="1127" docLength="13262" length="1" offset="5943" starttimestamp="1645820509543" timestamp="184893009">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="7922" _type="InsertStringCommand" date="Sun Feb 27 18:43:22 EST 2022" starttimestamp="1645820509543" timestamp="184893009" timestamp2="184893009">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="7923" _type="InsertStringCommand" date="Sun Feb 27 18:43:22 EST 2022" starttimestamp="1645820509543" timestamp="184893009" timestamp2="184893009">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="7925" _type="InsertStringCommand" date="Sun Feb 27 18:43:23 EST 2022" starttimestamp="1645820509543" timestamp="184893509" timestamp2="184893509">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7926" _type="InsertStringCommand" date="Sun Feb 27 18:43:23 EST 2022" starttimestamp="1645820509543" timestamp="184893509" timestamp2="184893509">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7927" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 18:43:23 EST 2022" starttimestamp="1645820509543" timestamp="184894083" />
  <Command __id="7928" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:43:23 EST 2022" starttimestamp="1645820509543" timestamp="184894171" />
  <Command __id="7929" _type="EclipseCommand" commandID="" date="Sun Feb 27 18:43:23 EST 2022" starttimestamp="1645820509543" timestamp="184894178" />
  <DocumentChange __id="7924" _type="Insert" date="Sun Feb 27 18:43:23 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11838" docExpressionCount="1127" docLength="13263" length="1" offset="5944" starttimestamp="1645820509543" timestamp="184893509">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="7932" _type="Insert" date="Sun Feb 27 18:43:26 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11844" docExpressionCount="1127" docLength="13269" length="6" offset="6065" starttimestamp="1645820509543" timestamp="184896599">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="7937" _type="Replace" date="Sun Feb 27 18:43:26 EST 2022" docASTNodeCount="1605" docActiveCodeLength="11846" docExpressionCount="1127" docLength="13271" endLine="227" insertionLength="6" int_docASTNodeCount="1605" int_docActiveCodeLength="11840" int_docExpressionCount="1127" int_docLength="13265" length="4" offset="6061" startLine="227" starttimestamp="1645820509543" timestamp="184897116">
    <deletedText><![CDATA[				]]></deletedText>
    <insertedText><![CDATA[						]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7940" _type="Insert" date="Sun Feb 27 18:43:27 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11847" docExpressionCount="1128" docLength="13272" length="1" offset="6067" starttimestamp="1645820509543" timestamp="184898032">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="7943" _type="Insert" date="Sun Feb 27 18:43:27 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11848" docExpressionCount="1128" docLength="13273" length="1" offset="6068" starttimestamp="1645820509543" timestamp="184898285">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="7946" _type="Insert" date="Sun Feb 27 18:43:27 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11849" docExpressionCount="1128" docLength="13274" length="1" offset="6069" starttimestamp="1645820509543" timestamp="184898401">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="7949" _type="Insert" date="Sun Feb 27 18:43:28 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11850" docExpressionCount="1128" docLength="13275" length="1" offset="6070" starttimestamp="1645820509543" timestamp="184898485">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="7952" _type="Insert" date="Sun Feb 27 18:43:28 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11851" docExpressionCount="1127" docLength="13276" length="1" offset="6071" starttimestamp="1645820509543" timestamp="184898586">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="7955" _type="Insert" date="Sun Feb 27 18:43:28 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11852" docExpressionCount="1127" docLength="13277" length="1" offset="6072" starttimestamp="1645820509543" timestamp="184899133">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="7961" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:43:32 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="184903409">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="7963" _type="RunCommand" date="Sun Feb 27 18:43:34 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184904511" type="Run" />
  <Command __id="7964" _type="RunCommand" date="Sun Feb 27 18:43:34 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184904511" type="Run" />
  <Command __id="7965" _type="RunCommand" date="Sun Feb 27 18:43:34 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184904674" type="Run" />
  <Command __id="7966" _type="RunCommand" date="Sun Feb 27 18:43:34 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="184904674" type="Run" />
  <Command __id="7967" _type="EHExceptionCommand" date="Sun Feb 27 18:43:34 EST 2022" starttimestamp="1645820509543" timestamp="184904727" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
------------starting declaration-----------
private
int
numErrors
;
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
gg
;
------------ending declaration-----------
------------starting declaration-----------
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
IN VOID METHOD DECLARATION
numErrors
In scanner =
=
0
;
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
try
In scanner =
=
!
(
a
In scanner =
==
a
)
;
OUT VOID METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
hasErrors
(
)
{
IN METHOD DECLARATION
return
numErrors
>
0
;
OUT METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
void
reportError
(
String
message
)
{
IN VOID METHOD DECLARATION
System
.
out
.
println
(
message
)
;
OUT VOID METHOD DECLARATION
}
1true2false3false------------ending declaration-----------
out here end of program: }
}

Sytactic analysis complete: Valid miniJava program
]]></outputString>
  </Command>
  <Command __id="7969" _type="MoveCaretCommand" caretOffset="5995" date="Sun Feb 27 18:43:45 EST 2022" docOffset="6073" starttimestamp="1645820509543" timestamp="184916445" />
  <Command __id="7971" _type="ShellCommand" date="Sun Feb 27 18:43:56 EST 2022" starttimestamp="1645820509543" timestamp="184926902" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7972" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:43:58 EST 2022" forward="false" matchWord="false" offset="6073" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184928996" wrapSearch="false">
    <searchString><![CDATA[3]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7973" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:00 EST 2022" forward="false" matchWord="false" offset="4075" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184930728" wrapSearch="false">
    <searchString><![CDATA[3]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7974" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:01 EST 2022" forward="false" matchWord="false" offset="4075" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184932132" wrapSearch="false">
    <searchString><![CDATA[3]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7968" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:43:45 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11852" docExpressionCount="1127" docLength="13277" projectName="pa1" starttimestamp="1645820509543" timestamp="184916392">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶//		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			System.out.println("------------starting declaration-----------");¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				// Method Declaration¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						"), Diff(DELETE,"parseStatement("), Diff(INSERT,"System.out.println("IN VOID METHOD DECLARATION");¶						parseStatement();¶						System.out.println("OUT VOID METHOD DECLARATION""), Diff(EQUAL,");¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				// both possible¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶							// Field Declaration¶							case SEMICOLON:¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							// Method Declaration¶							case LPAREN:¶								acceptIt();¶								if (startsType(currentToken.kind)) {¶									parseParameterList();¶								}¶								accept(TokenKind.RPAREN);¶								accept(TokenKind.LCURLY);¶								¶								while (startsStatement(currentToken.kind)) {¶									System.out.println("IN METHOD DECLARATION");¶									parseStatement();¶									System.out.println("OUT METHOD DECLARATION");¶								}¶								accept(TokenKind.RCURLY);¶								break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations, no types declared.");¶					}¶					break;¶					¶			}¶			System.out.println("------------ending declaration-----------");¶		}¶		System.out.println("out here end of program: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶			case LCURLY:¶				acceptIt();¶				while (startsStatement(currentToken.kind)) {¶					parseStatement();¶				}¶	//			System.out.println("in here: " + currentToken);¶				accept(TokenKind.RCURLY);¶				break;¶				¶			case INT: case BOOLEAN:¶				parseType();¶				parseId();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case ID:			¶//				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				acceptIt();¶//				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				switch (currentToken.kind) {¶					// in Type¶					case ID:¶						acceptIt();¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// in Reference¶					case EQUAL:¶		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						acceptIt();¶		//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// both¶					case LBRACKET: ¶						acceptIt();¶						// in Type¶						if (currentToken.kind == TokenKind.RBRACKET) {¶							acceptIt();¶							accept(TokenKind.ID);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						} else {¶							// in Reference¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						}¶						break;¶					¶					case DOT:¶						while (currentToken.kind == TokenKind.DOT) {¶							acceptIt();¶							accept(TokenKind.ID);¶						}¶						switch (currentToken.kind) {¶							case EQUAL:¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LBRACKET: ¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.RBRACKET);¶								accept(TokenKind.EQUAL);¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LPAREN:¶								acceptIt();¶								if (currentToken.kind == TokenKind.RPAREN) {¶									acceptIt();¶								} else {¶									parseArgumentList();¶									accept(TokenKind.RPAREN);¶								}¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							default:¶								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶						}¶					"), Diff(INSERT,"	break;¶					"), Diff(EQUAL,"default:¶						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶				"), Diff(INSERT,"		break;¶				"), Diff(EQUAL,"}¶				break;¶			¶			case THIS:¶				acceptIt();¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶				case EQUAL:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶				¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶					¶				case LPAREN:¶					acceptIt();¶					if (currentToken.kind == TokenKind.RPAREN) {¶						acceptIt();¶						accept(TokenKind.SEMICOLON);¶					} else {¶						parseArgumentList();¶						accept(TokenKind.RPAREN);¶						accept(TokenKind.SEMICOLON);¶					}¶					break;¶				¶				default:¶					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶				}¶				break;¶				¶			case RETURN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.SEMICOLON) {¶					acceptIt();¶				} else {¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case IF:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				if (currentToken.kind == TokenKind.ELSE) {¶					acceptIt();¶					parseStatement();¶				}¶				break;¶				¶			case WHILE:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				break;¶			¶			default:¶				parseError("parsing statement, current token is:" + currentToken);¶				break;¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶	¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶			// starts with reference¶			case ID: case THIS:¶				acceptIt();¶				// dealing with (.id)*¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					// reference[expression]¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					// reference(arglist?)¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						break;¶						¶					// just reference¶					default:¶						break;¶//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶				¶			case UNOP: case MINUS:¶				acceptIt();¶				parseExpression();¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				break;¶			¶			case NUM: case TRUE: case FALSE:¶				acceptIt();¶				break;¶			¶			case NEW:¶				acceptIt();¶				switch (currentToken.kind) {¶				case ID:¶					acceptIt();¶					switch (currentToken.kind) {¶					case LPAREN:¶						acceptIt();¶						accept(TokenKind.RPAREN);¶						break;¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					}¶				¶				case INT:¶					acceptIt();¶					accept(TokenKind.LBRACKET);¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				default:¶					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶			¶			default:¶				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				break;¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
//		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			System.out.println("------------starting declaration-----------");
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				// Method Declaration
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						System.out.println("IN VOID METHOD DECLARATION");
						parseStatement();
						System.out.println("OUT VOID METHOD DECLARATION");
					}
					accept(TokenKind.RCURLY);
					break;
					
				// both possible
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
							// Field Declaration
							case SEMICOLON:
								accept(TokenKind.SEMICOLON);
								break;
							
							// Method Declaration
							case LPAREN:
								acceptIt();
								if (startsType(currentToken.kind)) {
									parseParameterList();
								}
								accept(TokenKind.RPAREN);
								accept(TokenKind.LCURLY);
								
								while (startsStatement(currentToken.kind)) {
									System.out.println("IN METHOD DECLARATION");
									parseStatement();
									System.out.println("OUT METHOD DECLARATION");
								}
								accept(TokenKind.RCURLY);
								break;
						}
					}
					else {
						parseError("Parsing wrong in declarations, no types declared.");
					}
					break;
					
			}
			System.out.println("------------ending declaration-----------");
		}
		System.out.println("out here end of program: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
			case LCURLY:
				acceptIt();
				while (startsStatement(currentToken.kind)) {
					parseStatement();
				}
	//			System.out.println("in here: " + currentToken);
				accept(TokenKind.RCURLY);
				break;
				
			case INT: case BOOLEAN:
				parseType();
				parseId();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case ID:			
//				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");
				acceptIt();
//				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");
				switch (currentToken.kind) {
					// in Type
					case ID:
						acceptIt();
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					// in Reference
					case EQUAL:
		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");
						acceptIt();
		//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					// both
					case LBRACKET: 
						acceptIt();
						// in Type
						if (currentToken.kind == TokenKind.RBRACKET) {
							acceptIt();
							accept(TokenKind.ID);
							accept(TokenKind.EQUAL);
							parseExpression();
							accept(TokenKind.SEMICOLON);
						} else {
							// in Reference
							parseExpression();
							accept(TokenKind.RBRACKET);
							accept(TokenKind.EQUAL);
							parseExpression();
							accept(TokenKind.SEMICOLON);
						}
						break;
					
					case DOT:
						while (currentToken.kind == TokenKind.DOT) {
							acceptIt();
							accept(TokenKind.ID);
						}
						switch (currentToken.kind) {
							case EQUAL:
								acceptIt();
								parseExpression();
								accept(TokenKind.SEMICOLON);
								break;
							
							case LBRACKET: 
								acceptIt();
								parseExpression();
								accept(TokenKind.RBRACKET);
								accept(TokenKind.EQUAL);
								parseExpression();
								accept(TokenKind.SEMICOLON);
								break;
							
							case LPAREN:
								acceptIt();
								if (currentToken.kind == TokenKind.RPAREN) {
									acceptIt();
								} else {
									parseArgumentList();
									accept(TokenKind.RPAREN);
								}
								accept(TokenKind.SEMICOLON);
								break;
							
							default:
								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
						}
						break;
					default:
						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
						break;
				}
				break;
			
			case THIS:
				acceptIt();
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
				case EQUAL:
					acceptIt();
					parseExpression();
					accept(TokenKind.SEMICOLON);
					break;
				
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
					break;
					
				case LPAREN:
					acceptIt();
					if (currentToken.kind == TokenKind.RPAREN) {
						acceptIt();
						accept(TokenKind.SEMICOLON);
					} else {
						parseArgumentList();
						accept(TokenKind.RPAREN);
						accept(TokenKind.SEMICOLON);
					}
					break;
				
				default:
					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
				}
				break;
				
			case RETURN:
				acceptIt();
				if (currentToken.kind == TokenKind.SEMICOLON) {
					acceptIt();
				} else {
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case IF:
				acceptIt();
				accept(TokenKind.LPAREN);
				parseExpression();
				accept(TokenKind.RPAREN);
				parseStatement();
				if (currentToken.kind == TokenKind.ELSE) {
					acceptIt();
					parseStatement();
				}
				break;
				
			case WHILE:
				acceptIt();
				accept(TokenKind.LPAREN);
				parseExpression();
				accept(TokenKind.RPAREN);
				parseStatement();
				break;
			
			default:
				parseError("parsing statement, current token is:" + currentToken);
				break;
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}

	
	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
			// starts with reference
			case ID: case THIS:
				acceptIt();
				// dealing with (.id)*
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					// reference[expression]
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					// reference(arglist?)
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						break;
						
					// just reference
					default:
						break;
//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
				
			case UNOP: case MINUS:
				acceptIt();
				parseExpression();
				break;
			
			case LPAREN:
				acceptIt();
				parseExpression();
				accept(TokenKind.RPAREN);
				break;
			
			case NUM: case TRUE: case FALSE:
				acceptIt();
				break;
			
			case NEW:
				acceptIt();
				switch (currentToken.kind) {
				case ID:
					acceptIt();
					switch (currentToken.kind) {
					case LPAREN:
						acceptIt();
						accept(TokenKind.RPAREN);
						break;
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					}
				
				case INT:
					acceptIt();
					accept(TokenKind.LBRACKET);
					parseExpression();
					accept(TokenKind.RBRACKET);
					break;
				
				default:
					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
			
			default:
				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				break;
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="7978" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:44:17 EST 2022" docASTNodeCount="60" docActiveCodeLength="345" docExpressionCount="24" docLength="345" projectName="pa1" starttimestamp="1645820509543" timestamp="184948037">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="7975" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:03 EST 2022" forward="true" matchWord="false" offset="4075" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184933565" wrapSearch="false">
    <searchString><![CDATA[3]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7976" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:03 EST 2022" forward="true" matchWord="false" offset="4075" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184933950" wrapSearch="false">
    <searchString><![CDATA[3]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7977" _type="ShellCommand" date="Sun Feb 27 18:44:04 EST 2022" starttimestamp="1645820509543" timestamp="184934701" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7980" _type="MoveCaretCommand" caretOffset="11418" date="Sun Feb 27 18:44:26 EST 2022" docOffset="11496" starttimestamp="1645820509543" timestamp="184957141" />
  <Command __id="7981" _type="MoveCaretCommand" caretOffset="11418" date="Sun Feb 27 18:44:26 EST 2022" docOffset="11496" starttimestamp="1645820509543" timestamp="184957163" />
  <Command __id="7983" _type="ShellCommand" date="Sun Feb 27 18:44:27 EST 2022" starttimestamp="1645820509543" timestamp="184958013" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7984" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:29 EST 2022" forward="true" matchWord="false" offset="11496" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184959824" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7985" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:30 EST 2022" forward="true" matchWord="false" offset="12363" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184961369" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7986" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:31 EST 2022" forward="true" matchWord="false" offset="13126" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184962148" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7987" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:32 EST 2022" forward="true" matchWord="false" offset="13261" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184962786" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7988" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:34 EST 2022" forward="true" matchWord="false" offset="1123" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184964636" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7989" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:35 EST 2022" forward="true" matchWord="false" offset="1214" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184965669" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7990" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:35 EST 2022" forward="true" matchWord="false" offset="1674" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184966439" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7991" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:36 EST 2022" forward="true" matchWord="false" offset="2440" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184967341" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7992" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:37 EST 2022" forward="true" matchWord="false" offset="2523" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184967894" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7993" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:37 EST 2022" forward="true" matchWord="false" offset="2771" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184968295" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7994" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:38 EST 2022" forward="true" matchWord="false" offset="3188" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184969359" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7995" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:39 EST 2022" forward="true" matchWord="false" offset="3475" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184970060" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7996" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:40 EST 2022" forward="true" matchWord="false" offset="3596" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184970598" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7997" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:40 EST 2022" forward="true" matchWord="false" offset="3942" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184971283" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7998" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:41 EST 2022" forward="true" matchWord="false" offset="4063" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184971683" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7999" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:42 EST 2022" forward="true" matchWord="false" offset="12363" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184972483" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8000" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:42 EST 2022" forward="true" matchWord="false" offset="13126" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184973262" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8001" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:43 EST 2022" forward="true" matchWord="false" offset="13261" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184974100" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8002" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:46 EST 2022" forward="true" matchWord="false" offset="1123" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184977435" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8003" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:48 EST 2022" forward="true" matchWord="false" offset="1214" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184978603" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8004" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:48 EST 2022" forward="true" matchWord="false" offset="1674" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184979004" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8005" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:49 EST 2022" forward="true" matchWord="false" offset="2440" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184980306" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8006" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:44:50 EST 2022" forward="true" matchWord="false" offset="2523" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184981054" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8007" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:45:01 EST 2022" forward="true" matchWord="false" offset="2771" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184991830" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8008" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:45:03 EST 2022" forward="true" matchWord="false" offset="3188" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184994115" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8009" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:45:05 EST 2022" forward="true" matchWord="false" offset="3475" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184995480" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8010" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:45:05 EST 2022" forward="true" matchWord="false" offset="3596" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="184995903" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8011" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:45:12 EST 2022" forward="true" matchWord="true" offset="3942" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="185003081" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8012" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:45:13 EST 2022" forward="true" matchWord="true" offset="3942" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="185003481" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8013" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:45:13 EST 2022" forward="true" matchWord="true" offset="3942" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="185003719" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8014" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:45:13 EST 2022" forward="true" matchWord="true" offset="3942" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="185004295" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8015" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 18:45:14 EST 2022" forward="true" matchWord="true" offset="3942" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="185004598" wrapSearch="false">
    <searchString><![CDATA[print]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8016" _type="ShellCommand" date="Sun Feb 27 18:45:15 EST 2022" starttimestamp="1645820509543" timestamp="185005697" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8017" _type="MoveCaretCommand" caretOffset="4182" date="Sun Feb 27 18:45:15 EST 2022" docOffset="4260" starttimestamp="1645820509543" timestamp="185006068" />
  <Command __id="8018" _type="MoveCaretCommand" caretOffset="4182" date="Sun Feb 27 18:45:15 EST 2022" docOffset="4260" starttimestamp="1645820509543" timestamp="185006068" />
  <Command __id="8019" _type="MoveCaretCommand" caretOffset="3994" date="Sun Feb 27 18:45:15 EST 2022" docOffset="4072" starttimestamp="1645820509543" timestamp="185006427" />
  <Command __id="8020" _type="MoveCaretCommand" caretOffset="3994" date="Sun Feb 27 18:45:15 EST 2022" docOffset="4072" starttimestamp="1645820509543" timestamp="185006427" />
  <Command __id="8021" _type="MoveCaretCommand" caretOffset="13188" date="Sun Feb 27 18:45:24 EST 2022" docOffset="13266" starttimestamp="1645820509543" timestamp="185014907" />
  <Command __id="8022" _type="MoveCaretCommand" caretOffset="13188" date="Sun Feb 27 18:45:24 EST 2022" docOffset="13266" starttimestamp="1645820509543" timestamp="185014907" />
  <Command __id="8023" _type="MoveCaretCommand" caretOffset="13192" date="Sun Feb 27 18:45:28 EST 2022" docOffset="13270" starttimestamp="1645820509543" timestamp="185019158" />
  <Command __id="8024" _type="MoveCaretCommand" caretOffset="13192" date="Sun Feb 27 18:45:28 EST 2022" docOffset="13270" starttimestamp="1645820509543" timestamp="185019158" />
  <Command __id="8025" _type="MoveCaretCommand" caretOffset="13188" date="Sun Feb 27 18:45:29 EST 2022" docOffset="13266" starttimestamp="1645820509543" timestamp="185019589" />
  <Command __id="8026" _type="MoveCaretCommand" caretOffset="13188" date="Sun Feb 27 18:45:29 EST 2022" docOffset="13266" starttimestamp="1645820509543" timestamp="185019589" />
  <Command __id="7979" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:44:26 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11852" docExpressionCount="1127" docLength="13277" projectName="pa1" starttimestamp="1645820509543" timestamp="184957094">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶//		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			System.out.println("------------starting declaration-----------");¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				// Method Declaration¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						System.out.println("IN VOID METHOD DECLARATION");¶						parseStatement();¶						System.out.println("OUT VOID METHOD DECLARATION");¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				// both possible¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶							// Field Declaration¶							case SEMICOLON:¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							// Method Declaration¶							case LPAREN:¶								acceptIt();¶								if (startsType(currentToken.kind)) {¶									parseParameterList();¶								}¶								accept(TokenKind.RPAREN);¶								accept(TokenKind.LCURLY);¶								¶								while (startsStatement(currentToken.kind)) {¶									System.out.println("IN METHOD DECLARATION");¶									parseStatement();¶									System.out.println("OUT METHOD DECLARATION");¶								}¶								accept(TokenKind.RCURLY);¶								break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations, no types declared.");¶					}¶					break;¶					¶			}¶			System.out.println("------------ending declaration-----------");¶		}¶		System.out.println("out here end of program: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶			case LCURLY:¶				acceptIt();¶				while (startsStatement(currentToken.kind)) {¶					parseStatement();¶				}¶	//			System.out.println("in here: " + currentToken);¶				accept(TokenKind.RCURLY);¶				break;¶				¶			case INT: case BOOLEAN:¶				parseType();¶				parseId();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case ID:			¶//				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				acceptIt();¶//				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				switch (currentToken.kind) {¶					// in Type¶					case ID:¶						acceptIt();¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// in Reference¶					case EQUAL:¶		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						acceptIt();¶		//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// both¶					case LBRACKET: ¶						acceptIt();¶						// in Type¶						if (currentToken.kind == TokenKind.RBRACKET) {¶							acceptIt();¶							accept(TokenKind.ID);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						} else {¶							// in Reference¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						}¶						break;¶					¶					case DOT:¶						while (currentToken.kind == TokenKind.DOT) {¶							acceptIt();¶							accept(TokenKind.ID);¶						}¶						switch (currentToken.kind) {¶							case EQUAL:¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LBRACKET: ¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.RBRACKET);¶								accept(TokenKind.EQUAL);¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LPAREN:¶								acceptIt();¶								if (currentToken.kind == TokenKind.RPAREN) {¶									acceptIt();¶								} else {¶									parseArgumentList();¶									accept(TokenKind.RPAREN);¶								}¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							default:¶								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶						}¶						break;¶					default:¶						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶						break;¶				}¶				break;¶			¶			case THIS:¶				acceptIt();¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶				case EQUAL:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶				¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶					¶				case LPAREN:¶					acceptIt();¶					if (currentToken.kind == TokenKind.RPAREN) {¶						acceptIt();¶						accept(TokenKind.SEMICOLON);¶					} else {¶						parseArgumentList();¶						accept(TokenKind.RPAREN);¶						accept(TokenKind.SEMICOLON);¶					}¶					break;¶				¶				default:¶					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶				}¶				break;¶				¶			case RETURN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.SEMICOLON) {¶					acceptIt();¶				} else {¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case IF:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				if (currentToken.kind == TokenKind.ELSE) {¶					acceptIt();¶					parseStatement();¶				}¶				break;¶				¶			case WHILE:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				break;¶			¶			default:¶				parseError("parsing statement, current token is:" + currentToken);¶				break;¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶	¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶			// starts with reference¶			case ID: case THIS:¶				acceptIt();¶				// dealing with (.id)*¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					// reference[expression]¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					// reference(arglist?)¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						break;¶						¶					// just reference¶					default:¶						break;¶//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶				¶			case UNOP: case MINUS:¶				acceptIt();¶				parseExpression();¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				break;¶			¶			case NUM: case TRUE: case FALSE:¶				acceptIt();¶				break;¶			¶			case NEW:¶				acceptIt();¶				switch (currentToken.kind) {¶				case ID:¶					acceptIt();¶					switch (currentToken.kind) {¶					case LPAREN:¶						acceptIt();¶						accept(TokenKind.RPAREN);¶						break;¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					}¶				¶				case INT:¶					acceptIt();¶					accept(TokenKind.LBRACKET);¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				default:¶					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶			¶			default:¶				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				break;¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="8158" _type="RunCommand" date="Sun Feb 27 19:45:11 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188601692" type="Run" />
  <Command __id="8159" _type="RunCommand" date="Sun Feb 27 19:45:11 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188601692" type="Run" />
  <Command __id="8160" _type="RunCommand" date="Sun Feb 27 19:45:11 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188601808" type="Run" />
  <Command __id="8161" _type="RunCommand" date="Sun Feb 27 19:45:11 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188601808" type="Run" />
  <Command __id="8162" _type="EHExceptionCommand" date="Sun Feb 27 19:45:11 EST 2022" starttimestamp="1645820509543" timestamp="188601855" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
------------starting declaration-----------
int
numErrors
;
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
gg
;
------------ending declaration-----------
------------starting declaration-----------
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
IN VOID METHOD DECLARATION
numErrors
In scanner =
=
0
;
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
try
In scanner =
=
!
(
a
In scanner =
==
a
)
;
OUT VOID METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
hasErrors
(
kk
[
]
b
,
int
[
]
c
)
{
IN METHOD DECLARATION
return
numErrors
>
0
;
OUT METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
void
reportError
(
String
message
)
{
IN VOID METHOD DECLARATION
{
int
i
In scanner =
=
1
;
boolean
j
In scanner =
=
2
;
bo
jdsaf2
In scanner =
=
afdaf
;
this
In scanner =
=
1
;
this
.
adsfaew
.
dafawe
.
d
In scanner =
=
adf123
;
sdfawe
.
dsfaewf
.
safew
[
sdafaewfa
.
sdafaew
.
sdafaew
.
asd
]
In scanner =
=
dsfs2
;
this
In scanner =
=
this
;
return
;
return
asdfawef
;
if
(
adf
)
{
dsafae
In scanner =
=
12
;
}
else
adfaewf
In scanner =
=
dsfaef
;
while
(
asdfaew
In scanner =
=
dafawe
)
sdafaew
In scanner =
=
dsaf
;
a
In scanner =
=
-
1
;
a
In scanner =
=
!
true
;
a
In scanner =
=
false
;
a
In scanner =
=
new
Parse error: Parsing dafef and expecting 'SEMICOLON' but found 'ID'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="8163" _type="ShellCommand" date="Sun Feb 27 19:45:36 EST 2022" starttimestamp="1645820509543" timestamp="188626656" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8164" _type="ShellCommand" date="Sun Feb 27 19:45:42 EST 2022" starttimestamp="1645820509543" timestamp="188632958" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8166" _type="MoveCaretCommand" caretOffset="6832" date="Sun Feb 27 19:45:42 EST 2022" docOffset="6910" starttimestamp="1645820509543" timestamp="188633054" />
  <Command __id="8167" _type="MoveCaretCommand" caretOffset="6832" date="Sun Feb 27 19:45:42 EST 2022" docOffset="6910" starttimestamp="1645820509543" timestamp="188633111" />
  <Command __id="8168" _type="ShellCommand" date="Sun Feb 27 19:45:43 EST 2022" starttimestamp="1645820509543" timestamp="188633760" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8169" _type="ShellCommand" date="Sun Feb 27 19:45:49 EST 2022" starttimestamp="1645820509543" timestamp="188639582" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8029" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 18:45:43 EST 2022" docASTNodeCount="60" docActiveCodeLength="345" docExpressionCount="24" docLength="345" projectName="pa1" starttimestamp="1645820509543" timestamp="185033650">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		private int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors() {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			System.out.println(message);¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="8165" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:45:42 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11852" docExpressionCount="1127" docLength="13277" projectName="pa1" starttimestamp="1645820509543" timestamp="188633027">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶//		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			System.out.println("------------starting declaration-----------");¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				// Method Declaration¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						System.out.println("IN VOID METHOD DECLARATION");¶						parseStatement();¶						System.out.println("OUT VOID METHOD DECLARATION");¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				// both possible¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶							// Field Declaration¶							case SEMICOLON:¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							// Method Declaration¶							case LPAREN:¶								acceptIt();¶								if (startsType(currentToken.kind)) {¶									parseParameterList();¶								}¶								accept(TokenKind.RPAREN);¶								accept(TokenKind.LCURLY);¶								¶								while (startsStatement(currentToken.kind)) {¶									System.out.println("IN METHOD DECLARATION");¶									parseStatement();¶									System.out.println("OUT METHOD DECLARATION");¶								}¶								accept(TokenKind.RCURLY);¶								break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations, no types declared.");¶					}¶					break;¶					¶			}¶			System.out.println("------------ending declaration-----------");¶		}¶		System.out.println("out here end of program: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶			case LCURLY:¶				acceptIt();¶				while (startsStatement(currentToken.kind)) {¶					parseStatement();¶				}¶	//			System.out.println("in here: " + currentToken);¶				accept(TokenKind.RCURLY);¶				break;¶				¶			case INT: case BOOLEAN:¶				parseType();¶				parseId();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case ID:			¶//				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				acceptIt();¶//				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				switch (currentToken.kind) {¶					// in Type¶					case ID:¶						acceptIt();¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// in Reference¶					case EQUAL:¶		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						acceptIt();¶		//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// both¶					case LBRACKET: ¶						acceptIt();¶						// in Type¶						if (currentToken.kind == TokenKind.RBRACKET) {¶							acceptIt();¶							accept(TokenKind.ID);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						} else {¶							// in Reference¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						}¶						break;¶					¶					case DOT:¶						while (currentToken.kind == TokenKind.DOT) {¶							acceptIt();¶							accept(TokenKind.ID);¶						}¶						switch (currentToken.kind) {¶							case EQUAL:¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LBRACKET: ¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.RBRACKET);¶								accept(TokenKind.EQUAL);¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LPAREN:¶								acceptIt();¶								if (currentToken.kind == TokenKind.RPAREN) {¶									acceptIt();¶								} else {¶									parseArgumentList();¶									accept(TokenKind.RPAREN);¶								}¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							default:¶								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶						}¶						break;¶					default:¶						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶						break;¶				}¶				break;¶			¶			case THIS:¶				acceptIt();¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶				case EQUAL:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶				¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶					¶				case LPAREN:¶					acceptIt();¶					if (currentToken.kind == TokenKind.RPAREN) {¶						acceptIt();¶						accept(TokenKind.SEMICOLON);¶					} else {¶						parseArgumentList();¶						accept(TokenKind.RPAREN);¶						accept(TokenKind.SEMICOLON);¶					}¶					break;¶				¶				default:¶					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶				}¶				break;¶				¶			case RETURN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.SEMICOLON) {¶					acceptIt();¶				} else {¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case IF:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				if (currentToken.kind == TokenKind.ELSE) {¶					acceptIt();¶					parseStatement();¶				}¶				break;¶				¶			case WHILE:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				break;¶			¶			default:¶				parseError("parsing statement, current token is:" + currentToken);¶				break;¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶	¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶			// starts with reference¶			case ID: case THIS:¶				acceptIt();¶				// dealing with (.id)*¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					// reference[expression]¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					// reference(arglist?)¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						break;¶						¶					// just reference¶					default:¶						break;¶//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶				¶			case UNOP: case MINUS:¶				acceptIt();¶				parseExpression();¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				break;¶			¶			case NUM: case TRUE: case FALSE:¶				acceptIt();¶				break;¶			¶			case NEW:¶				acceptIt();¶				switch (currentToken.kind) {¶				case ID:¶					acceptIt();¶					switch (currentToken.kind) {¶					case LPAREN:¶						acceptIt();¶						accept(TokenKind.RPAREN);¶						break;¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					}¶				¶				case INT:¶					acceptIt();¶					accept(TokenKind.LBRACKET);¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				default:¶					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶			¶			default:¶				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				break;¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="8172" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:47:17 EST 2022" docASTNodeCount="165" docActiveCodeLength="791" docExpressionCount="97" docLength="791" projectName="pa1" starttimestamp="1645820509543" timestamp="188727487">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		"), Diff(DELETE,"private "), Diff(EQUAL,"int numErrors;¶"), Diff(INSERT,""), Diff(EQUAL,"		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors("), Diff(INSERT,"kk[] b, int[] c"), Diff(EQUAL,") {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			"), Diff(INSERT,"{¶				int i = 1;¶				boolean j = 2;¶				bo jdsaf2 = afdaf;¶				this = 1;¶				this.adsfaew.dafawe.d = adf123;¶				sdfawe.dsfaewf.safew[sdafaewfa.sdafaew.sdafaew.asd] = dsfs2;¶				this = this;¶				return;¶				return asdfawef;¶				if (adf) { dsafae = 12;}¶				else adfaewf =dsfaef;¶				while (asdfaew = dafawe) sdafaew = dsaf; ¶				a = -1;¶				a = !true;¶				a = false;¶				a = new dafef();¶			}¶			¶			"), Diff(EQUAL,"System.out.println(message"), Diff(INSERT,",dfaewf,asdfa,ef,aew"), Diff(EQUAL,");¶		}	¶}")]]]></diff>
    <snapshot><![CDATA[class ErrorReporter {

		int numErrors;
		public static boolean gg;

		static void ErrorReporter(int j, boolean k, boo[] a1) {
			numErrors = 0;
			try = !(a == a);
		}

		public static boolean hasErrors(kk[] b, int[] c) {
			return numErrors > 0;
		}

		public void reportError(String message) {
			{
				int i = 1;
				boolean j = 2;
				bo jdsaf2 = afdaf;
				this = 1;
				this.adsfaew.dafawe.d = adf123;
				sdfawe.dsfaewf.safew[sdafaewfa.sdafaew.sdafaew.asd] = dsfs2;
				this = this;
				return;
				return asdfawef;
				if (adf) { dsafae = 12;}
				else adfaewf =dsfaef;
				while (asdfaew = dafawe) sdafaew = dsaf; 
				a = -1;
				a = !true;
				a = false;
				a = new dafef();
			}
			
			System.out.println(message,dfaewf,asdfa,ef,aew);
		}	
}]]></snapshot>
  </Command>
  <Command __id="8173" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:47:28 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11852" docExpressionCount="1127" docLength="13277" projectName="pa1" starttimestamp="1645820509543" timestamp="188739343">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶//		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			System.out.println("------------starting declaration-----------");¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				// Method Declaration¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						System.out.println("IN VOID METHOD DECLARATION");¶						parseStatement();¶						System.out.println("OUT VOID METHOD DECLARATION");¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				// both possible¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶							// Field Declaration¶							case SEMICOLON:¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							// Method Declaration¶							case LPAREN:¶								acceptIt();¶								if (startsType(currentToken.kind)) {¶									parseParameterList();¶								}¶								accept(TokenKind.RPAREN);¶								accept(TokenKind.LCURLY);¶								¶								while (startsStatement(currentToken.kind)) {¶									System.out.println("IN METHOD DECLARATION");¶									parseStatement();¶									System.out.println("OUT METHOD DECLARATION");¶								}¶								accept(TokenKind.RCURLY);¶								break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations, no types declared.");¶					}¶					break;¶					¶			}¶			System.out.println("------------ending declaration-----------");¶		}¶		System.out.println("out here end of program: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶			case LCURLY:¶				acceptIt();¶				while (startsStatement(currentToken.kind)) {¶					parseStatement();¶				}¶	//			System.out.println("in here: " + currentToken);¶				accept(TokenKind.RCURLY);¶				break;¶				¶			case INT: case BOOLEAN:¶				parseType();¶				parseId();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case ID:			¶//				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				acceptIt();¶//				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				switch (currentToken.kind) {¶					// in Type¶					case ID:¶						acceptIt();¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// in Reference¶					case EQUAL:¶		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						acceptIt();¶		//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// both¶					case LBRACKET: ¶						acceptIt();¶						// in Type¶						if (currentToken.kind == TokenKind.RBRACKET) {¶							acceptIt();¶							accept(TokenKind.ID);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						} else {¶							// in Reference¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						}¶						break;¶					¶					case DOT:¶						while (currentToken.kind == TokenKind.DOT) {¶							acceptIt();¶							accept(TokenKind.ID);¶						}¶						switch (currentToken.kind) {¶							case EQUAL:¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LBRACKET: ¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.RBRACKET);¶								accept(TokenKind.EQUAL);¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LPAREN:¶								acceptIt();¶								if (currentToken.kind == TokenKind.RPAREN) {¶									acceptIt();¶								} else {¶									parseArgumentList();¶									accept(TokenKind.RPAREN);¶								}¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							default:¶								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶						}¶						break;¶					default:¶						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶						break;¶				}¶				break;¶			¶			case THIS:¶				acceptIt();¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶				case EQUAL:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶				¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶					¶				case LPAREN:¶					acceptIt();¶					if (currentToken.kind == TokenKind.RPAREN) {¶						acceptIt();¶						accept(TokenKind.SEMICOLON);¶					} else {¶						parseArgumentList();¶						accept(TokenKind.RPAREN);¶						accept(TokenKind.SEMICOLON);¶					}¶					break;¶				¶				default:¶					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶				}¶				break;¶				¶			case RETURN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.SEMICOLON) {¶					acceptIt();¶				} else {¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case IF:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				if (currentToken.kind == TokenKind.ELSE) {¶					acceptIt();¶					parseStatement();¶				}¶				break;¶				¶			case WHILE:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				break;¶			¶			default:¶				parseError("parsing statement, current token is:" + currentToken);¶				break;¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶	¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶			// starts with reference¶			case ID: case THIS:¶				acceptIt();¶				// dealing with (.id)*¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					// reference[expression]¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					// reference(arglist?)¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						break;¶						¶					// just reference¶					default:¶						break;¶//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶				¶			case UNOP: case MINUS:¶				acceptIt();¶				parseExpression();¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				break;¶			¶			case NUM: case TRUE: case FALSE:¶				acceptIt();¶				break;¶			¶			case NEW:¶				acceptIt();¶				switch (currentToken.kind) {¶				case ID:¶					acceptIt();¶					switch (currentToken.kind) {¶					case LPAREN:¶						acceptIt();¶						accept(TokenKind.RPAREN);¶						break;¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					}¶				¶				case INT:¶					acceptIt();¶					accept(TokenKind.LBRACKET);¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					break;¶				¶				default:¶					parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶			¶			default:¶				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				break;¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="8170" _type="MoveCaretCommand" caretOffset="9264" date="Sun Feb 27 19:46:47 EST 2022" docOffset="9342" starttimestamp="1645820509543" timestamp="188697947" />
  <Command __id="8171" _type="MoveCaretCommand" caretOffset="9264" date="Sun Feb 27 19:46:47 EST 2022" docOffset="9342" starttimestamp="1645820509543" timestamp="188697947" />
  <Command __id="8174" _type="MoveCaretCommand" caretOffset="9441" date="Sun Feb 27 19:47:28 EST 2022" docOffset="9519" starttimestamp="1645820509543" timestamp="188739412" />
  <Command __id="8175" _type="MoveCaretCommand" caretOffset="9441" date="Sun Feb 27 19:47:28 EST 2022" docOffset="9519" starttimestamp="1645820509543" timestamp="188739427" />
  <Command __id="8177" _type="InsertStringCommand" date="Sun Feb 27 19:47:30 EST 2022" starttimestamp="1645820509543" timestamp="188741060" timestamp2="188741060">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8178" _type="InsertStringCommand" date="Sun Feb 27 19:47:30 EST 2022" starttimestamp="1645820509543" timestamp="188741060" timestamp2="188741060">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8180" _type="InsertStringCommand" date="Sun Feb 27 19:47:31 EST 2022" starttimestamp="1645820509543" timestamp="188741513" timestamp2="188741513">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="8181" _type="InsertStringCommand" date="Sun Feb 27 19:47:31 EST 2022" starttimestamp="1645820509543" timestamp="188741513" timestamp2="188741513">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="8183" _type="InsertStringCommand" date="Sun Feb 27 19:47:31 EST 2022" starttimestamp="1645820509543" timestamp="188741829" timestamp2="188741829">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8184" _type="InsertStringCommand" date="Sun Feb 27 19:47:31 EST 2022" starttimestamp="1645820509543" timestamp="188741829" timestamp2="188741829">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8186" _type="InsertStringCommand" date="Sun Feb 27 19:47:31 EST 2022" starttimestamp="1645820509543" timestamp="188741945" timestamp2="188741945">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8187" _type="InsertStringCommand" date="Sun Feb 27 19:47:31 EST 2022" starttimestamp="1645820509543" timestamp="188741945" timestamp2="188741945">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8189" _type="InsertStringCommand" date="Sun Feb 27 19:47:31 EST 2022" starttimestamp="1645820509543" timestamp="188742029" timestamp2="188742029">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="8190" _type="InsertStringCommand" date="Sun Feb 27 19:47:31 EST 2022" starttimestamp="1645820509543" timestamp="188742029" timestamp2="188742029">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="8192" _type="InsertStringCommand" date="Sun Feb 27 19:47:31 EST 2022" starttimestamp="1645820509543" timestamp="188742161" timestamp2="188742161">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="8193" _type="InsertStringCommand" date="Sun Feb 27 19:47:31 EST 2022" starttimestamp="1645820509543" timestamp="188742161" timestamp2="188742161">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="8194" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 19:47:33 EST 2022" starttimestamp="1645820509543" timestamp="188743825" />
  <Command __id="8195" _type="EclipseCommand" commandID="" date="Sun Feb 27 19:47:33 EST 2022" starttimestamp="1645820509543" timestamp="188743926" />
  <Command __id="8196" _type="EclipseCommand" commandID="" date="Sun Feb 27 19:47:33 EST 2022" starttimestamp="1645820509543" timestamp="188744158" />
  <DocumentChange __id="8176" _type="Insert" date="Sun Feb 27 19:47:30 EST 2022" docASTNodeCount="1606" docActiveCodeLength="11859" docExpressionCount="1127" docLength="13284" length="7" offset="9519" starttimestamp="1645820509543" timestamp="188741044">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <DocumentChange __id="8179" _type="Insert" date="Sun Feb 27 19:47:31 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11860" docExpressionCount="1128" docLength="13285" length="1" offset="9526" starttimestamp="1645820509543" timestamp="188741513">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="8182" _type="Insert" date="Sun Feb 27 19:47:31 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11861" docExpressionCount="1128" docLength="13286" length="1" offset="9527" starttimestamp="1645820509543" timestamp="188741813">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="8185" _type="Insert" date="Sun Feb 27 19:47:31 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11862" docExpressionCount="1128" docLength="13287" length="1" offset="9528" starttimestamp="1645820509543" timestamp="188741945">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="8188" _type="Insert" date="Sun Feb 27 19:47:31 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11863" docExpressionCount="1128" docLength="13288" length="1" offset="9529" starttimestamp="1645820509543" timestamp="188742029">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="8191" _type="Insert" date="Sun Feb 27 19:47:31 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11864" docExpressionCount="1127" docLength="13289" length="1" offset="9530" starttimestamp="1645820509543" timestamp="188742161">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="8197" _type="MoveCaretCommand" caretOffset="9433" date="Sun Feb 27 19:47:36 EST 2022" docOffset="9511" starttimestamp="1645820509543" timestamp="188747347" />
  <Command __id="8198" _type="MoveCaretCommand" caretOffset="9433" date="Sun Feb 27 19:47:36 EST 2022" docOffset="9511" starttimestamp="1645820509543" timestamp="188747347" />
  <Command __id="8199" _type="MoveCaretCommand" caretOffset="9426" date="Sun Feb 27 19:47:37 EST 2022" docOffset="9504" starttimestamp="1645820509543" timestamp="188747695" />
  <Command __id="8200" _type="MoveCaretCommand" caretOffset="9426" date="Sun Feb 27 19:47:37 EST 2022" docOffset="9504" starttimestamp="1645820509543" timestamp="188747695" />
  <DocumentChange __id="8201" _type="Insert" date="Sun Feb 27 19:47:38 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11872" docExpressionCount="1127" docLength="13297" length="8" offset="9504" starttimestamp="1645820509543" timestamp="188748865">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <Command __id="8202" _type="InsertStringCommand" date="Sun Feb 27 19:47:38 EST 2022" starttimestamp="1645820509543" timestamp="188748865" timestamp2="188748865">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8203" _type="InsertStringCommand" date="Sun Feb 27 19:47:38 EST 2022" starttimestamp="1645820509543" timestamp="188748865" timestamp2="188748865">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8204" _type="Delete" date="Sun Feb 27 19:47:38 EST 2022" docASTNodeCount="1607" docActiveCodeLength="11871" docExpressionCount="1127" docLength="13296" endLine="386" length="1" offset="9511" startLine="386" starttimestamp="1645820509543" timestamp="188749319">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="8205" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:47:38 EST 2022" starttimestamp="1645820509543" timestamp="188749319" />
  <Command __id="8206" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:47:38 EST 2022" starttimestamp="1645820509543" timestamp="188749319" />
  <DocumentChange __id="8207" _type="Insert" date="Sun Feb 27 19:47:39 EST 2022" docASTNodeCount="1521" docActiveCodeLength="11872" docExpressionCount="1058" docLength="13297" length="1" offset="9511" starttimestamp="1645820509543" timestamp="188749598">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="8208" _type="InsertStringCommand" date="Sun Feb 27 19:47:39 EST 2022" starttimestamp="1645820509543" timestamp="188749598" timestamp2="188749598">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="8209" _type="InsertStringCommand" date="Sun Feb 27 19:47:39 EST 2022" starttimestamp="1645820509543" timestamp="188749598" timestamp2="188749598">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="8210" _type="Insert" date="Sun Feb 27 19:47:39 EST 2022" docASTNodeCount="1521" docActiveCodeLength="11873" docExpressionCount="1058" docLength="13298" length="1" offset="9512" starttimestamp="1645820509543" timestamp="188749814">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="8211" _type="InsertStringCommand" date="Sun Feb 27 19:47:39 EST 2022" starttimestamp="1645820509543" timestamp="188749820" timestamp2="188749820">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8212" _type="InsertStringCommand" date="Sun Feb 27 19:47:39 EST 2022" starttimestamp="1645820509543" timestamp="188749820" timestamp2="188749820">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="8213" _type="Insert" date="Sun Feb 27 19:47:39 EST 2022" docASTNodeCount="1521" docActiveCodeLength="11874" docExpressionCount="1058" docLength="13299" length="1" offset="9513" starttimestamp="1645820509543" timestamp="188750120">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="8214" _type="InsertStringCommand" date="Sun Feb 27 19:47:39 EST 2022" starttimestamp="1645820509543" timestamp="188750120" timestamp2="188750120">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="8215" _type="InsertStringCommand" date="Sun Feb 27 19:47:39 EST 2022" starttimestamp="1645820509543" timestamp="188750120" timestamp2="188750120">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="8216" _type="Insert" date="Sun Feb 27 19:47:40 EST 2022" docASTNodeCount="1521" docActiveCodeLength="11875" docExpressionCount="1058" docLength="13300" length="1" offset="9514" starttimestamp="1645820509543" timestamp="188750999">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="8217" _type="InsertStringCommand" date="Sun Feb 27 19:47:40 EST 2022" starttimestamp="1645820509543" timestamp="188750999" timestamp2="188750999">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="8218" _type="InsertStringCommand" date="Sun Feb 27 19:47:40 EST 2022" starttimestamp="1645820509543" timestamp="188750999" timestamp2="188750999">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="8219" _type="Insert" date="Sun Feb 27 19:47:40 EST 2022" docASTNodeCount="1521" docActiveCodeLength="11876" docExpressionCount="1058" docLength="13301" length="1" offset="9515" starttimestamp="1645820509543" timestamp="188751184">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="8220" _type="InsertStringCommand" date="Sun Feb 27 19:47:40 EST 2022" starttimestamp="1645820509543" timestamp="188751200" timestamp2="188751200">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="8221" _type="InsertStringCommand" date="Sun Feb 27 19:47:40 EST 2022" starttimestamp="1645820509543" timestamp="188751200" timestamp2="188751200">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="8222" _type="Insert" date="Sun Feb 27 19:47:40 EST 2022" docASTNodeCount="1521" docActiveCodeLength="11877" docExpressionCount="1058" docLength="13302" length="1" offset="9516" starttimestamp="1645820509543" timestamp="188751322">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="8223" _type="InsertStringCommand" date="Sun Feb 27 19:47:40 EST 2022" starttimestamp="1645820509543" timestamp="188751322" timestamp2="188751322">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="8224" _type="InsertStringCommand" date="Sun Feb 27 19:47:40 EST 2022" starttimestamp="1645820509543" timestamp="188751322" timestamp2="188751322">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="8225" _type="Insert" date="Sun Feb 27 19:47:41 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11878" docExpressionCount="1127" docLength="13303" length="1" offset="9517" starttimestamp="1645820509543" timestamp="188751485">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="8226" _type="InsertStringCommand" date="Sun Feb 27 19:47:41 EST 2022" starttimestamp="1645820509543" timestamp="188751485" timestamp2="188751485">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8227" _type="InsertStringCommand" date="Sun Feb 27 19:47:41 EST 2022" starttimestamp="1645820509543" timestamp="188751485" timestamp2="188751485">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="8228" _type="Insert" date="Sun Feb 27 19:47:41 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11879" docExpressionCount="1127" docLength="13304" length="1" offset="9518" starttimestamp="1645820509543" timestamp="188752102">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <Command __id="8229" _type="InsertStringCommand" date="Sun Feb 27 19:47:41 EST 2022" starttimestamp="1645820509543" timestamp="188752102" timestamp2="188752102">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="8230" _type="InsertStringCommand" date="Sun Feb 27 19:47:41 EST 2022" starttimestamp="1645820509543" timestamp="188752102" timestamp2="188752102">
    <data><![CDATA[:]]></data>
  </Command>
  <DocumentChange __id="8231" _type="Delete" date="Sun Feb 27 19:47:42 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11878" docExpressionCount="1127" docLength="13303" endLine="386" length="1" offset="9518" startLine="386" starttimestamp="1645820509543" timestamp="188752803">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <Command __id="8232" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:47:42 EST 2022" starttimestamp="1645820509543" timestamp="188752803" />
  <Command __id="8233" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:47:42 EST 2022" starttimestamp="1645820509543" timestamp="188752803" />
  <DocumentChange __id="8234" _type="Insert" date="Sun Feb 27 19:47:42 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11879" docExpressionCount="1127" docLength="13304" length="1" offset="9518" starttimestamp="1645820509543" timestamp="188753380">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <Command __id="8235" _type="InsertStringCommand" date="Sun Feb 27 19:47:42 EST 2022" starttimestamp="1645820509543" timestamp="188753380" timestamp2="188753380">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="8236" _type="InsertStringCommand" date="Sun Feb 27 19:47:42 EST 2022" starttimestamp="1645820509543" timestamp="188753388" timestamp2="188753388">
    <data><![CDATA[:]]></data>
  </Command>
  <DocumentChange __id="8237" _type="Insert" date="Sun Feb 27 19:47:43 EST 2022" docASTNodeCount="1608" docActiveCodeLength="11887" docExpressionCount="1127" docLength="13312" length="8" offset="9519" starttimestamp="1645820509543" timestamp="188753592">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <Command __id="8238" _type="InsertStringCommand" date="Sun Feb 27 19:47:43 EST 2022" starttimestamp="1645820509543" timestamp="188753594" timestamp2="188753594">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8239" _type="InsertStringCommand" date="Sun Feb 27 19:47:43 EST 2022" starttimestamp="1645820509543" timestamp="188753594" timestamp2="188753594">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8240" _type="Insert" date="Sun Feb 27 19:47:45 EST 2022" docASTNodeCount="1522" docActiveCodeLength="11888" docExpressionCount="1058" docLength="13313" length="1" offset="9527" starttimestamp="1645820509543" timestamp="188755978">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="8241" _type="InsertStringCommand" date="Sun Feb 27 19:47:45 EST 2022" starttimestamp="1645820509543" timestamp="188755978" timestamp2="188755978">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="8242" _type="InsertStringCommand" date="Sun Feb 27 19:47:45 EST 2022" starttimestamp="1645820509543" timestamp="188755978" timestamp2="188755978">
    <data><![CDATA[p]]></data>
  </Command>
  <DocumentChange __id="8243" _type="Insert" date="Sun Feb 27 19:47:45 EST 2022" docASTNodeCount="1522" docActiveCodeLength="11889" docExpressionCount="1058" docLength="13314" length="1" offset="9528" starttimestamp="1645820509543" timestamp="188756031">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="8244" _type="InsertStringCommand" date="Sun Feb 27 19:47:45 EST 2022" starttimestamp="1645820509543" timestamp="188756031" timestamp2="188756031">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="8245" _type="InsertStringCommand" date="Sun Feb 27 19:47:45 EST 2022" starttimestamp="1645820509543" timestamp="188756031" timestamp2="188756031">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="8246" _type="Insert" date="Sun Feb 27 19:47:45 EST 2022" docASTNodeCount="1522" docActiveCodeLength="11890" docExpressionCount="1058" docLength="13315" length="1" offset="9529" starttimestamp="1645820509543" timestamp="188756178">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8247" _type="InsertStringCommand" date="Sun Feb 27 19:47:45 EST 2022" starttimestamp="1645820509543" timestamp="188756178" timestamp2="188756178">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8248" _type="InsertStringCommand" date="Sun Feb 27 19:47:45 EST 2022" starttimestamp="1645820509543" timestamp="188756178" timestamp2="188756178">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="8249" _type="Insert" date="Sun Feb 27 19:47:45 EST 2022" docASTNodeCount="1522" docActiveCodeLength="11891" docExpressionCount="1058" docLength="13316" length="1" offset="9530" starttimestamp="1645820509543" timestamp="188756278">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="8250" _type="InsertStringCommand" date="Sun Feb 27 19:47:45 EST 2022" starttimestamp="1645820509543" timestamp="188756294" timestamp2="188756294">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8251" _type="InsertStringCommand" date="Sun Feb 27 19:47:45 EST 2022" starttimestamp="1645820509543" timestamp="188756294" timestamp2="188756294">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="8252" _type="Insert" date="Sun Feb 27 19:47:45 EST 2022" docASTNodeCount="1522" docActiveCodeLength="11892" docExpressionCount="1058" docLength="13317" length="1" offset="9531" starttimestamp="1645820509543" timestamp="188756378">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="8253" _type="InsertStringCommand" date="Sun Feb 27 19:47:45 EST 2022" starttimestamp="1645820509543" timestamp="188756378" timestamp2="188756378">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8254" _type="InsertStringCommand" date="Sun Feb 27 19:47:45 EST 2022" starttimestamp="1645820509543" timestamp="188756378" timestamp2="188756378">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="8255" _type="Insert" date="Sun Feb 27 19:47:46 EST 2022" docASTNodeCount="1522" docActiveCodeLength="11893" docExpressionCount="1058" docLength="13318" length="1" offset="9532" starttimestamp="1645820509543" timestamp="188757448">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="8256" _type="InsertStringCommand" date="Sun Feb 27 19:47:47 EST 2022" starttimestamp="1645820509543" timestamp="188757464" timestamp2="188757464">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="8257" _type="InsertStringCommand" date="Sun Feb 27 19:47:47 EST 2022" starttimestamp="1645820509543" timestamp="188757464" timestamp2="188757464">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="8258" _type="Insert" date="Sun Feb 27 19:47:47 EST 2022" docASTNodeCount="1522" docActiveCodeLength="11894" docExpressionCount="1058" docLength="13319" length="1" offset="9533" starttimestamp="1645820509543" timestamp="188757764">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8259" _type="InsertStringCommand" date="Sun Feb 27 19:47:47 EST 2022" starttimestamp="1645820509543" timestamp="188757764" timestamp2="188757764">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8260" _type="InsertStringCommand" date="Sun Feb 27 19:47:47 EST 2022" starttimestamp="1645820509543" timestamp="188757764" timestamp2="188757764">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="8261" _type="Insert" date="Sun Feb 27 19:47:47 EST 2022" docASTNodeCount="1522" docActiveCodeLength="11895" docExpressionCount="1058" docLength="13320" length="1" offset="9534" starttimestamp="1645820509543" timestamp="188757917">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8262" _type="InsertStringCommand" date="Sun Feb 27 19:47:47 EST 2022" starttimestamp="1645820509543" timestamp="188757933" timestamp2="188757933">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8263" _type="InsertStringCommand" date="Sun Feb 27 19:47:47 EST 2022" starttimestamp="1645820509543" timestamp="188757933" timestamp2="188757933">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="8264" _type="Insert" date="Sun Feb 27 19:47:47 EST 2022" docASTNodeCount="1522" docActiveCodeLength="11896" docExpressionCount="1058" docLength="13321" length="1" offset="9535" starttimestamp="1645820509543" timestamp="188758065">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="8265" _type="InsertStringCommand" date="Sun Feb 27 19:47:47 EST 2022" starttimestamp="1645820509543" timestamp="188758065" timestamp2="188758065">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="8266" _type="InsertStringCommand" date="Sun Feb 27 19:47:47 EST 2022" starttimestamp="1645820509543" timestamp="188758065" timestamp2="188758065">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="8267" _type="Insert" date="Sun Feb 27 19:47:47 EST 2022" docASTNodeCount="1522" docActiveCodeLength="11897" docExpressionCount="1058" docLength="13322" length="1" offset="9536" starttimestamp="1645820509543" timestamp="188758218">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8268" _type="InsertStringCommand" date="Sun Feb 27 19:47:47 EST 2022" starttimestamp="1645820509543" timestamp="188758218" timestamp2="188758218">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8269" _type="InsertStringCommand" date="Sun Feb 27 19:47:47 EST 2022" starttimestamp="1645820509543" timestamp="188758218" timestamp2="188758218">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8271" _type="InsertStringCommand" date="Sun Feb 27 19:47:48 EST 2022" starttimestamp="1645820509543" timestamp="188758982" timestamp2="188758982">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="8272" _type="InsertStringCommand" date="Sun Feb 27 19:47:48 EST 2022" starttimestamp="1645820509543" timestamp="188758982" timestamp2="188758982">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="8273" _type="InsertStringCommand" date="Sun Feb 27 19:47:48 EST 2022" starttimestamp="1645820509543" timestamp="188759082" timestamp2="188759082">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="8274" _type="InsertStringCommand" date="Sun Feb 27 19:47:48 EST 2022" starttimestamp="1645820509543" timestamp="188759082" timestamp2="188759082">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="8275" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 19:47:54 EST 2022" starttimestamp="1645820509543" timestamp="188765059" />
  <Command __id="8276" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 19:47:54 EST 2022" starttimestamp="1645820509543" timestamp="188765059" />
  <DocumentChange __id="8270" _type="Insert" date="Sun Feb 27 19:47:48 EST 2022" docASTNodeCount="1611" docActiveCodeLength="11899" docExpressionCount="1129" docLength="13324" length="2" offset="9537" starttimestamp="1645820509543" timestamp="188758982">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="8277" _type="SelectTextCommand" caretOffset="9690" date="Sun Feb 27 19:47:59 EST 2022" end="9690" start="9672" starttimestamp="1645820509543" timestamp="188770130" />
  <Command __id="8278" _type="SelectTextCommand" caretOffset="9690" date="Sun Feb 27 19:47:59 EST 2022" end="9690" start="9672" starttimestamp="1645820509543" timestamp="188770130" />
  <Command __id="8279" _type="CopyCommand" date="Sun Feb 27 19:48:00 EST 2022" starttimestamp="1645820509543" timestamp="188770684" />
  <Command __id="8280" _type="MoveCaretCommand" caretOffset="9460" date="Sun Feb 27 19:48:01 EST 2022" docOffset="9538" starttimestamp="1645820509543" timestamp="188771640" />
  <Command __id="8281" _type="MoveCaretCommand" caretOffset="9460" date="Sun Feb 27 19:48:01 EST 2022" docOffset="9538" starttimestamp="1645820509543" timestamp="188771640" />
  <DocumentChange __id="8282" _type="Insert" date="Sun Feb 27 19:48:02 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11901" docExpressionCount="1130" docLength="13326" length="2" offset="9538" starttimestamp="1645820509543" timestamp="188773407">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <Command __id="8283" _type="InsertStringCommand" date="Sun Feb 27 19:48:02 EST 2022" starttimestamp="1645820509543" timestamp="188773407" timestamp2="188773407">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="8284" _type="InsertStringCommand" date="Sun Feb 27 19:48:02 EST 2022" starttimestamp="1645820509543" timestamp="188773407" timestamp2="188773407">
    <data><![CDATA["]]></data>
  </Command>
  <DocumentChange __id="8285" _type="Insert" date="Sun Feb 27 19:48:03 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11919" docExpressionCount="1130" docLength="13344" length="18" offset="9539" starttimestamp="1645820509543" timestamp="188773761">
    <text><![CDATA[parsing expression]]></text>
  </DocumentChange>
  <Command __id="8286" _type="PasteCommand" date="Sun Feb 27 19:48:03 EST 2022" starttimestamp="1645820509543" timestamp="188773761" />
  <DocumentChange __id="8287" _type="Insert" date="Sun Feb 27 19:48:07 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11920" docExpressionCount="1130" docLength="13345" length="1" offset="9557" starttimestamp="1645820509543" timestamp="188777879">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="8288" _type="InsertStringCommand" date="Sun Feb 27 19:48:07 EST 2022" starttimestamp="1645820509543" timestamp="188777879" timestamp2="188777879">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="8289" _type="InsertStringCommand" date="Sun Feb 27 19:48:07 EST 2022" starttimestamp="1645820509543" timestamp="188777879" timestamp2="188777879">
    <data><![CDATA[,]]></data>
  </Command>
  <DocumentChange __id="8290" _type="Insert" date="Sun Feb 27 19:48:09 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11921" docExpressionCount="1130" docLength="13346" length="1" offset="9558" starttimestamp="1645820509543" timestamp="188780166">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="8291" _type="InsertStringCommand" date="Sun Feb 27 19:48:09 EST 2022" starttimestamp="1645820509543" timestamp="188780166" timestamp2="188780166">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8292" _type="InsertStringCommand" date="Sun Feb 27 19:48:09 EST 2022" starttimestamp="1645820509543" timestamp="188780166" timestamp2="188780166">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="8293" _type="Insert" date="Sun Feb 27 19:48:09 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11922" docExpressionCount="1130" docLength="13347" length="1" offset="9559" starttimestamp="1645820509543" timestamp="188780297">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="8294" _type="InsertStringCommand" date="Sun Feb 27 19:48:09 EST 2022" starttimestamp="1645820509543" timestamp="188780297" timestamp2="188780297">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="8295" _type="InsertStringCommand" date="Sun Feb 27 19:48:09 EST 2022" starttimestamp="1645820509543" timestamp="188780297" timestamp2="188780297">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="8296" _type="Insert" date="Sun Feb 27 19:48:09 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11923" docExpressionCount="1130" docLength="13348" length="1" offset="9560" starttimestamp="1645820509543" timestamp="188780397">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="8297" _type="InsertStringCommand" date="Sun Feb 27 19:48:09 EST 2022" starttimestamp="1645820509543" timestamp="188780397" timestamp2="188780397">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="8298" _type="InsertStringCommand" date="Sun Feb 27 19:48:09 EST 2022" starttimestamp="1645820509543" timestamp="188780397" timestamp2="188780397">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="8299" _type="Insert" date="Sun Feb 27 19:48:10 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11924" docExpressionCount="1130" docLength="13349" length="1" offset="9561" starttimestamp="1645820509543" timestamp="188780466">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="8300" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188780466" timestamp2="188780466">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8301" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188780466" timestamp2="188780466">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="8302" _type="Insert" date="Sun Feb 27 19:48:10 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11925" docExpressionCount="1130" docLength="13350" length="1" offset="9562" starttimestamp="1645820509543" timestamp="188780551">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <Command __id="8303" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188780566" timestamp2="188780566">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="8304" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188780566" timestamp2="188780566">
    <data><![CDATA[h]]></data>
  </Command>
  <DocumentChange __id="8305" _type="Insert" date="Sun Feb 27 19:48:10 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11926" docExpressionCount="1130" docLength="13351" length="1" offset="9563" starttimestamp="1645820509543" timestamp="188780698">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="8306" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188780713" timestamp2="188780713">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="8307" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188780713" timestamp2="188780713">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="8308" _type="Insert" date="Sun Feb 27 19:48:10 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11927" docExpressionCount="1130" docLength="13352" length="1" offset="9564" starttimestamp="1645820509543" timestamp="188780798">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="8309" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188780798" timestamp2="188780798">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="8310" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188780798" timestamp2="188780798">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="8311" _type="Insert" date="Sun Feb 27 19:48:10 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11928" docExpressionCount="1130" docLength="13353" length="1" offset="9565" starttimestamp="1645820509543" timestamp="188780851">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <Command __id="8312" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188780851" timestamp2="188780851">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="8313" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188780851" timestamp2="188780851">
    <data><![CDATA[g]]></data>
  </Command>
  <DocumentChange __id="8314" _type="Insert" date="Sun Feb 27 19:48:10 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11929" docExpressionCount="1130" docLength="13354" length="1" offset="9566" starttimestamp="1645820509543" timestamp="188780935">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="8315" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188780935" timestamp2="188780935">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8316" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188780935" timestamp2="188780935">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="8317" _type="Insert" date="Sun Feb 27 19:48:10 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11930" docExpressionCount="1130" docLength="13355" length="1" offset="9567" starttimestamp="1645820509543" timestamp="188781067">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="8318" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188781067" timestamp2="188781067">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="8319" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188781067" timestamp2="188781067">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="8320" _type="Insert" date="Sun Feb 27 19:48:10 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11931" docExpressionCount="1130" docLength="13356" length="1" offset="9568" starttimestamp="1645820509543" timestamp="188781329">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="8321" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188781336" timestamp2="188781336">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="8322" _type="InsertStringCommand" date="Sun Feb 27 19:48:10 EST 2022" starttimestamp="1645820509543" timestamp="188781336" timestamp2="188781336">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="8323" _type="Insert" date="Sun Feb 27 19:48:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11932" docExpressionCount="1130" docLength="13357" length="1" offset="9569" starttimestamp="1645820509543" timestamp="188781552">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="8324" _type="InsertStringCommand" date="Sun Feb 27 19:48:11 EST 2022" starttimestamp="1645820509543" timestamp="188781552" timestamp2="188781552">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8325" _type="InsertStringCommand" date="Sun Feb 27 19:48:11 EST 2022" starttimestamp="1645820509543" timestamp="188781552" timestamp2="188781552">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="8326" _type="Insert" date="Sun Feb 27 19:48:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11933" docExpressionCount="1130" docLength="13358" length="1" offset="9570" starttimestamp="1645820509543" timestamp="188781684">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="8327" _type="InsertStringCommand" date="Sun Feb 27 19:48:11 EST 2022" starttimestamp="1645820509543" timestamp="188781684" timestamp2="188781684">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8328" _type="InsertStringCommand" date="Sun Feb 27 19:48:11 EST 2022" starttimestamp="1645820509543" timestamp="188781684" timestamp2="188781684">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="8329" _type="Insert" date="Sun Feb 27 19:48:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11934" docExpressionCount="1130" docLength="13359" length="1" offset="9571" starttimestamp="1645820509543" timestamp="188781753">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8330" _type="InsertStringCommand" date="Sun Feb 27 19:48:11 EST 2022" starttimestamp="1645820509543" timestamp="188781753" timestamp2="188781753">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8331" _type="InsertStringCommand" date="Sun Feb 27 19:48:11 EST 2022" starttimestamp="1645820509543" timestamp="188781753" timestamp2="188781753">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="8332" _type="Insert" date="Sun Feb 27 19:48:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11935" docExpressionCount="1130" docLength="13360" length="1" offset="9572" starttimestamp="1645820509543" timestamp="188781969">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="8333" _type="InsertStringCommand" date="Sun Feb 27 19:48:11 EST 2022" starttimestamp="1645820509543" timestamp="188781984" timestamp2="188781984">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8334" _type="InsertStringCommand" date="Sun Feb 27 19:48:11 EST 2022" starttimestamp="1645820509543" timestamp="188781984" timestamp2="188781984">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="8335" _type="Insert" date="Sun Feb 27 19:48:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11936" docExpressionCount="1130" docLength="13361" length="1" offset="9573" starttimestamp="1645820509543" timestamp="188782100">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="8336" _type="InsertStringCommand" date="Sun Feb 27 19:48:11 EST 2022" starttimestamp="1645820509543" timestamp="188782100" timestamp2="188782100">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="8337" _type="InsertStringCommand" date="Sun Feb 27 19:48:11 EST 2022" starttimestamp="1645820509543" timestamp="188782100" timestamp2="188782100">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="8338" _type="Insert" date="Sun Feb 27 19:48:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11937" docExpressionCount="1130" docLength="13362" length="1" offset="9574" starttimestamp="1645820509543" timestamp="188782184">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="8339" _type="InsertStringCommand" date="Sun Feb 27 19:48:11 EST 2022" starttimestamp="1645820509543" timestamp="188782184" timestamp2="188782184">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8340" _type="InsertStringCommand" date="Sun Feb 27 19:48:11 EST 2022" starttimestamp="1645820509543" timestamp="188782184" timestamp2="188782184">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8342" _type="InsertStringCommand" date="Sun Feb 27 19:48:11 EST 2022" starttimestamp="1645820509543" timestamp="188782253" timestamp2="188782253">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="8343" _type="InsertStringCommand" date="Sun Feb 27 19:48:11 EST 2022" starttimestamp="1645820509543" timestamp="188782253" timestamp2="188782253">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="8344" _type="MoveCaretCommand" caretOffset="9500" date="Sun Feb 27 19:48:13 EST 2022" docOffset="9578" starttimestamp="1645820509543" timestamp="188784104" />
  <Command __id="8345" _type="MoveCaretCommand" caretOffset="9500" date="Sun Feb 27 19:48:13 EST 2022" docOffset="9578" starttimestamp="1645820509543" timestamp="188784104" />
  <DocumentChange __id="8341" _type="Insert" date="Sun Feb 27 19:48:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11938" docExpressionCount="1130" docLength="13363" length="1" offset="9575" starttimestamp="1645820509543" timestamp="188782253">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <Command __id="8346" _type="MoveCaretCommand" caretOffset="9498" date="Sun Feb 27 19:48:14 EST 2022" docOffset="9576" starttimestamp="1645820509543" timestamp="188785136" />
  <Command __id="8347" _type="MoveCaretCommand" caretOffset="9498" date="Sun Feb 27 19:48:14 EST 2022" docOffset="9576" starttimestamp="1645820509543" timestamp="188785136" />
  <DocumentChange __id="8348" _type="Insert" date="Sun Feb 27 19:48:16 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11939" docExpressionCount="1130" docLength="13364" length="1" offset="9576" starttimestamp="1645820509543" timestamp="188787008">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="8349" _type="InsertStringCommand" date="Sun Feb 27 19:48:16 EST 2022" starttimestamp="1645820509543" timestamp="188787023" timestamp2="188787023">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8350" _type="InsertStringCommand" date="Sun Feb 27 19:48:16 EST 2022" starttimestamp="1645820509543" timestamp="188787023" timestamp2="188787023">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8351" _type="MoveCaretCommand" caretOffset="9501" date="Sun Feb 27 19:48:17 EST 2022" docOffset="9579" starttimestamp="1645820509543" timestamp="188787461" />
  <Command __id="8352" _type="MoveCaretCommand" caretOffset="9501" date="Sun Feb 27 19:48:17 EST 2022" docOffset="9579" starttimestamp="1645820509543" timestamp="188787461" />
  <DocumentChange __id="8353" _type="Insert" date="Sun Feb 27 19:48:17 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11940" docExpressionCount="1130" docLength="13365" length="1" offset="9579" starttimestamp="1645820509543" timestamp="188788209">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="8354" _type="InsertStringCommand" date="Sun Feb 27 19:48:17 EST 2022" starttimestamp="1645820509543" timestamp="188788225" timestamp2="188788225">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="8355" _type="InsertStringCommand" date="Sun Feb 27 19:48:17 EST 2022" starttimestamp="1645820509543" timestamp="188788225" timestamp2="188788225">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="8356" _type="MoveCaretCommand" caretOffset="9529" date="Sun Feb 27 19:48:18 EST 2022" docOffset="9607" starttimestamp="1645820509543" timestamp="188789180" />
  <Command __id="8357" _type="MoveCaretCommand" caretOffset="9529" date="Sun Feb 27 19:48:18 EST 2022" docOffset="9607" starttimestamp="1645820509543" timestamp="188789180" />
  <Command __id="8359" _type="InsertStringCommand" date="Sun Feb 27 19:48:18 EST 2022" starttimestamp="1645820509543" timestamp="188789364" timestamp2="188789364">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="8360" _type="InsertStringCommand" date="Sun Feb 27 19:48:18 EST 2022" starttimestamp="1645820509543" timestamp="188789364" timestamp2="188789364">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="8364" _type="RunCommand" date="Sun Feb 27 19:48:24 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188795153" type="Run" />
  <Command __id="8365" _type="RunCommand" date="Sun Feb 27 19:48:24 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188795160" type="Run" />
  <Command __id="8366" _type="RunCommand" date="Sun Feb 27 19:48:24 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188795291" type="Run" />
  <Command __id="8367" _type="RunCommand" date="Sun Feb 27 19:48:24 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188795291" type="Run" />
  <Command __id="8368" _type="EHExceptionCommand" date="Sun Feb 27 19:48:24 EST 2022" starttimestamp="1645820509543" timestamp="188795323" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
------------starting declaration-----------
int
numErrors
;
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
gg
;
------------ending declaration-----------
------------starting declaration-----------
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
IN VOID METHOD DECLARATION
numErrors
In scanner =
=
0
;
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
try
In scanner =
=
!
(
a
In scanner =
==
a
)
;
OUT VOID METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
hasErrors
(
kk
[
]
b
,
int
[
]
c
)
{
IN METHOD DECLARATION
return
numErrors
>
0
;
OUT METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
void
reportError
(
String
message
)
{
IN VOID METHOD DECLARATION
{
int
i
In scanner =
=
1
;
boolean
j
In scanner =
=
2
;
bo
jdsaf2
In scanner =
=
afdaf
;
this
In scanner =
=
1
;
this
.
adsfaew
.
dafawe
.
d
In scanner =
=
adf123
;
sdfawe
.
dsfaewf
.
safew
[
sdafaewfa
.
sdafaew
.
sdafaew
.
asd
]
In scanner =
=
dsfs2
;
this
In scanner =
=
this
;
return
;
return
asdfawef
;
if
(
adf
)
{
dsafae
In scanner =
=
12
;
}
else
adfaewf
In scanner =
=
dsfaef
;
while
(
asdfaew
In scanner =
=
dafawe
)
sdafaew
In scanner =
=
dsaf
;
a
In scanner =
=
-
1
;
a
In scanner =
=
!
true
;
a
In scanner =
=
false
;
a
In scanner =
=
new
Parse error: Parsing dafef and expecting 'SEMICOLON' but found 'ID'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="8369" _type="MoveCaretCommand" caretOffset="9191" date="Sun Feb 27 19:48:58 EST 2022" docOffset="9269" starttimestamp="1645820509543" timestamp="188828664" />
  <Command __id="8370" _type="MoveCaretCommand" caretOffset="9191" date="Sun Feb 27 19:48:58 EST 2022" docOffset="9269" starttimestamp="1645820509543" timestamp="188828664" />
  <Command __id="8371" _type="MoveCaretCommand" caretOffset="9173" date="Sun Feb 27 19:48:58 EST 2022" docOffset="9251" starttimestamp="1645820509543" timestamp="188828965" />
  <Command __id="8372" _type="MoveCaretCommand" caretOffset="9173" date="Sun Feb 27 19:48:58 EST 2022" docOffset="9251" starttimestamp="1645820509543" timestamp="188828965" />
  <DocumentChange __id="8358" _type="Insert" date="Sun Feb 27 19:48:18 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11941" docExpressionCount="1130" docLength="13366" length="1" offset="9607" starttimestamp="1645820509543" timestamp="188789348">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="8375" _type="Insert" date="Sun Feb 27 19:49:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11942" docExpressionCount="1130" docLength="13367" length="1" offset="9239" starttimestamp="1645820509543" timestamp="188842449">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8376" _type="Insert" date="Sun Feb 27 19:49:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11943" docExpressionCount="1130" docLength="13368" length="1" offset="9254" starttimestamp="1645820509543" timestamp="188842449">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8377" _type="Insert" date="Sun Feb 27 19:49:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11944" docExpressionCount="1130" docLength="13369" length="1" offset="9273" starttimestamp="1645820509543" timestamp="188842449">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8378" _type="Insert" date="Sun Feb 27 19:49:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11945" docExpressionCount="1130" docLength="13370" length="1" offset="9309" starttimestamp="1645820509543" timestamp="188842449">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8379" _type="Insert" date="Sun Feb 27 19:49:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11946" docExpressionCount="1130" docLength="13371" length="1" offset="9329" starttimestamp="1645820509543" timestamp="188842449">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8380" _type="Insert" date="Sun Feb 27 19:49:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11947" docExpressionCount="1130" docLength="13372" length="1" offset="9349" starttimestamp="1645820509543" timestamp="188842449">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8381" _type="Insert" date="Sun Feb 27 19:49:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11948" docExpressionCount="1130" docLength="13373" length="1" offset="9383" starttimestamp="1645820509543" timestamp="188842449">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8382" _type="Insert" date="Sun Feb 27 19:49:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11949" docExpressionCount="1130" docLength="13374" length="1" offset="9398" starttimestamp="1645820509543" timestamp="188842449">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8383" _type="Insert" date="Sun Feb 27 19:49:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11950" docExpressionCount="1130" docLength="13375" length="1" offset="9420" starttimestamp="1645820509543" timestamp="188842449">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8384" _type="Insert" date="Sun Feb 27 19:49:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11951" docExpressionCount="1130" docLength="13376" length="1" offset="9440" starttimestamp="1645820509543" timestamp="188842449">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8385" _type="Insert" date="Sun Feb 27 19:49:11 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11952" docExpressionCount="1130" docLength="13377" length="1" offset="9467" starttimestamp="1645820509543" timestamp="188842449">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8386" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11953" docExpressionCount="1130" docLength="13378" length="1" offset="9503" starttimestamp="1645820509543" timestamp="188842465">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8387" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11954" docExpressionCount="1130" docLength="13379" length="1" offset="9518" starttimestamp="1645820509543" timestamp="188842465">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8388" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11955" docExpressionCount="1130" docLength="13380" length="1" offset="9534" starttimestamp="1645820509543" timestamp="188842465">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8389" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11956" docExpressionCount="1130" docLength="13381" length="1" offset="9596" starttimestamp="1645820509543" timestamp="188842465">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8390" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11957" docExpressionCount="1130" docLength="13382" length="1" offset="9604" starttimestamp="1645820509543" timestamp="188842465">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8391" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11958" docExpressionCount="1130" docLength="13383" length="1" offset="9613" starttimestamp="1645820509543" timestamp="188842465">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8392" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11959" docExpressionCount="1130" docLength="13384" length="1" offset="9627" starttimestamp="1645820509543" timestamp="188842465">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8393" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11960" docExpressionCount="1130" docLength="13385" length="1" offset="9634" starttimestamp="1645820509543" timestamp="188842465">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8394" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11961" docExpressionCount="1130" docLength="13386" length="1" offset="9650" starttimestamp="1645820509543" timestamp="188842465">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8395" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11962" docExpressionCount="1130" docLength="13387" length="1" offset="9669" starttimestamp="1645820509543" timestamp="188842465">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8396" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11963" docExpressionCount="1130" docLength="13388" length="1" offset="9704" starttimestamp="1645820509543" timestamp="188842465">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8397" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11964" docExpressionCount="1130" docLength="13389" length="1" offset="9730" starttimestamp="1645820509543" timestamp="188842481">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="8373" _type="SelectTextCommand" caretOffset="9719" date="Sun Feb 27 19:49:11 EST 2022" end="9719" start="9165" starttimestamp="1645820509543" timestamp="188842296" />
  <Command __id="8374" _type="SelectTextCommand" caretOffset="9719" date="Sun Feb 27 19:49:11 EST 2022" end="9719" start="9165" starttimestamp="1645820509543" timestamp="188842296" />
  <Command __id="8402" _type="InsertStringCommand" date="Sun Feb 27 19:49:12 EST 2022" starttimestamp="1645820509543" timestamp="188842534" timestamp2="188842534">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="8403" _type="InsertStringCommand" date="Sun Feb 27 19:49:12 EST 2022" starttimestamp="1645820509543" timestamp="188842534" timestamp2="188842534">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="8404" _type="MoveCaretCommand" caretOffset="9554" date="Sun Feb 27 19:49:12 EST 2022" docOffset="9632" starttimestamp="1645820509543" timestamp="188843120" />
  <Command __id="8405" _type="MoveCaretCommand" caretOffset="9554" date="Sun Feb 27 19:49:12 EST 2022" docOffset="9632" starttimestamp="1645820509543" timestamp="188843120" />
  <Command __id="8406" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 19:49:13 EST 2022" starttimestamp="1645820509543" timestamp="188843662" />
  <Command __id="8407" _type="EclipseCommand" commandID="" date="Sun Feb 27 19:49:13 EST 2022" starttimestamp="1645820509543" timestamp="188843752" />
  <Command __id="8408" _type="EclipseCommand" commandID="" date="Sun Feb 27 19:49:13 EST 2022" starttimestamp="1645820509543" timestamp="188843767" />
  <DocumentChange __id="8398" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11965" docExpressionCount="1130" docLength="13390" length="1" offset="9765" starttimestamp="1645820509543" timestamp="188842481">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8399" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11966" docExpressionCount="1130" docLength="13391" length="1" offset="9779" starttimestamp="1645820509543" timestamp="188842481">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8400" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11967" docExpressionCount="1130" docLength="13392" length="1" offset="9786" starttimestamp="1645820509543" timestamp="188842481">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8401" _type="Insert" date="Sun Feb 27 19:49:12 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11968" docExpressionCount="1130" docLength="13393" length="1" offset="9801" starttimestamp="1645820509543" timestamp="188842481">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8413" _type="Insert" date="Sun Feb 27 19:49:15 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11974" docExpressionCount="1130" docLength="13399" length="6" offset="9203" starttimestamp="1645820509543" timestamp="188845988">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <Command __id="8409" _type="MoveCaretCommand" caretOffset="9108" date="Sun Feb 27 19:49:14 EST 2022" docOffset="9186" starttimestamp="1645820509543" timestamp="188844853" />
  <Command __id="8410" _type="MoveCaretCommand" caretOffset="9108" date="Sun Feb 27 19:49:14 EST 2022" docOffset="9186" starttimestamp="1645820509543" timestamp="188844853" />
  <Command __id="8411" _type="MoveCaretCommand" caretOffset="9125" date="Sun Feb 27 19:49:14 EST 2022" docOffset="9203" starttimestamp="1645820509543" timestamp="188845439" />
  <Command __id="8412" _type="MoveCaretCommand" caretOffset="9125" date="Sun Feb 27 19:49:14 EST 2022" docOffset="9203" starttimestamp="1645820509543" timestamp="188845439" />
  <Command __id="8414" _type="InsertStringCommand" date="Sun Feb 27 19:49:15 EST 2022" starttimestamp="1645820509543" timestamp="188846003" timestamp2="188846003">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8415" _type="InsertStringCommand" date="Sun Feb 27 19:49:15 EST 2022" starttimestamp="1645820509543" timestamp="188846003" timestamp2="188846003">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8417" _type="InsertStringCommand" date="Sun Feb 27 19:49:16 EST 2022" starttimestamp="1645820509543" timestamp="188847289" timestamp2="188847289">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8418" _type="InsertStringCommand" date="Sun Feb 27 19:49:16 EST 2022" starttimestamp="1645820509543" timestamp="188847289" timestamp2="188847289">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8420" _type="InsertStringCommand" date="Sun Feb 27 19:49:17 EST 2022" starttimestamp="1645820509543" timestamp="188847543" timestamp2="188847543">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="8421" _type="InsertStringCommand" date="Sun Feb 27 19:49:17 EST 2022" starttimestamp="1645820509543" timestamp="188847543" timestamp2="188847543">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="8423" _type="InsertStringCommand" date="Sun Feb 27 19:49:17 EST 2022" starttimestamp="1645820509543" timestamp="188847621" timestamp2="188847621">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8424" _type="InsertStringCommand" date="Sun Feb 27 19:49:17 EST 2022" starttimestamp="1645820509543" timestamp="188847621" timestamp2="188847621">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8426" _type="InsertStringCommand" date="Sun Feb 27 19:49:17 EST 2022" starttimestamp="1645820509543" timestamp="188847806" timestamp2="188847806">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8427" _type="InsertStringCommand" date="Sun Feb 27 19:49:17 EST 2022" starttimestamp="1645820509543" timestamp="188847806" timestamp2="188847806">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8429" _type="InsertStringCommand" date="Sun Feb 27 19:49:17 EST 2022" starttimestamp="1645820509543" timestamp="188847928" timestamp2="188847928">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8430" _type="InsertStringCommand" date="Sun Feb 27 19:49:17 EST 2022" starttimestamp="1645820509543" timestamp="188847928" timestamp2="188847928">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8432" _type="InsertStringCommand" date="Sun Feb 27 19:49:17 EST 2022" starttimestamp="1645820509543" timestamp="188848006" timestamp2="188848006">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="8433" _type="InsertStringCommand" date="Sun Feb 27 19:49:17 EST 2022" starttimestamp="1645820509543" timestamp="188848006" timestamp2="188848006">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="8435" _type="InsertStringCommand" date="Sun Feb 27 19:49:17 EST 2022" starttimestamp="1645820509543" timestamp="188848360" timestamp2="188848360">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8436" _type="InsertStringCommand" date="Sun Feb 27 19:49:17 EST 2022" starttimestamp="1645820509543" timestamp="188848360" timestamp2="188848360">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8437" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 19:49:17 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="188848360" />
  <Command __id="8441" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 19:49:18 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="188849361" />
  <Command __id="8443" _type="InsertStringCommand" date="Sun Feb 27 19:49:18 EST 2022" starttimestamp="1645820509543" timestamp="188849361" timestamp2="188849361">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8444" _type="InsertStringCommand" date="Sun Feb 27 19:49:18 EST 2022" starttimestamp="1645820509543" timestamp="188849361" timestamp2="188849361">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8445" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 19:49:18 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="188849377" />
  <Command __id="8447" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 19:49:19 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="188849947" />
  <Command __id="8449" _type="InsertStringCommand" date="Sun Feb 27 19:49:19 EST 2022" starttimestamp="1645820509543" timestamp="188849994" timestamp2="188849994">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8450" _type="InsertStringCommand" date="Sun Feb 27 19:49:19 EST 2022" starttimestamp="1645820509543" timestamp="188849994" timestamp2="188849994">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8451" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 19:49:21 EST 2022" starttimestamp="1645820509543" timestamp="188851512" />
  <Command __id="8452" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 19:49:21 EST 2022" starttimestamp="1645820509543" timestamp="188851512" />
  <Command __id="8453" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 19:49:21 EST 2022" starttimestamp="1645820509543" timestamp="188851835" />
  <Command __id="8454" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 19:49:21 EST 2022" starttimestamp="1645820509543" timestamp="188851835" />
  <Command __id="8456" _type="InsertStringCommand" date="Sun Feb 27 19:49:22 EST 2022" starttimestamp="1645820509543" timestamp="188852582" timestamp2="188852582">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="8457" _type="InsertStringCommand" date="Sun Feb 27 19:49:22 EST 2022" starttimestamp="1645820509543" timestamp="188852582" timestamp2="188852582">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="8459" _type="InsertStringCommand" date="Sun Feb 27 19:49:22 EST 2022" starttimestamp="1645820509543" timestamp="188852713" timestamp2="188852713">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="8460" _type="InsertStringCommand" date="Sun Feb 27 19:49:22 EST 2022" starttimestamp="1645820509543" timestamp="188852713" timestamp2="188852713">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="8461" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:49:22 EST 2022" starttimestamp="1645820509543" timestamp="188853067" />
  <Command __id="8462" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:49:22 EST 2022" starttimestamp="1645820509543" timestamp="188853067" />
  <Command __id="8463" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:49:22 EST 2022" starttimestamp="1645820509543" timestamp="188853251" />
  <Command __id="8464" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:49:22 EST 2022" starttimestamp="1645820509543" timestamp="188853251" />
  <Command __id="8466" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:49:23 EST 2022" starttimestamp="1645820509543" timestamp="188853799" />
  <Command __id="8467" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:49:23 EST 2022" starttimestamp="1645820509543" timestamp="188853815" />
  <Command __id="8469" _type="InsertStringCommand" date="Sun Feb 27 19:49:23 EST 2022" starttimestamp="1645820509543" timestamp="188854183" timestamp2="188854183">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="8470" _type="InsertStringCommand" date="Sun Feb 27 19:49:23 EST 2022" starttimestamp="1645820509543" timestamp="188854183" timestamp2="188854183">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="8471" _type="InsertStringCommand" date="Sun Feb 27 19:49:23 EST 2022" starttimestamp="1645820509543" timestamp="188854352" timestamp2="188854352">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="8472" _type="InsertStringCommand" date="Sun Feb 27 19:49:23 EST 2022" starttimestamp="1645820509543" timestamp="188854352" timestamp2="188854352">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="8473" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 19:49:24 EST 2022" starttimestamp="1645820509543" timestamp="188854652" />
  <Command __id="8474" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 19:49:24 EST 2022" starttimestamp="1645820509543" timestamp="188854652" />
  <Command __id="8476" _type="InsertStringCommand" date="Sun Feb 27 19:49:24 EST 2022" starttimestamp="1645820509543" timestamp="188855252" timestamp2="188855252">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="8477" _type="InsertStringCommand" date="Sun Feb 27 19:49:24 EST 2022" starttimestamp="1645820509543" timestamp="188855252" timestamp2="188855252">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="8479" _type="InsertStringCommand" date="Sun Feb 27 19:49:24 EST 2022" starttimestamp="1645820509543" timestamp="188855383" timestamp2="188855383">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="8480" _type="InsertStringCommand" date="Sun Feb 27 19:49:24 EST 2022" starttimestamp="1645820509543" timestamp="188855383" timestamp2="188855383">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="8416" _type="Insert" date="Sun Feb 27 19:49:16 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11975" docExpressionCount="1131" docLength="13400" length="1" offset="9209" starttimestamp="1645820509543" timestamp="188847289">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="8419" _type="Insert" date="Sun Feb 27 19:49:17 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11976" docExpressionCount="1131" docLength="13401" length="1" offset="9210" starttimestamp="1645820509543" timestamp="188847543">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <DocumentChange __id="8422" _type="Insert" date="Sun Feb 27 19:49:17 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11977" docExpressionCount="1131" docLength="13402" length="1" offset="9211" starttimestamp="1645820509543" timestamp="188847621">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="8425" _type="Insert" date="Sun Feb 27 19:49:17 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11978" docExpressionCount="1131" docLength="13403" length="1" offset="9212" starttimestamp="1645820509543" timestamp="188847806">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="8428" _type="Insert" date="Sun Feb 27 19:49:17 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11979" docExpressionCount="1131" docLength="13404" length="1" offset="9213" starttimestamp="1645820509543" timestamp="188847922">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="8431" _type="Insert" date="Sun Feb 27 19:49:17 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11980" docExpressionCount="1131" docLength="13405" length="1" offset="9214" starttimestamp="1645820509543" timestamp="188848006">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="8434" _type="Insert" date="Sun Feb 27 19:49:17 EST 2022" docASTNodeCount="1614" docActiveCodeLength="11981" docExpressionCount="1131" docLength="13406" length="1" offset="9215" starttimestamp="1645820509543" timestamp="188848360">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="8438" _type="Insert" date="Sun Feb 27 19:49:18 EST 2022" docASTNodeCount="1616" docActiveCodeLength="11982" docExpressionCount="1133" docLength="13407" length="1" offset="9216" starttimestamp="1645820509543" timestamp="188848645">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="8439" _type="Insert" date="Sun Feb 27 19:49:18 EST 2022" docASTNodeCount="1616" docActiveCodeLength="11983" docExpressionCount="1133" docLength="13408" length="1" offset="9217" starttimestamp="1645820509543" timestamp="188848792">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="8440" _type="Insert" date="Sun Feb 27 19:49:18 EST 2022" docASTNodeCount="1616" docActiveCodeLength="11984" docExpressionCount="1133" docLength="13409" length="1" offset="9218" starttimestamp="1645820509543" timestamp="188848892">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="8442" _type="Replace" date="Sun Feb 27 19:49:18 EST 2022" docASTNodeCount="1612" docActiveCodeLength="11985" docExpressionCount="1130" docLength="13410" endLine="373" insertionLength="4" int_docASTNodeCount="1614" int_docActiveCodeLength="11981" int_docExpressionCount="1131" int_docLength="13406" length="3" offset="9216" startLine="373" starttimestamp="1645820509543" timestamp="188849361">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8446" _type="Insert" date="Sun Feb 27 19:49:19 EST 2022" docASTNodeCount="1618" docActiveCodeLength="11986" docExpressionCount="1135" docLength="13411" length="1" offset="9220" starttimestamp="1645820509543" timestamp="188849609">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="8448" _type="Replace" date="Sun Feb 27 19:49:19 EST 2022" docASTNodeCount="1619" docActiveCodeLength="11994" docExpressionCount="1136" docLength="13419" endLine="373" insertionLength="9" int_docASTNodeCount="1612" int_docActiveCodeLength="11985" int_docExpressionCount="1130" int_docLength="13410" length="1" offset="9220" startLine="373" starttimestamp="1645820509543" timestamp="188849963">
    <deletedText><![CDATA[p]]></deletedText>
    <insertedText><![CDATA[print(b);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8455" _type="Insert" date="Sun Feb 27 19:49:22 EST 2022" docASTNodeCount="1619" docActiveCodeLength="11995" docExpressionCount="1136" docLength="13420" length="1" offset="9225" starttimestamp="1645820509543" timestamp="188852566">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="8458" _type="Insert" date="Sun Feb 27 19:49:22 EST 2022" docASTNodeCount="1619" docActiveCodeLength="11996" docExpressionCount="1136" docLength="13421" length="1" offset="9226" starttimestamp="1645820509543" timestamp="188852713">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="8465" _type="Delete" date="Sun Feb 27 19:49:23 EST 2022" docASTNodeCount="1618" docActiveCodeLength="11995" docExpressionCount="1135" docLength="13420" endLine="373" length="1" offset="9228" startLine="373" starttimestamp="1645820509543" timestamp="188853799">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="8468" _type="Insert" date="Sun Feb 27 19:49:23 EST 2022" docASTNodeCount="1619" docActiveCodeLength="11997" docExpressionCount="1136" docLength="13422" length="2" offset="9228" starttimestamp="1645820509543" timestamp="188854183">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="8475" _type="Insert" date="Sun Feb 27 19:49:24 EST 2022" docASTNodeCount="1619" docActiveCodeLength="11998" docExpressionCount="1136" docLength="13423" length="1" offset="9229" starttimestamp="1645820509543" timestamp="188855252">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="8478" _type="Insert" date="Sun Feb 27 19:49:24 EST 2022" docASTNodeCount="1619" docActiveCodeLength="11999" docExpressionCount="1136" docLength="13424" length="1" offset="9230" starttimestamp="1645820509543" timestamp="188855383">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="8481" _type="Insert" date="Sun Feb 27 19:49:25 EST 2022" docASTNodeCount="1619" docActiveCodeLength="12000" docExpressionCount="1136" docLength="13425" length="1" offset="9231" starttimestamp="1645820509543" timestamp="188855837">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="8484" _type="Insert" date="Sun Feb 27 19:49:25 EST 2022" docASTNodeCount="1619" docActiveCodeLength="12001" docExpressionCount="1136" docLength="13426" length="1" offset="9232" starttimestamp="1645820509543" timestamp="188856000">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <DocumentChange __id="8487" _type="Insert" date="Sun Feb 27 19:49:25 EST 2022" docASTNodeCount="1619" docActiveCodeLength="12002" docExpressionCount="1136" docLength="13427" length="1" offset="9233" starttimestamp="1645820509543" timestamp="188856115">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="8490" _type="Insert" date="Sun Feb 27 19:49:25 EST 2022" docASTNodeCount="1619" docActiveCodeLength="12003" docExpressionCount="1136" docLength="13428" length="1" offset="9234" starttimestamp="1645820509543" timestamp="188856200">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="8493" _type="Insert" date="Sun Feb 27 19:49:25 EST 2022" docASTNodeCount="1619" docActiveCodeLength="12004" docExpressionCount="1136" docLength="13429" length="1" offset="9235" starttimestamp="1645820509543" timestamp="188856369">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="8496" _type="Insert" date="Sun Feb 27 19:49:26 EST 2022" docASTNodeCount="1619" docActiveCodeLength="12005" docExpressionCount="1136" docLength="13430" length="1" offset="9236" starttimestamp="1645820509543" timestamp="188856816">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="8499" _type="Insert" date="Sun Feb 27 19:49:26 EST 2022" docASTNodeCount="1619" docActiveCodeLength="12006" docExpressionCount="1136" docLength="13431" length="1" offset="9237" starttimestamp="1645820509543" timestamp="188857317">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="8502" _type="Insert" date="Sun Feb 27 19:49:26 EST 2022" docASTNodeCount="1619" docActiveCodeLength="12007" docExpressionCount="1136" docLength="13432" length="1" offset="9238" starttimestamp="1645820509543" timestamp="188857355">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="8508" _type="RunCommand" date="Sun Feb 27 19:49:30 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188861063" type="Run" />
  <Command __id="8509" _type="RunCommand" date="Sun Feb 27 19:49:30 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188861063" type="Run" />
  <Command __id="8510" _type="RunCommand" date="Sun Feb 27 19:49:30 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188861225" type="Run" />
  <Command __id="8511" _type="RunCommand" date="Sun Feb 27 19:49:30 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188861225" type="Run" />
  <Command __id="8512" _type="EHExceptionCommand" date="Sun Feb 27 19:49:30 EST 2022" starttimestamp="1645820509543" timestamp="188861263" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
------------starting declaration-----------
int
numErrors
;
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
gg
;
------------ending declaration-----------
------------starting declaration-----------
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
IN VOID METHOD DECLARATION
numErrors
In scanner =
=
0
;
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
try
In scanner =
=
!
(
a
In scanner =
==
a
)
;
OUT VOID METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
hasErrors
(
kk
[
]
b
,
int
[
]
c
)
{
IN METHOD DECLARATION
return
numErrors
>
0
;
OUT METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
void
reportError
(
String
message
)
{
IN VOID METHOD DECLARATION
{
int
i
In scanner =
=
1
;
boolean
j
In scanner =
=
2
;
bo
jdsaf2
In scanner =
=
afdaf
;
this
In scanner =
=
1
;
this
.
adsfaew
.
dafawe
.
d
In scanner =
=
adf123
;
sdfawe
.
dsfaewf
.
safew
[
sdafaewfa
.
sdafaew
.
sdafaew
.
asd
]
In scanner =
=
dsfs2
;
this
In scanner =
=
this
;
return
;
return
asdfawef
;
if
(
adf
)
{
dsafae
In scanner =
=
12
;
}
else
adfaewf
In scanner =
=
dsfaef
;
while
(
asdfaew
In scanner =
=
dafawe
)
sdafaew
In scanner =
=
dsaf
;
a
In scanner =
=
-
1
;
a
In scanner =
=
!
true
;
a
In scanner =
=
false
;
a
In scanner =
=
new
Parse error: Parsing dafef and expecting 'SEMICOLON' but found 'ID'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="8514" _type="MoveCaretCommand" caretOffset="5729" date="Sun Feb 27 19:49:38 EST 2022" docOffset="5880" starttimestamp="1645820509543" timestamp="188869377" />
  <Command __id="8513" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:49:38 EST 2022" docASTNodeCount="1110" docActiveCodeLength="8018" docExpressionCount="693" docLength="8748" projectName="pa1" starttimestamp="1645820509543" timestamp="188869293">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	        	boolean isEqual = false;¶	        	if(currentChar == '=') {¶	        		System.out.println("In scanner " +  currentChar);¶	        		isEqual = true;¶	        	}¶	            takeIt();¶	            if(currentChar == '=') {¶	            	isEqual = false;¶	                takeIt();¶	                return TokenKind.BINOP;¶	            } ¶	            return isEqual? TokenKind.EQUAL:TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="8515" _type="MoveCaretCommand" caretOffset="5531" date="Sun Feb 27 19:49:40 EST 2022" docOffset="5682" starttimestamp="1645820509543" timestamp="188871244" />
  <Command __id="8516" _type="MoveCaretCommand" caretOffset="5531" date="Sun Feb 27 19:49:40 EST 2022" docOffset="5682" starttimestamp="1645820509543" timestamp="188871244" />
  <Command __id="8517" _type="MoveCaretCommand" caretOffset="5621" date="Sun Feb 27 19:49:41 EST 2022" docOffset="5772" starttimestamp="1645820509543" timestamp="188872229" />
  <Command __id="8518" _type="MoveCaretCommand" caretOffset="5621" date="Sun Feb 27 19:49:41 EST 2022" docOffset="5772" starttimestamp="1645820509543" timestamp="188872229" />
  <Command __id="8519" _type="MoveCaretCommand" caretOffset="5574" date="Sun Feb 27 19:49:42 EST 2022" docOffset="5725" starttimestamp="1645820509543" timestamp="188872961" />
  <Command __id="8520" _type="MoveCaretCommand" caretOffset="5574" date="Sun Feb 27 19:49:42 EST 2022" docOffset="5725" starttimestamp="1645820509543" timestamp="188872961" />
  <Command __id="8522" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 19:49:43 EST 2022" starttimestamp="1645820509543" timestamp="188874262" />
  <DocumentChange __id="8521" _type="Insert" date="Sun Feb 27 19:49:43 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7958" docExpressionCount="685" docLength="8750" length="2" offset="5684" starttimestamp="1645820509543" timestamp="188874247">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="8528" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:49:50 EST 2022" docASTNodeCount="165" docActiveCodeLength="791" docExpressionCount="97" docLength="791" projectName="pa1" starttimestamp="1645820509543" timestamp="188880508">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors(kk[] b, int[] c) {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			{¶				int i = 1;¶				boolean j = 2;¶				bo jdsaf2 = afdaf;¶				this = 1;¶				this.adsfaew.dafawe.d = adf123;¶				sdfawe.dsfaewf.safew[sdafaewfa.sdafaew.sdafaew.asd] = dsfs2;¶				this = this;¶				return;¶				return asdfawef;¶				if (adf) { dsafae = 12;}¶				else adfaewf =dsfaef;¶				while (asdfaew = dafawe) sdafaew = dsaf; ¶				a = -1;¶				a = !true;¶				a = false;¶				a = new dafef();¶			}¶			¶			System.out.println(message,dfaewf,asdfa,ef,aew);¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="8535" _type="RunCommand" date="Sun Feb 27 19:49:56 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188886922" type="Run" />
  <Command __id="8536" _type="RunCommand" date="Sun Feb 27 19:49:56 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188886922" type="Run" />
  <Command __id="8537" _type="RunCommand" date="Sun Feb 27 19:49:56 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188887091" type="Run" />
  <Command __id="8538" _type="RunCommand" date="Sun Feb 27 19:49:56 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="188887091" type="Run" />
  <Command __id="8539" _type="EHExceptionCommand" date="Sun Feb 27 19:49:56 EST 2022" starttimestamp="1645820509543" timestamp="188887123" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
------------starting declaration-----------
int
numErrors
;
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
gg
;
------------ending declaration-----------
------------starting declaration-----------
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
IN VOID METHOD DECLARATION
numErrors
=
0
;
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
try
=
!
(
a
==
a
)
;
OUT VOID METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
hasErrors
(
kk
[
]
b
,
int
[
]
c
)
{
IN METHOD DECLARATION
return
numErrors
>
0
;
OUT METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
void
reportError
(
String
message
)
{
IN VOID METHOD DECLARATION
{
int
i
=
1
;
boolean
j
=
2
;
bo
jdsaf2
=
afdaf
;
this
=
1
;
this
.
adsfaew
.
dafawe
.
d
=
adf123
;
sdfawe
.
dsfaewf
.
safew
[
sdafaewfa
.
sdafaew
.
sdafaew
.
asd
]
=
dsfs2
;
this
=
this
;
return
;
return
asdfawef
;
if
(
adf
)
{
dsafae
=
12
;
}
else
adfaewf
=
dsfaef
;
while
(
asdfaew
=
dafawe
)
sdafaew
=
dsaf
;
a
=
-
1
;
a
=
!
true
;
a
=
false
;
a
=
new
Parse error: Parsing dafef and expecting 'SEMICOLON' but found 'ID'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="8541" _type="ShellCommand" date="Sun Feb 27 19:50:09 EST 2022" starttimestamp="1645820509543" timestamp="188899988" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8542" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:14 EST 2022" forward="true" matchWord="true" offset="196" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188904646" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8543" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:14 EST 2022" forward="true" matchWord="true" offset="196" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188905230" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8544" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:16 EST 2022" forward="false" matchWord="true" offset="196" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188907134" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8545" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:17 EST 2022" forward="false" matchWord="true" offset="184" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188907555" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8546" _type="ShellCommand" date="Sun Feb 27 19:50:17 EST 2022" starttimestamp="1645820509543" timestamp="188908051" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8548" _type="MoveCaretCommand" caretOffset="8980" date="Sun Feb 27 19:50:17 EST 2022" docOffset="9058" starttimestamp="1645820509543" timestamp="188908111" />
  <Command __id="8549" _type="MoveCaretCommand" caretOffset="8980" date="Sun Feb 27 19:50:17 EST 2022" docOffset="9058" starttimestamp="1645820509543" timestamp="188908143" />
  <Command __id="8550" _type="ShellCommand" date="Sun Feb 27 19:50:18 EST 2022" starttimestamp="1645820509543" timestamp="188908696" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8551" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:18 EST 2022" forward="false" matchWord="true" offset="184" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188908775" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8552" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:18 EST 2022" forward="false" matchWord="true" offset="184" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188909182" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8553" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:19 EST 2022" forward="false" matchWord="true" offset="184" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188909582" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8554" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:19 EST 2022" forward="false" matchWord="true" offset="184" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188909961" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8555" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:20 EST 2022" forward="true" matchWord="true" offset="184" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188911249" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8556" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:21 EST 2022" forward="true" matchWord="true" offset="184" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188911620" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8557" _type="ShellCommand" date="Sun Feb 27 19:50:21 EST 2022" starttimestamp="1645820509543" timestamp="188912020" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8558" _type="MoveCaretCommand" caretOffset="9089" date="Sun Feb 27 19:50:21 EST 2022" docOffset="9167" starttimestamp="1645820509543" timestamp="188912121" />
  <Command __id="8559" _type="MoveCaretCommand" caretOffset="9089" date="Sun Feb 27 19:50:21 EST 2022" docOffset="9167" starttimestamp="1645820509543" timestamp="188912121" />
  <Command __id="8560" _type="MoveCaretCommand" caretOffset="8891" date="Sun Feb 27 19:50:22 EST 2022" docOffset="8969" starttimestamp="1645820509543" timestamp="188912691" />
  <Command __id="8561" _type="MoveCaretCommand" caretOffset="8891" date="Sun Feb 27 19:50:22 EST 2022" docOffset="8969" starttimestamp="1645820509543" timestamp="188912691" />
  <Command __id="8562" _type="ShellCommand" date="Sun Feb 27 19:50:22 EST 2022" starttimestamp="1645820509543" timestamp="188913350" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8563" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:22 EST 2022" forward="true" matchWord="true" offset="184" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188913441" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8564" _type="ShellCommand" date="Sun Feb 27 19:50:23 EST 2022" starttimestamp="1645820509543" timestamp="188914397" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8565" _type="MoveCaretCommand" caretOffset="8951" date="Sun Feb 27 19:50:24 EST 2022" docOffset="9029" starttimestamp="1645820509543" timestamp="188914787" />
  <Command __id="8566" _type="MoveCaretCommand" caretOffset="8951" date="Sun Feb 27 19:50:24 EST 2022" docOffset="9029" starttimestamp="1645820509543" timestamp="188914787" />
  <Command __id="8568" _type="ShellCommand" date="Sun Feb 27 19:50:24 EST 2022" starttimestamp="1645820509543" timestamp="188915438" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8569" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:27 EST 2022" forward="true" matchWord="true" offset="9029" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188917680" wrapSearch="false">
    <searchString><![CDATA[NE]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8570" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:28 EST 2022" forward="true" matchWord="false" offset="9029" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188918470" wrapSearch="false">
    <searchString><![CDATA[NE]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8571" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:31 EST 2022" forward="true" matchWord="false" offset="9184" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188922212" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8572" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:33 EST 2022" forward="true" matchWord="false" offset="9629" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188923857" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8573" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:34 EST 2022" forward="true" matchWord="false" offset="9892" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188925426" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8574" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:36 EST 2022" forward="true" matchWord="false" offset="12998" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188926673" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8575" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:36 EST 2022" forward="true" matchWord="false" offset="12998" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188927324" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8576" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:37 EST 2022" forward="true" matchWord="false" offset="12998" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188927865" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8577" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:39 EST 2022" forward="false" matchWord="false" offset="12998" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188930209" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8578" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:40 EST 2022" forward="false" matchWord="false" offset="12998" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188930642" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8579" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:50:40 EST 2022" forward="false" matchWord="false" offset="12998" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="188931004" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8580" _type="ShellCommand" date="Sun Feb 27 19:50:41 EST 2022" starttimestamp="1645820509543" timestamp="188931859" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8581" _type="ShellCommand" date="Sun Feb 27 19:50:51 EST 2022" starttimestamp="1645820509543" timestamp="188941518" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8582" _type="ShellCommand" date="Sun Feb 27 19:50:53 EST 2022" starttimestamp="1645820509543" timestamp="188943774" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8583" _type="MoveCaretCommand" caretOffset="9609" date="Sun Feb 27 19:50:53 EST 2022" docOffset="9687" starttimestamp="1645820509543" timestamp="188943805" />
  <Command __id="8584" _type="MoveCaretCommand" caretOffset="9609" date="Sun Feb 27 19:50:53 EST 2022" docOffset="9687" starttimestamp="1645820509543" timestamp="188943805" />
  <Command __id="8585" _type="ShellCommand" date="Sun Feb 27 19:51:07 EST 2022" starttimestamp="1645820509543" timestamp="188957872" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8586" _type="ShellCommand" date="Sun Feb 27 19:51:08 EST 2022" starttimestamp="1645820509543" timestamp="188959305" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8587" _type="MoveCaretCommand" caretOffset="9191" date="Sun Feb 27 19:51:08 EST 2022" docOffset="9269" starttimestamp="1645820509543" timestamp="188959375" />
  <Command __id="8588" _type="MoveCaretCommand" caretOffset="9191" date="Sun Feb 27 19:51:08 EST 2022" docOffset="9269" starttimestamp="1645820509543" timestamp="188959375" />
  <Command __id="8589" _type="ShellCommand" date="Sun Feb 27 19:51:29 EST 2022" starttimestamp="1645820509543" timestamp="188980178" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8590" _type="ShellCommand" date="Sun Feb 27 19:51:30 EST 2022" starttimestamp="1645820509543" timestamp="188981292" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8591" _type="MoveCaretCommand" caretOffset="4123" date="Sun Feb 27 19:51:36 EST 2022" docOffset="4201" starttimestamp="1645820509543" timestamp="188987436" />
  <Command __id="8592" _type="MoveCaretCommand" caretOffset="4123" date="Sun Feb 27 19:51:36 EST 2022" docOffset="4201" starttimestamp="1645820509543" timestamp="188987452" />
  <Command __id="8529" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:49:51 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7958" docExpressionCount="685" docLength="8750" projectName="pa1" starttimestamp="1645820509543" timestamp="188882211">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	        	boolean isEqual = false;¶	        	if(currentChar == '=') {¶"), Diff(INSERT,"//"), Diff(EQUAL,"	        		System.out.println("In scanner " +  currentChar);¶	        		isEqual = true;¶	        	}¶	            takeIt();¶	            if(currentChar == '=') {¶	            	isEqual = false;¶	                takeIt();¶	                return TokenKind.BINOP;¶	            } ¶	            return isEqual? TokenKind.EQUAL:TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import java.io.IOException;
import java.io.InputStream;

import miniJava.ErrorReporter;
import miniJava.SyntacticAnalyzer.Token;
import miniJava.SyntacticAnalyzer.TokenKind;

public class Scanner {
	private boolean isComment;
	
//	comment state = 0 not comment
//			= 1 show /
//			= 2 show second /
//			= 12 show first *
//			= 13 show second *
//			= 3 show third /
//			= 4 show fourth / end of comment
//			= 14 show second / end of comment
	private int commentState;
	
	private InputStream inputStream;
	private ErrorReporter reporter;
	
	private char currentChar;
	private byte currentKind;
	private StringBuilder currentSpelling;
	
	// true when end of line is found
	private boolean eot = false; 
	
	public Scanner(InputStream inputStream, ErrorReporter reporter) {
		this.isComment = false;
		this.commentState = 0;
		this.inputStream = inputStream;
		this.reporter = reporter;

		// initialize scanner state
		readChar();
	}	
	
	/**
	 * skip whitespace and scan next token
	 */	
	
// ? SINGLE SLASH
//	comment state = 0 not comment
//	= 1 show /
//	= 2 show second /
//	= 12 show first *
//	= 13 show second *
//	= 14 show second / end of comment
	public void scanSeparator() {
		switch (commentState) {
			case 0:
				while (!eot && 
						(currentChar == ' ' ||
							currentChar == '\t' ||
								currentChar == '\n' ||
									currentChar == '\r')) {
					skipIt();
				}
				if (currentChar == '/') {
					commentState = 1;
					skipIt();
					scanSeparator();
				}
				break;
			
			case 1:
				if (currentChar == '/') {
					commentState = 2;
					isComment = true;
					skipIt();
					scanSeparator();
				} else if (currentChar == '*') {
					commentState = 12;
					isComment = true;
					skipIt();
					scanSeparator();
				} else {
					System.exit(4);
				}
				break;
			
			case 2:
				if (currentChar == '\r' || currentChar == '\n' || eot) {
					commentState = 0;
					isComment = false;
					scanSeparator();
				} else {
					skipIt();
					scanSeparator();		
				}
				break;
				
			case 12:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '*') {
					skipIt();
					scanSeparator();
				} else {
					commentState = 13;
					scanSeparator();
				}
				break;
			
			case 13:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '/') {
					skipIt();
					commentState = 12;
					scanSeparator();
				} else {
					commentState = 0;
					isComment = false;
					scanSeparator();
				}
				break;	
		}		
	}
	

	public Token scan() {
		// skip whitespace and comments
		scanSeparator();

		// start of a token: collect spelling and identify token kind
		currentSpelling = new StringBuilder();
		TokenKind kind = scanToken();
		String spelling = currentSpelling.toString();
		
		if (kind == TokenKind.ID) {
			switch (spelling) {
			case "class":
				kind = TokenKind.CLASS;
				break;
			case "public":
				kind = TokenKind.PUBLIC;
				break;
			case "private":
				kind = TokenKind.PRIVATE;
				break;
			case "static":
				kind = TokenKind.STATIC;
				break;
			case "int":
				kind = TokenKind.INT;
				break;
			case "boolean":
				kind = TokenKind.BOOLEAN;
				break;
			case "void":
				kind = TokenKind.VOID;
				break;
			case "this":
				kind = TokenKind.THIS;
				break;
			case "return":
				kind = TokenKind.RETURN;
				break;
			case "if":
				kind = TokenKind.IF;
				break;
			case "else":
				kind = TokenKind.ELSE;
				break;
			case "while":
				kind = TokenKind.WHILE;
				break;
			case "true":
				kind = TokenKind.TRUE;
				break;
			case "false":
				kind = TokenKind.FALSE;
				break;
			default:
				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};
				for (String s : ss) {
					if (spelling.toLowerCase().equals(s)) {
						reporter.reportError("Key word should not be used as identifiers.");
						System.exit(4);
					}
				}
				break;
			}
		}

		// return new token
		return new Token(kind, spelling);
	}

	
	/**
	 * determine token kind
	 */
	public TokenKind scanToken() {
		if (eot) {
			return TokenKind.EOT; 
		}
			
		switch (currentChar) {
			case 'a':  case 'b':  case 'c':  case 'd':
			case 'e':  case 'f':  case 'g':  case 'h':
			case 'i':  case 'j':  case 'k':  case 'l':
			case 'm':  case 'n':  case 'o':  case 'p':
			case 'q':  case 'r':  case 's':  case 't':
	        case 'u':  case 'v':  case 'w':  case 'x':
	        case 'y':  case 'z':
	        
	        case 'A':  case 'B':  case 'C':  case 'D':
	        case 'E':  case 'F':  case 'G':  case 'H':
	        case 'I':  case 'J':  case 'K':  case 'L':
	        case 'M':  case 'N':  case 'O':	 case 'P':
	        case 'Q':  case 'R':  case 'S':  case 'T':
	        case 'U':  case 'V':  case 'W':  case 'X':
	        case 'Y':  case 'Z':
	        	takeIt();
	        	while(Character.isLetter(currentChar) 
	        			|| Character.isDigit(currentChar)
	        				|| currentChar == '_') {
	        		takeIt();
	        	}
	        	return TokenKind.ID;
	        
	        case '0':  case '1':  case '2':  case '3':  case '4':
	        case '5':  case '6':  case '7':  case '8':  case '9':
	            takeIt();
	            while(Character.isDigit(currentChar)) {
	            	takeIt();
	            }
	            return TokenKind.NUM;
	        
	        case '>': case '<': case '=':
	        	boolean isEqual = false;
	        	if(currentChar == '=') {
//	        		System.out.println("In scanner " +  currentChar);
	        		isEqual = true;
	        	}
	            takeIt();
	            if(currentChar == '=') {
	            	isEqual = false;
	                takeIt();
	                return TokenKind.BINOP;
	            } 
	            return isEqual? TokenKind.EQUAL:TokenKind.BINOP;
	        
	        case '+': case '*': case '/':
	        	takeIt();
	        	return TokenKind.BINOP;
	        
	        case '&':
	            takeIt();
	            if(currentChar != '&') {
	                System.exit(4);
	            }
	            takeIt();
	            return TokenKind.BINOP;

	        case '|':
	            takeIt();
	            if(currentChar != '|')
	                System.exit(4);
	            takeIt();
	            return TokenKind.BINOP;
	        
	        case '!':
	            takeIt();
	            if(currentChar == '=') {
	                takeIt();
	                return TokenKind.BINOP;
	            }
	            return TokenKind.UNOP;
	            
	        case '-':
	            takeIt();
	            return TokenKind.MINUS;
	        
	        case '.':
	            takeIt();
	            return TokenKind.DOT;

	        case ',':
	            takeIt();
	            return TokenKind.COMMA;

	        case ';':
	            takeIt();
	            return TokenKind.SEMICOLON;

	        case '(':
	            takeIt();
	            return TokenKind.LPAREN;

	        case ')':
	            takeIt();
	            return TokenKind.RPAREN;

	        case '[':
	            takeIt();
	            return TokenKind.LBRACKET;

	        case ']':
	            takeIt();
	            return TokenKind.RBRACKET;

	        case '{':
	            takeIt();
	            return TokenKind.LCURLY;

	        case '}':
	            takeIt();
	            return TokenKind.RCURLY;
	        
	        default:
				scanError("Unrecognized character '" + currentChar + "' in input");
				return TokenKind.ERROR; 
		}
	}

	
	private void takeIt() {
		currentSpelling.append(currentChar);
		nextChar();
	}
	
	private void take(char expectedChar) {
		if (currentChar == expectedChar) {
			takeIt();
		}
	}

	private void skipIt() {
		nextChar();
	}


	private void scanError(String m) {
		reporter.reportError("Scan Error:  " + m);
	}


	private final static char eolUnix = '\n';
	private final static char eolWindows = '\r';

	/**
	 * advance to next char in inputstream
	 * detect end of file or end of line as end of input
	 */
	private void nextChar() {
		if (!eot)
			readChar();
	}

	private void readChar() {
		try {
			int c = inputStream.read();
			currentChar = (char) c;
			if (c == -1) {
				System.out.print("1" + (c == -1));
				System.out.print("2" + (currentChar == eolUnix ));
				System.out.print("3" + (currentChar == eolWindows));
				eot = true;
			}
		} catch (IOException e) {
			scanError("I/O Exception!");
			eot = true;
		}
	}
	


}
]]></snapshot>
  </Command>
  <Command __id="8530" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:49:51 EST 2022" docASTNodeCount="165" docActiveCodeLength="791" docExpressionCount="97" docLength="791" projectName="pa1" starttimestamp="1645820509543" timestamp="188882243">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors(kk[] b, int[] c) {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			{¶				int i = 1;¶				boolean j = 2;¶				bo jdsaf2 = afdaf;¶				this = 1;¶				this.adsfaew.dafawe.d = adf123;¶				sdfawe.dsfaewf.safew[sdafaewfa.sdafaew.sdafaew.asd] = dsfs2;¶				this = this;¶				return;¶				return asdfawef;¶				if (adf) { dsafae = 12;}¶				else adfaewf =dsfaef;¶				while (asdfaew = dafawe) sdafaew = dsaf; ¶				a = -1;¶				a = !true;¶				a = false;¶				a = new dafef();¶			}¶			¶			System.out.println(message,dfaewf,asdfa,ef,aew);¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="8531" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:49:51 EST 2022" docASTNodeCount="165" docActiveCodeLength="791" docExpressionCount="97" docLength="791" projectName="pa1" starttimestamp="1645820509543" timestamp="188882258">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors(kk[] b, int[] c) {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			{¶				int i = 1;¶				boolean j = 2;¶				bo jdsaf2 = afdaf;¶				this = 1;¶				this.adsfaew.dafawe.d = adf123;¶				sdfawe.dsfaewf.safew[sdafaewfa.sdafaew.sdafaew.asd] = dsfs2;¶				this = this;¶				return;¶				return asdfawef;¶				if (adf) { dsafae = 12;}¶				else adfaewf =dsfaef;¶				while (asdfaew = dafawe) sdafaew = dsaf; ¶				a = -1;¶				a = !true;¶				a = false;¶				a = new dafef();¶			}¶			¶			System.out.println(message,dfaewf,asdfa,ef,aew);¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="8533" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:49:52 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="188882759">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="8547" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:50:17 EST 2022" docASTNodeCount="1619" docActiveCodeLength="12007" docExpressionCount="1136" docLength="13432" projectName="pa1" starttimestamp="1645820509543" timestamp="188908080">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶//		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			System.out.println("------------starting declaration-----------");¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				// Method Declaration¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						System.out.println("IN VOID METHOD DECLARATION");¶						parseStatement();¶						System.out.println("OUT VOID METHOD DECLARATION");¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				// both possible¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶							// Field Declaration¶							case SEMICOLON:¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							// Method Declaration¶							case LPAREN:¶								acceptIt();¶								if (startsType(currentToken.kind)) {¶									parseParameterList();¶								}¶								accept(TokenKind.RPAREN);¶								accept(TokenKind.LCURLY);¶								¶								while (startsStatement(currentToken.kind)) {¶									System.out.println("IN METHOD DECLARATION");¶									parseStatement();¶									System.out.println("OUT METHOD DECLARATION");¶								}¶								accept(TokenKind.RCURLY);¶								break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations, no types declared.");¶					}¶					break;¶					¶			}¶			System.out.println("------------ending declaration-----------");¶		}¶		System.out.println("out here end of program: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶			case LCURLY:¶				acceptIt();¶				while (startsStatement(currentToken.kind)) {¶					parseStatement();¶				}¶	//			System.out.println("in here: " + currentToken);¶				accept(TokenKind.RCURLY);¶				break;¶				¶			case INT: case BOOLEAN:¶				parseType();¶				parseId();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case ID:			¶//				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				acceptIt();¶//				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				switch (currentToken.kind) {¶					// in Type¶					case ID:¶						acceptIt();¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// in Reference¶					case EQUAL:¶		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						acceptIt();¶		//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// both¶					case LBRACKET: ¶						acceptIt();¶						// in Type¶						if (currentToken.kind == TokenKind.RBRACKET) {¶							acceptIt();¶							accept(TokenKind.ID);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						} else {¶							// in Reference¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						}¶						break;¶					¶					case DOT:¶						while (currentToken.kind == TokenKind.DOT) {¶							acceptIt();¶							accept(TokenKind.ID);¶						}¶						switch (currentToken.kind) {¶							case EQUAL:¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LBRACKET: ¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.RBRACKET);¶								accept(TokenKind.EQUAL);¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LPAREN:¶								acceptIt();¶								if (currentToken.kind == TokenKind.RPAREN) {¶									acceptIt();¶								} else {¶									parseArgumentList();¶									accept(TokenKind.RPAREN);¶								}¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							default:¶								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶						}¶						break;¶					default:¶						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶						break;¶				}¶				break;¶			¶			case THIS:¶				acceptIt();¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶				case EQUAL:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶				¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶					¶				case LPAREN:¶					acceptIt();¶					if (currentToken.kind == TokenKind.RPAREN) {¶						acceptIt();¶						accept(TokenKind.SEMICOLON);¶					} else {¶						parseArgumentList();¶						accept(TokenKind.RPAREN);¶						accept(TokenKind.SEMICOLON);¶					}¶					break;¶				¶				default:¶					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶				}¶				break;¶				¶			case RETURN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.SEMICOLON) {¶					acceptIt();¶				} else {¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case IF:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				if (currentToken.kind == TokenKind.ELSE) {¶					acceptIt();¶					parseStatement();¶				}¶				break;¶				¶			case WHILE:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				break;¶			¶			default:¶				parseError("parsing statement, current token is:" + currentToken);¶				break;¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶	¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶			// starts with reference¶			case ID: case THIS:¶				acceptIt();¶				// dealing with (.id)*¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					// reference[expression]¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					// reference(arglist?)¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						break;¶						¶					// just reference¶					default:¶						break;¶//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶				¶			case UNOP: case MINUS:¶				acceptIt();¶				parseExpression();¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				break;¶			¶			case NUM: case TRUE: case FALSE:¶				acceptIt();¶				break;¶			¶			case NEW:¶				acceptIt();¶				"), Diff(INSERT,"System.out.println("in hereeee");¶				"), Diff(EQUAL,"switch (currentToken.kind) {¶				"), Diff(INSERT,"	"), Diff(EQUAL,"case ID:¶					"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶					"), Diff(INSERT,"	"), Diff(EQUAL,"switch (currentToken.kind) {¶					"), Diff(INSERT,"	"), Diff(EQUAL,"case LPAREN:¶						"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶						"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RPAREN);¶						"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶					"), Diff(INSERT,"	"), Diff(EQUAL,"case LBRACKET:¶						"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶						"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶						"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RBRACKET);¶						"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶					"), Diff(DELETE,"¶					}¶"), Diff(INSERT,"	default:¶							parseError("parsing expression, nothing after new.");¶						¶						}¶						break;¶	"), Diff(EQUAL,"				¶				"), Diff(INSERT,"	"), Diff(EQUAL,"case INT:¶					"), Diff(INSERT,"	"), Diff(EQUAL,"acceptIt();¶					"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.LBRACKET);¶					"), Diff(INSERT,"	"), Diff(EQUAL,"parseExpression();¶					"), Diff(INSERT,"	"), Diff(EQUAL,"accept(TokenKind.RBRACKET);¶					"), Diff(INSERT,"	"), Diff(EQUAL,"break;¶				"), Diff(INSERT,"	"), Diff(EQUAL,"¶				"), Diff(INSERT,"	"), Diff(EQUAL,"default:¶					"), Diff(INSERT,"	"), Diff(EQUAL,"parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶			¶			default:¶				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				break;¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
//		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			System.out.println("------------starting declaration-----------");
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				// Method Declaration
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						System.out.println("IN VOID METHOD DECLARATION");
						parseStatement();
						System.out.println("OUT VOID METHOD DECLARATION");
					}
					accept(TokenKind.RCURLY);
					break;
					
				// both possible
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
							// Field Declaration
							case SEMICOLON:
								accept(TokenKind.SEMICOLON);
								break;
							
							// Method Declaration
							case LPAREN:
								acceptIt();
								if (startsType(currentToken.kind)) {
									parseParameterList();
								}
								accept(TokenKind.RPAREN);
								accept(TokenKind.LCURLY);
								
								while (startsStatement(currentToken.kind)) {
									System.out.println("IN METHOD DECLARATION");
									parseStatement();
									System.out.println("OUT METHOD DECLARATION");
								}
								accept(TokenKind.RCURLY);
								break;
						}
					}
					else {
						parseError("Parsing wrong in declarations, no types declared.");
					}
					break;
					
			}
			System.out.println("------------ending declaration-----------");
		}
		System.out.println("out here end of program: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
			case LCURLY:
				acceptIt();
				while (startsStatement(currentToken.kind)) {
					parseStatement();
				}
	//			System.out.println("in here: " + currentToken);
				accept(TokenKind.RCURLY);
				break;
				
			case INT: case BOOLEAN:
				parseType();
				parseId();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case ID:			
//				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");
				acceptIt();
//				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");
				switch (currentToken.kind) {
					// in Type
					case ID:
						acceptIt();
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					// in Reference
					case EQUAL:
		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");
						acceptIt();
		//				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					// both
					case LBRACKET: 
						acceptIt();
						// in Type
						if (currentToken.kind == TokenKind.RBRACKET) {
							acceptIt();
							accept(TokenKind.ID);
							accept(TokenKind.EQUAL);
							parseExpression();
							accept(TokenKind.SEMICOLON);
						} else {
							// in Reference
							parseExpression();
							accept(TokenKind.RBRACKET);
							accept(TokenKind.EQUAL);
							parseExpression();
							accept(TokenKind.SEMICOLON);
						}
						break;
					
					case DOT:
						while (currentToken.kind == TokenKind.DOT) {
							acceptIt();
							accept(TokenKind.ID);
						}
						switch (currentToken.kind) {
							case EQUAL:
								acceptIt();
								parseExpression();
								accept(TokenKind.SEMICOLON);
								break;
							
							case LBRACKET: 
								acceptIt();
								parseExpression();
								accept(TokenKind.RBRACKET);
								accept(TokenKind.EQUAL);
								parseExpression();
								accept(TokenKind.SEMICOLON);
								break;
							
							case LPAREN:
								acceptIt();
								if (currentToken.kind == TokenKind.RPAREN) {
									acceptIt();
								} else {
									parseArgumentList();
									accept(TokenKind.RPAREN);
								}
								accept(TokenKind.SEMICOLON);
								break;
							
							default:
								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
						}
						break;
					default:
						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
						break;
				}
				break;
			
			case THIS:
				acceptIt();
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
				case EQUAL:
					acceptIt();
					parseExpression();
					accept(TokenKind.SEMICOLON);
					break;
				
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
					break;
					
				case LPAREN:
					acceptIt();
					if (currentToken.kind == TokenKind.RPAREN) {
						acceptIt();
						accept(TokenKind.SEMICOLON);
					} else {
						parseArgumentList();
						accept(TokenKind.RPAREN);
						accept(TokenKind.SEMICOLON);
					}
					break;
				
				default:
					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
				}
				break;
				
			case RETURN:
				acceptIt();
				if (currentToken.kind == TokenKind.SEMICOLON) {
					acceptIt();
				} else {
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case IF:
				acceptIt();
				accept(TokenKind.LPAREN);
				parseExpression();
				accept(TokenKind.RPAREN);
				parseStatement();
				if (currentToken.kind == TokenKind.ELSE) {
					acceptIt();
					parseStatement();
				}
				break;
				
			case WHILE:
				acceptIt();
				accept(TokenKind.LPAREN);
				parseExpression();
				accept(TokenKind.RPAREN);
				parseStatement();
				break;
			
			default:
				parseError("parsing statement, current token is:" + currentToken);
				break;
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}

	
	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
			// starts with reference
			case ID: case THIS:
				acceptIt();
				// dealing with (.id)*
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					// reference[expression]
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					// reference(arglist?)
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						break;
						
					// just reference
					default:
						break;
//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
				
			case UNOP: case MINUS:
				acceptIt();
				parseExpression();
				break;
			
			case LPAREN:
				acceptIt();
				parseExpression();
				accept(TokenKind.RPAREN);
				break;
			
			case NUM: case TRUE: case FALSE:
				acceptIt();
				break;
			
			case NEW:
				acceptIt();
				System.out.println("in hereeee");
				switch (currentToken.kind) {
					case ID:
						acceptIt();
						switch (currentToken.kind) {
						case LPAREN:
							acceptIt();
							accept(TokenKind.RPAREN);
							break;
						case LBRACKET:
							acceptIt();
							parseExpression();
							accept(TokenKind.RBRACKET);
							break;
						default:
							parseError("parsing expression, nothing after new.");
						
						}
						break;
					
					case INT:
						acceptIt();
						accept(TokenKind.LBRACKET);
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					default:
						parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
			
			default:
				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				break;
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="8593" _type="MoveCaretCommand" caretOffset="6248" date="Sun Feb 27 19:52:15 EST 2022" docOffset="6326" starttimestamp="1645820509543" timestamp="189025851" />
  <Command __id="8594" _type="MoveCaretCommand" caretOffset="6248" date="Sun Feb 27 19:52:15 EST 2022" docOffset="6326" starttimestamp="1645820509543" timestamp="189025851" />
  <Command __id="8595" _type="MoveCaretCommand" caretOffset="6223" date="Sun Feb 27 19:52:16 EST 2022" docOffset="6301" starttimestamp="1645820509543" timestamp="189026724" />
  <Command __id="8596" _type="MoveCaretCommand" caretOffset="6223" date="Sun Feb 27 19:52:16 EST 2022" docOffset="6301" starttimestamp="1645820509543" timestamp="189026724" />
  <DocumentChange __id="8597" _type="Insert" date="Sun Feb 27 19:52:19 EST 2022" docASTNodeCount="1619" docActiveCodeLength="12014" docExpressionCount="1136" docLength="13439" length="7" offset="6301" starttimestamp="1645820509543" timestamp="189029794">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <Command __id="8598" _type="InsertStringCommand" date="Sun Feb 27 19:52:19 EST 2022" starttimestamp="1645820509543" timestamp="189029807" timestamp2="189029807">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8599" _type="InsertStringCommand" date="Sun Feb 27 19:52:19 EST 2022" starttimestamp="1645820509543" timestamp="189029807" timestamp2="189029807">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8600" _type="Insert" date="Sun Feb 27 19:52:19 EST 2022" docASTNodeCount="1619" docActiveCodeLength="12015" docExpressionCount="1136" docLength="13440" length="1" offset="6308" starttimestamp="1645820509543" timestamp="189030338">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="8601" _type="InsertStringCommand" date="Sun Feb 27 19:52:19 EST 2022" starttimestamp="1645820509543" timestamp="189030345" timestamp2="189030345">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="8602" _type="InsertStringCommand" date="Sun Feb 27 19:52:19 EST 2022" starttimestamp="1645820509543" timestamp="189030345" timestamp2="189030345">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="8603" _type="Insert" date="Sun Feb 27 19:52:20 EST 2022" docASTNodeCount="1619" docActiveCodeLength="12014" docExpressionCount="1136" docLength="13441" length="1" offset="6309" starttimestamp="1645820509543" timestamp="189030481">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="8604" _type="InsertStringCommand" date="Sun Feb 27 19:52:20 EST 2022" starttimestamp="1645820509543" timestamp="189030491" timestamp2="189030491">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="8605" _type="InsertStringCommand" date="Sun Feb 27 19:52:20 EST 2022" starttimestamp="1645820509543" timestamp="189030491" timestamp2="189030491">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="8606" _type="Delete" date="Sun Feb 27 19:52:20 EST 2022" docASTNodeCount="1619" docActiveCodeLength="12015" docExpressionCount="1136" docLength="13440" endLine="240" length="1" offset="6309" startLine="240" starttimestamp="1645820509543" timestamp="189031079">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="8607" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:52:20 EST 2022" starttimestamp="1645820509543" timestamp="189031085" />
  <Command __id="8608" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:52:20 EST 2022" starttimestamp="1645820509543" timestamp="189031085" />
  <DocumentChange __id="8609" _type="Delete" date="Sun Feb 27 19:52:20 EST 2022" docASTNodeCount="1619" docActiveCodeLength="12014" docExpressionCount="1136" docLength="13439" endLine="240" length="1" offset="6308" startLine="240" starttimestamp="1645820509543" timestamp="189031207">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="8610" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:52:20 EST 2022" starttimestamp="1645820509543" timestamp="189031209" />
  <Command __id="8611" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:52:20 EST 2022" starttimestamp="1645820509543" timestamp="189031209" />
  <DocumentChange __id="8612" _type="Insert" date="Sun Feb 27 19:52:21 EST 2022" docASTNodeCount="1621" docActiveCodeLength="12015" docExpressionCount="1137" docLength="13440" length="1" offset="6308" starttimestamp="1645820509543" timestamp="189032064">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="8613" _type="InsertStringCommand" date="Sun Feb 27 19:52:21 EST 2022" starttimestamp="1645820509543" timestamp="189032069" timestamp2="189032069">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8614" _type="InsertStringCommand" date="Sun Feb 27 19:52:21 EST 2022" starttimestamp="1645820509543" timestamp="189032069" timestamp2="189032069">
    <data><![CDATA[S]]></data>
  </Command>
  <DocumentChange __id="8615" _type="Insert" date="Sun Feb 27 19:52:21 EST 2022" docASTNodeCount="1621" docActiveCodeLength="12016" docExpressionCount="1137" docLength="13441" length="1" offset="6309" starttimestamp="1645820509543" timestamp="189032407">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="8616" _type="InsertStringCommand" date="Sun Feb 27 19:52:21 EST 2022" starttimestamp="1645820509543" timestamp="189032413" timestamp2="189032413">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="8617" _type="InsertStringCommand" date="Sun Feb 27 19:52:21 EST 2022" starttimestamp="1645820509543" timestamp="189032413" timestamp2="189032413">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="8618" _type="Delete" date="Sun Feb 27 19:52:22 EST 2022" docASTNodeCount="1621" docActiveCodeLength="12015" docExpressionCount="1137" docLength="13440" endLine="240" length="1" offset="6309" startLine="240" starttimestamp="1645820509543" timestamp="189033351">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="8619" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:52:22 EST 2022" starttimestamp="1645820509543" timestamp="189033356" />
  <Command __id="8620" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:52:22 EST 2022" starttimestamp="1645820509543" timestamp="189033356" />
  <DocumentChange __id="8621" _type="Insert" date="Sun Feb 27 19:52:22 EST 2022" docASTNodeCount="1621" docActiveCodeLength="12016" docExpressionCount="1137" docLength="13441" length="1" offset="6309" starttimestamp="1645820509543" timestamp="189033423">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="8622" _type="InsertStringCommand" date="Sun Feb 27 19:52:22 EST 2022" starttimestamp="1645820509543" timestamp="189033428" timestamp2="189033428">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8623" _type="InsertStringCommand" date="Sun Feb 27 19:52:22 EST 2022" starttimestamp="1645820509543" timestamp="189033428" timestamp2="189033428">
    <data><![CDATA[S]]></data>
  </Command>
  <DocumentChange __id="8624" _type="Delete" date="Sun Feb 27 19:52:23 EST 2022" docASTNodeCount="1621" docActiveCodeLength="12015" docExpressionCount="1137" docLength="13440" endLine="240" length="1" offset="6309" startLine="240" starttimestamp="1645820509543" timestamp="189033848">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <Command __id="8625" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:52:23 EST 2022" starttimestamp="1645820509543" timestamp="189033851" />
  <Command __id="8626" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:52:23 EST 2022" starttimestamp="1645820509543" timestamp="189033851" />
  <DocumentChange __id="8627" _type="Insert" date="Sun Feb 27 19:52:23 EST 2022" docASTNodeCount="1621" docActiveCodeLength="12016" docExpressionCount="1137" docLength="13441" length="1" offset="6309" starttimestamp="1645820509543" timestamp="189034343">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="8628" _type="InsertStringCommand" date="Sun Feb 27 19:52:23 EST 2022" starttimestamp="1645820509543" timestamp="189034350" timestamp2="189034350">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="8629" _type="InsertStringCommand" date="Sun Feb 27 19:52:23 EST 2022" starttimestamp="1645820509543" timestamp="189034350" timestamp2="189034350">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="8630" _type="Insert" date="Sun Feb 27 19:52:24 EST 2022" docASTNodeCount="1621" docActiveCodeLength="12017" docExpressionCount="1137" docLength="13442" length="1" offset="6310" starttimestamp="1645820509543" timestamp="189034464">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="8631" _type="InsertStringCommand" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189034469" timestamp2="189034469">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8632" _type="InsertStringCommand" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189034469" timestamp2="189034469">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="8633" _type="Insert" date="Sun Feb 27 19:52:24 EST 2022" docASTNodeCount="1621" docActiveCodeLength="12018" docExpressionCount="1137" docLength="13443" length="1" offset="6311" starttimestamp="1645820509543" timestamp="189034480">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="8634" _type="InsertStringCommand" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189034487" timestamp2="189034487">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="8635" _type="InsertStringCommand" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189034487" timestamp2="189034487">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="8636" _type="Insert" date="Sun Feb 27 19:52:24 EST 2022" docASTNodeCount="1621" docActiveCodeLength="12019" docExpressionCount="1137" docLength="13444" length="1" offset="6312" starttimestamp="1645820509543" timestamp="189034776">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="8637" _type="InsertStringCommand" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189034781" timestamp2="189034781">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8638" _type="InsertStringCommand" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189034781" timestamp2="189034781">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="8639" _type="Delete" date="Sun Feb 27 19:52:24 EST 2022" docASTNodeCount="1621" docActiveCodeLength="12018" docExpressionCount="1137" docLength="13443" endLine="240" length="1" offset="6312" startLine="240" starttimestamp="1645820509543" timestamp="189035039">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="8640" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189035042" />
  <Command __id="8641" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189035042" />
  <DocumentChange __id="8642" _type="Delete" date="Sun Feb 27 19:52:24 EST 2022" docASTNodeCount="1621" docActiveCodeLength="12017" docExpressionCount="1137" docLength="13442" endLine="240" length="1" offset="6311" startLine="240" starttimestamp="1645820509543" timestamp="189035176">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="8643" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189035178" />
  <Command __id="8644" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189035178" />
  <DocumentChange __id="8645" _type="Insert" date="Sun Feb 27 19:52:24 EST 2022" docASTNodeCount="1621" docActiveCodeLength="12018" docExpressionCount="1137" docLength="13443" length="1" offset="6311" starttimestamp="1645820509543" timestamp="189035216">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="8646" _type="InsertStringCommand" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189035220" timestamp2="189035220">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8647" _type="InsertStringCommand" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189035220" timestamp2="189035220">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="8648" _type="Insert" date="Sun Feb 27 19:52:24 EST 2022" docASTNodeCount="1621" docActiveCodeLength="12019" docExpressionCount="1137" docLength="13444" length="1" offset="6312" starttimestamp="1645820509543" timestamp="189035303">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="8649" _type="InsertStringCommand" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189035309" timestamp2="189035309">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8650" _type="InsertStringCommand" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189035309" timestamp2="189035309">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="8651" _type="Insert" date="Sun Feb 27 19:52:24 EST 2022" docASTNodeCount="1621" docActiveCodeLength="12020" docExpressionCount="1137" docLength="13445" length="1" offset="6313" starttimestamp="1645820509543" timestamp="189035407">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="8652" _type="InsertStringCommand" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189035411" timestamp2="189035411">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="8653" _type="InsertStringCommand" date="Sun Feb 27 19:52:24 EST 2022" starttimestamp="1645820509543" timestamp="189035412" timestamp2="189035412">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="8654" _type="Insert" date="Sun Feb 27 19:52:25 EST 2022" docASTNodeCount="1620" docActiveCodeLength="12021" docExpressionCount="1137" docLength="13446" length="1" offset="6314" starttimestamp="1645820509543" timestamp="189035631">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="8655" _type="InsertStringCommand" date="Sun Feb 27 19:52:25 EST 2022" starttimestamp="1645820509543" timestamp="189035637" timestamp2="189035637">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8656" _type="InsertStringCommand" date="Sun Feb 27 19:52:25 EST 2022" starttimestamp="1645820509543" timestamp="189035637" timestamp2="189035637">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8657" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 19:52:25 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="189035640" />
  <DocumentChange __id="8658" _type="Insert" date="Sun Feb 27 19:52:25 EST 2022" docASTNodeCount="1623" docActiveCodeLength="12022" docExpressionCount="1139" docLength="13447" length="1" offset="6315" starttimestamp="1645820509543" timestamp="189035896">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="8659" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 19:52:25 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="189036180" />
  <DocumentChange __id="8660" _type="Replace" date="Sun Feb 27 19:52:25 EST 2022" docASTNodeCount="1623" docActiveCodeLength="12024" docExpressionCount="1139" docLength="13449" endLine="240" insertionLength="3" int_docASTNodeCount="1620" int_docActiveCodeLength="12021" int_docExpressionCount="1137" int_docLength="13446" length="1" offset="6315" startLine="240" starttimestamp="1645820509543" timestamp="189036187">
    <deletedText><![CDATA[o]]></deletedText>
    <insertedText><![CDATA[out]]></insertedText>
  </DocumentChange>
  <Command __id="8661" _type="InsertStringCommand" date="Sun Feb 27 19:52:25 EST 2022" starttimestamp="1645820509543" timestamp="189036195" timestamp2="189036195">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8662" _type="InsertStringCommand" date="Sun Feb 27 19:52:25 EST 2022" starttimestamp="1645820509543" timestamp="189036195" timestamp2="189036195">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8663" _type="Insert" date="Sun Feb 27 19:52:26 EST 2022" docASTNodeCount="1622" docActiveCodeLength="12025" docExpressionCount="1139" docLength="13450" length="1" offset="6318" starttimestamp="1645820509543" timestamp="189036470">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="8667" _type="Insert" date="Sun Feb 27 19:52:26 EST 2022" docASTNodeCount="1625" docActiveCodeLength="12026" docExpressionCount="1141" docLength="13451" length="1" offset="6319" starttimestamp="1645820509543" timestamp="189036760">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="8668" _type="Insert" date="Sun Feb 27 19:52:26 EST 2022" docASTNodeCount="1625" docActiveCodeLength="12027" docExpressionCount="1141" docLength="13452" length="1" offset="6320" starttimestamp="1645820509543" timestamp="189036871">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="8669" _type="Insert" date="Sun Feb 27 19:52:26 EST 2022" docASTNodeCount="1625" docActiveCodeLength="12028" docExpressionCount="1141" docLength="13453" length="1" offset="6321" starttimestamp="1645820509543" timestamp="189036952">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="8670" _type="Insert" date="Sun Feb 27 19:52:26 EST 2022" docASTNodeCount="1625" docActiveCodeLength="12029" docExpressionCount="1141" docLength="13454" length="1" offset="6322" starttimestamp="1645820509543" timestamp="189037047">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="8671" _type="Insert" date="Sun Feb 27 19:52:26 EST 2022" docASTNodeCount="1625" docActiveCodeLength="12030" docExpressionCount="1141" docLength="13455" length="1" offset="6323" starttimestamp="1645820509543" timestamp="189037152">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="8672" _type="Insert" date="Sun Feb 27 19:52:26 EST 2022" docASTNodeCount="1625" docActiveCodeLength="12031" docExpressionCount="1141" docLength="13456" length="1" offset="6324" starttimestamp="1645820509543" timestamp="189037239">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="8673" _type="Insert" date="Sun Feb 27 19:52:26 EST 2022" docASTNodeCount="1625" docActiveCodeLength="12032" docExpressionCount="1141" docLength="13457" length="1" offset="6325" starttimestamp="1645820509543" timestamp="189037399">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="8674" _type="Insert" date="Sun Feb 27 19:52:27 EST 2022" docASTNodeCount="1625" docActiveCodeLength="12034" docExpressionCount="1141" docLength="13459" length="2" offset="6326" starttimestamp="1645820509543" timestamp="189037863">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="8664" _type="InsertStringCommand" date="Sun Feb 27 19:52:26 EST 2022" starttimestamp="1645820509543" timestamp="189036486" timestamp2="189036486">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8665" _type="InsertStringCommand" date="Sun Feb 27 19:52:26 EST 2022" starttimestamp="1645820509543" timestamp="189036486" timestamp2="189036486">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8666" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 19:52:26 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="189036490" />
  <Command __id="8676" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 19:52:28 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="189039186" />
  <Command __id="8677" _type="InsertStringCommand" date="Sun Feb 27 19:52:28 EST 2022" starttimestamp="1645820509543" timestamp="189039248" timestamp2="189039248">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="8678" _type="InsertStringCommand" date="Sun Feb 27 19:52:28 EST 2022" starttimestamp="1645820509543" timestamp="189039248" timestamp2="189039248">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="8679" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 19:52:29 EST 2022" starttimestamp="1645820509543" timestamp="189039511" />
  <Command __id="8680" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 19:52:29 EST 2022" starttimestamp="1645820509543" timestamp="189039511" />
  <Command __id="8682" _type="InsertStringCommand" date="Sun Feb 27 19:52:29 EST 2022" starttimestamp="1645820509543" timestamp="189040013" timestamp2="189040013">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="8683" _type="InsertStringCommand" date="Sun Feb 27 19:52:29 EST 2022" starttimestamp="1645820509543" timestamp="189040013" timestamp2="189040013">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="8685" _type="InsertStringCommand" date="Sun Feb 27 19:52:29 EST 2022" starttimestamp="1645820509543" timestamp="189040214" timestamp2="189040214">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8686" _type="InsertStringCommand" date="Sun Feb 27 19:52:29 EST 2022" starttimestamp="1645820509543" timestamp="189040214" timestamp2="189040214">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8688" _type="InsertStringCommand" date="Sun Feb 27 19:52:29 EST 2022" starttimestamp="1645820509543" timestamp="189040366" timestamp2="189040366">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="8689" _type="InsertStringCommand" date="Sun Feb 27 19:52:29 EST 2022" starttimestamp="1645820509543" timestamp="189040366" timestamp2="189040366">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="8691" _type="InsertStringCommand" date="Sun Feb 27 19:52:30 EST 2022" starttimestamp="1645820509543" timestamp="189040612" timestamp2="189040612">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="8692" _type="InsertStringCommand" date="Sun Feb 27 19:52:30 EST 2022" starttimestamp="1645820509543" timestamp="189040612" timestamp2="189040612">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="8694" _type="InsertStringCommand" date="Sun Feb 27 19:52:30 EST 2022" starttimestamp="1645820509543" timestamp="189040717" timestamp2="189040717">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8695" _type="InsertStringCommand" date="Sun Feb 27 19:52:30 EST 2022" starttimestamp="1645820509543" timestamp="189040718" timestamp2="189040718">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8697" _type="InsertStringCommand" date="Sun Feb 27 19:52:30 EST 2022" starttimestamp="1645820509543" timestamp="189040819" timestamp2="189040819">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8698" _type="InsertStringCommand" date="Sun Feb 27 19:52:30 EST 2022" starttimestamp="1645820509543" timestamp="189040820" timestamp2="189040820">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8699" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:52:30 EST 2022" starttimestamp="1645820509543" timestamp="189041438" />
  <Command __id="8700" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:52:30 EST 2022" starttimestamp="1645820509543" timestamp="189041438" />
  <Command __id="8701" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:52:31 EST 2022" starttimestamp="1645820509543" timestamp="189041621" />
  <Command __id="8702" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:52:31 EST 2022" starttimestamp="1645820509543" timestamp="189041621" />
  <Command __id="8704" _type="InsertStringCommand" date="Sun Feb 27 19:52:31 EST 2022" starttimestamp="1645820509543" timestamp="189042406" timestamp2="189042406">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="8705" _type="InsertStringCommand" date="Sun Feb 27 19:52:31 EST 2022" starttimestamp="1645820509543" timestamp="189042408" timestamp2="189042408">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="8706" _type="MoveCaretCommand" caretOffset="6259" date="Sun Feb 27 19:52:34 EST 2022" docOffset="6337" starttimestamp="1645820509543" timestamp="189044499" />
  <Command __id="8707" _type="MoveCaretCommand" caretOffset="6259" date="Sun Feb 27 19:52:34 EST 2022" docOffset="6337" starttimestamp="1645820509543" timestamp="189044499" />
  <Command __id="8708" _type="SelectTextCommand" caretOffset="6281" date="Sun Feb 27 19:52:34 EST 2022" end="6281" start="6259" starttimestamp="1645820509543" timestamp="189044652" />
  <Command __id="8709" _type="SelectTextCommand" caretOffset="6281" date="Sun Feb 27 19:52:34 EST 2022" end="6281" start="6259" starttimestamp="1645820509543" timestamp="189044652" />
  <Command __id="8710" _type="SelectTextCommand" caretOffset="6261" date="Sun Feb 27 19:52:34 EST 2022" end="6261" start="6225" starttimestamp="1645820509543" timestamp="189045052" />
  <Command __id="8711" _type="SelectTextCommand" caretOffset="6261" date="Sun Feb 27 19:52:34 EST 2022" end="6261" start="6225" starttimestamp="1645820509543" timestamp="189045052" />
  <Command __id="8712" _type="MoveCaretCommand" caretOffset="6259" date="Sun Feb 27 19:52:35 EST 2022" docOffset="6337" starttimestamp="1645820509543" timestamp="189045515" />
  <Command __id="8713" _type="MoveCaretCommand" caretOffset="6259" date="Sun Feb 27 19:52:35 EST 2022" docOffset="6337" starttimestamp="1645820509543" timestamp="189045515" />
  <Command __id="8714" _type="SelectTextCommand" caretOffset="6230" date="Sun Feb 27 19:52:36 EST 2022" end="6259" start="6230" starttimestamp="1645820509543" timestamp="189046868" />
  <Command __id="8715" _type="SelectTextCommand" caretOffset="6230" date="Sun Feb 27 19:52:36 EST 2022" end="6259" start="6230" starttimestamp="1645820509543" timestamp="189046868" />
  <Command __id="8716" _type="CopyCommand" date="Sun Feb 27 19:52:36 EST 2022" starttimestamp="1645820509543" timestamp="189047292" />
  <Command __id="8717" _type="MoveCaretCommand" caretOffset="6284" date="Sun Feb 27 19:52:37 EST 2022" docOffset="6362" starttimestamp="1645820509543" timestamp="189047996" />
  <Command __id="8718" _type="MoveCaretCommand" caretOffset="6284" date="Sun Feb 27 19:52:37 EST 2022" docOffset="6362" starttimestamp="1645820509543" timestamp="189047996" />
  <Command __id="8720" _type="InsertStringCommand" date="Sun Feb 27 19:52:38 EST 2022" starttimestamp="1645820509543" timestamp="189048587" timestamp2="189048587">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8721" _type="InsertStringCommand" date="Sun Feb 27 19:52:38 EST 2022" starttimestamp="1645820509543" timestamp="189048587" timestamp2="189048587">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8723" _type="PasteCommand" date="Sun Feb 27 19:52:38 EST 2022" starttimestamp="1645820509543" timestamp="189048729" />
  <Command __id="8746" _type="RunCommand" date="Sun Feb 27 19:52:42 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189052834" type="Run" />
  <Command __id="8747" _type="RunCommand" date="Sun Feb 27 19:52:42 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189052835" type="Run" />
  <Command __id="8748" _type="RunCommand" date="Sun Feb 27 19:52:42 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189053084" type="Run" />
  <Command __id="8749" _type="RunCommand" date="Sun Feb 27 19:52:42 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189053084" type="Run" />
  <Command __id="8750" _type="EHExceptionCommand" date="Sun Feb 27 19:52:42 EST 2022" starttimestamp="1645820509543" timestamp="189053114" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
------------starting declaration-----------
int
numErrors
;
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
gg
;
------------ending declaration-----------
------------starting declaration-----------
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
IN VOID METHOD DECLARATION
numErrors
=
0
;
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
try
=
!
(
a
==
a
)
;
OUT VOID METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
hasErrors
(
kk
[
]
b
,
int
[
]
c
)
{
IN METHOD DECLARATION
return
numErrors
>
0
;
OUT METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
void
reportError
(
String
message
)
{
IN VOID METHOD DECLARATION
{
int
i
=
1
;
boolean
j
=
2
;
bo
jdsaf2
=
afdaf
;
this
=
before
1
after
;
this
.
adsfaew
.
dafawe
.
d
=
before
adf123
after
;
sdfawe
.
dsfaewf
.
safew
[
sdafaewfa
.
sdafaew
.
sdafaew
.
asd
]
=
dsfs2
;
this
=
before
this
after
;
return
;
return
asdfawef
;
if
(
adf
)
{
dsafae
=
12
;
}
else
adfaewf
=
dsfaef
;
while
(
asdfaew
=
dafawe
)
sdafaew
=
dsaf
;
a
=
-
1
;
a
=
!
true
;
a
=
false
;
a
=
new
Parse error: Parsing dafef and expecting 'SEMICOLON' but found 'ID'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="8751" _type="MoveCaretCommand" caretOffset="6319" date="Sun Feb 27 19:53:17 EST 2022" docOffset="6397" starttimestamp="1645820509543" timestamp="189087891" />
  <Command __id="8752" _type="MoveCaretCommand" caretOffset="6319" date="Sun Feb 27 19:53:17 EST 2022" docOffset="6397" starttimestamp="1645820509543" timestamp="189087891" />
  <Command __id="8753" _type="MoveCaretCommand" caretOffset="6354" date="Sun Feb 27 19:53:17 EST 2022" docOffset="6432" starttimestamp="1645820509543" timestamp="189088340" />
  <Command __id="8754" _type="MoveCaretCommand" caretOffset="6354" date="Sun Feb 27 19:53:17 EST 2022" docOffset="6432" starttimestamp="1645820509543" timestamp="189088340" />
  <Command __id="8755" _type="MoveCaretCommand" caretOffset="6319" date="Sun Feb 27 19:53:19 EST 2022" docOffset="6397" starttimestamp="1645820509543" timestamp="189090300" />
  <Command __id="8756" _type="MoveCaretCommand" caretOffset="6319" date="Sun Feb 27 19:53:19 EST 2022" docOffset="6397" starttimestamp="1645820509543" timestamp="189090300" />
  <Command __id="8757" _type="MoveCaretCommand" caretOffset="6034" date="Sun Feb 27 19:53:41 EST 2022" docOffset="6112" starttimestamp="1645820509543" timestamp="189111956" />
  <Command __id="8758" _type="MoveCaretCommand" caretOffset="6034" date="Sun Feb 27 19:53:41 EST 2022" docOffset="6112" starttimestamp="1645820509543" timestamp="189111956" />
  <Command __id="8759" _type="MoveCaretCommand" caretOffset="4087" date="Sun Feb 27 19:53:51 EST 2022" docOffset="4165" starttimestamp="1645820509543" timestamp="189121652" />
  <Command __id="8760" _type="MoveCaretCommand" caretOffset="4087" date="Sun Feb 27 19:53:51 EST 2022" docOffset="4165" starttimestamp="1645820509543" timestamp="189121652" />
  <DocumentChange __id="8675" _type="Insert" date="Sun Feb 27 19:52:28 EST 2022" docASTNodeCount="1626" docActiveCodeLength="12036" docExpressionCount="1142" docLength="13461" length="2" offset="6327" starttimestamp="1645820509543" timestamp="189039139">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="8681" _type="Insert" date="Sun Feb 27 19:52:29 EST 2022" docASTNodeCount="1626" docActiveCodeLength="12037" docExpressionCount="1142" docLength="13462" length="1" offset="6328" starttimestamp="1645820509543" timestamp="189040011">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="8684" _type="Insert" date="Sun Feb 27 19:52:29 EST 2022" docASTNodeCount="1626" docActiveCodeLength="12038" docExpressionCount="1142" docLength="13463" length="1" offset="6329" starttimestamp="1645820509543" timestamp="189040212">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="8687" _type="Insert" date="Sun Feb 27 19:52:29 EST 2022" docASTNodeCount="1626" docActiveCodeLength="12039" docExpressionCount="1142" docLength="13464" length="1" offset="6330" starttimestamp="1645820509543" timestamp="189040364">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="8690" _type="Insert" date="Sun Feb 27 19:52:30 EST 2022" docASTNodeCount="1626" docActiveCodeLength="12040" docExpressionCount="1142" docLength="13465" length="1" offset="6331" starttimestamp="1645820509543" timestamp="189040611">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="8693" _type="Insert" date="Sun Feb 27 19:52:30 EST 2022" docASTNodeCount="1626" docActiveCodeLength="12041" docExpressionCount="1142" docLength="13466" length="1" offset="6332" starttimestamp="1645820509543" timestamp="189040716">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="8696" _type="Insert" date="Sun Feb 27 19:52:30 EST 2022" docASTNodeCount="1626" docActiveCodeLength="12042" docExpressionCount="1142" docLength="13467" length="1" offset="6333" starttimestamp="1645820509543" timestamp="189040818">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="8703" _type="Insert" date="Sun Feb 27 19:52:31 EST 2022" docASTNodeCount="1626" docActiveCodeLength="12043" docExpressionCount="1142" docLength="13468" length="1" offset="6336" starttimestamp="1645820509543" timestamp="189042399">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="8719" _type="Insert" date="Sun Feb 27 19:52:38 EST 2022" docASTNodeCount="1626" docActiveCodeLength="12050" docExpressionCount="1142" docLength="13475" length="7" offset="6362" starttimestamp="1645820509543" timestamp="189048577">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <DocumentChange __id="8722" _type="Replace" date="Sun Feb 27 19:52:38 EST 2022" docASTNodeCount="1633" docActiveCodeLength="12079" docExpressionCount="1148" docLength="13504" endLine="242" insertionLength="34" int_docASTNodeCount="1626" int_docActiveCodeLength="12045" int_docExpressionCount="1142" int_docLength="13470" length="5" offset="6364" startLine="242" starttimestamp="1645820509543" timestamp="189048722">
    <deletedText><![CDATA[					]]></deletedText>
    <insertedText><![CDATA[					System.out.println("before");]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8728" _type="Replace" date="Sun Feb 27 19:52:39 EST 2022" docASTNodeCount="1633" docActiveCodeLength="12074" docExpressionCount="1148" docLength="13499" endLine="242" insertionLength="1" int_docASTNodeCount="1633" int_docActiveCodeLength="12073" int_docExpressionCount="1148" int_docLength="13498" length="6" offset="6389" startLine="242" starttimestamp="1645820509543" timestamp="189050058">
    <deletedText><![CDATA[before]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8731" _type="Insert" date="Sun Feb 27 19:52:39 EST 2022" docASTNodeCount="1633" docActiveCodeLength="12075" docExpressionCount="1148" docLength="13500" length="1" offset="6390" starttimestamp="1645820509543" timestamp="189050199">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="8734" _type="Insert" date="Sun Feb 27 19:52:39 EST 2022" docASTNodeCount="1633" docActiveCodeLength="12076" docExpressionCount="1148" docLength="13501" length="1" offset="6391" starttimestamp="1645820509543" timestamp="189050455">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="8737" _type="Insert" date="Sun Feb 27 19:52:40 EST 2022" docASTNodeCount="1633" docActiveCodeLength="12077" docExpressionCount="1148" docLength="13502" length="1" offset="6392" starttimestamp="1645820509543" timestamp="189050631">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="8740" _type="Insert" date="Sun Feb 27 19:52:40 EST 2022" docASTNodeCount="1633" docActiveCodeLength="12078" docExpressionCount="1148" docLength="13503" length="1" offset="6393" starttimestamp="1645820509543" timestamp="189050696">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8761" _type="MoveCaretCommand" caretOffset="3959" date="Sun Feb 27 19:53:52 EST 2022" docOffset="4037" starttimestamp="1645820509543" timestamp="189122724" />
  <Command __id="8762" _type="MoveCaretCommand" caretOffset="3959" date="Sun Feb 27 19:53:52 EST 2022" docOffset="4037" starttimestamp="1645820509543" timestamp="189122724" />
  <Command __id="8763" _type="MoveCaretCommand" caretOffset="3989" date="Sun Feb 27 19:53:52 EST 2022" docOffset="4067" starttimestamp="1645820509543" timestamp="189123131" />
  <Command __id="8764" _type="MoveCaretCommand" caretOffset="3989" date="Sun Feb 27 19:53:52 EST 2022" docOffset="4067" starttimestamp="1645820509543" timestamp="189123131" />
  <Command __id="8766" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 19:53:54 EST 2022" starttimestamp="1645820509543" timestamp="189124530" />
  <Command __id="8767" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 19:53:55 EST 2022" starttimestamp="1645820509543" timestamp="189125724" />
  <Command __id="8768" _type="EclipseCommand" commandID="" date="Sun Feb 27 19:53:55 EST 2022" starttimestamp="1645820509543" timestamp="189125815" />
  <Command __id="8769" _type="EclipseCommand" commandID="" date="Sun Feb 27 19:53:55 EST 2022" starttimestamp="1645820509543" timestamp="189125828" />
  <Command __id="8770" _type="MoveCaretCommand" caretOffset="6257" date="Sun Feb 27 19:54:09 EST 2022" docOffset="6335" starttimestamp="1645820509543" timestamp="189139748" />
  <Command __id="8771" _type="MoveCaretCommand" caretOffset="6257" date="Sun Feb 27 19:54:09 EST 2022" docOffset="6335" starttimestamp="1645820509543" timestamp="189139748" />
  <Command __id="8773" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 19:54:10 EST 2022" starttimestamp="1645820509543" timestamp="189140697" />
  <Command __id="8774" _type="MoveCaretCommand" caretOffset="6319" date="Sun Feb 27 19:54:10 EST 2022" docOffset="6397" starttimestamp="1645820509543" timestamp="189141171" />
  <Command __id="8775" _type="MoveCaretCommand" caretOffset="6319" date="Sun Feb 27 19:54:10 EST 2022" docOffset="6397" starttimestamp="1645820509543" timestamp="189141171" />
  <Command __id="8777" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 19:54:10 EST 2022" starttimestamp="1645820509543" timestamp="189141315" />
  <DocumentChange __id="8765" _type="Delete" date="Sun Feb 27 19:53:54 EST 2022" docASTNodeCount="1649" docActiveCodeLength="12174" docExpressionCount="1163" docLength="13501" endLine="153" length="2" offset="4041" startLine="153" starttimestamp="1645820509543" timestamp="189124503">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8772" _type="Insert" date="Sun Feb 27 19:54:10 EST 2022" docASTNodeCount="1642" docActiveCodeLength="12140" docExpressionCount="1157" docLength="13503" length="2" offset="6301" starttimestamp="1645820509543" timestamp="189140675">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8776" _type="Insert" date="Sun Feb 27 19:54:10 EST 2022" docASTNodeCount="1635" docActiveCodeLength="12107" docExpressionCount="1151" docLength="13505" length="2" offset="6364" starttimestamp="1645820509543" timestamp="189141295">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="8781" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:54:13 EST 2022" docASTNodeCount="165" docActiveCodeLength="791" docExpressionCount="97" docLength="791" projectName="pa1" starttimestamp="1645820509543" timestamp="189143786">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors(kk[] b, int[] c) {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			{¶				int i = 1;¶				boolean j = 2;¶				bo jdsaf2 = afdaf;¶				this = 1;¶				this.adsfaew.dafawe.d = adf123;¶				sdfawe.dsfaewf.safew[sdafaewfa.sdafaew.sdafaew.asd] = dsfs2;¶				this = this;¶				return;¶				return asdfawef;¶				if (adf) { dsafae = 12;}¶				else adfaewf =dsfaef;¶				while (asdfaew = dafawe) sdafaew = dsaf; ¶				a = -1;¶				a = !true;¶				a = false;¶				a = new dafef();¶			}¶			¶			System.out.println(message,dfaewf,asdfa,ef,aew);¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="8782" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:54:14 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7958" docExpressionCount="685" docLength="8750" projectName="pa1" starttimestamp="1645820509543" timestamp="189145153">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	        	boolean isEqual = false;¶	        	if(currentChar == '=') {¶//	        		System.out.println("In scanner " +  currentChar);¶	        		isEqual = true;¶	        	}¶	            takeIt();¶	            if(currentChar == '=') {¶	            	isEqual = false;¶	                takeIt();¶	                return TokenKind.BINOP;¶	            } ¶	            return isEqual? TokenKind.EQUAL:TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="8784" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:54:15 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="189145635">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="8786" _type="RunCommand" date="Sun Feb 27 19:54:16 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189147286" type="Run" />
  <Command __id="8787" _type="RunCommand" date="Sun Feb 27 19:54:16 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189147286" type="Run" />
  <Command __id="8788" _type="RunCommand" date="Sun Feb 27 19:54:17 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189147476" type="Run" />
  <Command __id="8789" _type="RunCommand" date="Sun Feb 27 19:54:17 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189147476" type="Run" />
  <Command __id="8790" _type="EHExceptionCommand" date="Sun Feb 27 19:54:17 EST 2022" starttimestamp="1645820509543" timestamp="189147531" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
------------starting declaration-----------
int
numErrors
;
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
gg
;
------------ending declaration-----------
------------starting declaration-----------
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
IN VOID METHOD DECLARATION
numErrors
=
in here3, NUM is*0*
0
;
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
try
=
in here3, UNOP is*!*
!
(
a
==
a
)
;
OUT VOID METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
hasErrors
(
kk
[
]
b
,
int
[
]
c
)
{
IN METHOD DECLARATION
return
numErrors
>
0
;
OUT METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
void
reportError
(
String
message
)
{
IN VOID METHOD DECLARATION
{
int
i
=
1
;
boolean
j
=
2
;
bo
jdsaf2
=
afdaf
;
this
=
1
;
this
.
adsfaew
.
dafawe
.
d
=
adf123
;
sdfawe
.
dsfaewf
.
safew
[
sdafaewfa
.
sdafaew
.
sdafaew
.
asd
]
=
dsfs2
;
this
=
this
;
return
;
return
asdfawef
;
if
(
adf
)
{
dsafae
=
in here3, NUM is*12*
12
;
}
else
adfaewf
=
in here3, ID is*dsfaef*
dsfaef
;
while
(
asdfaew
=
dafawe
)
sdafaew
=
in here3, ID is*dsaf*
dsaf
;
a
=
in here3, MINUS is*-*
-
1
;
a
=
in here3, UNOP is*!*
!
true
;
a
=
in here3, FALSE is*false*
false
;
a
=
in here3, ID is*new*
new
Parse error: Parsing dafef and expecting 'SEMICOLON' but found 'ID'
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="8792" _type="MoveCaretCommand" caretOffset="5636" date="Sun Feb 27 19:54:30 EST 2022" docOffset="5787" starttimestamp="1645820509543" timestamp="189161170" />
  <Command __id="8793" _type="MoveCaretCommand" caretOffset="5953" date="Sun Feb 27 19:54:32 EST 2022" docOffset="6104" starttimestamp="1645820509543" timestamp="189163275" />
  <Command __id="8794" _type="MoveCaretCommand" caretOffset="5953" date="Sun Feb 27 19:54:32 EST 2022" docOffset="6104" starttimestamp="1645820509543" timestamp="189163275" />
  <Command __id="8796" _type="ShellCommand" date="Sun Feb 27 19:54:33 EST 2022" starttimestamp="1645820509543" timestamp="189163846" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8797" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:54:34 EST 2022" forward="false" matchWord="false" offset="6104" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189165274" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8798" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:54:36 EST 2022" forward="false" matchWord="false" offset="4182" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189167332" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8799" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:54:37 EST 2022" forward="false" matchWord="false" offset="4182" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189167741" wrapSearch="false">
    <searchString><![CDATA[NEW]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8800" _type="ShellCommand" date="Sun Feb 27 19:54:38 EST 2022" starttimestamp="1645820509543" timestamp="189168545" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8801" _type="MoveCaretCommand" caretOffset="4753" date="Sun Feb 27 19:54:43 EST 2022" docOffset="4904" starttimestamp="1645820509543" timestamp="189174227" />
  <Command __id="8802" _type="MoveCaretCommand" caretOffset="4753" date="Sun Feb 27 19:54:43 EST 2022" docOffset="4904" starttimestamp="1645820509543" timestamp="189174228" />
  <Command __id="8803" _type="MoveCaretCommand" caretOffset="4541" date="Sun Feb 27 19:54:44 EST 2022" docOffset="4692" starttimestamp="1645820509543" timestamp="189175011" />
  <Command __id="8804" _type="MoveCaretCommand" caretOffset="4541" date="Sun Feb 27 19:54:44 EST 2022" docOffset="4692" starttimestamp="1645820509543" timestamp="189175011" />
  <Command __id="8791" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:54:30 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7958" docExpressionCount="685" docLength="8750" projectName="pa1" starttimestamp="1645820509543" timestamp="189161084">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	takeIt();¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	        	boolean isEqual = false;¶	        	if(currentChar == '=') {¶//	        		System.out.println("In scanner " +  currentChar);¶	        		isEqual = true;¶	        	}¶	            takeIt();¶	            if(currentChar == '=') {¶	            	isEqual = false;¶	                takeIt();¶	                return TokenKind.BINOP;¶	            } ¶	            return isEqual? TokenKind.EQUAL:TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="8805" _type="MoveCaretCommand" caretOffset="4890" date="Sun Feb 27 19:54:45 EST 2022" docOffset="5041" starttimestamp="1645820509543" timestamp="189176132" />
  <Command __id="8806" _type="MoveCaretCommand" caretOffset="4890" date="Sun Feb 27 19:54:45 EST 2022" docOffset="5041" starttimestamp="1645820509543" timestamp="189176132" />
  <DocumentChange __id="8807" _type="Insert" date="Sun Feb 27 19:54:56 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7970" docExpressionCount="685" docLength="8762" length="12" offset="5041" starttimestamp="1645820509543" timestamp="189186555">
    <text><![CDATA[
	        	]]></text>
  </DocumentChange>
  <Command __id="8808" _type="InsertStringCommand" date="Sun Feb 27 19:54:56 EST 2022" starttimestamp="1645820509543" timestamp="189186564" timestamp2="189186564">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8809" _type="InsertStringCommand" date="Sun Feb 27 19:54:56 EST 2022" starttimestamp="1645820509543" timestamp="189186564" timestamp2="189186564">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8810" _type="Insert" date="Sun Feb 27 19:54:57 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7971" docExpressionCount="686" docLength="8763" length="1" offset="5053" starttimestamp="1645820509543" timestamp="189187839">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="8811" _type="InsertStringCommand" date="Sun Feb 27 19:54:57 EST 2022" starttimestamp="1645820509543" timestamp="189187843" timestamp2="189187843">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="8812" _type="InsertStringCommand" date="Sun Feb 27 19:54:57 EST 2022" starttimestamp="1645820509543" timestamp="189187843" timestamp2="189187843">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="8813" _type="Insert" date="Sun Feb 27 19:54:57 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7972" docExpressionCount="685" docLength="8764" length="1" offset="5054" starttimestamp="1645820509543" timestamp="189187984">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="8814" _type="InsertStringCommand" date="Sun Feb 27 19:54:57 EST 2022" starttimestamp="1645820509543" timestamp="189187988" timestamp2="189187988">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="8815" _type="InsertStringCommand" date="Sun Feb 27 19:54:57 EST 2022" starttimestamp="1645820509543" timestamp="189187989" timestamp2="189187989">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="8816" _type="Insert" date="Sun Feb 27 19:54:57 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7973" docExpressionCount="685" docLength="8765" length="1" offset="5055" starttimestamp="1645820509543" timestamp="189188143">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="8817" _type="InsertStringCommand" date="Sun Feb 27 19:54:57 EST 2022" starttimestamp="1645820509543" timestamp="189188147" timestamp2="189188147">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8818" _type="InsertStringCommand" date="Sun Feb 27 19:54:57 EST 2022" starttimestamp="1645820509543" timestamp="189188147" timestamp2="189188147">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="8819" _type="Insert" date="Sun Feb 27 19:54:57 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7974" docExpressionCount="685" docLength="8766" length="1" offset="5056" starttimestamp="1645820509543" timestamp="189188400">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="8820" _type="InsertStringCommand" date="Sun Feb 27 19:54:57 EST 2022" starttimestamp="1645820509543" timestamp="189188405" timestamp2="189188405">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="8821" _type="InsertStringCommand" date="Sun Feb 27 19:54:57 EST 2022" starttimestamp="1645820509543" timestamp="189188405" timestamp2="189188405">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="8822" _type="Insert" date="Sun Feb 27 19:54:58 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7975" docExpressionCount="685" docLength="8767" length="1" offset="5057" starttimestamp="1645820509543" timestamp="189188560">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="8823" _type="InsertStringCommand" date="Sun Feb 27 19:54:58 EST 2022" starttimestamp="1645820509543" timestamp="189188600" timestamp2="189188600">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="8824" _type="InsertStringCommand" date="Sun Feb 27 19:54:58 EST 2022" starttimestamp="1645820509543" timestamp="189188600" timestamp2="189188600">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="8825" _type="Insert" date="Sun Feb 27 19:54:58 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7976" docExpressionCount="685" docLength="8768" length="1" offset="5058" starttimestamp="1645820509543" timestamp="189188703">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="8826" _type="InsertStringCommand" date="Sun Feb 27 19:54:58 EST 2022" starttimestamp="1645820509543" timestamp="189188710" timestamp2="189188710">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8827" _type="InsertStringCommand" date="Sun Feb 27 19:54:58 EST 2022" starttimestamp="1645820509543" timestamp="189188710" timestamp2="189188710">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="8828" _type="Insert" date="Sun Feb 27 19:54:58 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7977" docExpressionCount="685" docLength="8769" length="1" offset="5059" starttimestamp="1645820509543" timestamp="189188855">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="8829" _type="InsertStringCommand" date="Sun Feb 27 19:54:58 EST 2022" starttimestamp="1645820509543" timestamp="189188859" timestamp2="189188859">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8830" _type="InsertStringCommand" date="Sun Feb 27 19:54:58 EST 2022" starttimestamp="1645820509543" timestamp="189188859" timestamp2="189188859">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="8831" _type="Insert" date="Sun Feb 27 19:54:58 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7978" docExpressionCount="685" docLength="8770" length="1" offset="5060" starttimestamp="1645820509543" timestamp="189188991">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="8832" _type="InsertStringCommand" date="Sun Feb 27 19:54:58 EST 2022" starttimestamp="1645820509543" timestamp="189188995" timestamp2="189188995">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8833" _type="InsertStringCommand" date="Sun Feb 27 19:54:58 EST 2022" starttimestamp="1645820509543" timestamp="189188995" timestamp2="189188995">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="8834" _type="Delete" date="Sun Feb 27 19:54:59 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7977" docExpressionCount="685" docLength="8769" endLine="222" length="1" offset="5060" startLine="222" starttimestamp="1645820509543" timestamp="189189696">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="8835" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:54:59 EST 2022" starttimestamp="1645820509543" timestamp="189189698" />
  <Command __id="8836" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:54:59 EST 2022" starttimestamp="1645820509543" timestamp="189189699" />
  <DocumentChange __id="8837" _type="Delete" date="Sun Feb 27 19:54:59 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7976" docExpressionCount="685" docLength="8768" endLine="222" length="1" offset="5059" startLine="222" starttimestamp="1645820509543" timestamp="189189870">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="8838" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:54:59 EST 2022" starttimestamp="1645820509543" timestamp="189189875" />
  <Command __id="8839" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:54:59 EST 2022" starttimestamp="1645820509543" timestamp="189189875" />
  <DocumentChange __id="8840" _type="Delete" date="Sun Feb 27 19:54:59 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7975" docExpressionCount="685" docLength="8767" endLine="222" length="1" offset="5058" startLine="222" starttimestamp="1645820509543" timestamp="189190065">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="8841" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:54:59 EST 2022" starttimestamp="1645820509543" timestamp="189190067" />
  <Command __id="8842" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:54:59 EST 2022" starttimestamp="1645820509543" timestamp="189190067" />
  <DocumentChange __id="8843" _type="Delete" date="Sun Feb 27 19:54:59 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7974" docExpressionCount="685" docLength="8766" endLine="222" length="1" offset="5057" startLine="222" starttimestamp="1645820509543" timestamp="189190231">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="8844" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:54:59 EST 2022" starttimestamp="1645820509543" timestamp="189190234" />
  <Command __id="8845" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:54:59 EST 2022" starttimestamp="1645820509543" timestamp="189190234" />
  <DocumentChange __id="8846" _type="Delete" date="Sun Feb 27 19:55:00 EST 2022" docASTNodeCount="1101" docActiveCodeLength="7973" docExpressionCount="685" docLength="8765" endLine="222" length="1" offset="5056" startLine="222" starttimestamp="1645820509543" timestamp="189190759">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="8847" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:00 EST 2022" starttimestamp="1645820509543" timestamp="189190761" />
  <Command __id="8848" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:00 EST 2022" starttimestamp="1645820509543" timestamp="189190762" />
  <DocumentChange __id="8849" _type="Insert" date="Sun Feb 27 19:55:02 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7975" docExpressionCount="686" docLength="8767" length="2" offset="5056" starttimestamp="1645820509543" timestamp="189192641">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="8850" _type="InsertStringCommand" date="Sun Feb 27 19:55:02 EST 2022" starttimestamp="1645820509543" timestamp="189192645" timestamp2="189192645">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="8851" _type="InsertStringCommand" date="Sun Feb 27 19:55:02 EST 2022" starttimestamp="1645820509543" timestamp="189192645" timestamp2="189192645">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="8852" _type="InsertStringCommand" date="Sun Feb 27 19:55:02 EST 2022" starttimestamp="1645820509543" timestamp="189192814" timestamp2="189192814">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="8853" _type="InsertStringCommand" date="Sun Feb 27 19:55:02 EST 2022" starttimestamp="1645820509543" timestamp="189192814" timestamp2="189192814">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="8854" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 19:55:02 EST 2022" starttimestamp="1645820509543" timestamp="189193285" />
  <Command __id="8855" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sun Feb 27 19:55:02 EST 2022" starttimestamp="1645820509543" timestamp="189193285" />
  <DocumentChange __id="8856" _type="Insert" date="Sun Feb 27 19:55:03 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7976" docExpressionCount="686" docLength="8768" length="1" offset="5057" starttimestamp="1645820509543" timestamp="189193486">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="8857" _type="InsertStringCommand" date="Sun Feb 27 19:55:03 EST 2022" starttimestamp="1645820509543" timestamp="189193494" timestamp2="189193494">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="8858" _type="InsertStringCommand" date="Sun Feb 27 19:55:03 EST 2022" starttimestamp="1645820509543" timestamp="189193495" timestamp2="189193495">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="8859" _type="Insert" date="Sun Feb 27 19:55:03 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7977" docExpressionCount="686" docLength="8769" length="1" offset="5058" starttimestamp="1645820509543" timestamp="189193766">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="8860" _type="InsertStringCommand" date="Sun Feb 27 19:55:03 EST 2022" starttimestamp="1645820509543" timestamp="189193773" timestamp2="189193773">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="8861" _type="InsertStringCommand" date="Sun Feb 27 19:55:03 EST 2022" starttimestamp="1645820509543" timestamp="189193773" timestamp2="189193773">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="8862" _type="Insert" date="Sun Feb 27 19:55:03 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7978" docExpressionCount="686" docLength="8770" length="1" offset="5059" starttimestamp="1645820509543" timestamp="189193975">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="8863" _type="InsertStringCommand" date="Sun Feb 27 19:55:03 EST 2022" starttimestamp="1645820509543" timestamp="189193981" timestamp2="189193981">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="8864" _type="InsertStringCommand" date="Sun Feb 27 19:55:03 EST 2022" starttimestamp="1645820509543" timestamp="189193981" timestamp2="189193981">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="8865" _type="Insert" date="Sun Feb 27 19:55:03 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7979" docExpressionCount="686" docLength="8771" length="1" offset="5060" starttimestamp="1645820509543" timestamp="189194086">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8866" _type="InsertStringCommand" date="Sun Feb 27 19:55:03 EST 2022" starttimestamp="1645820509543" timestamp="189194092" timestamp2="189194092">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8867" _type="InsertStringCommand" date="Sun Feb 27 19:55:03 EST 2022" starttimestamp="1645820509543" timestamp="189194093" timestamp2="189194093">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="8868" _type="Delete" date="Sun Feb 27 19:55:03 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7978" docExpressionCount="686" docLength="8770" endLine="222" length="1" offset="5060" startLine="222" starttimestamp="1645820509543" timestamp="189194310">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8869" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:03 EST 2022" starttimestamp="1645820509543" timestamp="189194313" />
  <Command __id="8870" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:03 EST 2022" starttimestamp="1645820509543" timestamp="189194313" />
  <DocumentChange __id="8871" _type="Delete" date="Sun Feb 27 19:55:03 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7977" docExpressionCount="686" docLength="8769" endLine="222" length="1" offset="5059" startLine="222" starttimestamp="1645820509543" timestamp="189194454">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="8872" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:04 EST 2022" starttimestamp="1645820509543" timestamp="189194457" />
  <Command __id="8873" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:04 EST 2022" starttimestamp="1645820509543" timestamp="189194457" />
  <DocumentChange __id="8874" _type="Insert" date="Sun Feb 27 19:55:04 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7978" docExpressionCount="686" docLength="8770" length="1" offset="5059" starttimestamp="1645820509543" timestamp="189194542">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8875" _type="InsertStringCommand" date="Sun Feb 27 19:55:04 EST 2022" starttimestamp="1645820509543" timestamp="189194546" timestamp2="189194546">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8876" _type="InsertStringCommand" date="Sun Feb 27 19:55:04 EST 2022" starttimestamp="1645820509543" timestamp="189194546" timestamp2="189194546">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="8877" _type="Insert" date="Sun Feb 27 19:55:04 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7979" docExpressionCount="686" docLength="8771" length="1" offset="5060" starttimestamp="1645820509543" timestamp="189194734">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8878" _type="InsertStringCommand" date="Sun Feb 27 19:55:04 EST 2022" starttimestamp="1645820509543" timestamp="189194740" timestamp2="189194740">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8879" _type="InsertStringCommand" date="Sun Feb 27 19:55:04 EST 2022" starttimestamp="1645820509543" timestamp="189194740" timestamp2="189194740">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="8880" _type="Insert" date="Sun Feb 27 19:55:04 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7980" docExpressionCount="686" docLength="8772" length="1" offset="5061" starttimestamp="1645820509543" timestamp="189194846">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="8881" _type="InsertStringCommand" date="Sun Feb 27 19:55:04 EST 2022" starttimestamp="1645820509543" timestamp="189194850" timestamp2="189194850">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8882" _type="InsertStringCommand" date="Sun Feb 27 19:55:04 EST 2022" starttimestamp="1645820509543" timestamp="189194850" timestamp2="189194850">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="8883" _type="Insert" date="Sun Feb 27 19:55:04 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7981" docExpressionCount="686" docLength="8773" length="1" offset="5062" starttimestamp="1645820509543" timestamp="189194998">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="8884" _type="InsertStringCommand" date="Sun Feb 27 19:55:04 EST 2022" starttimestamp="1645820509543" timestamp="189195003" timestamp2="189195003">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="8885" _type="InsertStringCommand" date="Sun Feb 27 19:55:04 EST 2022" starttimestamp="1645820509543" timestamp="189195003" timestamp2="189195003">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="8886" _type="Insert" date="Sun Feb 27 19:55:04 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7982" docExpressionCount="686" docLength="8774" length="1" offset="5063" starttimestamp="1645820509543" timestamp="189195055">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="8887" _type="InsertStringCommand" date="Sun Feb 27 19:55:04 EST 2022" starttimestamp="1645820509543" timestamp="189195060" timestamp2="189195060">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8888" _type="InsertStringCommand" date="Sun Feb 27 19:55:04 EST 2022" starttimestamp="1645820509543" timestamp="189195061" timestamp2="189195061">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="8889" _type="Insert" date="Sun Feb 27 19:55:05 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7983" docExpressionCount="686" docLength="8775" length="1" offset="5064" starttimestamp="1645820509543" timestamp="189195589">
    <text><![CDATA[C]]></text>
  </DocumentChange>
  <Command __id="8890" _type="InsertStringCommand" date="Sun Feb 27 19:55:05 EST 2022" starttimestamp="1645820509543" timestamp="189195626" timestamp2="189195626">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="8891" _type="InsertStringCommand" date="Sun Feb 27 19:55:05 EST 2022" starttimestamp="1645820509543" timestamp="189195626" timestamp2="189195626">
    <data><![CDATA[C]]></data>
  </Command>
  <DocumentChange __id="8892" _type="Insert" date="Sun Feb 27 19:55:05 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7984" docExpressionCount="686" docLength="8776" length="1" offset="5065" starttimestamp="1645820509543" timestamp="189195910">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <Command __id="8893" _type="InsertStringCommand" date="Sun Feb 27 19:55:05 EST 2022" starttimestamp="1645820509543" timestamp="189195916" timestamp2="189195916">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="8894" _type="InsertStringCommand" date="Sun Feb 27 19:55:05 EST 2022" starttimestamp="1645820509543" timestamp="189195916" timestamp2="189195916">
    <data><![CDATA[h]]></data>
  </Command>
  <DocumentChange __id="8895" _type="Insert" date="Sun Feb 27 19:55:05 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7985" docExpressionCount="686" docLength="8777" length="1" offset="5066" starttimestamp="1645820509543" timestamp="189195982">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="8896" _type="InsertStringCommand" date="Sun Feb 27 19:55:05 EST 2022" starttimestamp="1645820509543" timestamp="189195988" timestamp2="189195988">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="8897" _type="InsertStringCommand" date="Sun Feb 27 19:55:05 EST 2022" starttimestamp="1645820509543" timestamp="189195988" timestamp2="189195988">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="8898" _type="Insert" date="Sun Feb 27 19:55:05 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7986" docExpressionCount="686" docLength="8778" length="1" offset="5067" starttimestamp="1645820509543" timestamp="189196126">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8899" _type="InsertStringCommand" date="Sun Feb 27 19:55:05 EST 2022" starttimestamp="1645820509543" timestamp="189196132" timestamp2="189196132">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8900" _type="InsertStringCommand" date="Sun Feb 27 19:55:05 EST 2022" starttimestamp="1645820509543" timestamp="189196132" timestamp2="189196132">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="8901" _type="Insert" date="Sun Feb 27 19:55:05 EST 2022" docASTNodeCount="1103" docActiveCodeLength="7987" docExpressionCount="686" docLength="8779" length="1" offset="5068" starttimestamp="1645820509543" timestamp="189196278">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="8902" _type="InsertStringCommand" date="Sun Feb 27 19:55:05 EST 2022" starttimestamp="1645820509543" timestamp="189196283" timestamp2="189196283">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8903" _type="InsertStringCommand" date="Sun Feb 27 19:55:05 EST 2022" starttimestamp="1645820509543" timestamp="189196283" timestamp2="189196283">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="8904" _type="Insert" date="Sun Feb 27 19:55:06 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7988" docExpressionCount="688" docLength="8780" length="1" offset="5069" starttimestamp="1645820509543" timestamp="189196575">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="8905" _type="InsertStringCommand" date="Sun Feb 27 19:55:06 EST 2022" starttimestamp="1645820509543" timestamp="189196580" timestamp2="189196580">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="8906" _type="InsertStringCommand" date="Sun Feb 27 19:55:06 EST 2022" starttimestamp="1645820509543" timestamp="189196580" timestamp2="189196580">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="8907" _type="Insert" date="Sun Feb 27 19:55:06 EST 2022" docASTNodeCount="812" docActiveCodeLength="7989" docExpressionCount="491" docLength="8781" length="1" offset="5070" starttimestamp="1645820509543" timestamp="189196751">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="8908" _type="InsertStringCommand" date="Sun Feb 27 19:55:06 EST 2022" starttimestamp="1645820509543" timestamp="189196756" timestamp2="189196756">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="8909" _type="InsertStringCommand" date="Sun Feb 27 19:55:06 EST 2022" starttimestamp="1645820509543" timestamp="189196757" timestamp2="189196757">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="8910" _type="Insert" date="Sun Feb 27 19:55:06 EST 2022" docASTNodeCount="812" docActiveCodeLength="7990" docExpressionCount="491" docLength="8782" length="1" offset="5071" starttimestamp="1645820509543" timestamp="189197214">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="8911" _type="InsertStringCommand" date="Sun Feb 27 19:55:06 EST 2022" starttimestamp="1645820509543" timestamp="189197218" timestamp2="189197218">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8912" _type="InsertStringCommand" date="Sun Feb 27 19:55:06 EST 2022" starttimestamp="1645820509543" timestamp="189197218" timestamp2="189197218">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="8913" _type="Insert" date="Sun Feb 27 19:55:08 EST 2022" docASTNodeCount="701" docActiveCodeLength="7992" docExpressionCount="435" docLength="8784" length="2" offset="5072" starttimestamp="1645820509543" timestamp="189199377">
    <text><![CDATA['']]></text>
  </DocumentChange>
  <Command __id="8914" _type="InsertStringCommand" date="Sun Feb 27 19:55:08 EST 2022" starttimestamp="1645820509543" timestamp="189199382" timestamp2="189199382">
    <data><![CDATA[']]></data>
  </Command>
  <Command __id="8915" _type="InsertStringCommand" date="Sun Feb 27 19:55:08 EST 2022" starttimestamp="1645820509543" timestamp="189199382" timestamp2="189199382">
    <data><![CDATA[']]></data>
  </Command>
  <Command __id="8916" _type="InsertStringCommand" date="Sun Feb 27 19:55:09 EST 2022" starttimestamp="1645820509543" timestamp="189199842" timestamp2="189199842">
    <data><![CDATA[']]></data>
  </Command>
  <Command __id="8917" _type="InsertStringCommand" date="Sun Feb 27 19:55:09 EST 2022" starttimestamp="1645820509543" timestamp="189199842" timestamp2="189199842">
    <data><![CDATA[']]></data>
  </Command>
  <DocumentChange __id="8918" _type="Delete" date="Sun Feb 27 19:55:09 EST 2022" docASTNodeCount="701" docActiveCodeLength="7991" docExpressionCount="435" docLength="8783" endLine="222" length="1" offset="5073" startLine="222" starttimestamp="1645820509543" timestamp="189200239">
    <text><![CDATA[']]></text>
  </DocumentChange>
  <Command __id="8919" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:09 EST 2022" starttimestamp="1645820509543" timestamp="189200244" />
  <Command __id="8920" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:09 EST 2022" starttimestamp="1645820509543" timestamp="189200244" />
  <DocumentChange __id="8921" _type="Delete" date="Sun Feb 27 19:55:10 EST 2022" docASTNodeCount="812" docActiveCodeLength="7990" docExpressionCount="491" docLength="8782" endLine="222" length="1" offset="5072" startLine="222" starttimestamp="1645820509543" timestamp="189200879">
    <text><![CDATA[']]></text>
  </DocumentChange>
  <Command __id="8922" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:10 EST 2022" starttimestamp="1645820509543" timestamp="189200885" />
  <Command __id="8923" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:10 EST 2022" starttimestamp="1645820509543" timestamp="189200885" />
  <DocumentChange __id="8924" _type="Insert" date="Sun Feb 27 19:55:10 EST 2022" docASTNodeCount="701" docActiveCodeLength="7992" docExpressionCount="435" docLength="8784" length="2" offset="5072" starttimestamp="1645820509543" timestamp="189201093">
    <text><![CDATA['']]></text>
  </DocumentChange>
  <Command __id="8925" _type="InsertStringCommand" date="Sun Feb 27 19:55:10 EST 2022" starttimestamp="1645820509543" timestamp="189201100" timestamp2="189201100">
    <data><![CDATA[']]></data>
  </Command>
  <Command __id="8926" _type="InsertStringCommand" date="Sun Feb 27 19:55:10 EST 2022" starttimestamp="1645820509543" timestamp="189201100" timestamp2="189201100">
    <data><![CDATA[']]></data>
  </Command>
  <DocumentChange __id="8927" _type="Insert" date="Sun Feb 27 19:55:10 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7993" docExpressionCount="688" docLength="8785" length="1" offset="5073" starttimestamp="1645820509543" timestamp="189201418">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="8928" _type="InsertStringCommand" date="Sun Feb 27 19:55:10 EST 2022" starttimestamp="1645820509543" timestamp="189201420" timestamp2="189201420">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="8929" _type="InsertStringCommand" date="Sun Feb 27 19:55:10 EST 2022" starttimestamp="1645820509543" timestamp="189201420" timestamp2="189201420">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="8930" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:55:11 EST 2022" starttimestamp="1645820509543" timestamp="189201967" />
  <Command __id="8931" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:55:11 EST 2022" starttimestamp="1645820509543" timestamp="189201967" />
  <Command __id="8932" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:55:11 EST 2022" starttimestamp="1645820509543" timestamp="189202325" />
  <Command __id="8933" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:55:11 EST 2022" starttimestamp="1645820509543" timestamp="189202325" />
  <DocumentChange __id="8934" _type="Insert" date="Sun Feb 27 19:55:12 EST 2022" docASTNodeCount="1105" docActiveCodeLength="7994" docExpressionCount="688" docLength="8786" length="1" offset="5076" starttimestamp="1645820509543" timestamp="189202670">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="8935" _type="InsertStringCommand" date="Sun Feb 27 19:55:12 EST 2022" starttimestamp="1645820509543" timestamp="189202676" timestamp2="189202676">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8936" _type="InsertStringCommand" date="Sun Feb 27 19:55:12 EST 2022" starttimestamp="1645820509543" timestamp="189202677" timestamp2="189202677">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="8937" _type="Insert" date="Sun Feb 27 19:55:12 EST 2022" docASTNodeCount="1106" docActiveCodeLength="7995" docExpressionCount="688" docLength="8787" length="1" offset="5077" starttimestamp="1645820509543" timestamp="189202944">
    <text><![CDATA[{]]></text>
  </DocumentChange>
  <Command __id="8938" _type="InsertStringCommand" date="Sun Feb 27 19:55:12 EST 2022" starttimestamp="1645820509543" timestamp="189202952" timestamp2="189202952">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="8939" _type="InsertStringCommand" date="Sun Feb 27 19:55:12 EST 2022" starttimestamp="1645820509543" timestamp="189202952" timestamp2="189202952">
    <data><![CDATA[{]]></data>
  </Command>
  <DocumentChange __id="8940" _type="Insert" date="Sun Feb 27 19:55:12 EST 2022" docASTNodeCount="1106" docActiveCodeLength="8021" docExpressionCount="688" docLength="8813" length="26" offset="5078" starttimestamp="1645820509543" timestamp="189203065">
    <text><![CDATA[
	        		
	        	}]]></text>
  </DocumentChange>
  <Command __id="8941" _type="InsertStringCommand" date="Sun Feb 27 19:55:12 EST 2022" starttimestamp="1645820509543" timestamp="189203072" timestamp2="189203072">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8942" _type="InsertStringCommand" date="Sun Feb 27 19:55:12 EST 2022" starttimestamp="1645820509543" timestamp="189203072" timestamp2="189203072">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8943" _type="Insert" date="Sun Feb 27 19:55:13 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8022" docExpressionCount="689" docLength="8814" length="1" offset="5091" starttimestamp="1645820509543" timestamp="189203534">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="8944" _type="InsertStringCommand" date="Sun Feb 27 19:55:13 EST 2022" starttimestamp="1645820509543" timestamp="189203539" timestamp2="189203539">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="8945" _type="InsertStringCommand" date="Sun Feb 27 19:55:13 EST 2022" starttimestamp="1645820509543" timestamp="189203539" timestamp2="189203539">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="8946" _type="Delete" date="Sun Feb 27 19:55:13 EST 2022" docASTNodeCount="1106" docActiveCodeLength="8021" docExpressionCount="688" docLength="8813" endLine="223" length="1" offset="5091" startLine="223" starttimestamp="1645820509543" timestamp="189203958">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="8947" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:13 EST 2022" starttimestamp="1645820509543" timestamp="189203960" />
  <Command __id="8948" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:13 EST 2022" starttimestamp="1645820509543" timestamp="189203961" />
  <DocumentChange __id="8949" _type="Insert" date="Sun Feb 27 19:55:13 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8022" docExpressionCount="689" docLength="8814" length="1" offset="5091" starttimestamp="1645820509543" timestamp="189204024">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8950" _type="InsertStringCommand" date="Sun Feb 27 19:55:13 EST 2022" starttimestamp="1645820509543" timestamp="189204029" timestamp2="189204029">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8951" _type="InsertStringCommand" date="Sun Feb 27 19:55:13 EST 2022" starttimestamp="1645820509543" timestamp="189204029" timestamp2="189204029">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="8952" _type="Insert" date="Sun Feb 27 19:55:13 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8023" docExpressionCount="689" docLength="8815" length="1" offset="5092" starttimestamp="1645820509543" timestamp="189204103">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="8953" _type="InsertStringCommand" date="Sun Feb 27 19:55:13 EST 2022" starttimestamp="1645820509543" timestamp="189204108" timestamp2="189204108">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8954" _type="InsertStringCommand" date="Sun Feb 27 19:55:13 EST 2022" starttimestamp="1645820509543" timestamp="189204108" timestamp2="189204108">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="8955" _type="Insert" date="Sun Feb 27 19:55:13 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8024" docExpressionCount="689" docLength="8816" length="1" offset="5093" starttimestamp="1645820509543" timestamp="189204247">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="8956" _type="InsertStringCommand" date="Sun Feb 27 19:55:13 EST 2022" starttimestamp="1645820509543" timestamp="189204252" timestamp2="189204252">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8957" _type="InsertStringCommand" date="Sun Feb 27 19:55:13 EST 2022" starttimestamp="1645820509543" timestamp="189204252" timestamp2="189204252">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="8958" _type="Insert" date="Sun Feb 27 19:55:13 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8025" docExpressionCount="689" docLength="8817" length="1" offset="5094" starttimestamp="1645820509543" timestamp="189204343">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="8959" _type="InsertStringCommand" date="Sun Feb 27 19:55:13 EST 2022" starttimestamp="1645820509543" timestamp="189204349" timestamp2="189204349">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="8960" _type="InsertStringCommand" date="Sun Feb 27 19:55:13 EST 2022" starttimestamp="1645820509543" timestamp="189204349" timestamp2="189204349">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="8961" _type="Insert" date="Sun Feb 27 19:55:13 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8026" docExpressionCount="689" docLength="8818" length="1" offset="5095" starttimestamp="1645820509543" timestamp="189204447">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8962" _type="InsertStringCommand" date="Sun Feb 27 19:55:13 EST 2022" starttimestamp="1645820509543" timestamp="189204452" timestamp2="189204452">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8963" _type="InsertStringCommand" date="Sun Feb 27 19:55:13 EST 2022" starttimestamp="1645820509543" timestamp="189204452" timestamp2="189204452">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="8964" _type="Insert" date="Sun Feb 27 19:55:14 EST 2022" docASTNodeCount="1107" docActiveCodeLength="8027" docExpressionCount="688" docLength="8819" length="1" offset="5096" starttimestamp="1645820509543" timestamp="189204560">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="8965" _type="InsertStringCommand" date="Sun Feb 27 19:55:14 EST 2022" starttimestamp="1645820509543" timestamp="189204564" timestamp2="189204564">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="8966" _type="InsertStringCommand" date="Sun Feb 27 19:55:14 EST 2022" starttimestamp="1645820509543" timestamp="189204564" timestamp2="189204564">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="8967" _type="Insert" date="Sun Feb 27 19:55:14 EST 2022" docASTNodeCount="1107" docActiveCodeLength="8028" docExpressionCount="688" docLength="8820" length="1" offset="5097" starttimestamp="1645820509543" timestamp="189204727">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="8968" _type="InsertStringCommand" date="Sun Feb 27 19:55:14 EST 2022" starttimestamp="1645820509543" timestamp="189204731" timestamp2="189204731">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8969" _type="InsertStringCommand" date="Sun Feb 27 19:55:14 EST 2022" starttimestamp="1645820509543" timestamp="189204731" timestamp2="189204731">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="8970" _type="Delete" date="Sun Feb 27 19:55:14 EST 2022" docASTNodeCount="1107" docActiveCodeLength="8027" docExpressionCount="688" docLength="8819" endLine="223" length="1" offset="5097" startLine="223" starttimestamp="1645820509543" timestamp="189205015">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="8971" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:14 EST 2022" starttimestamp="1645820509543" timestamp="189205017" />
  <Command __id="8972" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:14 EST 2022" starttimestamp="1645820509543" timestamp="189205017" />
  <DocumentChange __id="8973" _type="Delete" date="Sun Feb 27 19:55:15 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8026" docExpressionCount="689" docLength="8818" endLine="223" length="1" offset="5096" startLine="223" starttimestamp="1645820509543" timestamp="189205524">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="8974" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:15 EST 2022" starttimestamp="1645820509543" timestamp="189205528" />
  <Command __id="8975" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:15 EST 2022" starttimestamp="1645820509543" timestamp="189205528" />
  <DocumentChange __id="8976" _type="Delete" date="Sun Feb 27 19:55:15 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8025" docExpressionCount="689" docLength="8817" endLine="223" length="1" offset="5095" startLine="223" starttimestamp="1645820509543" timestamp="189205555">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8977" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:15 EST 2022" starttimestamp="1645820509543" timestamp="189205557" />
  <Command __id="8978" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:15 EST 2022" starttimestamp="1645820509543" timestamp="189205557" />
  <DocumentChange __id="8979" _type="Delete" date="Sun Feb 27 19:55:15 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8024" docExpressionCount="689" docLength="8816" endLine="223" length="1" offset="5094" startLine="223" starttimestamp="1645820509543" timestamp="189205744">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="8980" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:15 EST 2022" starttimestamp="1645820509543" timestamp="189205747" />
  <Command __id="8981" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:15 EST 2022" starttimestamp="1645820509543" timestamp="189205747" />
  <DocumentChange __id="8982" _type="Delete" date="Sun Feb 27 19:55:15 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8023" docExpressionCount="689" docLength="8815" endLine="223" length="1" offset="5093" startLine="223" starttimestamp="1645820509543" timestamp="189205929">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="8983" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:15 EST 2022" starttimestamp="1645820509543" timestamp="189205931" />
  <Command __id="8984" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:15 EST 2022" starttimestamp="1645820509543" timestamp="189205931" />
  <DocumentChange __id="8985" _type="Delete" date="Sun Feb 27 19:55:15 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8022" docExpressionCount="689" docLength="8814" endLine="223" length="1" offset="5092" startLine="223" starttimestamp="1645820509543" timestamp="189206093">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="8986" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:15 EST 2022" starttimestamp="1645820509543" timestamp="189206099" />
  <Command __id="8987" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:15 EST 2022" starttimestamp="1645820509543" timestamp="189206099" />
  <Command __id="8989" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:15 EST 2022" starttimestamp="1645820509543" timestamp="189206304" />
  <Command __id="8990" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:15 EST 2022" starttimestamp="1645820509543" timestamp="189206305" />
  <Command __id="8991" _type="ShellCommand" date="Sun Feb 27 19:55:17 EST 2022" starttimestamp="1645820509543" timestamp="189208171" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="8988" _type="Delete" date="Sun Feb 27 19:55:15 EST 2022" docASTNodeCount="1106" docActiveCodeLength="8021" docExpressionCount="688" docLength="8813" endLine="223" length="1" offset="5091" startLine="223" starttimestamp="1645820509543" timestamp="189206302">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8992" _type="ShellCommand" date="Sun Feb 27 19:55:19 EST 2022" starttimestamp="1645820509543" timestamp="189210165" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="8993" _type="Insert" date="Sun Feb 27 19:55:26 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8022" docExpressionCount="689" docLength="8814" length="1" offset="5091" starttimestamp="1645820509543" timestamp="189216616">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="8994" _type="InsertStringCommand" date="Sun Feb 27 19:55:26 EST 2022" starttimestamp="1645820509543" timestamp="189216623" timestamp2="189216623">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8995" _type="InsertStringCommand" date="Sun Feb 27 19:55:26 EST 2022" starttimestamp="1645820509543" timestamp="189216623" timestamp2="189216623">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="8996" _type="Insert" date="Sun Feb 27 19:55:26 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8023" docExpressionCount="689" docLength="8815" length="1" offset="5092" starttimestamp="1645820509543" timestamp="189216713">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="8997" _type="InsertStringCommand" date="Sun Feb 27 19:55:26 EST 2022" starttimestamp="1645820509543" timestamp="189216720" timestamp2="189216720">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="8998" _type="InsertStringCommand" date="Sun Feb 27 19:55:26 EST 2022" starttimestamp="1645820509543" timestamp="189216720" timestamp2="189216720">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="8999" _type="Insert" date="Sun Feb 27 19:55:26 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8024" docExpressionCount="689" docLength="8816" length="1" offset="5093" starttimestamp="1645820509543" timestamp="189216865">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="9000" _type="InsertStringCommand" date="Sun Feb 27 19:55:26 EST 2022" starttimestamp="1645820509543" timestamp="189216870" timestamp2="189216870">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="9001" _type="InsertStringCommand" date="Sun Feb 27 19:55:26 EST 2022" starttimestamp="1645820509543" timestamp="189216870" timestamp2="189216870">
    <data><![CDATA[k]]></data>
  </Command>
  <DocumentChange __id="9002" _type="Insert" date="Sun Feb 27 19:55:26 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8025" docExpressionCount="689" docLength="8817" length="1" offset="5094" starttimestamp="1645820509543" timestamp="189216975">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="9003" _type="InsertStringCommand" date="Sun Feb 27 19:55:26 EST 2022" starttimestamp="1645820509543" timestamp="189216980" timestamp2="189216980">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9004" _type="InsertStringCommand" date="Sun Feb 27 19:55:26 EST 2022" starttimestamp="1645820509543" timestamp="189216980" timestamp2="189216980">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="9005" _type="Insert" date="Sun Feb 27 19:55:27 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8026" docExpressionCount="689" docLength="8818" length="1" offset="5095" starttimestamp="1645820509543" timestamp="189217608">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <Command __id="9006" _type="InsertStringCommand" date="Sun Feb 27 19:55:27 EST 2022" starttimestamp="1645820509543" timestamp="189217612" timestamp2="189217612">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="9007" _type="InsertStringCommand" date="Sun Feb 27 19:55:27 EST 2022" starttimestamp="1645820509543" timestamp="189217612" timestamp2="189217612">
    <data><![CDATA[I]]></data>
  </Command>
  <DocumentChange __id="9008" _type="Insert" date="Sun Feb 27 19:55:27 EST 2022" docASTNodeCount="1108" docActiveCodeLength="8027" docExpressionCount="689" docLength="8819" length="1" offset="5096" starttimestamp="1645820509543" timestamp="189217823">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="9009" _type="InsertStringCommand" date="Sun Feb 27 19:55:27 EST 2022" starttimestamp="1645820509543" timestamp="189217827" timestamp2="189217827">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9010" _type="InsertStringCommand" date="Sun Feb 27 19:55:27 EST 2022" starttimestamp="1645820509543" timestamp="189217827" timestamp2="189217827">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="9011" _type="Insert" date="Sun Feb 27 19:55:27 EST 2022" docASTNodeCount="1109" docActiveCodeLength="8029" docExpressionCount="690" docLength="8821" length="2" offset="5097" starttimestamp="1645820509543" timestamp="189218203">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="9012" _type="InsertStringCommand" date="Sun Feb 27 19:55:27 EST 2022" starttimestamp="1645820509543" timestamp="189218208" timestamp2="189218208">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="9013" _type="InsertStringCommand" date="Sun Feb 27 19:55:27 EST 2022" starttimestamp="1645820509543" timestamp="189218209" timestamp2="189218209">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="9014" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:55:28 EST 2022" starttimestamp="1645820509543" timestamp="189218989" />
  <Command __id="9015" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:55:28 EST 2022" starttimestamp="1645820509543" timestamp="189218989" />
  <DocumentChange __id="9016" _type="Insert" date="Sun Feb 27 19:55:28 EST 2022" docASTNodeCount="1109" docActiveCodeLength="8030" docExpressionCount="690" docLength="8822" length="1" offset="5099" starttimestamp="1645820509543" timestamp="189219415">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="9017" _type="InsertStringCommand" date="Sun Feb 27 19:55:28 EST 2022" starttimestamp="1645820509543" timestamp="189219420" timestamp2="189219420">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="9018" _type="InsertStringCommand" date="Sun Feb 27 19:55:28 EST 2022" starttimestamp="1645820509543" timestamp="189219421" timestamp2="189219421">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="9019" _type="Insert" date="Sun Feb 27 19:55:29 EST 2022" docASTNodeCount="1109" docActiveCodeLength="8043" docExpressionCount="690" docLength="8835" length="13" offset="5100" starttimestamp="1645820509543" timestamp="189219552">
    <text><![CDATA[
	        		]]></text>
  </DocumentChange>
  <Command __id="9020" _type="InsertStringCommand" date="Sun Feb 27 19:55:29 EST 2022" starttimestamp="1645820509543" timestamp="189219564" timestamp2="189219564">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9021" _type="InsertStringCommand" date="Sun Feb 27 19:55:29 EST 2022" starttimestamp="1645820509543" timestamp="189219564" timestamp2="189219564">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="9022" _type="Insert" date="Sun Feb 27 19:55:32 EST 2022" docASTNodeCount="1111" docActiveCodeLength="8044" docExpressionCount="691" docLength="8836" length="1" offset="5113" starttimestamp="1645820509543" timestamp="189222999">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="9023" _type="InsertStringCommand" date="Sun Feb 27 19:55:32 EST 2022" starttimestamp="1645820509543" timestamp="189223004" timestamp2="189223004">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9024" _type="InsertStringCommand" date="Sun Feb 27 19:55:32 EST 2022" starttimestamp="1645820509543" timestamp="189223004" timestamp2="189223004">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="9025" _type="Insert" date="Sun Feb 27 19:55:32 EST 2022" docASTNodeCount="1109" docActiveCodeLength="8045" docExpressionCount="690" docLength="8837" length="1" offset="5114" starttimestamp="1645820509543" timestamp="189223095">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="9026" _type="InsertStringCommand" date="Sun Feb 27 19:55:32 EST 2022" starttimestamp="1645820509543" timestamp="189223099" timestamp2="189223099">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="9027" _type="InsertStringCommand" date="Sun Feb 27 19:55:32 EST 2022" starttimestamp="1645820509543" timestamp="189223099" timestamp2="189223099">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="9028" _type="Insert" date="Sun Feb 27 19:55:35 EST 2022" docASTNodeCount="1109" docActiveCodeLength="8046" docExpressionCount="690" docLength="8838" length="1" offset="5115" starttimestamp="1645820509543" timestamp="189226278">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9029" _type="InsertStringCommand" date="Sun Feb 27 19:55:35 EST 2022" starttimestamp="1645820509543" timestamp="189226283" timestamp2="189226283">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9030" _type="InsertStringCommand" date="Sun Feb 27 19:55:35 EST 2022" starttimestamp="1645820509543" timestamp="189226283" timestamp2="189226283">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="9031" _type="Insert" date="Sun Feb 27 19:55:36 EST 2022" docASTNodeCount="1111" docActiveCodeLength="8048" docExpressionCount="690" docLength="8840" length="2" offset="5116" starttimestamp="1645820509543" timestamp="189226603">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="9032" _type="InsertStringCommand" date="Sun Feb 27 19:55:36 EST 2022" starttimestamp="1645820509543" timestamp="189226615" timestamp2="189226615">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="9033" _type="InsertStringCommand" date="Sun Feb 27 19:55:36 EST 2022" starttimestamp="1645820509543" timestamp="189226616" timestamp2="189226616">
    <data><![CDATA[(]]></data>
  </Command>
  <DocumentChange __id="9034" _type="Insert" date="Sun Feb 27 19:55:36 EST 2022" docASTNodeCount="1111" docActiveCodeLength="8049" docExpressionCount="691" docLength="8841" length="1" offset="5117" starttimestamp="1645820509543" timestamp="189226907">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="9035" _type="InsertStringCommand" date="Sun Feb 27 19:55:36 EST 2022" starttimestamp="1645820509543" timestamp="189226917" timestamp2="189226917">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="9036" _type="InsertStringCommand" date="Sun Feb 27 19:55:36 EST 2022" starttimestamp="1645820509543" timestamp="189226917" timestamp2="189226917">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="9037" _type="Insert" date="Sun Feb 27 19:55:36 EST 2022" docASTNodeCount="1111" docActiveCodeLength="8050" docExpressionCount="691" docLength="8842" length="1" offset="5118" starttimestamp="1645820509543" timestamp="189227018">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="9038" _type="InsertStringCommand" date="Sun Feb 27 19:55:36 EST 2022" starttimestamp="1645820509543" timestamp="189227020" timestamp2="189227020">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="9039" _type="InsertStringCommand" date="Sun Feb 27 19:55:36 EST 2022" starttimestamp="1645820509543" timestamp="189227020" timestamp2="189227020">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="9040" _type="Insert" date="Sun Feb 27 19:55:36 EST 2022" docASTNodeCount="1111" docActiveCodeLength="8051" docExpressionCount="691" docLength="8843" length="1" offset="5119" starttimestamp="1645820509543" timestamp="189227178">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="9041" _type="InsertStringCommand" date="Sun Feb 27 19:55:36 EST 2022" starttimestamp="1645820509543" timestamp="189227181" timestamp2="189227181">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9042" _type="InsertStringCommand" date="Sun Feb 27 19:55:36 EST 2022" starttimestamp="1645820509543" timestamp="189227181" timestamp2="189227181">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="9043" _type="Insert" date="Sun Feb 27 19:55:36 EST 2022" docASTNodeCount="1111" docActiveCodeLength="8052" docExpressionCount="691" docLength="8844" length="1" offset="5120" starttimestamp="1645820509543" timestamp="189227314">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="9044" _type="InsertStringCommand" date="Sun Feb 27 19:55:36 EST 2022" starttimestamp="1645820509543" timestamp="189227316" timestamp2="189227316">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9045" _type="InsertStringCommand" date="Sun Feb 27 19:55:36 EST 2022" starttimestamp="1645820509543" timestamp="189227316" timestamp2="189227316">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="9046" _type="Insert" date="Sun Feb 27 19:55:36 EST 2022" docASTNodeCount="1111" docActiveCodeLength="8053" docExpressionCount="691" docLength="8845" length="1" offset="5121" starttimestamp="1645820509543" timestamp="189227420">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="9047" _type="InsertStringCommand" date="Sun Feb 27 19:55:36 EST 2022" starttimestamp="1645820509543" timestamp="189227422" timestamp2="189227422">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9048" _type="InsertStringCommand" date="Sun Feb 27 19:55:36 EST 2022" starttimestamp="1645820509543" timestamp="189227422" timestamp2="189227422">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="9049" _type="Insert" date="Sun Feb 27 19:55:37 EST 2022" docASTNodeCount="1111" docActiveCodeLength="8054" docExpressionCount="691" docLength="8846" length="1" offset="5122" starttimestamp="1645820509543" timestamp="189227564">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="9050" _type="InsertStringCommand" date="Sun Feb 27 19:55:37 EST 2022" starttimestamp="1645820509543" timestamp="189227567" timestamp2="189227567">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9051" _type="InsertStringCommand" date="Sun Feb 27 19:55:37 EST 2022" starttimestamp="1645820509543" timestamp="189227567" timestamp2="189227567">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="9052" _type="Insert" date="Sun Feb 27 19:55:37 EST 2022" docASTNodeCount="1111" docActiveCodeLength="8055" docExpressionCount="691" docLength="8847" length="1" offset="5123" starttimestamp="1645820509543" timestamp="189227587">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="9053" _type="InsertStringCommand" date="Sun Feb 27 19:55:37 EST 2022" starttimestamp="1645820509543" timestamp="189227589" timestamp2="189227589">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9054" _type="InsertStringCommand" date="Sun Feb 27 19:55:37 EST 2022" starttimestamp="1645820509543" timestamp="189227589" timestamp2="189227589">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="9055" _type="Insert" date="Sun Feb 27 19:55:37 EST 2022" docASTNodeCount="1111" docActiveCodeLength="8056" docExpressionCount="691" docLength="8848" length="1" offset="5124" starttimestamp="1645820509543" timestamp="189227970">
    <text><![CDATA[C]]></text>
  </DocumentChange>
  <Command __id="9056" _type="InsertStringCommand" date="Sun Feb 27 19:55:37 EST 2022" starttimestamp="1645820509543" timestamp="189227972" timestamp2="189227972">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="9057" _type="InsertStringCommand" date="Sun Feb 27 19:55:37 EST 2022" starttimestamp="1645820509543" timestamp="189227972" timestamp2="189227972">
    <data><![CDATA[C]]></data>
  </Command>
  <DocumentChange __id="9058" _type="Insert" date="Sun Feb 27 19:55:37 EST 2022" docASTNodeCount="1111" docActiveCodeLength="8057" docExpressionCount="691" docLength="8849" length="1" offset="5125" starttimestamp="1645820509543" timestamp="189228290">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <Command __id="9059" _type="InsertStringCommand" date="Sun Feb 27 19:55:37 EST 2022" starttimestamp="1645820509543" timestamp="189228292" timestamp2="189228292">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="9060" _type="InsertStringCommand" date="Sun Feb 27 19:55:37 EST 2022" starttimestamp="1645820509543" timestamp="189228292" timestamp2="189228292">
    <data><![CDATA[h]]></data>
  </Command>
  <DocumentChange __id="9061" _type="Insert" date="Sun Feb 27 19:55:37 EST 2022" docASTNodeCount="1111" docActiveCodeLength="8058" docExpressionCount="691" docLength="8850" length="1" offset="5126" starttimestamp="1645820509543" timestamp="189228356">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="9062" _type="InsertStringCommand" date="Sun Feb 27 19:55:37 EST 2022" starttimestamp="1645820509543" timestamp="189228358" timestamp2="189228358">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9063" _type="InsertStringCommand" date="Sun Feb 27 19:55:37 EST 2022" starttimestamp="1645820509543" timestamp="189228358" timestamp2="189228358">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="9064" _type="Insert" date="Sun Feb 27 19:55:38 EST 2022" docASTNodeCount="1111" docActiveCodeLength="8059" docExpressionCount="691" docLength="8851" length="1" offset="5127" starttimestamp="1645820509543" timestamp="189228466">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="9065" _type="InsertStringCommand" date="Sun Feb 27 19:55:38 EST 2022" starttimestamp="1645820509543" timestamp="189228468" timestamp2="189228468">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9066" _type="InsertStringCommand" date="Sun Feb 27 19:55:38 EST 2022" starttimestamp="1645820509543" timestamp="189228468" timestamp2="189228468">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="9067" _type="Insert" date="Sun Feb 27 19:55:38 EST 2022" docASTNodeCount="1111" docActiveCodeLength="8060" docExpressionCount="691" docLength="8852" length="1" offset="5128" starttimestamp="1645820509543" timestamp="189228939">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9068" _type="InsertStringCommand" date="Sun Feb 27 19:55:38 EST 2022" starttimestamp="1645820509543" timestamp="189228941" timestamp2="189228941">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9069" _type="InsertStringCommand" date="Sun Feb 27 19:55:38 EST 2022" starttimestamp="1645820509543" timestamp="189228941" timestamp2="189228941">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="9070" _type="Insert" date="Sun Feb 27 19:55:38 EST 2022" docASTNodeCount="1113" docActiveCodeLength="8061" docExpressionCount="692" docLength="8853" length="1" offset="5129" starttimestamp="1645820509543" timestamp="189229185">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="9071" _type="InsertStringCommand" date="Sun Feb 27 19:55:38 EST 2022" starttimestamp="1645820509543" timestamp="189229187" timestamp2="189229187">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="9072" _type="InsertStringCommand" date="Sun Feb 27 19:55:38 EST 2022" starttimestamp="1645820509543" timestamp="189229187" timestamp2="189229187">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="9073" _type="Insert" date="Sun Feb 27 19:55:38 EST 2022" docASTNodeCount="1113" docActiveCodeLength="8062" docExpressionCount="692" docLength="8854" length="1" offset="5130" starttimestamp="1645820509543" timestamp="189229315">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="9074" _type="InsertStringCommand" date="Sun Feb 27 19:55:38 EST 2022" starttimestamp="1645820509543" timestamp="189229317" timestamp2="189229317">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="9075" _type="InsertStringCommand" date="Sun Feb 27 19:55:38 EST 2022" starttimestamp="1645820509543" timestamp="189229318" timestamp2="189229318">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="9076" _type="Insert" date="Sun Feb 27 19:55:38 EST 2022" docASTNodeCount="1113" docActiveCodeLength="8063" docExpressionCount="692" docLength="8855" length="1" offset="5131" starttimestamp="1645820509543" timestamp="189229420">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9077" _type="InsertStringCommand" date="Sun Feb 27 19:55:38 EST 2022" starttimestamp="1645820509543" timestamp="189229422" timestamp2="189229422">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9078" _type="InsertStringCommand" date="Sun Feb 27 19:55:38 EST 2022" starttimestamp="1645820509543" timestamp="189229422" timestamp2="189229422">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="9079" _type="Insert" date="Sun Feb 27 19:55:39 EST 2022" docASTNodeCount="701" docActiveCodeLength="8065" docExpressionCount="435" docLength="8857" length="2" offset="5132" starttimestamp="1645820509543" timestamp="189230029">
    <text><![CDATA['']]></text>
  </DocumentChange>
  <Command __id="9080" _type="InsertStringCommand" date="Sun Feb 27 19:55:39 EST 2022" starttimestamp="1645820509543" timestamp="189230034" timestamp2="189230034">
    <data><![CDATA[']]></data>
  </Command>
  <Command __id="9081" _type="InsertStringCommand" date="Sun Feb 27 19:55:39 EST 2022" starttimestamp="1645820509543" timestamp="189230035" timestamp2="189230035">
    <data><![CDATA[']]></data>
  </Command>
  <DocumentChange __id="9082" _type="Insert" date="Sun Feb 27 19:55:40 EST 2022" docASTNodeCount="1113" docActiveCodeLength="8066" docExpressionCount="693" docLength="8858" length="1" offset="5133" starttimestamp="1645820509543" timestamp="189230554">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="9083" _type="InsertStringCommand" date="Sun Feb 27 19:55:40 EST 2022" starttimestamp="1645820509543" timestamp="189230557" timestamp2="189230557">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9084" _type="InsertStringCommand" date="Sun Feb 27 19:55:40 EST 2022" starttimestamp="1645820509543" timestamp="189230557" timestamp2="189230557">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9085" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:55:40 EST 2022" starttimestamp="1645820509543" timestamp="189230817" />
  <Command __id="9086" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:55:40 EST 2022" starttimestamp="1645820509543" timestamp="189230817" />
  <Command __id="9087" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:55:40 EST 2022" starttimestamp="1645820509543" timestamp="189231038" />
  <Command __id="9088" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:55:40 EST 2022" starttimestamp="1645820509543" timestamp="189231038" />
  <DocumentChange __id="9089" _type="Insert" date="Sun Feb 27 19:55:41 EST 2022" docASTNodeCount="1113" docActiveCodeLength="8067" docExpressionCount="693" docLength="8859" length="1" offset="5136" starttimestamp="1645820509543" timestamp="189231463">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9090" _type="InsertStringCommand" date="Sun Feb 27 19:55:41 EST 2022" starttimestamp="1645820509543" timestamp="189231472" timestamp2="189231472">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9091" _type="InsertStringCommand" date="Sun Feb 27 19:55:41 EST 2022" starttimestamp="1645820509543" timestamp="189231472" timestamp2="189231472">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="9092" _type="Insert" date="Sun Feb 27 19:55:41 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8068" docExpressionCount="693" docLength="8860" length="1" offset="5137" starttimestamp="1645820509543" timestamp="189231856">
    <text><![CDATA[【]]></text>
  </DocumentChange>
  <DocumentChange __id="9093" _type="Insert" date="Sun Feb 27 19:55:41 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8081" docExpressionCount="693" docLength="8873" length="13" offset="5138" starttimestamp="1645820509543" timestamp="189231940">
    <text><![CDATA[
	        		]]></text>
  </DocumentChange>
  <Command __id="9094" _type="InsertStringCommand" date="Sun Feb 27 19:55:41 EST 2022" starttimestamp="1645820509543" timestamp="189231954" timestamp2="189231954">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9095" _type="InsertStringCommand" date="Sun Feb 27 19:55:41 EST 2022" starttimestamp="1645820509543" timestamp="189231955" timestamp2="189231955">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="9096" _type="Delete" date="Sun Feb 27 19:55:43 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8080" docExpressionCount="693" docLength="8872" endLine="225" length="1" offset="5150" startLine="225" starttimestamp="1645820509543" timestamp="189233999">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="9097" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:43 EST 2022" starttimestamp="1645820509543" timestamp="189234001" />
  <Command __id="9098" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:43 EST 2022" starttimestamp="1645820509543" timestamp="189234002" />
  <DocumentChange __id="9099" _type="Delete" date="Sun Feb 27 19:55:43 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8079" docExpressionCount="693" docLength="8871" endLine="225" length="1" offset="5149" startLine="225" starttimestamp="1645820509543" timestamp="189234167">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="9100" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:43 EST 2022" starttimestamp="1645820509543" timestamp="189234170" />
  <Command __id="9101" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:43 EST 2022" starttimestamp="1645820509543" timestamp="189234170" />
  <DocumentChange __id="9102" _type="Delete" date="Sun Feb 27 19:55:43 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8078" docExpressionCount="693" docLength="8870" endLine="225" length="1" offset="5148" startLine="225" starttimestamp="1645820509543" timestamp="189234359">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9103" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:43 EST 2022" starttimestamp="1645820509543" timestamp="189234362" />
  <Command __id="9104" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:43 EST 2022" starttimestamp="1645820509543" timestamp="189234362" />
  <DocumentChange __id="9105" _type="Delete" date="Sun Feb 27 19:55:44 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8077" docExpressionCount="693" docLength="8869" endLine="225" length="1" offset="5147" startLine="225" starttimestamp="1645820509543" timestamp="189234519">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9106" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:44 EST 2022" starttimestamp="1645820509543" timestamp="189234522" />
  <Command __id="9107" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:44 EST 2022" starttimestamp="1645820509543" timestamp="189234522" />
  <DocumentChange __id="9108" _type="Delete" date="Sun Feb 27 19:55:44 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8076" docExpressionCount="693" docLength="8868" endLine="225" length="1" offset="5146" startLine="225" starttimestamp="1645820509543" timestamp="189234680">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9109" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:44 EST 2022" starttimestamp="1645820509543" timestamp="189234683" />
  <Command __id="9110" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:44 EST 2022" starttimestamp="1645820509543" timestamp="189234683" />
  <DocumentChange __id="9111" _type="Delete" date="Sun Feb 27 19:55:44 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8075" docExpressionCount="693" docLength="8867" endLine="225" length="1" offset="5145" startLine="225" starttimestamp="1645820509543" timestamp="189234840">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9112" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:44 EST 2022" starttimestamp="1645820509543" timestamp="189234841" />
  <Command __id="9113" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:44 EST 2022" starttimestamp="1645820509543" timestamp="189234841" />
  <DocumentChange __id="9114" _type="Delete" date="Sun Feb 27 19:55:44 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8074" docExpressionCount="693" docLength="8866" endLine="225" length="1" offset="5144" startLine="225" starttimestamp="1645820509543" timestamp="189234991">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9115" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:44 EST 2022" starttimestamp="1645820509543" timestamp="189234993" />
  <Command __id="9116" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:44 EST 2022" starttimestamp="1645820509543" timestamp="189234993" />
  <DocumentChange __id="9117" _type="Delete" date="Sun Feb 27 19:55:44 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8073" docExpressionCount="693" docLength="8865" endLine="225" length="1" offset="5143" startLine="225" starttimestamp="1645820509543" timestamp="189235143">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9118" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:44 EST 2022" starttimestamp="1645820509543" timestamp="189235145" />
  <Command __id="9119" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:44 EST 2022" starttimestamp="1645820509543" timestamp="189235146" />
  <DocumentChange __id="9120" _type="Delete" date="Sun Feb 27 19:55:44 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8072" docExpressionCount="693" docLength="8864" endLine="225" length="1" offset="5142" startLine="225" starttimestamp="1645820509543" timestamp="189235296">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9121" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:44 EST 2022" starttimestamp="1645820509543" timestamp="189235298" />
  <Command __id="9122" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:44 EST 2022" starttimestamp="1645820509543" timestamp="189235298" />
  <DocumentChange __id="9123" _type="Delete" date="Sun Feb 27 19:55:45 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8071" docExpressionCount="693" docLength="8863" endLine="225" length="1" offset="5141" startLine="225" starttimestamp="1645820509543" timestamp="189235463">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9124" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:45 EST 2022" starttimestamp="1645820509543" timestamp="189235465" />
  <Command __id="9125" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:45 EST 2022" starttimestamp="1645820509543" timestamp="189235465" />
  <DocumentChange __id="9126" _type="Delete" date="Sun Feb 27 19:55:45 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8070" docExpressionCount="693" docLength="8862" endLine="225" length="1" offset="5140" startLine="225" starttimestamp="1645820509543" timestamp="189235616">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="9127" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:45 EST 2022" starttimestamp="1645820509543" timestamp="189235618" />
  <Command __id="9128" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:45 EST 2022" starttimestamp="1645820509543" timestamp="189235619" />
  <DocumentChange __id="9129" _type="Delete" date="Sun Feb 27 19:55:45 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8068" docExpressionCount="693" docLength="8860" endLine="225" length="2" offset="5138" startLine="224" starttimestamp="1645820509543" timestamp="189235761">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="9130" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:45 EST 2022" starttimestamp="1645820509543" timestamp="189235769" />
  <Command __id="9131" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:45 EST 2022" starttimestamp="1645820509543" timestamp="189235769" />
  <DocumentChange __id="9132" _type="Delete" date="Sun Feb 27 19:55:45 EST 2022" docASTNodeCount="1113" docActiveCodeLength="8067" docExpressionCount="693" docLength="8859" endLine="224" length="1" offset="5137" startLine="224" starttimestamp="1645820509543" timestamp="189235895">
    <text><![CDATA[【]]></text>
  </DocumentChange>
  <Command __id="9133" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:45 EST 2022" starttimestamp="1645820509543" timestamp="189235897" />
  <Command __id="9134" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:45 EST 2022" starttimestamp="1645820509543" timestamp="189235898" />
  <DocumentChange __id="9135" _type="Delete" date="Sun Feb 27 19:55:45 EST 2022" docASTNodeCount="1113" docActiveCodeLength="8066" docExpressionCount="693" docLength="8858" endLine="224" length="1" offset="5136" startLine="224" starttimestamp="1645820509543" timestamp="189236087">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9136" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:45 EST 2022" starttimestamp="1645820509543" timestamp="189236091" />
  <Command __id="9137" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:55:45 EST 2022" starttimestamp="1645820509543" timestamp="189236091" />
  <DocumentChange __id="9138" _type="Insert" date="Sun Feb 27 19:55:46 EST 2022" docASTNodeCount="1113" docActiveCodeLength="8067" docExpressionCount="693" docLength="8859" length="1" offset="5136" starttimestamp="1645820509543" timestamp="189237120">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9139" _type="InsertStringCommand" date="Sun Feb 27 19:55:46 EST 2022" starttimestamp="1645820509543" timestamp="189237128" timestamp2="189237128">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9140" _type="InsertStringCommand" date="Sun Feb 27 19:55:46 EST 2022" starttimestamp="1645820509543" timestamp="189237129" timestamp2="189237129">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="9141" _type="Insert" date="Sun Feb 27 19:55:46 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8068" docExpressionCount="693" docLength="8860" length="1" offset="5137" starttimestamp="1645820509543" timestamp="189237431">
    <text><![CDATA[{]]></text>
  </DocumentChange>
  <Command __id="9142" _type="InsertStringCommand" date="Sun Feb 27 19:55:46 EST 2022" starttimestamp="1645820509543" timestamp="189237438" timestamp2="189237438">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="9143" _type="InsertStringCommand" date="Sun Feb 27 19:55:46 EST 2022" starttimestamp="1645820509543" timestamp="189237438" timestamp2="189237438">
    <data><![CDATA[{]]></data>
  </Command>
  <DocumentChange __id="9144" _type="Insert" date="Sun Feb 27 19:55:47 EST 2022" docASTNodeCount="1114" docActiveCodeLength="8096" docExpressionCount="693" docLength="8888" length="28" offset="5138" starttimestamp="1645820509543" timestamp="189237871">
    <text><![CDATA[
	        			
	        		}]]></text>
  </DocumentChange>
  <Command __id="9145" _type="InsertStringCommand" date="Sun Feb 27 19:55:47 EST 2022" starttimestamp="1645820509543" timestamp="189237878" timestamp2="189237878">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9146" _type="InsertStringCommand" date="Sun Feb 27 19:55:47 EST 2022" starttimestamp="1645820509543" timestamp="189237878" timestamp2="189237878">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="9147" _type="Insert" date="Sun Feb 27 19:55:51 EST 2022" docASTNodeCount="1116" docActiveCodeLength="8097" docExpressionCount="694" docLength="8889" length="1" offset="5152" starttimestamp="1645820509543" timestamp="189241503">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="9148" _type="InsertStringCommand" date="Sun Feb 27 19:55:51 EST 2022" starttimestamp="1645820509543" timestamp="189241508" timestamp2="189241508">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9149" _type="InsertStringCommand" date="Sun Feb 27 19:55:51 EST 2022" starttimestamp="1645820509543" timestamp="189241508" timestamp2="189241508">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="9150" _type="Insert" date="Sun Feb 27 19:55:51 EST 2022" docASTNodeCount="1116" docActiveCodeLength="8098" docExpressionCount="694" docLength="8890" length="1" offset="5153" starttimestamp="1645820509543" timestamp="189241623">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="9151" _type="InsertStringCommand" date="Sun Feb 27 19:55:51 EST 2022" starttimestamp="1645820509543" timestamp="189241628" timestamp2="189241628">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9152" _type="InsertStringCommand" date="Sun Feb 27 19:55:51 EST 2022" starttimestamp="1645820509543" timestamp="189241628" timestamp2="189241628">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="9153" _type="Insert" date="Sun Feb 27 19:55:51 EST 2022" docASTNodeCount="1116" docActiveCodeLength="8099" docExpressionCount="694" docLength="8891" length="1" offset="5154" starttimestamp="1645820509543" timestamp="189241710">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="9154" _type="InsertStringCommand" date="Sun Feb 27 19:55:51 EST 2022" starttimestamp="1645820509543" timestamp="189241716" timestamp2="189241716">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="9155" _type="InsertStringCommand" date="Sun Feb 27 19:55:51 EST 2022" starttimestamp="1645820509543" timestamp="189241716" timestamp2="189241716">
    <data><![CDATA[k]]></data>
  </Command>
  <DocumentChange __id="9156" _type="Insert" date="Sun Feb 27 19:55:51 EST 2022" docASTNodeCount="1116" docActiveCodeLength="8100" docExpressionCount="694" docLength="8892" length="1" offset="5155" starttimestamp="1645820509543" timestamp="189241831">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="9157" _type="InsertStringCommand" date="Sun Feb 27 19:55:51 EST 2022" starttimestamp="1645820509543" timestamp="189241836" timestamp2="189241836">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9158" _type="InsertStringCommand" date="Sun Feb 27 19:55:51 EST 2022" starttimestamp="1645820509543" timestamp="189241836" timestamp2="189241836">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="9159" _type="Insert" date="Sun Feb 27 19:55:52 EST 2022" docASTNodeCount="1116" docActiveCodeLength="8101" docExpressionCount="694" docLength="8893" length="1" offset="5156" starttimestamp="1645820509543" timestamp="189242487">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <Command __id="9160" _type="InsertStringCommand" date="Sun Feb 27 19:55:52 EST 2022" starttimestamp="1645820509543" timestamp="189242492" timestamp2="189242492">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="9161" _type="InsertStringCommand" date="Sun Feb 27 19:55:52 EST 2022" starttimestamp="1645820509543" timestamp="189242492" timestamp2="189242492">
    <data><![CDATA[I]]></data>
  </Command>
  <DocumentChange __id="9162" _type="Insert" date="Sun Feb 27 19:55:52 EST 2022" docASTNodeCount="1116" docActiveCodeLength="8102" docExpressionCount="694" docLength="8894" length="1" offset="5157" starttimestamp="1645820509543" timestamp="189242784">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="9163" _type="InsertStringCommand" date="Sun Feb 27 19:55:52 EST 2022" starttimestamp="1645820509543" timestamp="189242789" timestamp2="189242789">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9164" _type="InsertStringCommand" date="Sun Feb 27 19:55:52 EST 2022" starttimestamp="1645820509543" timestamp="189242789" timestamp2="189242789">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9166" _type="InsertStringCommand" date="Sun Feb 27 19:55:53 EST 2022" starttimestamp="1645820509543" timestamp="189243668" timestamp2="189243668">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="9167" _type="InsertStringCommand" date="Sun Feb 27 19:55:53 EST 2022" starttimestamp="1645820509543" timestamp="189243668" timestamp2="189243668">
    <data><![CDATA[(]]></data>
  </Command>
  <DocumentChange __id="9165" _type="Insert" date="Sun Feb 27 19:55:53 EST 2022" docASTNodeCount="1117" docActiveCodeLength="8104" docExpressionCount="695" docLength="8896" length="2" offset="5158" starttimestamp="1645820509543" timestamp="189243662">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="9170" _type="Insert" date="Sun Feb 27 19:55:54 EST 2022" docASTNodeCount="1117" docActiveCodeLength="8105" docExpressionCount="695" docLength="8897" length="1" offset="5160" starttimestamp="1645820509543" timestamp="189245374">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="9173" _type="Insert" date="Sun Feb 27 19:55:55 EST 2022" docASTNodeCount="1117" docActiveCodeLength="8119" docExpressionCount="695" docLength="8911" length="14" offset="5161" starttimestamp="1645820509543" timestamp="189245479">
    <text><![CDATA[
	        			]]></text>
  </DocumentChange>
  <DocumentChange __id="9176" _type="Insert" date="Sun Feb 27 19:55:57 EST 2022" docASTNodeCount="1119" docActiveCodeLength="8120" docExpressionCount="696" docLength="8912" length="1" offset="5175" starttimestamp="1645820509543" timestamp="189247895">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="9179" _type="Insert" date="Sun Feb 27 19:55:57 EST 2022" docASTNodeCount="1117" docActiveCodeLength="8121" docExpressionCount="695" docLength="8913" length="1" offset="5176" starttimestamp="1645820509543" timestamp="189247950">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="9182" _type="Insert" date="Sun Feb 27 19:55:57 EST 2022" docASTNodeCount="1117" docActiveCodeLength="8122" docExpressionCount="695" docLength="8914" length="1" offset="5177" starttimestamp="1645820509543" timestamp="189248183">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9168" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:55:54 EST 2022" starttimestamp="1645820509543" timestamp="189244693" />
  <Command __id="9169" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:55:54 EST 2022" starttimestamp="1645820509543" timestamp="189244693" />
  <Command __id="9171" _type="InsertStringCommand" date="Sun Feb 27 19:55:54 EST 2022" starttimestamp="1645820509543" timestamp="189245382" timestamp2="189245382">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="9172" _type="InsertStringCommand" date="Sun Feb 27 19:55:54 EST 2022" starttimestamp="1645820509543" timestamp="189245382" timestamp2="189245382">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="9174" _type="InsertStringCommand" date="Sun Feb 27 19:55:55 EST 2022" starttimestamp="1645820509543" timestamp="189245494" timestamp2="189245494">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9175" _type="InsertStringCommand" date="Sun Feb 27 19:55:55 EST 2022" starttimestamp="1645820509543" timestamp="189245494" timestamp2="189245494">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9177" _type="InsertStringCommand" date="Sun Feb 27 19:55:57 EST 2022" starttimestamp="1645820509543" timestamp="189247899" timestamp2="189247899">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9178" _type="InsertStringCommand" date="Sun Feb 27 19:55:57 EST 2022" starttimestamp="1645820509543" timestamp="189247899" timestamp2="189247899">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9180" _type="InsertStringCommand" date="Sun Feb 27 19:55:57 EST 2022" starttimestamp="1645820509543" timestamp="189247955" timestamp2="189247955">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="9181" _type="InsertStringCommand" date="Sun Feb 27 19:55:57 EST 2022" starttimestamp="1645820509543" timestamp="189247955" timestamp2="189247955">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="9183" _type="InsertStringCommand" date="Sun Feb 27 19:55:57 EST 2022" starttimestamp="1645820509543" timestamp="189248188" timestamp2="189248188">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9184" _type="InsertStringCommand" date="Sun Feb 27 19:55:57 EST 2022" starttimestamp="1645820509543" timestamp="189248188" timestamp2="189248188">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9186" _type="InsertStringCommand" date="Sun Feb 27 19:55:58 EST 2022" starttimestamp="1645820509543" timestamp="189249415" timestamp2="189249415">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="9187" _type="InsertStringCommand" date="Sun Feb 27 19:55:58 EST 2022" starttimestamp="1645820509543" timestamp="189249416" timestamp2="189249416">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="9189" _type="InsertStringCommand" date="Sun Feb 27 19:55:59 EST 2022" starttimestamp="1645820509543" timestamp="189249947" timestamp2="189249947">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="9190" _type="InsertStringCommand" date="Sun Feb 27 19:55:59 EST 2022" starttimestamp="1645820509543" timestamp="189249947" timestamp2="189249947">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="9192" _type="InsertStringCommand" date="Sun Feb 27 19:55:59 EST 2022" starttimestamp="1645820509543" timestamp="189250133" timestamp2="189250133">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="9193" _type="InsertStringCommand" date="Sun Feb 27 19:55:59 EST 2022" starttimestamp="1645820509543" timestamp="189250133" timestamp2="189250133">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="9195" _type="InsertStringCommand" date="Sun Feb 27 19:55:59 EST 2022" starttimestamp="1645820509543" timestamp="189250281" timestamp2="189250281">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9196" _type="InsertStringCommand" date="Sun Feb 27 19:55:59 EST 2022" starttimestamp="1645820509543" timestamp="189250281" timestamp2="189250281">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9198" _type="InsertStringCommand" date="Sun Feb 27 19:55:59 EST 2022" starttimestamp="1645820509543" timestamp="189250428" timestamp2="189250428">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9199" _type="InsertStringCommand" date="Sun Feb 27 19:55:59 EST 2022" starttimestamp="1645820509543" timestamp="189250428" timestamp2="189250428">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9201" _type="InsertStringCommand" date="Sun Feb 27 19:56:00 EST 2022" starttimestamp="1645820509543" timestamp="189250532" timestamp2="189250532">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9202" _type="InsertStringCommand" date="Sun Feb 27 19:56:00 EST 2022" starttimestamp="1645820509543" timestamp="189250532" timestamp2="189250532">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="9185" _type="Insert" date="Sun Feb 27 19:55:58 EST 2022" docASTNodeCount="1117" docActiveCodeLength="8124" docExpressionCount="695" docLength="8916" length="2" offset="5178" starttimestamp="1645820509543" timestamp="189249411">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="9188" _type="Insert" date="Sun Feb 27 19:55:59 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8125" docExpressionCount="696" docLength="8917" length="1" offset="5179" starttimestamp="1645820509543" timestamp="189249940">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="9191" _type="Insert" date="Sun Feb 27 19:55:59 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8126" docExpressionCount="696" docLength="8918" length="1" offset="5180" starttimestamp="1645820509543" timestamp="189250131">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="9194" _type="Insert" date="Sun Feb 27 19:55:59 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8127" docExpressionCount="696" docLength="8919" length="1" offset="5181" starttimestamp="1645820509543" timestamp="189250278">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="9197" _type="Insert" date="Sun Feb 27 19:55:59 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8128" docExpressionCount="696" docLength="8920" length="1" offset="5182" starttimestamp="1645820509543" timestamp="189250427">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="9200" _type="Insert" date="Sun Feb 27 19:56:00 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8129" docExpressionCount="696" docLength="8921" length="1" offset="5183" starttimestamp="1645820509543" timestamp="189250530">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="9203" _type="Insert" date="Sun Feb 27 19:56:00 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8130" docExpressionCount="696" docLength="8922" length="1" offset="5184" starttimestamp="1645820509543" timestamp="189250675">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="9206" _type="Insert" date="Sun Feb 27 19:56:00 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8131" docExpressionCount="696" docLength="8923" length="1" offset="5185" starttimestamp="1645820509543" timestamp="189250692">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="9209" _type="Insert" date="Sun Feb 27 19:56:00 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8132" docExpressionCount="696" docLength="8924" length="1" offset="5186" starttimestamp="1645820509543" timestamp="189250868">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="9212" _type="Delete" date="Sun Feb 27 19:56:00 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8131" docExpressionCount="696" docLength="8923" endLine="226" length="1" offset="5186" startLine="226" starttimestamp="1645820509543" timestamp="189251209">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="9215" _type="Insert" date="Sun Feb 27 19:56:01 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8132" docExpressionCount="696" docLength="8924" length="1" offset="5186" starttimestamp="1645820509543" timestamp="189251811">
    <text><![CDATA[C]]></text>
  </DocumentChange>
  <DocumentChange __id="9218" _type="Insert" date="Sun Feb 27 19:56:01 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8133" docExpressionCount="696" docLength="8925" length="1" offset="5187" starttimestamp="1645820509543" timestamp="189252346">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="9221" _type="Insert" date="Sun Feb 27 19:56:02 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8134" docExpressionCount="696" docLength="8926" length="1" offset="5188" starttimestamp="1645820509543" timestamp="189252459">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <DocumentChange __id="9224" _type="Delete" date="Sun Feb 27 19:56:02 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8133" docExpressionCount="696" docLength="8925" endLine="226" length="1" offset="5188" startLine="226" starttimestamp="1645820509543" timestamp="189252728">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <DocumentChange __id="9227" _type="Delete" date="Sun Feb 27 19:56:02 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8132" docExpressionCount="696" docLength="8924" endLine="226" length="1" offset="5187" startLine="226" starttimestamp="1645820509543" timestamp="189252831">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="9230" _type="Insert" date="Sun Feb 27 19:56:02 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8133" docExpressionCount="696" docLength="8925" length="1" offset="5187" starttimestamp="1645820509543" timestamp="189253074">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <DocumentChange __id="9233" _type="Insert" date="Sun Feb 27 19:56:02 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8134" docExpressionCount="696" docLength="8926" length="1" offset="5188" starttimestamp="1645820509543" timestamp="189253147">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="9236" _type="Insert" date="Sun Feb 27 19:56:02 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8135" docExpressionCount="696" docLength="8927" length="1" offset="5189" starttimestamp="1645820509543" timestamp="189253234">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="9204" _type="InsertStringCommand" date="Sun Feb 27 19:56:00 EST 2022" starttimestamp="1645820509543" timestamp="189250677" timestamp2="189250677">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9205" _type="InsertStringCommand" date="Sun Feb 27 19:56:00 EST 2022" starttimestamp="1645820509543" timestamp="189250678" timestamp2="189250678">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9207" _type="InsertStringCommand" date="Sun Feb 27 19:56:00 EST 2022" starttimestamp="1645820509543" timestamp="189250694" timestamp2="189250694">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9208" _type="InsertStringCommand" date="Sun Feb 27 19:56:00 EST 2022" starttimestamp="1645820509543" timestamp="189250694" timestamp2="189250694">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9210" _type="InsertStringCommand" date="Sun Feb 27 19:56:00 EST 2022" starttimestamp="1645820509543" timestamp="189250870" timestamp2="189250870">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9211" _type="InsertStringCommand" date="Sun Feb 27 19:56:00 EST 2022" starttimestamp="1645820509543" timestamp="189250870" timestamp2="189250870">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9213" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:56:00 EST 2022" starttimestamp="1645820509543" timestamp="189251212" />
  <Command __id="9214" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:56:00 EST 2022" starttimestamp="1645820509543" timestamp="189251212" />
  <Command __id="9216" _type="InsertStringCommand" date="Sun Feb 27 19:56:01 EST 2022" starttimestamp="1645820509543" timestamp="189251812" timestamp2="189251812">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="9217" _type="InsertStringCommand" date="Sun Feb 27 19:56:01 EST 2022" starttimestamp="1645820509543" timestamp="189251812" timestamp2="189251812">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="9219" _type="InsertStringCommand" date="Sun Feb 27 19:56:01 EST 2022" starttimestamp="1645820509543" timestamp="189252348" timestamp2="189252348">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9220" _type="InsertStringCommand" date="Sun Feb 27 19:56:01 EST 2022" starttimestamp="1645820509543" timestamp="189252348" timestamp2="189252348">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9222" _type="InsertStringCommand" date="Sun Feb 27 19:56:02 EST 2022" starttimestamp="1645820509543" timestamp="189252462" timestamp2="189252462">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="9223" _type="InsertStringCommand" date="Sun Feb 27 19:56:02 EST 2022" starttimestamp="1645820509543" timestamp="189252462" timestamp2="189252462">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="9225" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:56:02 EST 2022" starttimestamp="1645820509543" timestamp="189252730" />
  <Command __id="9226" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:56:02 EST 2022" starttimestamp="1645820509543" timestamp="189252730" />
  <Command __id="9228" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:56:02 EST 2022" starttimestamp="1645820509543" timestamp="189252834" />
  <Command __id="9229" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:56:02 EST 2022" starttimestamp="1645820509543" timestamp="189252834" />
  <Command __id="9231" _type="InsertStringCommand" date="Sun Feb 27 19:56:02 EST 2022" starttimestamp="1645820509543" timestamp="189253075" timestamp2="189253075">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="9232" _type="InsertStringCommand" date="Sun Feb 27 19:56:02 EST 2022" starttimestamp="1645820509543" timestamp="189253075" timestamp2="189253075">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="9234" _type="InsertStringCommand" date="Sun Feb 27 19:56:02 EST 2022" starttimestamp="1645820509543" timestamp="189253149" timestamp2="189253149">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9235" _type="InsertStringCommand" date="Sun Feb 27 19:56:02 EST 2022" starttimestamp="1645820509543" timestamp="189253150" timestamp2="189253150">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9237" _type="InsertStringCommand" date="Sun Feb 27 19:56:02 EST 2022" starttimestamp="1645820509543" timestamp="189253235" timestamp2="189253235">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9238" _type="InsertStringCommand" date="Sun Feb 27 19:56:02 EST 2022" starttimestamp="1645820509543" timestamp="189253235" timestamp2="189253235">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="9239" _type="Insert" date="Sun Feb 27 19:56:19 EST 2022" docASTNodeCount="1120" docActiveCodeLength="8136" docExpressionCount="696" docLength="8928" length="1" offset="5190" starttimestamp="1645820509543" timestamp="189270289">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9240" _type="InsertStringCommand" date="Sun Feb 27 19:56:19 EST 2022" starttimestamp="1645820509543" timestamp="189270292" timestamp2="189270292">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9241" _type="InsertStringCommand" date="Sun Feb 27 19:56:19 EST 2022" starttimestamp="1645820509543" timestamp="189270293" timestamp2="189270293">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="9242" _type="Insert" date="Sun Feb 27 19:56:20 EST 2022" docASTNodeCount="1122" docActiveCodeLength="8137" docExpressionCount="697" docLength="8929" length="1" offset="5191" starttimestamp="1645820509543" timestamp="189270547">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="9243" _type="InsertStringCommand" date="Sun Feb 27 19:56:20 EST 2022" starttimestamp="1645820509543" timestamp="189270550" timestamp2="189270550">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="9244" _type="InsertStringCommand" date="Sun Feb 27 19:56:20 EST 2022" starttimestamp="1645820509543" timestamp="189270550" timestamp2="189270550">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="9245" _type="Insert" date="Sun Feb 27 19:56:20 EST 2022" docASTNodeCount="1122" docActiveCodeLength="8138" docExpressionCount="697" docLength="8930" length="1" offset="5192" starttimestamp="1645820509543" timestamp="189270889">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="9246" _type="InsertStringCommand" date="Sun Feb 27 19:56:20 EST 2022" starttimestamp="1645820509543" timestamp="189270891" timestamp2="189270891">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="9247" _type="InsertStringCommand" date="Sun Feb 27 19:56:20 EST 2022" starttimestamp="1645820509543" timestamp="189270891" timestamp2="189270891">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="9248" _type="Insert" date="Sun Feb 27 19:56:21 EST 2022" docASTNodeCount="1122" docActiveCodeLength="8139" docExpressionCount="697" docLength="8931" length="1" offset="5193" starttimestamp="1645820509543" timestamp="189271498">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9249" _type="InsertStringCommand" date="Sun Feb 27 19:56:21 EST 2022" starttimestamp="1645820509543" timestamp="189271500" timestamp2="189271500">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9250" _type="InsertStringCommand" date="Sun Feb 27 19:56:21 EST 2022" starttimestamp="1645820509543" timestamp="189271500" timestamp2="189271500">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="9251" _type="Insert" date="Sun Feb 27 19:56:21 EST 2022" docASTNodeCount="701" docActiveCodeLength="8141" docExpressionCount="435" docLength="8933" length="2" offset="5194" starttimestamp="1645820509543" timestamp="189271848">
    <text><![CDATA['']]></text>
  </DocumentChange>
  <Command __id="9252" _type="InsertStringCommand" date="Sun Feb 27 19:56:21 EST 2022" starttimestamp="1645820509543" timestamp="189271853" timestamp2="189271853">
    <data><![CDATA[']]></data>
  </Command>
  <Command __id="9253" _type="InsertStringCommand" date="Sun Feb 27 19:56:21 EST 2022" starttimestamp="1645820509543" timestamp="189271853" timestamp2="189271853">
    <data><![CDATA[']]></data>
  </Command>
  <DocumentChange __id="9254" _type="Insert" date="Sun Feb 27 19:56:22 EST 2022" docASTNodeCount="1122" docActiveCodeLength="8142" docExpressionCount="698" docLength="8934" length="1" offset="5195" starttimestamp="1645820509543" timestamp="189272787">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <Command __id="9255" _type="InsertStringCommand" date="Sun Feb 27 19:56:22 EST 2022" starttimestamp="1645820509543" timestamp="189272789" timestamp2="189272789">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="9256" _type="InsertStringCommand" date="Sun Feb 27 19:56:22 EST 2022" starttimestamp="1645820509543" timestamp="189272789" timestamp2="189272789">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="9257" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:56:22 EST 2022" starttimestamp="1645820509543" timestamp="189273062" />
  <Command __id="9258" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:56:22 EST 2022" starttimestamp="1645820509543" timestamp="189273062" />
  <Command __id="9259" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:56:23 EST 2022" starttimestamp="1645820509543" timestamp="189273566" />
  <Command __id="9260" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:56:23 EST 2022" starttimestamp="1645820509543" timestamp="189273566" />
  <DocumentChange __id="9261" _type="Insert" date="Sun Feb 27 19:56:23 EST 2022" docASTNodeCount="1122" docActiveCodeLength="8143" docExpressionCount="698" docLength="8935" length="1" offset="5198" starttimestamp="1645820509543" timestamp="189273863">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9262" _type="InsertStringCommand" date="Sun Feb 27 19:56:23 EST 2022" starttimestamp="1645820509543" timestamp="189273871" timestamp2="189273871">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9263" _type="InsertStringCommand" date="Sun Feb 27 19:56:23 EST 2022" starttimestamp="1645820509543" timestamp="189273871" timestamp2="189273871">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="9264" _type="Insert" date="Sun Feb 27 19:56:23 EST 2022" docASTNodeCount="1122" docActiveCodeLength="8144" docExpressionCount="698" docLength="8936" length="1" offset="5199" starttimestamp="1645820509543" timestamp="189274184">
    <text><![CDATA[{]]></text>
  </DocumentChange>
  <Command __id="9265" _type="InsertStringCommand" date="Sun Feb 27 19:56:23 EST 2022" starttimestamp="1645820509543" timestamp="189274191" timestamp2="189274191">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="9266" _type="InsertStringCommand" date="Sun Feb 27 19:56:23 EST 2022" starttimestamp="1645820509543" timestamp="189274191" timestamp2="189274191">
    <data><![CDATA[{]]></data>
  </Command>
  <DocumentChange __id="9267" _type="Insert" date="Sun Feb 27 19:56:23 EST 2022" docASTNodeCount="1122" docActiveCodeLength="8174" docExpressionCount="698" docLength="8966" length="30" offset="5200" starttimestamp="1645820509543" timestamp="189274311">
    <text><![CDATA[
	        				
	        			}]]></text>
  </DocumentChange>
  <Command __id="9268" _type="InsertStringCommand" date="Sun Feb 27 19:56:23 EST 2022" starttimestamp="1645820509543" timestamp="189274320" timestamp2="189274320">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9269" _type="InsertStringCommand" date="Sun Feb 27 19:56:23 EST 2022" starttimestamp="1645820509543" timestamp="189274320" timestamp2="189274320">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="9270" _type="Insert" date="Sun Feb 27 19:56:25 EST 2022" docASTNodeCount="1124" docActiveCodeLength="8175" docExpressionCount="699" docLength="8967" length="1" offset="5215" starttimestamp="1645820509543" timestamp="189276431">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="9271" _type="InsertStringCommand" date="Sun Feb 27 19:56:25 EST 2022" starttimestamp="1645820509543" timestamp="189276438" timestamp2="189276438">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9272" _type="InsertStringCommand" date="Sun Feb 27 19:56:25 EST 2022" starttimestamp="1645820509543" timestamp="189276438" timestamp2="189276438">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="9273" _type="Insert" date="Sun Feb 27 19:56:26 EST 2022" docASTNodeCount="1124" docActiveCodeLength="8176" docExpressionCount="699" docLength="8968" length="1" offset="5216" starttimestamp="1645820509543" timestamp="189276569">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="9274" _type="InsertStringCommand" date="Sun Feb 27 19:56:26 EST 2022" starttimestamp="1645820509543" timestamp="189276578" timestamp2="189276578">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9275" _type="InsertStringCommand" date="Sun Feb 27 19:56:26 EST 2022" starttimestamp="1645820509543" timestamp="189276578" timestamp2="189276578">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="9276" _type="Insert" date="Sun Feb 27 19:56:26 EST 2022" docASTNodeCount="1124" docActiveCodeLength="8177" docExpressionCount="699" docLength="8969" length="1" offset="5217" starttimestamp="1645820509543" timestamp="189276823">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="9277" _type="InsertStringCommand" date="Sun Feb 27 19:56:26 EST 2022" starttimestamp="1645820509543" timestamp="189276828" timestamp2="189276828">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="9278" _type="InsertStringCommand" date="Sun Feb 27 19:56:26 EST 2022" starttimestamp="1645820509543" timestamp="189276828" timestamp2="189276828">
    <data><![CDATA[k]]></data>
  </Command>
  <DocumentChange __id="9279" _type="Insert" date="Sun Feb 27 19:56:26 EST 2022" docASTNodeCount="1124" docActiveCodeLength="8178" docExpressionCount="699" docLength="8970" length="1" offset="5218" starttimestamp="1645820509543" timestamp="189276943">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="9280" _type="InsertStringCommand" date="Sun Feb 27 19:56:26 EST 2022" starttimestamp="1645820509543" timestamp="189276946" timestamp2="189276946">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9281" _type="InsertStringCommand" date="Sun Feb 27 19:56:26 EST 2022" starttimestamp="1645820509543" timestamp="189276947" timestamp2="189276947">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="9282" _type="Insert" date="Sun Feb 27 19:56:26 EST 2022" docASTNodeCount="1124" docActiveCodeLength="8179" docExpressionCount="699" docLength="8971" length="1" offset="5219" starttimestamp="1645820509543" timestamp="189277159">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9283" _type="InsertStringCommand" date="Sun Feb 27 19:56:26 EST 2022" starttimestamp="1645820509543" timestamp="189277163" timestamp2="189277163">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9284" _type="InsertStringCommand" date="Sun Feb 27 19:56:26 EST 2022" starttimestamp="1645820509543" timestamp="189277164" timestamp2="189277164">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="9285" _type="Delete" date="Sun Feb 27 19:56:27 EST 2022" docASTNodeCount="1124" docActiveCodeLength="8178" docExpressionCount="699" docLength="8970" endLine="227" length="1" offset="5219" startLine="227" starttimestamp="1645820509543" timestamp="189277567">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9286" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:56:27 EST 2022" starttimestamp="1645820509543" timestamp="189277569" />
  <Command __id="9287" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Feb 27 19:56:27 EST 2022" starttimestamp="1645820509543" timestamp="189277569" />
  <DocumentChange __id="9288" _type="Insert" date="Sun Feb 27 19:56:27 EST 2022" docASTNodeCount="1124" docActiveCodeLength="8179" docExpressionCount="699" docLength="8971" length="1" offset="5219" starttimestamp="1645820509543" timestamp="189277855">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <Command __id="9289" _type="InsertStringCommand" date="Sun Feb 27 19:56:27 EST 2022" starttimestamp="1645820509543" timestamp="189277862" timestamp2="189277862">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="9290" _type="InsertStringCommand" date="Sun Feb 27 19:56:27 EST 2022" starttimestamp="1645820509543" timestamp="189277862" timestamp2="189277862">
    <data><![CDATA[I]]></data>
  </Command>
  <DocumentChange __id="9291" _type="Insert" date="Sun Feb 27 19:56:27 EST 2022" docASTNodeCount="1124" docActiveCodeLength="8180" docExpressionCount="699" docLength="8972" length="1" offset="5220" starttimestamp="1645820509543" timestamp="189278208">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="9292" _type="InsertStringCommand" date="Sun Feb 27 19:56:27 EST 2022" starttimestamp="1645820509543" timestamp="189278214" timestamp2="189278214">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9293" _type="InsertStringCommand" date="Sun Feb 27 19:56:27 EST 2022" starttimestamp="1645820509543" timestamp="189278214" timestamp2="189278214">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="9294" _type="Insert" date="Sun Feb 27 19:56:28 EST 2022" docASTNodeCount="1125" docActiveCodeLength="8182" docExpressionCount="700" docLength="8974" length="2" offset="5221" starttimestamp="1645820509543" timestamp="189279086">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="9295" _type="InsertStringCommand" date="Sun Feb 27 19:56:28 EST 2022" starttimestamp="1645820509543" timestamp="189279090" timestamp2="189279090">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="9296" _type="InsertStringCommand" date="Sun Feb 27 19:56:28 EST 2022" starttimestamp="1645820509543" timestamp="189279090" timestamp2="189279090">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="9297" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:56:29 EST 2022" starttimestamp="1645820509543" timestamp="189279869" />
  <Command __id="9298" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sun Feb 27 19:56:29 EST 2022" starttimestamp="1645820509543" timestamp="189279869" />
  <DocumentChange __id="9299" _type="Insert" date="Sun Feb 27 19:56:30 EST 2022" docASTNodeCount="1125" docActiveCodeLength="8183" docExpressionCount="700" docLength="8975" length="1" offset="5223" starttimestamp="1645820509543" timestamp="189280783">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="9300" _type="InsertStringCommand" date="Sun Feb 27 19:56:30 EST 2022" starttimestamp="1645820509543" timestamp="189280812" timestamp2="189280812">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="9301" _type="InsertStringCommand" date="Sun Feb 27 19:56:30 EST 2022" starttimestamp="1645820509543" timestamp="189280812" timestamp2="189280812">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="9302" _type="Insert" date="Sun Feb 27 19:56:30 EST 2022" docASTNodeCount="1125" docActiveCodeLength="8198" docExpressionCount="700" docLength="8990" length="15" offset="5224" starttimestamp="1645820509543" timestamp="189280905">
    <text><![CDATA[
	        				]]></text>
  </DocumentChange>
  <Command __id="9303" _type="InsertStringCommand" date="Sun Feb 27 19:56:30 EST 2022" starttimestamp="1645820509543" timestamp="189280916" timestamp2="189280916">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9304" _type="InsertStringCommand" date="Sun Feb 27 19:56:30 EST 2022" starttimestamp="1645820509543" timestamp="189280917" timestamp2="189280917">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="9305" _type="Insert" date="Sun Feb 27 19:56:31 EST 2022" docASTNodeCount="1127" docActiveCodeLength="8199" docExpressionCount="701" docLength="8991" length="1" offset="5239" starttimestamp="1645820509543" timestamp="189281710">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="9306" _type="InsertStringCommand" date="Sun Feb 27 19:56:31 EST 2022" starttimestamp="1645820509543" timestamp="189281723" timestamp2="189281723">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9307" _type="InsertStringCommand" date="Sun Feb 27 19:56:31 EST 2022" starttimestamp="1645820509543" timestamp="189281723" timestamp2="189281723">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="9308" _type="Insert" date="Sun Feb 27 19:56:31 EST 2022" docASTNodeCount="1127" docActiveCodeLength="8200" docExpressionCount="701" docLength="8992" length="1" offset="5240" starttimestamp="1645820509543" timestamp="189281814">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="9309" _type="InsertStringCommand" date="Sun Feb 27 19:56:31 EST 2022" starttimestamp="1645820509543" timestamp="189281821" timestamp2="189281821">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9310" _type="InsertStringCommand" date="Sun Feb 27 19:56:31 EST 2022" starttimestamp="1645820509543" timestamp="189281821" timestamp2="189281821">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="9311" _type="Insert" date="Sun Feb 27 19:56:31 EST 2022" docASTNodeCount="1127" docActiveCodeLength="8201" docExpressionCount="701" docLength="8993" length="1" offset="5241" starttimestamp="1645820509543" timestamp="189281959">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="9312" _type="InsertStringCommand" date="Sun Feb 27 19:56:31 EST 2022" starttimestamp="1645820509543" timestamp="189281963" timestamp2="189281963">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9313" _type="InsertStringCommand" date="Sun Feb 27 19:56:31 EST 2022" starttimestamp="1645820509543" timestamp="189281963" timestamp2="189281963">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="9314" _type="Insert" date="Sun Feb 27 19:56:31 EST 2022" docASTNodeCount="1127" docActiveCodeLength="8202" docExpressionCount="701" docLength="8994" length="1" offset="5242" starttimestamp="1645820509543" timestamp="189282127">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="9315" _type="InsertStringCommand" date="Sun Feb 27 19:56:31 EST 2022" starttimestamp="1645820509543" timestamp="189282133" timestamp2="189282133">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="9316" _type="InsertStringCommand" date="Sun Feb 27 19:56:31 EST 2022" starttimestamp="1645820509543" timestamp="189282133" timestamp2="189282133">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="9317" _type="Insert" date="Sun Feb 27 19:56:31 EST 2022" docASTNodeCount="1127" docActiveCodeLength="8203" docExpressionCount="701" docLength="8995" length="1" offset="5243" starttimestamp="1645820509543" timestamp="189282201">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="9318" _type="InsertStringCommand" date="Sun Feb 27 19:56:31 EST 2022" starttimestamp="1645820509543" timestamp="189282206" timestamp2="189282206">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9319" _type="InsertStringCommand" date="Sun Feb 27 19:56:31 EST 2022" starttimestamp="1645820509543" timestamp="189282206" timestamp2="189282206">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="9320" _type="Insert" date="Sun Feb 27 19:56:31 EST 2022" docASTNodeCount="1126" docActiveCodeLength="8204" docExpressionCount="700" docLength="8996" length="1" offset="5244" starttimestamp="1645820509543" timestamp="189282334">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="9321" _type="InsertStringCommand" date="Sun Feb 27 19:56:31 EST 2022" starttimestamp="1645820509543" timestamp="189282341" timestamp2="189282341">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9322" _type="InsertStringCommand" date="Sun Feb 27 19:56:31 EST 2022" starttimestamp="1645820509543" timestamp="189282341" timestamp2="189282341">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="9323" _type="Insert" date="Sun Feb 27 19:56:32 EST 2022" docASTNodeCount="1126" docActiveCodeLength="8205" docExpressionCount="700" docLength="8997" length="1" offset="5245" starttimestamp="1645820509543" timestamp="189282470">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9324" _type="InsertStringCommand" date="Sun Feb 27 19:56:32 EST 2022" starttimestamp="1645820509543" timestamp="189282475" timestamp2="189282475">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9325" _type="InsertStringCommand" date="Sun Feb 27 19:56:32 EST 2022" starttimestamp="1645820509543" timestamp="189282475" timestamp2="189282475">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="9326" _type="Insert" date="Sun Feb 27 19:56:33 EST 2022" docASTNodeCount="1127" docActiveCodeLength="8206" docExpressionCount="701" docLength="8998" length="1" offset="5246" starttimestamp="1645820509543" timestamp="189283958">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <Command __id="9327" _type="InsertStringCommand" date="Sun Feb 27 19:56:33 EST 2022" starttimestamp="1645820509543" timestamp="189283963" timestamp2="189283963">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="9328" _type="InsertStringCommand" date="Sun Feb 27 19:56:33 EST 2022" starttimestamp="1645820509543" timestamp="189283963" timestamp2="189283963">
    <data><![CDATA[T]]></data>
  </Command>
  <DocumentChange __id="9329" _type="Insert" date="Sun Feb 27 19:56:33 EST 2022" docASTNodeCount="1127" docActiveCodeLength="8207" docExpressionCount="701" docLength="8999" length="1" offset="5247" starttimestamp="1645820509543" timestamp="189284103">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <Command __id="9330" _type="InsertStringCommand" date="Sun Feb 27 19:56:33 EST 2022" starttimestamp="1645820509543" timestamp="189284109" timestamp2="189284109">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="9331" _type="InsertStringCommand" date="Sun Feb 27 19:56:33 EST 2022" starttimestamp="1645820509543" timestamp="189284109" timestamp2="189284109">
    <data><![CDATA[o]]></data>
  </Command>
  <DocumentChange __id="9332" _type="Insert" date="Sun Feb 27 19:56:33 EST 2022" docASTNodeCount="1127" docActiveCodeLength="8208" docExpressionCount="701" docLength="9000" length="1" offset="5248" starttimestamp="1645820509543" timestamp="189284278">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <Command __id="9333" _type="InsertStringCommand" date="Sun Feb 27 19:56:33 EST 2022" starttimestamp="1645820509543" timestamp="189284285" timestamp2="189284285">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="9334" _type="InsertStringCommand" date="Sun Feb 27 19:56:33 EST 2022" starttimestamp="1645820509543" timestamp="189284285" timestamp2="189284285">
    <data><![CDATA[k]]></data>
  </Command>
  <DocumentChange __id="9335" _type="Insert" date="Sun Feb 27 19:56:33 EST 2022" docASTNodeCount="1127" docActiveCodeLength="8209" docExpressionCount="701" docLength="9001" length="1" offset="5249" starttimestamp="1645820509543" timestamp="189284343">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="9336" _type="InsertStringCommand" date="Sun Feb 27 19:56:33 EST 2022" starttimestamp="1645820509543" timestamp="189284348" timestamp2="189284348">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9337" _type="InsertStringCommand" date="Sun Feb 27 19:56:33 EST 2022" starttimestamp="1645820509543" timestamp="189284348" timestamp2="189284348">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="9338" _type="Insert" date="Sun Feb 27 19:56:33 EST 2022" docASTNodeCount="1127" docActiveCodeLength="8210" docExpressionCount="701" docLength="9002" length="1" offset="5250" starttimestamp="1645820509543" timestamp="189284447">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="9339" _type="InsertStringCommand" date="Sun Feb 27 19:56:33 EST 2022" starttimestamp="1645820509543" timestamp="189284451" timestamp2="189284451">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9340" _type="InsertStringCommand" date="Sun Feb 27 19:56:33 EST 2022" starttimestamp="1645820509543" timestamp="189284451" timestamp2="189284451">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="9341" _type="Insert" date="Sun Feb 27 19:56:34 EST 2022" docASTNodeCount="1127" docActiveCodeLength="8211" docExpressionCount="701" docLength="9003" length="1" offset="5251" starttimestamp="1645820509543" timestamp="189285319">
    <text><![CDATA[K]]></text>
  </DocumentChange>
  <Command __id="9342" _type="InsertStringCommand" date="Sun Feb 27 19:56:34 EST 2022" starttimestamp="1645820509543" timestamp="189285325" timestamp2="189285325">
    <data><![CDATA[K]]></data>
  </Command>
  <Command __id="9343" _type="InsertStringCommand" date="Sun Feb 27 19:56:34 EST 2022" starttimestamp="1645820509543" timestamp="189285325" timestamp2="189285325">
    <data><![CDATA[K]]></data>
  </Command>
  <DocumentChange __id="9344" _type="Insert" date="Sun Feb 27 19:56:35 EST 2022" docASTNodeCount="1127" docActiveCodeLength="8212" docExpressionCount="701" docLength="9004" length="1" offset="5252" starttimestamp="1645820509543" timestamp="189285486">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="9345" _type="InsertStringCommand" date="Sun Feb 27 19:56:35 EST 2022" starttimestamp="1645820509543" timestamp="189285492" timestamp2="189285492">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9346" _type="InsertStringCommand" date="Sun Feb 27 19:56:35 EST 2022" starttimestamp="1645820509543" timestamp="189285492" timestamp2="189285492">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="9347" _type="Insert" date="Sun Feb 27 19:56:35 EST 2022" docASTNodeCount="1127" docActiveCodeLength="8213" docExpressionCount="701" docLength="9005" length="1" offset="5253" starttimestamp="1645820509543" timestamp="189285615">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="9348" _type="InsertStringCommand" date="Sun Feb 27 19:56:35 EST 2022" starttimestamp="1645820509543" timestamp="189285620" timestamp2="189285620">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9349" _type="InsertStringCommand" date="Sun Feb 27 19:56:35 EST 2022" starttimestamp="1645820509543" timestamp="189285620" timestamp2="189285620">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="9350" _type="Insert" date="Sun Feb 27 19:56:35 EST 2022" docASTNodeCount="1127" docActiveCodeLength="8214" docExpressionCount="701" docLength="9006" length="1" offset="5254" starttimestamp="1645820509543" timestamp="189285702">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="9351" _type="InsertStringCommand" date="Sun Feb 27 19:56:35 EST 2022" starttimestamp="1645820509543" timestamp="189285709" timestamp2="189285709">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="9352" _type="InsertStringCommand" date="Sun Feb 27 19:56:35 EST 2022" starttimestamp="1645820509543" timestamp="189285709" timestamp2="189285709">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="9353" _type="Insert" date="Sun Feb 27 19:56:35 EST 2022" docASTNodeCount="1127" docActiveCodeLength="8215" docExpressionCount="701" docLength="9007" length="1" offset="5255" starttimestamp="1645820509543" timestamp="189285904">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="9354" _type="InsertStringCommand" date="Sun Feb 27 19:56:35 EST 2022" starttimestamp="1645820509543" timestamp="189285909" timestamp2="189285909">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="9355" _type="InsertStringCommand" date="Sun Feb 27 19:56:35 EST 2022" starttimestamp="1645820509543" timestamp="189285909" timestamp2="189285909">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="9356" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Feb 27 19:56:35 EST 2022" start_end="START" starttimestamp="1645820509543" timestamp="189285912" />
  <DocumentChange __id="9357" _type="Insert" date="Sun Feb 27 19:56:35 EST 2022" docASTNodeCount="1129" docActiveCodeLength="8216" docExpressionCount="703" docLength="9008" length="1" offset="5256" starttimestamp="1645820509543" timestamp="189286177">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="9358" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Feb 27 19:56:36 EST 2022" start_end="END" starttimestamp="1645820509543" timestamp="189286816" />
  <DocumentChange __id="9359" _type="Replace" date="Sun Feb 27 19:56:36 EST 2022" docASTNodeCount="1129" docActiveCodeLength="8218" docExpressionCount="703" docLength="9010" endLine="228" insertionLength="3" int_docASTNodeCount="1127" int_docActiveCodeLength="8215" int_docExpressionCount="701" int_docLength="9007" length="1" offset="5256" startLine="228" starttimestamp="1645820509543" timestamp="189286820">
    <deletedText><![CDATA[n]]></deletedText>
    <insertedText><![CDATA[NEW]]></insertedText>
  </DocumentChange>
  <Command __id="9360" _type="InsertStringCommand" date="Sun Feb 27 19:56:36 EST 2022" starttimestamp="1645820509543" timestamp="189286831" timestamp2="189286831">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9361" _type="InsertStringCommand" date="Sun Feb 27 19:56:36 EST 2022" starttimestamp="1645820509543" timestamp="189286831" timestamp2="189286831">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9363" _type="InsertStringCommand" date="Sun Feb 27 19:56:36 EST 2022" starttimestamp="1645820509543" timestamp="189287172" timestamp2="189287172">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="9364" _type="InsertStringCommand" date="Sun Feb 27 19:56:36 EST 2022" starttimestamp="1645820509543" timestamp="189287172" timestamp2="189287172">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="9365" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Feb 27 19:56:37 EST 2022" starttimestamp="1645820509543" timestamp="189288401" />
  <Command __id="9366" _type="EclipseCommand" commandID="" date="Sun Feb 27 19:56:38 EST 2022" starttimestamp="1645820509543" timestamp="189288498" />
  <Command __id="9367" _type="EclipseCommand" commandID="" date="Sun Feb 27 19:56:38 EST 2022" starttimestamp="1645820509543" timestamp="189288509" />
  <Command __id="9368" _type="MoveCaretCommand" caretOffset="5168" date="Sun Feb 27 19:56:38 EST 2022" docOffset="5319" starttimestamp="1645820509543" timestamp="189289003" />
  <Command __id="9369" _type="MoveCaretCommand" caretOffset="5168" date="Sun Feb 27 19:56:38 EST 2022" docOffset="5319" starttimestamp="1645820509543" timestamp="189289003" />
  <Command __id="9370" _type="MoveCaretCommand" caretOffset="5151" date="Sun Feb 27 19:56:38 EST 2022" docOffset="5302" starttimestamp="1645820509543" timestamp="189289324" />
  <Command __id="9371" _type="MoveCaretCommand" caretOffset="5151" date="Sun Feb 27 19:56:38 EST 2022" docOffset="5302" starttimestamp="1645820509543" timestamp="189289324" />
  <Command __id="9372" _type="MoveCaretCommand" caretOffset="5122" date="Sun Feb 27 19:56:39 EST 2022" docOffset="5273" starttimestamp="1645820509543" timestamp="189290059" />
  <Command __id="9373" _type="MoveCaretCommand" caretOffset="5122" date="Sun Feb 27 19:56:39 EST 2022" docOffset="5273" starttimestamp="1645820509543" timestamp="189290059" />
  <Command __id="9374" _type="MoveCaretCommand" caretOffset="5092" date="Sun Feb 27 19:56:40 EST 2022" docOffset="5243" starttimestamp="1645820509543" timestamp="189290507" />
  <Command __id="9375" _type="MoveCaretCommand" caretOffset="5092" date="Sun Feb 27 19:56:40 EST 2022" docOffset="5243" starttimestamp="1645820509543" timestamp="189290507" />
  <Command __id="9376" _type="MoveCaretCommand" caretOffset="5124" date="Sun Feb 27 19:56:40 EST 2022" docOffset="5275" starttimestamp="1645820509543" timestamp="189290955" />
  <Command __id="9377" _type="MoveCaretCommand" caretOffset="5124" date="Sun Feb 27 19:56:40 EST 2022" docOffset="5275" starttimestamp="1645820509543" timestamp="189290956" />
  <Command __id="9378" _type="MoveCaretCommand" caretOffset="5124" date="Sun Feb 27 19:56:41 EST 2022" docOffset="5275" starttimestamp="1645820509543" timestamp="189291483" />
  <Command __id="9379" _type="MoveCaretCommand" caretOffset="5124" date="Sun Feb 27 19:56:41 EST 2022" docOffset="5275" starttimestamp="1645820509543" timestamp="189291483" />
  <Command __id="9380" _type="MoveCaretCommand" caretOffset="5138" date="Sun Feb 27 19:56:42 EST 2022" docOffset="5289" starttimestamp="1645820509543" timestamp="189292923" />
  <Command __id="9381" _type="MoveCaretCommand" caretOffset="5138" date="Sun Feb 27 19:56:42 EST 2022" docOffset="5289" starttimestamp="1645820509543" timestamp="189292923" />
  <Command __id="9382" _type="MoveCaretCommand" caretOffset="5168" date="Sun Feb 27 19:56:44 EST 2022" docOffset="5319" starttimestamp="1645820509543" timestamp="189295212" />
  <Command __id="9383" _type="MoveCaretCommand" caretOffset="5168" date="Sun Feb 27 19:56:44 EST 2022" docOffset="5319" starttimestamp="1645820509543" timestamp="189295212" />
  <Command __id="9384" _type="MoveCaretCommand" caretOffset="5151" date="Sun Feb 27 19:56:45 EST 2022" docOffset="5302" starttimestamp="1645820509543" timestamp="189295725" />
  <Command __id="9385" _type="MoveCaretCommand" caretOffset="5151" date="Sun Feb 27 19:56:45 EST 2022" docOffset="5302" starttimestamp="1645820509543" timestamp="189295725" />
  <Command __id="9386" _type="MoveCaretCommand" caretOffset="5010" date="Sun Feb 27 19:56:48 EST 2022" docOffset="5161" starttimestamp="1645820509543" timestamp="189299388" />
  <Command __id="9387" _type="MoveCaretCommand" caretOffset="5010" date="Sun Feb 27 19:56:48 EST 2022" docOffset="5161" starttimestamp="1645820509543" timestamp="189299388" />
  <Command __id="9388" _type="MoveCaretCommand" caretOffset="5138" date="Sun Feb 27 19:56:56 EST 2022" docOffset="5289" starttimestamp="1645820509543" timestamp="189306811" />
  <Command __id="9389" _type="MoveCaretCommand" caretOffset="5138" date="Sun Feb 27 19:56:56 EST 2022" docOffset="5289" starttimestamp="1645820509543" timestamp="189306811" />
  <Command __id="9390" _type="MoveCaretCommand" caretOffset="5151" date="Sun Feb 27 19:56:56 EST 2022" docOffset="5302" starttimestamp="1645820509543" timestamp="189307451" />
  <Command __id="9391" _type="MoveCaretCommand" caretOffset="5151" date="Sun Feb 27 19:56:56 EST 2022" docOffset="5302" starttimestamp="1645820509543" timestamp="189307451" />
  <Command __id="9392" _type="MoveCaretCommand" caretOffset="5172" date="Sun Feb 27 19:56:57 EST 2022" docOffset="5323" starttimestamp="1645820509543" timestamp="189307876" />
  <Command __id="9393" _type="MoveCaretCommand" caretOffset="5172" date="Sun Feb 27 19:56:57 EST 2022" docOffset="5323" starttimestamp="1645820509543" timestamp="189307876" />
  <Command __id="9395" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Sun Feb 27 19:56:58 EST 2022" starttimestamp="1645820509543" timestamp="189308550" />
  <Command __id="9396" _type="MoveCaretCommand" caretOffset="5151" date="Sun Feb 27 19:56:58 EST 2022" docOffset="5302" starttimestamp="1645820509543" timestamp="189309155" />
  <Command __id="9397" _type="MoveCaretCommand" caretOffset="5151" date="Sun Feb 27 19:56:58 EST 2022" docOffset="5302" starttimestamp="1645820509543" timestamp="189309155" />
  <Command __id="9398" _type="MoveCaretCommand" caretOffset="5138" date="Sun Feb 27 19:56:59 EST 2022" docOffset="5289" starttimestamp="1645820509543" timestamp="189309547" />
  <Command __id="9399" _type="MoveCaretCommand" caretOffset="5138" date="Sun Feb 27 19:56:59 EST 2022" docOffset="5289" starttimestamp="1645820509543" timestamp="189309547" />
  <DocumentChange __id="9362" _type="Insert" date="Sun Feb 27 19:56:36 EST 2022" docASTNodeCount="1129" docActiveCodeLength="8219" docExpressionCount="703" docLength="9011" length="1" offset="5259" starttimestamp="1645820509543" timestamp="189287166">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="9394" _type="Delete" date="Sun Feb 27 19:56:58 EST 2022" docASTNodeCount="1126" docActiveCodeLength="8198" docExpressionCount="701" docLength="8990" endLine="233" length="21" offset="5304" startLine="232" starttimestamp="1645820509543" timestamp="189308543">
    <text><![CDATA[	        	takeIt();
]]></text>
  </DocumentChange>
  <Command __id="9403" _type="RunCommand" date="Sun Feb 27 19:57:10 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189321233" type="Run" />
  <Command __id="9404" _type="RunCommand" date="Sun Feb 27 19:57:10 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189321233" type="Run" />
  <Command __id="9405" _type="RunCommand" date="Sun Feb 27 19:57:10 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189321416" type="Run" />
  <Command __id="9406" _type="RunCommand" date="Sun Feb 27 19:57:10 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189321417" type="Run" />
  <Command __id="9407" _type="EHExceptionCommand" date="Sun Feb 27 19:57:10 EST 2022" starttimestamp="1645820509543" timestamp="189321447" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
------------starting declaration-----------
int
numErrors
;
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
gg
;
------------ending declaration-----------
------------starting declaration-----------
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
IN VOID METHOD DECLARATION
numErrors
=
in here3, NUM is*0*
0
;
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
try
=
in here3, UNOP is*!*
!
(
a
==
a
)
;
OUT VOID METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
hasErrors
(
kk
[
]
b
,
int
[
]
c
)
{
IN METHOD DECLARATION
return
numErrors
>
0
;
OUT METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
void
reportError
(
String
message
)
{
IN VOID METHOD DECLARATION
{
int
i
=
1
;
boolean
j
=
2
;
bo
jdsaf2
=
afdaf
;
this
=
1
;
this
.
adsfaew
.
dafawe
.
d
=
adf123
;
sdfawe
.
dsfaewf
.
safew
[
sdafaewfa
.
sdafaew
.
sdafaew
.
asd
]
=
dsfs2
;
this
=
this
;
return
;
return
asdfawef
;
if
(
adf
)
{
dsafae
=
in here3, NUM is*12*
12
;
}
else
adfaewf
=
in here3, ID is*dsfaef*
dsfaef
;
while
(
asdfaew
=
dafawe
)
sdafaew
=
in here3, ID is*dsaf*
dsaf
;
a
=
in here3, MINUS is*-*
-
1
;
a
=
in here3, UNOP is*!*
!
true
;
a
=
in here3, FALSE is*false*
false
;
a
=
in here3, NEW is*new*
new
in hereeee
dafef
(
)
;
}
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
System
.
out
.
println
(
message
,
dfaewf
,
asdfa
,
ef
,
aew
)
;
OUT VOID METHOD DECLARATION
}
1true2false3false------------ending declaration-----------
out here end of program: }
}

Sytactic analysis complete: Valid miniJava program
]]></outputString>
  </Command>
  <Command __id="9408" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:57:30 EST 2022" docASTNodeCount="1635" docActiveCodeLength="12107" docExpressionCount="1151" docLength="13505" projectName="pa1" starttimestamp="1645820509543" timestamp="189341375">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶//		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			System.out.println("------------starting declaration-----------");¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				// Method Declaration¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						System.out.println("IN VOID METHOD DECLARATION");¶						parseStatement();¶						System.out.println("OUT VOID METHOD DECLARATION");¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				// both possible¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶							// Field Declaration¶							case SEMICOLON:¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							// Method Declaration¶							case LPAREN:¶								acceptIt();¶								if (startsType(currentToken.kind)) {¶									parseParameterList();¶								}¶								accept(TokenKind.RPAREN);¶								accept(TokenKind.LCURLY);¶								¶								while (startsStatement(currentToken.kind)) {¶									System.out.println("IN METHOD DECLARATION");¶									parseStatement();¶									System.out.println("OUT METHOD DECLARATION");¶								}¶								accept(TokenKind.RCURLY);¶								break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations, no types declared.");¶					}¶					break;¶					¶			}¶			System.out.println("------------ending declaration-----------");¶		}¶		System.out.println("out here end of program: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶			case LCURLY:¶				acceptIt();¶				while (startsStatement(currentToken.kind)) {¶					parseStatement();¶				}¶	//			System.out.println("in here: " + currentToken);¶				accept(TokenKind.RCURLY);¶				break;¶				¶			case INT: case BOOLEAN:¶				parseType();¶				parseId();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case ID:			¶//				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				acceptIt();¶//				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				switch (currentToken.kind) {¶					// in Type¶					case ID:¶						acceptIt();¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// in Reference¶					case EQUAL:¶		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						acceptIt();¶		"), Diff(DELETE,"//"), Diff(EQUAL,"				System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// both¶					case LBRACKET: ¶						acceptIt();¶						// in Type¶						if (currentToken.kind == TokenKind.RBRACKET) {¶							acceptIt();¶							accept(TokenKind.ID);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						} else {¶							// in Reference¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						}¶						break;¶					¶					case DOT:¶						while (currentToken.kind == TokenKind.DOT) {¶							acceptIt();¶							accept(TokenKind.ID);¶						}¶						switch (currentToken.kind) {¶							case EQUAL:¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LBRACKET: ¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.RBRACKET);¶								accept(TokenKind.EQUAL);¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LPAREN:¶								acceptIt();¶								if (currentToken.kind == TokenKind.RPAREN) {¶									acceptIt();¶								} else {¶									parseArgumentList();¶									accept(TokenKind.RPAREN);¶								}¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							default:¶								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶						}¶						break;¶					default:¶						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶						break;¶				}¶				break;¶			¶			case THIS:¶				acceptIt();¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶				case EQUAL:¶					acceptIt();¶"), Diff(DELETE,"					parseExpression("), Diff(INSERT,"//					System.out.println("before");¶					parseExpression();¶//					System.out.println("after""), Diff(EQUAL,");¶					accept(TokenKind.SEMICOLON);¶					break;¶				¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶					¶				case LPAREN:¶					acceptIt();¶					if (currentToken.kind == TokenKind.RPAREN) {¶						acceptIt();¶						accept(TokenKind.SEMICOLON);¶					} else {¶						parseArgumentList();¶						accept(TokenKind.RPAREN);¶						accept(TokenKind.SEMICOLON);¶					}¶					break;¶				¶				default:¶					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶				}¶				break;¶				¶			case RETURN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.SEMICOLON) {¶					acceptIt();¶				} else {¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case IF:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				if (currentToken.kind == TokenKind.ELSE) {¶					acceptIt();¶					parseStatement();¶				}¶				break;¶				¶			case WHILE:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				break;¶			¶			default:¶				parseError("parsing statement, current token is:" + currentToken);¶				break;¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶	¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶			// starts with reference¶			case ID: case THIS:¶				acceptIt();¶				// dealing with (.id)*¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					// reference[expression]¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					// reference(arglist?)¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						break;¶						¶					// just reference¶					default:¶						break;¶//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶				¶			case UNOP: case MINUS:¶				acceptIt();¶				parseExpression();¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				break;¶			¶			case NUM: case TRUE: case FALSE:¶				acceptIt();¶				break;¶			¶			case NEW:¶				acceptIt();¶				System.out.println("in hereeee");¶				switch (currentToken.kind) {¶					case ID:¶						acceptIt();¶						switch (currentToken.kind) {¶						case LPAREN:¶							acceptIt();¶							accept(TokenKind.RPAREN);¶							break;¶						case LBRACKET:¶							acceptIt();¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							break;¶						default:¶							parseError("parsing expression, nothing after new.");¶						¶						}¶						break;¶					¶					case INT:¶						acceptIt();¶						accept(TokenKind.LBRACKET);¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					default:¶						parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶			¶			default:¶				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				break;¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
//		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
			System.out.println("------------starting declaration-----------");
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				// Method Declaration
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
						System.out.println("IN VOID METHOD DECLARATION");
						parseStatement();
						System.out.println("OUT VOID METHOD DECLARATION");
					}
					accept(TokenKind.RCURLY);
					break;
					
				// both possible
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
							// Field Declaration
							case SEMICOLON:
								accept(TokenKind.SEMICOLON);
								break;
							
							// Method Declaration
							case LPAREN:
								acceptIt();
								if (startsType(currentToken.kind)) {
									parseParameterList();
								}
								accept(TokenKind.RPAREN);
								accept(TokenKind.LCURLY);
								
								while (startsStatement(currentToken.kind)) {
									System.out.println("IN METHOD DECLARATION");
									parseStatement();
									System.out.println("OUT METHOD DECLARATION");
								}
								accept(TokenKind.RCURLY);
								break;
						}
					}
					else {
						parseError("Parsing wrong in declarations, no types declared.");
					}
					break;
					
			}
			System.out.println("------------ending declaration-----------");
		}
		System.out.println("out here end of program: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
			case LCURLY:
				acceptIt();
				while (startsStatement(currentToken.kind)) {
					parseStatement();
				}
	//			System.out.println("in here: " + currentToken);
				accept(TokenKind.RCURLY);
				break;
				
			case INT: case BOOLEAN:
				parseType();
				parseId();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case ID:			
//				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");
				acceptIt();
//				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");
				switch (currentToken.kind) {
					// in Type
					case ID:
						acceptIt();
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					// in Reference
					case EQUAL:
		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");
						acceptIt();
						System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					// both
					case LBRACKET: 
						acceptIt();
						// in Type
						if (currentToken.kind == TokenKind.RBRACKET) {
							acceptIt();
							accept(TokenKind.ID);
							accept(TokenKind.EQUAL);
							parseExpression();
							accept(TokenKind.SEMICOLON);
						} else {
							// in Reference
							parseExpression();
							accept(TokenKind.RBRACKET);
							accept(TokenKind.EQUAL);
							parseExpression();
							accept(TokenKind.SEMICOLON);
						}
						break;
					
					case DOT:
						while (currentToken.kind == TokenKind.DOT) {
							acceptIt();
							accept(TokenKind.ID);
						}
						switch (currentToken.kind) {
							case EQUAL:
								acceptIt();
								parseExpression();
								accept(TokenKind.SEMICOLON);
								break;
							
							case LBRACKET: 
								acceptIt();
								parseExpression();
								accept(TokenKind.RBRACKET);
								accept(TokenKind.EQUAL);
								parseExpression();
								accept(TokenKind.SEMICOLON);
								break;
							
							case LPAREN:
								acceptIt();
								if (currentToken.kind == TokenKind.RPAREN) {
									acceptIt();
								} else {
									parseArgumentList();
									accept(TokenKind.RPAREN);
								}
								accept(TokenKind.SEMICOLON);
								break;
							
							default:
								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
						}
						break;
					default:
						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
						break;
				}
				break;
			
			case THIS:
				acceptIt();
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
				case EQUAL:
					acceptIt();
//					System.out.println("before");
					parseExpression();
//					System.out.println("after");
					accept(TokenKind.SEMICOLON);
					break;
				
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
					break;
					
				case LPAREN:
					acceptIt();
					if (currentToken.kind == TokenKind.RPAREN) {
						acceptIt();
						accept(TokenKind.SEMICOLON);
					} else {
						parseArgumentList();
						accept(TokenKind.RPAREN);
						accept(TokenKind.SEMICOLON);
					}
					break;
				
				default:
					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
				}
				break;
				
			case RETURN:
				acceptIt();
				if (currentToken.kind == TokenKind.SEMICOLON) {
					acceptIt();
				} else {
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case IF:
				acceptIt();
				accept(TokenKind.LPAREN);
				parseExpression();
				accept(TokenKind.RPAREN);
				parseStatement();
				if (currentToken.kind == TokenKind.ELSE) {
					acceptIt();
					parseStatement();
				}
				break;
				
			case WHILE:
				acceptIt();
				accept(TokenKind.LPAREN);
				parseExpression();
				accept(TokenKind.RPAREN);
				parseStatement();
				break;
			
			default:
				parseError("parsing statement, current token is:" + currentToken);
				break;
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}

	
	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
			// starts with reference
			case ID: case THIS:
				acceptIt();
				// dealing with (.id)*
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					// reference[expression]
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					// reference(arglist?)
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						break;
						
					// just reference
					default:
						break;
//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
				
			case UNOP: case MINUS:
				acceptIt();
				parseExpression();
				break;
			
			case LPAREN:
				acceptIt();
				parseExpression();
				accept(TokenKind.RPAREN);
				break;
			
			case NUM: case TRUE: case FALSE:
				acceptIt();
				break;
			
			case NEW:
				acceptIt();
				System.out.println("in hereeee");
				switch (currentToken.kind) {
					case ID:
						acceptIt();
						switch (currentToken.kind) {
						case LPAREN:
							acceptIt();
							accept(TokenKind.RPAREN);
							break;
						case LBRACKET:
							acceptIt();
							parseExpression();
							accept(TokenKind.RBRACKET);
							break;
						default:
							parseError("parsing expression, nothing after new.");
						
						}
						break;
					
					case INT:
						acceptIt();
						accept(TokenKind.LBRACKET);
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					default:
						parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
			
			default:
				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				break;
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="9409" _type="MoveCaretCommand" caretOffset="3694" date="Sun Feb 27 19:57:30 EST 2022" docOffset="3772" starttimestamp="1645820509543" timestamp="189341452" />
  <Command __id="9410" _type="MoveCaretCommand" caretOffset="3694" date="Sun Feb 27 19:57:31 EST 2022" docOffset="3772" starttimestamp="1645820509543" timestamp="189341488" />
  <Command __id="9411" _type="MoveCaretCommand" caretOffset="3791" date="Sun Feb 27 19:57:31 EST 2022" docOffset="3869" starttimestamp="1645820509543" timestamp="189341740" />
  <Command __id="9412" _type="MoveCaretCommand" caretOffset="3791" date="Sun Feb 27 19:57:31 EST 2022" docOffset="3869" starttimestamp="1645820509543" timestamp="189341740" />
  <Command __id="9413" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:57:32 EST 2022" docASTNodeCount="72" docActiveCodeLength="316" docExpressionCount="36" docLength="316" projectName="pa1" starttimestamp="1645820509543" timestamp="189342849">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\TokenKind.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶public enum TokenKind {NUM, CLASS, ID, LBRACKET, RBRACKET, VOID, LPAREN, RPAREN, EOT, EQUAL, THIS,¶							PUBLIC, PRIVATE, STATIC, INT, BOOLEAN, COMMA, DOT, RETURN, SEMICOLON,¶								IF, ELSE, WHILE, UNOP, BINOP, MINUS, TRUE, FALSE, NEW, LCURLY, RCURLY,¶									ERROR}¶¶")]]]></diff>
  </Command>
  <Command __id="9414" _type="MoveCaretCommand" caretOffset="260" date="Sun Feb 27 19:57:32 EST 2022" docOffset="260" starttimestamp="1645820509543" timestamp="189342944" />
  <Command __id="9417" _type="SelectTextCommand" caretOffset="184" date="Sun Feb 27 19:57:34 EST 2022" end="184" start="181" starttimestamp="1645820509543" timestamp="189344993" />
  <Command __id="9415" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:57:34 EST 2022" docASTNodeCount="165" docActiveCodeLength="791" docExpressionCount="97" docLength="791" projectName="pa1" starttimestamp="1645820509543" timestamp="189344457">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors(kk[] b, int[] c) {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			{¶				int i = 1;¶				boolean j = 2;¶				bo jdsaf2 = afdaf;¶				this = 1;¶				this.adsfaew.dafawe.d = adf123;¶				sdfawe.dsfaewf.safew[sdafaewfa.sdafaew.sdafaew.asd] = dsfs2;¶				this = this;¶				return;¶				return asdfawef;¶				if (adf) { dsafae = 12;}¶				else adfaewf =dsfaef;¶				while (asdfaew = dafawe) sdafaew = dsaf; ¶				a = -1;¶				a = !true;¶				a = false;¶				a = new dafef();¶			}¶			¶			System.out.println(message,dfaewf,asdfa,ef,aew);¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="9416" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:57:34 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="189344903">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="9420" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:57:36 EST 2022" docASTNodeCount="165" docActiveCodeLength="791" docExpressionCount="97" docLength="791" projectName="pa1" starttimestamp="1645820509543" timestamp="189347422">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors(kk[] b, int[] c) {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			{¶				int i = 1;¶				boolean j = 2;¶				bo jdsaf2 = afdaf;¶				this = 1;¶				this.adsfaew.dafawe.d = adf123;¶				sdfawe.dsfaewf.safew[sdafaewfa.sdafaew.sdafaew.asd] = dsfs2;¶				this = this;¶				return;¶				return asdfawef;¶				if (adf) { dsafae = 12;}¶				else adfaewf =dsfaef;¶				while (asdfaew = dafawe) sdafaew = dsaf; ¶				a = -1;¶				a = !true;¶				a = false;¶				a = new dafef();¶			}¶			¶			System.out.println(message,dfaewf,asdfa,ef,aew);¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="9423" _type="RunCommand" date="Sun Feb 27 19:57:56 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189367104" type="Run" />
  <Command __id="9424" _type="RunCommand" date="Sun Feb 27 19:57:56 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189367104" type="Run" />
  <Command __id="9425" _type="RunCommand" date="Sun Feb 27 19:57:56 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189367250" type="Run" />
  <Command __id="9426" _type="RunCommand" date="Sun Feb 27 19:57:56 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189367250" type="Run" />
  <Command __id="9427" _type="EHExceptionCommand" date="Sun Feb 27 19:57:56 EST 2022" starttimestamp="1645820509543" timestamp="189367312" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
------------starting declaration-----------
int
numErrors
;
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
gg
;
------------ending declaration-----------
------------starting declaration-----------
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
IN VOID METHOD DECLARATION
numErrors
=
in here3, NUM is*0*
0
;
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
try
=
in here3, UNOP is*!*
!
(
a
==
a
)
;
OUT VOID METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
hasErrors
(
kk
[
]
b
,
int
[
]
c
)
{
IN METHOD DECLARATION
return
numErrors
>
0
;
OUT METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
void
reportError
(
String
message
)
{
IN VOID METHOD DECLARATION
{
int
i
=
1
;
boolean
j
=
2
;
bo
jdsaf2
=
afdaf
;
this
=
1
;
this
.
adsfaew
.
dafawe
.
d
=
adf123
;
sdfawe
.
dsfaewf
.
safew
[
sdafaewfa
.
sdafaew
.
sdafaew
.
asd
]
=
dsfs2
;
this
=
this
;
return
;
return
asdfawef
;
if
(
adf
)
{
dsafae
=
in here3, NUM is*12*
12
;
}
else
adfaewf
=
in here3, ID is*dsfaef*
dsfaef
;
while
(
asdfaew
=
dafawe
)
sdafaew
=
in here3, ID is*dsaf*
dsaf
;
a
=
in here3, MINUS is*-*
-
1
;
a
=
in here3, UNOP is*!*
!
true
;
a
=
in here3, FALSE is*false*
false
;
a
=
in here3, NEW is*new*
new
in hereeee
dafef
(
)
;
a
=
in here3, INT is*int*
Parse error: parsing expression, current token is: intand its kind is: INT
Sytactic analysis complete: Invalid miniJava program
]]></outputString>
  </Command>
  <Command __id="9429" _type="MoveCaretCommand" caretOffset="3791" date="Sun Feb 27 19:58:31 EST 2022" docOffset="3869" starttimestamp="1645820509543" timestamp="189401532" />
  <Command __id="9431" _type="ShellCommand" date="Sun Feb 27 19:59:25 EST 2022" starttimestamp="1645820509543" timestamp="189456139" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9432" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:59:27 EST 2022" forward="false" matchWord="false" offset="3869" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189457916" wrapSearch="false">
    <searchString><![CDATA[3]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9433" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:59:27 EST 2022" forward="false" matchWord="false" offset="3869" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189458269" wrapSearch="false">
    <searchString><![CDATA[3]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9434" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 19:59:29 EST 2022" forward="true" matchWord="false" offset="3869" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189459741" wrapSearch="false">
    <searchString><![CDATA[3]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9428" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 19:58:30 EST 2022" docASTNodeCount="1635" docActiveCodeLength="12107" docExpressionCount="1151" docLength="13505" projectName="pa1" starttimestamp="1645820509543" timestamp="189401129">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶//		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			System.out.println("------------starting declaration-----------");¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				// Method Declaration¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						System.out.println("IN VOID METHOD DECLARATION");¶						parseStatement();¶						System.out.println("OUT VOID METHOD DECLARATION");¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				// both possible¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶							// Field Declaration¶							case SEMICOLON:¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							// Method Declaration¶							case LPAREN:¶								acceptIt();¶								if (startsType(currentToken.kind)) {¶									parseParameterList();¶								}¶								accept(TokenKind.RPAREN);¶								accept(TokenKind.LCURLY);¶								¶								while (startsStatement(currentToken.kind)) {¶									System.out.println("IN METHOD DECLARATION");¶									parseStatement();¶									System.out.println("OUT METHOD DECLARATION");¶								}¶								accept(TokenKind.RCURLY);¶								break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations, no types declared.");¶					}¶					break;¶					¶			}¶			System.out.println("------------ending declaration-----------");¶		}¶		System.out.println("out here end of program: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶			case LCURLY:¶				acceptIt();¶				while (startsStatement(currentToken.kind)) {¶					parseStatement();¶				}¶	//			System.out.println("in here: " + currentToken);¶				accept(TokenKind.RCURLY);¶				break;¶				¶			case INT: case BOOLEAN:¶				parseType();¶				parseId();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case ID:			¶//				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				acceptIt();¶//				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				switch (currentToken.kind) {¶					// in Type¶					case ID:¶						acceptIt();¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// in Reference¶					case EQUAL:¶		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						acceptIt();¶						System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// both¶					case LBRACKET: ¶						acceptIt();¶						// in Type¶						if (currentToken.kind == TokenKind.RBRACKET) {¶							acceptIt();¶							accept(TokenKind.ID);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						} else {¶							// in Reference¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						}¶						break;¶					¶					case DOT:¶						while (currentToken.kind == TokenKind.DOT) {¶							acceptIt();¶							accept(TokenKind.ID);¶						}¶						switch (currentToken.kind) {¶							case EQUAL:¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LBRACKET: ¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.RBRACKET);¶								accept(TokenKind.EQUAL);¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LPAREN:¶								acceptIt();¶								if (currentToken.kind == TokenKind.RPAREN) {¶									acceptIt();¶								} else {¶									parseArgumentList();¶									accept(TokenKind.RPAREN);¶								}¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							default:¶								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶						}¶						break;¶					default:¶						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶						break;¶				}¶				break;¶			¶			case THIS:¶				acceptIt();¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶				case EQUAL:¶					acceptIt();¶//					System.out.println("before");¶					parseExpression();¶//					System.out.println("after");¶					accept(TokenKind.SEMICOLON);¶					break;¶				¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶					¶				case LPAREN:¶					acceptIt();¶					if (currentToken.kind == TokenKind.RPAREN) {¶						acceptIt();¶						accept(TokenKind.SEMICOLON);¶					} else {¶						parseArgumentList();¶						accept(TokenKind.RPAREN);¶						accept(TokenKind.SEMICOLON);¶					}¶					break;¶				¶				default:¶					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶				}¶				break;¶				¶			case RETURN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.SEMICOLON) {¶					acceptIt();¶				} else {¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case IF:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				if (currentToken.kind == TokenKind.ELSE) {¶					acceptIt();¶					parseStatement();¶				}¶				break;¶				¶			case WHILE:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				break;¶			¶			default:¶				parseError("parsing statement, current token is:" + currentToken);¶				break;¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶	¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶			// starts with reference¶			case ID: case THIS:¶				acceptIt();¶				// dealing with (.id)*¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					// reference[expression]¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					// reference(arglist?)¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						break;¶						¶					// just reference¶					default:¶						break;¶//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶				¶			case UNOP: case MINUS:¶				acceptIt();¶				parseExpression();¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				break;¶			¶			case NUM: case TRUE: case FALSE:¶				acceptIt();¶				break;¶			¶			case NEW:¶				acceptIt();¶				System.out.println("in hereeee");¶				switch (currentToken.kind) {¶					case ID:¶						acceptIt();¶						switch (currentToken.kind) {¶						case LPAREN:¶							acceptIt();¶							accept(TokenKind.RPAREN);¶							break;¶						case LBRACKET:¶							acceptIt();¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							break;¶						default:¶							parseError("parsing expression, nothing after new.");¶						¶						}¶						break;¶					¶					case INT:¶						acceptIt();¶						accept(TokenKind.LBRACKET);¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					default:¶						parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶			¶			default:¶				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				break;¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9436" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 20:00:13 EST 2022" docASTNodeCount="174" docActiveCodeLength="813" docExpressionCount="104" docLength="813" projectName="pa1" starttimestamp="1645820509543" timestamp="189504433">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors(kk[] b, int[] c) {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			{¶				int i = 1;¶				boolean j = 2;¶				bo jdsaf2 = afdaf;¶				this = 1;¶				this.adsfaew.dafawe.d = adf123;¶				sdfawe.dsfaewf.safew[sdafaewfa.sdafaew.sdafaew.asd] = dsfs2;¶				this = this;¶				return;¶				return asdfawef;¶				if (adf) { dsafae = 12;}¶				else adfaewf =dsfaef;¶				while (asdfaew = dafawe) sdafaew = dsaf; ¶				a = -1;¶				a = !true;¶				a = false;¶				a = new dafef();¶			"), Diff(INSERT,"	a = int[a == a];¶			"), Diff(EQUAL,"}¶			¶			System.out.println(message,dfaewf,asdfa,ef,aew);¶		}	¶}")]]]></diff>
    <snapshot><![CDATA[class ErrorReporter {

		int numErrors;
		public static boolean gg;

		static void ErrorReporter(int j, boolean k, boo[] a1) {
			numErrors = 0;
			try = !(a == a);
		}

		public static boolean hasErrors(kk[] b, int[] c) {
			return numErrors > 0;
		}

		public void reportError(String message) {
			{
				int i = 1;
				boolean j = 2;
				bo jdsaf2 = afdaf;
				this = 1;
				this.adsfaew.dafawe.d = adf123;
				sdfawe.dsfaewf.safew[sdafaewfa.sdafaew.sdafaew.asd] = dsfs2;
				this = this;
				return;
				return asdfawef;
				if (adf) { dsafae = 12;}
				else adfaewf =dsfaef;
				while (asdfaew = dafawe) sdafaew = dsaf; 
				a = -1;
				a = !true;
				a = false;
				a = new dafef();
				a = int[a == a];
			}
			
			System.out.println(message,dfaewf,asdfa,ef,aew);
		}	
}]]></snapshot>
  </Command>
  <Command __id="9474" _type="RunCommand" date="Sun Feb 27 20:02:57 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189668232" type="Run" />
  <Command __id="9475" _type="RunCommand" date="Sun Feb 27 20:02:57 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189668232" type="Run" />
  <Command __id="9476" _type="RunCommand" date="Sun Feb 27 20:02:57 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189668389" type="Run" />
  <Command __id="9477" _type="RunCommand" date="Sun Feb 27 20:02:57 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189668390" type="Run" />
  <Command __id="9478" _type="EHExceptionCommand" date="Sun Feb 27 20:02:57 EST 2022" starttimestamp="1645820509543" timestamp="189668424" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
class
ErrorReporter
{
------------starting declaration-----------
int
numErrors
;
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
gg
;
------------ending declaration-----------
------------starting declaration-----------
static
void
ErrorReporter
(
int
j
,
boolean
k
,
boo
[
]
a1
)
{
IN VOID METHOD DECLARATION
numErrors
=
in here3, NUM is*0*
0
;
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
try
=
in here3, UNOP is*!*
!
(
a
==
a
)
;
OUT VOID METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
static
boolean
hasErrors
(
kk
[
]
b
,
int
[
]
c
)
{
IN METHOD DECLARATION
return
numErrors
>
0
;
OUT METHOD DECLARATION
}
------------ending declaration-----------
------------starting declaration-----------
public
void
reportError
(
String
message
)
{
IN VOID METHOD DECLARATION
{
int
i
=
1
;
boolean
j
=
2
;
bo
jdsaf2
=
afdaf
;
this
=
1
;
this
.
adsfaew
.
dafawe
.
d
=
adf123
;
sdfawe
.
dsfaewf
.
safew
[
sdafaewfa
.
sdafaew
.
sdafaew
.
asd
]
=
dsfs2
;
this
=
this
;
return
;
return
asdfawef
;
if
(
adf
)
{
dsafae
=
in here3, NUM is*12*
12
;
}
else
adfaewf
=
in here3, ID is*dsfaef*
dsfaef
;
while
(
asdfaew
=
dafawe
)
sdafaew
=
in here3, ID is*dsaf*
dsaf
;
a
=
in here3, MINUS is*-*
-
1
;
a
=
in here3, UNOP is*!*
!
true
;
a
=
in here3, FALSE is*false*
false
;
a
=
in here3, NEW is*new*
new
in hereeee
dafef
(
)
;
a
=
in here3, NEW is*new*
new
in hereeee
asdfaadf
[
!
true
]
;
while
(
this
)
this
=
this
;
return
adfawef
.
dfaefd
.
faef
(
adfa
,
asdf
,
1
,
true
,
dsafew
)
;
return
(
1
)
;
}
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
System
.
out
.
println
(
message
,
dfaewf
,
asdfa
,
ef
,
aew
)
;
OUT VOID METHOD DECLARATION
}
1true2false3false------------ending declaration-----------
out here end of program: }
}

Sytactic analysis complete: Valid miniJava program
]]></outputString>
  </Command>
  <Command __id="9480" _type="MoveCaretCommand" caretOffset="3391" date="Sun Feb 27 20:03:10 EST 2022" docOffset="3469" starttimestamp="1645820509543" timestamp="189681076" />
  <Command __id="9481" _type="MoveCaretCommand" caretOffset="3391" date="Sun Feb 27 20:03:10 EST 2022" docOffset="3469" starttimestamp="1645820509543" timestamp="189681116" />
  <Command __id="9479" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 20:03:10 EST 2022" docASTNodeCount="1635" docActiveCodeLength="12107" docExpressionCount="1151" docLength="13505" projectName="pa1" starttimestamp="1645820509543" timestamp="189681015">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶//		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶			System.out.println("------------starting declaration-----------");¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				// Method Declaration¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶						System.out.println("IN VOID METHOD DECLARATION");¶						parseStatement();¶						System.out.println("OUT VOID METHOD DECLARATION");¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				// both possible¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶							// Field Declaration¶							case SEMICOLON:¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							// Method Declaration¶							case LPAREN:¶								acceptIt();¶								if (startsType(currentToken.kind)) {¶									parseParameterList();¶								}¶								accept(TokenKind.RPAREN);¶								accept(TokenKind.LCURLY);¶								¶								while (startsStatement(currentToken.kind)) {¶									System.out.println("IN METHOD DECLARATION");¶									parseStatement();¶									System.out.println("OUT METHOD DECLARATION");¶								}¶								accept(TokenKind.RCURLY);¶								break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations, no types declared.");¶					}¶					break;¶					¶			}¶			System.out.println("------------ending declaration-----------");¶		}¶		System.out.println("out here end of program: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶			case LCURLY:¶				acceptIt();¶				while (startsStatement(currentToken.kind)) {¶					parseStatement();¶				}¶	//			System.out.println("in here: " + currentToken);¶				accept(TokenKind.RCURLY);¶				break;¶				¶			case INT: case BOOLEAN:¶				parseType();¶				parseId();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case ID:			¶//				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				acceptIt();¶//				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				switch (currentToken.kind) {¶					// in Type¶					case ID:¶						acceptIt();¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// in Reference¶					case EQUAL:¶		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						acceptIt();¶						System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// both¶					case LBRACKET: ¶						acceptIt();¶						// in Type¶						if (currentToken.kind == TokenKind.RBRACKET) {¶							acceptIt();¶							accept(TokenKind.ID);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						} else {¶							// in Reference¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						}¶						break;¶					¶					case DOT:¶						while (currentToken.kind == TokenKind.DOT) {¶							acceptIt();¶							accept(TokenKind.ID);¶						}¶						switch (currentToken.kind) {¶							case EQUAL:¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LBRACKET: ¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.RBRACKET);¶								accept(TokenKind.EQUAL);¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LPAREN:¶								acceptIt();¶								if (currentToken.kind == TokenKind.RPAREN) {¶									acceptIt();¶								} else {¶									parseArgumentList();¶									accept(TokenKind.RPAREN);¶								}¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							default:¶								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶						}¶						break;¶					default:¶						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶						break;¶				}¶				break;¶			¶			case THIS:¶				acceptIt();¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶				case EQUAL:¶					acceptIt();¶//					System.out.println("before");¶					parseExpression();¶//					System.out.println("after");¶					accept(TokenKind.SEMICOLON);¶					break;¶				¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶					¶				case LPAREN:¶					acceptIt();¶					if (currentToken.kind == TokenKind.RPAREN) {¶						acceptIt();¶						accept(TokenKind.SEMICOLON);¶					} else {¶						parseArgumentList();¶						accept(TokenKind.RPAREN);¶						accept(TokenKind.SEMICOLON);¶					}¶					break;¶				¶				default:¶					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶				}¶				break;¶				¶			case RETURN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.SEMICOLON) {¶					acceptIt();¶				} else {¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case IF:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				if (currentToken.kind == TokenKind.ELSE) {¶					acceptIt();¶					parseStatement();¶				}¶				break;¶				¶			case WHILE:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				break;¶			¶			default:¶				parseError("parsing statement, current token is:" + currentToken);¶				break;¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶	¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶			// starts with reference¶			case ID: case THIS:¶				acceptIt();¶				// dealing with (.id)*¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					// reference[expression]¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					// reference(arglist?)¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						break;¶						¶					// just reference¶					default:¶						break;¶//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶				¶			case UNOP: case MINUS:¶				acceptIt();¶				parseExpression();¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				break;¶			¶			case NUM: case TRUE: case FALSE:¶				acceptIt();¶				break;¶			¶			case NEW:¶				acceptIt();¶				System.out.println("in hereeee");¶				switch (currentToken.kind) {¶					case ID:¶						acceptIt();¶						switch (currentToken.kind) {¶						case LPAREN:¶							acceptIt();¶							accept(TokenKind.RPAREN);¶							break;¶						case LBRACKET:¶							acceptIt();¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							break;¶						default:¶							parseError("parsing expression, nothing after new.");¶						¶						}¶						break;¶					¶					case INT:¶						acceptIt();¶						accept(TokenKind.LBRACKET);¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					default:¶						parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶			¶			default:¶				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				break;¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9482" _type="MoveCaretCommand" caretOffset="12550" date="Sun Feb 27 20:03:19 EST 2022" docOffset="12628" starttimestamp="1645820509543" timestamp="189690373" />
  <Command __id="9483" _type="MoveCaretCommand" caretOffset="12550" date="Sun Feb 27 20:03:19 EST 2022" docOffset="12628" starttimestamp="1645820509543" timestamp="189690373" />
  <Command __id="9484" _type="MoveCaretCommand" caretOffset="12510" date="Sun Feb 27 20:03:20 EST 2022" docOffset="12588" starttimestamp="1645820509543" timestamp="189690915" />
  <Command __id="9485" _type="MoveCaretCommand" caretOffset="12510" date="Sun Feb 27 20:03:20 EST 2022" docOffset="12588" starttimestamp="1645820509543" timestamp="189690916" />
  <Command __id="9487" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 20:03:21 EST 2022" starttimestamp="1645820509543" timestamp="189691944" />
  <Command __id="9491" _type="RunCommand" date="Sun Feb 27 20:03:24 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189694773" type="Run" />
  <Command __id="9492" _type="RunCommand" date="Sun Feb 27 20:03:24 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189694773" type="Run" />
  <Command __id="9493" _type="RunCommand" date="Sun Feb 27 20:03:24 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189694910" type="Run" />
  <Command __id="9494" _type="RunCommand" date="Sun Feb 27 20:03:24 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189694910" type="Run" />
  <Command __id="9495" _type="EHExceptionCommand" date="Sun Feb 27 20:03:24 EST 2022" starttimestamp="1645820509543" timestamp="189694958" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
------------starting declaration-----------
------------ending declaration-----------
------------starting declaration-----------
------------ending declaration-----------
------------starting declaration-----------
IN VOID METHOD DECLARATION
in here3, NUM is*0*
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
in here3, UNOP is*!*
OUT VOID METHOD DECLARATION
------------ending declaration-----------
------------starting declaration-----------
IN METHOD DECLARATION
OUT METHOD DECLARATION
------------ending declaration-----------
------------starting declaration-----------
IN VOID METHOD DECLARATION
in here3, NUM is*12*
in here3, ID is*dsfaef*
in here3, ID is*dsaf*
in here3, MINUS is*-*
in here3, UNOP is*!*
in here3, FALSE is*false*
in here3, NEW is*new*
in hereeee
in here3, NEW is*new*
in hereeee
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
OUT VOID METHOD DECLARATION
1true2false3false------------ending declaration-----------
out here end of program: }
Sytactic analysis complete: Valid miniJava program
]]></outputString>
  </Command>
  <DocumentChange __id="9486" _type="Insert" date="Sun Feb 27 20:03:21 EST 2022" docASTNodeCount="1626" docActiveCodeLength="12062" docExpressionCount="1143" docLength="13507" length="2" offset="12572" starttimestamp="1645820509543" timestamp="189691924">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="9498" _type="Delete" date="Sun Feb 27 20:03:28 EST 2022" docASTNodeCount="1615" docActiveCodeLength="12042" docExpressionCount="1137" docLength="13487" endLine="196" length="20" offset="5144" startLine="195" starttimestamp="1645820509543" timestamp="189699410">
    <text><![CDATA[							case EQUAL:
]]></text>
  </DocumentChange>
  <Command __id="9496" _type="MoveCaretCommand" caretOffset="5084" date="Sun Feb 27 20:03:28 EST 2022" docOffset="5162" starttimestamp="1645820509543" timestamp="189698635" />
  <Command __id="9497" _type="MoveCaretCommand" caretOffset="5084" date="Sun Feb 27 20:03:28 EST 2022" docOffset="5162" starttimestamp="1645820509543" timestamp="189698635" />
  <Command __id="9499" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Sun Feb 27 20:03:28 EST 2022" starttimestamp="1645820509543" timestamp="189699416" />
  <Command __id="9501" _type="UndoCommand" date="Sun Feb 27 20:03:30 EST 2022" starttimestamp="1645820509543" timestamp="189700632" />
  <Command __id="9502" _type="MoveCaretCommand" caretOffset="5084" date="Sun Feb 27 20:03:31 EST 2022" docOffset="5162" starttimestamp="1645820509543" timestamp="189701484" />
  <Command __id="9503" _type="MoveCaretCommand" caretOffset="5084" date="Sun Feb 27 20:03:31 EST 2022" docOffset="5162" starttimestamp="1645820509543" timestamp="189701484" />
  <Command __id="9505" _type="ShellCommand" date="Sun Feb 27 20:03:33 EST 2022" starttimestamp="1645820509543" timestamp="189703993" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9506" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:03:34 EST 2022" forward="true" matchWord="false" offset="5162" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189705389" wrapSearch="false">
    <searchString><![CDATA[3]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9507" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:03:35 EST 2022" forward="true" matchWord="false" offset="5162" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189706421" wrapSearch="false">
    <searchString><![CDATA[3]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9508" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:03:37 EST 2022" forward="false" matchWord="false" offset="5162" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189708265" wrapSearch="false">
    <searchString><![CDATA[3]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9509" _type="ShellCommand" date="Sun Feb 27 20:03:39 EST 2022" starttimestamp="1645820509543" timestamp="189709828" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9510" _type="MoveCaretCommand" caretOffset="3948" date="Sun Feb 27 20:03:39 EST 2022" docOffset="4026" starttimestamp="1645820509543" timestamp="189710204" />
  <Command __id="9511" _type="MoveCaretCommand" caretOffset="3948" date="Sun Feb 27 20:03:39 EST 2022" docOffset="4026" starttimestamp="1645820509543" timestamp="189710204" />
  <Command __id="9512" _type="MoveCaretCommand" caretOffset="3967" date="Sun Feb 27 20:03:40 EST 2022" docOffset="4045" starttimestamp="1645820509543" timestamp="189710652" />
  <Command __id="9513" _type="MoveCaretCommand" caretOffset="3967" date="Sun Feb 27 20:03:40 EST 2022" docOffset="4045" starttimestamp="1645820509543" timestamp="189710652" />
  <Command __id="9515" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 20:03:41 EST 2022" starttimestamp="1645820509543" timestamp="189711554" />
  <Command __id="9519" _type="RunCommand" date="Sun Feb 27 20:03:43 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189714209" type="Run" />
  <Command __id="9520" _type="RunCommand" date="Sun Feb 27 20:03:43 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189714209" type="Run" />
  <Command __id="9521" _type="RunCommand" date="Sun Feb 27 20:03:43 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189714362" type="Run" />
  <Command __id="9522" _type="RunCommand" date="Sun Feb 27 20:03:43 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189714362" type="Run" />
  <Command __id="9523" _type="EHExceptionCommand" date="Sun Feb 27 20:03:43 EST 2022" starttimestamp="1645820509543" timestamp="189714425" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
------------starting declaration-----------
------------ending declaration-----------
------------starting declaration-----------
------------ending declaration-----------
------------starting declaration-----------
IN VOID METHOD DECLARATION
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
OUT VOID METHOD DECLARATION
------------ending declaration-----------
------------starting declaration-----------
IN METHOD DECLARATION
OUT METHOD DECLARATION
------------ending declaration-----------
------------starting declaration-----------
IN VOID METHOD DECLARATION
in hereeee
in hereeee
OUT VOID METHOD DECLARATION
IN VOID METHOD DECLARATION
OUT VOID METHOD DECLARATION
1true2false3false------------ending declaration-----------
out here end of program: }
Sytactic analysis complete: Valid miniJava program
]]></outputString>
  </Command>
  <Command __id="9524" _type="MoveCaretCommand" caretOffset="990" date="Sun Feb 27 20:03:49 EST 2022" docOffset="1068" starttimestamp="1645820509543" timestamp="189720284" />
  <Command __id="9525" _type="MoveCaretCommand" caretOffset="990" date="Sun Feb 27 20:03:49 EST 2022" docOffset="1068" starttimestamp="1645820509543" timestamp="189720284" />
  <Command __id="9527" _type="ShellCommand" date="Sun Feb 27 20:03:50 EST 2022" starttimestamp="1645820509543" timestamp="189720695" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9528" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:03:55 EST 2022" forward="false" matchWord="false" offset="1068" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189725724" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9529" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:03:57 EST 2022" forward="true" matchWord="false" offset="1113" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189727617" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <DocumentChange __id="9500" _type="Insert" date="Sun Feb 27 20:03:30 EST 2022" docASTNodeCount="1626" docActiveCodeLength="12062" docExpressionCount="1143" docLength="13507" length="20" offset="5144" starttimestamp="1645820509543" timestamp="189700625">
    <text><![CDATA[							case EQUAL:
]]></text>
  </DocumentChange>
  <DocumentChange __id="9514" _type="Insert" date="Sun Feb 27 20:03:41 EST 2022" docASTNodeCount="1610" docActiveCodeLength="11964" docExpressionCount="1128" docLength="13509" length="2" offset="4039" starttimestamp="1645820509543" timestamp="189711531">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9530" _type="ShellCommand" date="Sun Feb 27 20:03:58 EST 2022" starttimestamp="1645820509543" timestamp="189729231" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9531" _type="MoveCaretCommand" caretOffset="1167" date="Sun Feb 27 20:03:58 EST 2022" docOffset="1245" starttimestamp="1645820509543" timestamp="189729307" />
  <Command __id="9532" _type="MoveCaretCommand" caretOffset="1167" date="Sun Feb 27 20:03:58 EST 2022" docOffset="1245" starttimestamp="1645820509543" timestamp="189729307" />
  <Command __id="9534" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 20:03:59 EST 2022" starttimestamp="1645820509543" timestamp="189730337" />
  <Command __id="9535" _type="ShellCommand" date="Sun Feb 27 20:04:01 EST 2022" starttimestamp="1645820509543" timestamp="189732455" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9536" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:02 EST 2022" forward="true" matchWord="false" offset="1247" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189732544" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9537" _type="ShellCommand" date="Sun Feb 27 20:04:04 EST 2022" starttimestamp="1645820509543" timestamp="189735030" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9538" _type="MoveCaretCommand" caretOffset="1618" date="Sun Feb 27 20:04:04 EST 2022" docOffset="1696" starttimestamp="1645820509543" timestamp="189735116" />
  <Command __id="9539" _type="MoveCaretCommand" caretOffset="1618" date="Sun Feb 27 20:04:04 EST 2022" docOffset="1696" starttimestamp="1645820509543" timestamp="189735116" />
  <Command __id="9541" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 20:04:04 EST 2022" starttimestamp="1645820509543" timestamp="189735298" />
  <Command __id="9542" _type="MoveCaretCommand" caretOffset="1700" date="Sun Feb 27 20:04:05 EST 2022" docOffset="1778" starttimestamp="1645820509543" timestamp="189735836" />
  <Command __id="9543" _type="MoveCaretCommand" caretOffset="1700" date="Sun Feb 27 20:04:05 EST 2022" docOffset="1778" starttimestamp="1645820509543" timestamp="189735836" />
  <Command __id="9545" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 20:04:05 EST 2022" starttimestamp="1645820509543" timestamp="189736000" />
  <Command __id="9546" _type="ShellCommand" date="Sun Feb 27 20:04:06 EST 2022" starttimestamp="1645820509543" timestamp="189736919" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9547" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:06 EST 2022" forward="true" matchWord="false" offset="1780" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189737037" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <DocumentChange __id="9533" _type="Insert" date="Sun Feb 27 20:03:59 EST 2022" docASTNodeCount="1603" docActiveCodeLength="11895" docExpressionCount="1122" docLength="13511" length="2" offset="1195" starttimestamp="1645820509543" timestamp="189730311">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="9540" _type="Insert" date="Sun Feb 27 20:04:04 EST 2022" docASTNodeCount="1596" docActiveCodeLength="11840" docExpressionCount="1116" docLength="13513" length="2" offset="1654" starttimestamp="1645820509543" timestamp="189735281">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="9544" _type="Insert" date="Sun Feb 27 20:04:05 EST 2022" docASTNodeCount="1589" docActiveCodeLength="11784" docExpressionCount="1110" docLength="13515" length="2" offset="1738" starttimestamp="1645820509543" timestamp="189735983">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9548" _type="ShellCommand" date="Sun Feb 27 20:04:07 EST 2022" starttimestamp="1645820509543" timestamp="189738311" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9549" _type="MoveCaretCommand" caretOffset="2388" date="Sun Feb 27 20:04:07 EST 2022" docOffset="2466" starttimestamp="1645820509543" timestamp="189738414" />
  <Command __id="9550" _type="MoveCaretCommand" caretOffset="2388" date="Sun Feb 27 20:04:07 EST 2022" docOffset="2466" starttimestamp="1645820509543" timestamp="189738414" />
  <DocumentChange __id="9551" _type="Insert" date="Sun Feb 27 20:04:09 EST 2022" docASTNodeCount="1582" docActiveCodeLength="11731" docExpressionCount="1104" docLength="13517" length="2" offset="2421" starttimestamp="1645820509543" timestamp="189739634">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9552" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 20:04:09 EST 2022" starttimestamp="1645820509543" timestamp="189739658" />
  <Command __id="9553" _type="MoveCaretCommand" caretOffset="2493" date="Sun Feb 27 20:04:09 EST 2022" docOffset="2571" starttimestamp="1645820509543" timestamp="189740156" />
  <Command __id="9554" _type="MoveCaretCommand" caretOffset="2493" date="Sun Feb 27 20:04:09 EST 2022" docOffset="2571" starttimestamp="1645820509543" timestamp="189740156" />
  <Command __id="9555" _type="MoveCaretCommand" caretOffset="2469" date="Sun Feb 27 20:04:10 EST 2022" docOffset="2547" starttimestamp="1645820509543" timestamp="189740836" />
  <Command __id="9556" _type="MoveCaretCommand" caretOffset="2469" date="Sun Feb 27 20:04:10 EST 2022" docOffset="2547" starttimestamp="1645820509543" timestamp="189740836" />
  <Command __id="9558" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 20:04:10 EST 2022" starttimestamp="1645820509543" timestamp="189741068" />
  <Command __id="9559" _type="ShellCommand" date="Sun Feb 27 20:04:11 EST 2022" starttimestamp="1645820509543" timestamp="189742128" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9560" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:11 EST 2022" forward="true" matchWord="false" offset="2549" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189742217" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9561" _type="ShellCommand" date="Sun Feb 27 20:04:14 EST 2022" starttimestamp="1645820509543" timestamp="189745455" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9562" _type="MoveCaretCommand" caretOffset="2717" date="Sun Feb 27 20:04:15 EST 2022" docOffset="2795" starttimestamp="1645820509543" timestamp="189745540" />
  <Command __id="9563" _type="MoveCaretCommand" caretOffset="2717" date="Sun Feb 27 20:04:15 EST 2022" docOffset="2795" starttimestamp="1645820509543" timestamp="189745540" />
  <Command __id="9564" _type="MoveCaretCommand" caretOffset="2756" date="Sun Feb 27 20:04:16 EST 2022" docOffset="2834" starttimestamp="1645820509543" timestamp="189746755" />
  <Command __id="9565" _type="MoveCaretCommand" caretOffset="2756" date="Sun Feb 27 20:04:16 EST 2022" docOffset="2834" starttimestamp="1645820509543" timestamp="189746755" />
  <Command __id="9566" _type="MoveCaretCommand" caretOffset="2718" date="Sun Feb 27 20:04:16 EST 2022" docOffset="2796" starttimestamp="1645820509543" timestamp="189747139" />
  <Command __id="9567" _type="MoveCaretCommand" caretOffset="2718" date="Sun Feb 27 20:04:16 EST 2022" docOffset="2796" starttimestamp="1645820509543" timestamp="189747139" />
  <Command __id="9569" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 20:04:17 EST 2022" starttimestamp="1645820509543" timestamp="189747756" />
  <Command __id="9570" _type="ShellCommand" date="Sun Feb 27 20:04:18 EST 2022" starttimestamp="1645820509543" timestamp="189748801" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9571" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:18 EST 2022" forward="true" matchWord="false" offset="2798" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189748881" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9572" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:19 EST 2022" forward="true" matchWord="false" offset="3190" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189750415" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9573" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:20 EST 2022" forward="true" matchWord="false" offset="3477" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189750801" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9574" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:20 EST 2022" forward="true" matchWord="false" offset="3598" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189751179" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9575" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:21 EST 2022" forward="true" matchWord="false" offset="3944" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189751752" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9576" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:21 EST 2022" forward="true" matchWord="false" offset="4065" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189752205" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9577" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:22 EST 2022" forward="true" matchWord="false" offset="6328" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189753190" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9578" _type="ShellCommand" date="Sun Feb 27 20:04:24 EST 2022" starttimestamp="1645820509543" timestamp="189754848" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9579" _type="MoveCaretCommand" caretOffset="9285" date="Sun Feb 27 20:04:24 EST 2022" docOffset="9363" starttimestamp="1645820509543" timestamp="189754911" />
  <Command __id="9580" _type="MoveCaretCommand" caretOffset="9285" date="Sun Feb 27 20:04:24 EST 2022" docOffset="9363" starttimestamp="1645820509543" timestamp="189754911" />
  <Command __id="9581" _type="MoveCaretCommand" caretOffset="9251" date="Sun Feb 27 20:04:24 EST 2022" docOffset="9329" starttimestamp="1645820509543" timestamp="189755212" />
  <Command __id="9582" _type="MoveCaretCommand" caretOffset="9251" date="Sun Feb 27 20:04:24 EST 2022" docOffset="9329" starttimestamp="1645820509543" timestamp="189755213" />
  <Command __id="9584" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 20:04:25 EST 2022" starttimestamp="1645820509543" timestamp="189756045" />
  <Command __id="9585" _type="ShellCommand" date="Sun Feb 27 20:04:26 EST 2022" starttimestamp="1645820509543" timestamp="189757128" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9586" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:26 EST 2022" forward="true" matchWord="false" offset="9331" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189757239" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9587" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:27 EST 2022" forward="true" matchWord="false" offset="12599" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189758280" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9588" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:31 EST 2022" forward="true" matchWord="false" offset="13362" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189761871" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9589" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:32 EST 2022" forward="true" matchWord="false" offset="13497" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189762572" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9590" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:33 EST 2022" forward="true" matchWord="false" offset="1113" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189763511" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9591" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:33 EST 2022" forward="true" matchWord="false" offset="1206" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189763904" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <DocumentChange __id="9557" _type="Insert" date="Sun Feb 27 20:04:10 EST 2022" docASTNodeCount="1575" docActiveCodeLength="11677" docExpressionCount="1098" docLength="13519" length="2" offset="2506" starttimestamp="1645820509543" timestamp="189741047">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="9568" _type="Insert" date="Sun Feb 27 20:04:17 EST 2022" docASTNodeCount="1568" docActiveCodeLength="11610" docExpressionCount="1092" docLength="13521" length="2" offset="2762" starttimestamp="1645820509543" timestamp="189747736">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="9583" _type="Insert" date="Sun Feb 27 20:04:25 EST 2022" docASTNodeCount="1561" docActiveCodeLength="11573" docExpressionCount="1086" docLength="13523" length="2" offset="9292" starttimestamp="1645820509543" timestamp="189756024">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9598" _type="RunCommand" date="Sun Feb 27 20:04:37 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189768333" type="Run" />
  <Command __id="9599" _type="RunCommand" date="Sun Feb 27 20:04:37 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189768333" type="Run" />
  <Command __id="9600" _type="RunCommand" date="Sun Feb 27 20:04:38 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189768509" type="Run" />
  <Command __id="9601" _type="RunCommand" date="Sun Feb 27 20:04:38 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189768509" type="Run" />
  <Command __id="9602" _type="EHExceptionCommand" date="Sun Feb 27 20:04:38 EST 2022" starttimestamp="1645820509543" timestamp="189768550" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
1true2false3falseout here end of program: }
Sytactic analysis complete: Valid miniJava program
]]></outputString>
  </Command>
  <Command __id="9604" _type="MoveCaretCommand" caretOffset="840" date="Sun Feb 27 20:04:43 EST 2022" docOffset="997" starttimestamp="1645820509543" timestamp="189773739" />
  <Command __id="9605" _type="MoveCaretCommand" caretOffset="499" date="Sun Feb 27 20:04:43 EST 2022" docOffset="656" starttimestamp="1645820509543" timestamp="189774244" />
  <Command __id="9606" _type="MoveCaretCommand" caretOffset="571" date="Sun Feb 27 20:04:44 EST 2022" docOffset="728" starttimestamp="1645820509543" timestamp="189775035" />
  <Command __id="9607" _type="MoveCaretCommand" caretOffset="643" date="Sun Feb 27 20:04:45 EST 2022" docOffset="800" starttimestamp="1645820509543" timestamp="189775628" />
  <Command __id="9608" _type="MoveCaretCommand" caretOffset="731" date="Sun Feb 27 20:04:46 EST 2022" docOffset="888" starttimestamp="1645820509543" timestamp="189776860" />
  <Command __id="9609" _type="MoveCaretCommand" caretOffset="521" date="Sun Feb 27 20:04:46 EST 2022" docOffset="678" starttimestamp="1645820509543" timestamp="189777283" />
  <Command __id="9610" _type="MoveCaretCommand" caretOffset="337" date="Sun Feb 27 20:04:47 EST 2022" docOffset="494" starttimestamp="1645820509543" timestamp="189777732" />
  <Command __id="9611" _type="MoveCaretCommand" caretOffset="517" date="Sun Feb 27 20:04:47 EST 2022" docOffset="674" starttimestamp="1645820509543" timestamp="189778155" />
  <Command __id="9613" _type="MoveCaretCommand" caretOffset="5138" date="Sun Feb 27 20:04:48 EST 2022" docOffset="5289" starttimestamp="1645820509543" timestamp="189779185" />
  <Command __id="9614" _type="MoveCaretCommand" caretOffset="4987" date="Sun Feb 27 20:04:49 EST 2022" docOffset="5138" starttimestamp="1645820509543" timestamp="189779475" />
  <Command __id="9615" _type="MoveCaretCommand" caretOffset="4987" date="Sun Feb 27 20:04:49 EST 2022" docOffset="5138" starttimestamp="1645820509543" timestamp="189779475" />
  <Command __id="9617" _type="ShellCommand" date="Sun Feb 27 20:04:49 EST 2022" starttimestamp="1645820509543" timestamp="189780080" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9618" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:52 EST 2022" forward="true" matchWord="false" offset="5138" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189782533" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9619" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:53 EST 2022" forward="true" matchWord="false" offset="5943" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189784112" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9620" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:54 EST 2022" forward="true" matchWord="false" offset="6498" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189785100" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9621" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:04:55 EST 2022" forward="true" matchWord="false" offset="6693" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189785956" wrapSearch="false">
    <searchString><![CDATA[System]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9603" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 20:04:43 EST 2022" docASTNodeCount="163" docActiveCodeLength="1007" docExpressionCount="111" docLength="1007" projectName="pa1" starttimestamp="1645820509543" timestamp="189773625">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\Compiler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶import java.io.FileInputStream;¶import java.io.FileNotFoundException;¶import java.io.InputStream;¶¶import miniJava.SyntacticAnalyzer.Parser;¶import miniJava.SyntacticAnalyzer.Scanner;¶¶public class Compiler {¶	public static void main(String[] args) {¶		InputStream inputStream = null;¶		try {¶			inputStream = new FileInputStream(args[0]);¶		} catch (FileNotFoundException e) {¶			System.out.println("Input file " + args[0] + " not found");¶			System.exit(1);¶		}¶		¶		ErrorReporter errorReporter = new ErrorReporter();¶		Scanner scanner = new Scanner(inputStream, errorReporter);¶		Parser parser = new Parser(scanner, errorReporter);¶		¶		System.out.println("Syntactic analysis ... ");¶		parser.parse();¶		System.out.print("Sytactic analysis complete: ");¶		if (errorReporter.hasErrors()) {¶			System.out.println("Invalid miniJava program");¶			System.exit(4);¶		}¶		else {¶			System.out.println("Valid miniJava program");¶			System.exit(0);¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="9612" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 20:04:48 EST 2022" docASTNodeCount="1126" docActiveCodeLength="8198" docExpressionCount="701" docLength="8990" projectName="pa1" starttimestamp="1645820509543" timestamp="189779103">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Scanner.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import java.io.IOException;¶import java.io.InputStream;¶¶import miniJava.ErrorReporter;¶import miniJava.SyntacticAnalyzer.Token;¶import miniJava.SyntacticAnalyzer.TokenKind;¶¶public class Scanner {¶	private boolean isComment;¶	¶//	comment state = 0 not comment¶//			= 1 show /¶//			= 2 show second /¶//			= 12 show first *¶//			= 13 show second *¶//			= 3 show third /¶//			= 4 show fourth / end of comment¶//			= 14 show second / end of comment¶	private int commentState;¶	¶	private InputStream inputStream;¶	private ErrorReporter reporter;¶	¶	private char currentChar;¶	private byte currentKind;¶	private StringBuilder currentSpelling;¶	¶	// true when end of line is found¶	private boolean eot = false; ¶	¶	public Scanner(InputStream inputStream, ErrorReporter reporter) {¶		this.isComment = false;¶		this.commentState = 0;¶		this.inputStream = inputStream;¶		this.reporter = reporter;¶¶		// initialize scanner state¶		readChar();¶	}	¶	¶	/**¶	 * skip whitespace and scan next token¶	 */	¶	¶// ? SINGLE SLASH¶//	comment state = 0 not comment¶//	= 1 show /¶//	= 2 show second /¶//	= 12 show first *¶//	= 13 show second *¶//	= 14 show second / end of comment¶	public void scanSeparator() {¶		switch (commentState) {¶			case 0:¶				while (!eot && ¶						(currentChar == ' ' ||¶							currentChar == '\t' ||¶								currentChar == '\n' ||¶									currentChar == '\r')) {¶					skipIt();¶				}¶				if (currentChar == '/') {¶					commentState = 1;¶					skipIt();¶					scanSeparator();¶				}¶				break;¶			¶			case 1:¶				if (currentChar == '/') {¶					commentState = 2;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else if (currentChar == '*') {¶					commentState = 12;¶					isComment = true;¶					skipIt();¶					scanSeparator();¶				} else {¶					System.exit(4);¶				}¶				break;¶			¶			case 2:¶				if (currentChar == '\r' || currentChar == '\n' || eot) {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				} else {¶					skipIt();¶					scanSeparator();		¶				}¶				break;¶				¶			case 12:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '*') {¶					skipIt();¶					scanSeparator();¶				} else {¶					commentState = 13;¶					scanSeparator();¶				}¶				break;¶			¶			case 13:¶				if (eot) {¶					System.exit(4);¶				}¶				if (currentChar != '/') {¶					skipIt();¶					commentState = 12;¶					scanSeparator();¶				} else {¶					commentState = 0;¶					isComment = false;¶					scanSeparator();¶				}¶				break;	¶		}		¶	}¶	¶¶	public Token scan() {¶		// skip whitespace and comments¶		scanSeparator();¶¶		// start of a token: collect spelling and identify token kind¶		currentSpelling = new StringBuilder();¶		TokenKind kind = scanToken();¶		String spelling = currentSpelling.toString();¶		¶		if (kind == TokenKind.ID) {¶			switch (spelling) {¶			case "class":¶				kind = TokenKind.CLASS;¶				break;¶			case "public":¶				kind = TokenKind.PUBLIC;¶				break;¶			case "private":¶				kind = TokenKind.PRIVATE;¶				break;¶			case "static":¶				kind = TokenKind.STATIC;¶				break;¶			case "int":¶				kind = TokenKind.INT;¶				break;¶			case "boolean":¶				kind = TokenKind.BOOLEAN;¶				break;¶			case "void":¶				kind = TokenKind.VOID;¶				break;¶			case "this":¶				kind = TokenKind.THIS;¶				break;¶			case "return":¶				kind = TokenKind.RETURN;¶				break;¶			case "if":¶				kind = TokenKind.IF;¶				break;¶			case "else":¶				kind = TokenKind.ELSE;¶				break;¶			case "while":¶				kind = TokenKind.WHILE;¶				break;¶			case "true":¶				kind = TokenKind.TRUE;¶				break;¶			case "false":¶				kind = TokenKind.FALSE;¶				break;¶			default:¶				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};¶				for (String s : ss) {¶					if (spelling.toLowerCase().equals(s)) {¶						reporter.reportError("Key word should not be used as identifiers.");¶						System.exit(4);¶					}¶				}¶				break;¶			}¶		}¶¶		// return new token¶		return new Token(kind, spelling);¶	}¶¶	¶	/**¶	 * determine token kind¶	 */¶	public TokenKind scanToken() {¶		if (eot) {¶			return TokenKind.EOT; ¶		}¶			¶		switch (currentChar) {¶			case 'a':  case 'b':  case 'c':  case 'd':¶			case 'e':  case 'f':  case 'g':  case 'h':¶			case 'i':  case 'j':  case 'k':  case 'l':¶			case 'm':  case 'n':  case 'o':  case 'p':¶			case 'q':  case 'r':  case 's':  case 't':¶	        case 'u':  case 'v':  case 'w':  case 'x':¶	        case 'y':  case 'z':¶	        ¶	        case 'A':  case 'B':  case 'C':  case 'D':¶	        case 'E':  case 'F':  case 'G':  case 'H':¶	        case 'I':  case 'J':  case 'K':  case 'L':¶	        case 'M':  case 'N':  case 'O':	 case 'P':¶	        case 'Q':  case 'R':  case 'S':  case 'T':¶	        case 'U':  case 'V':  case 'W':  case 'X':¶	        case 'Y':  case 'Z':¶	        	"), Diff(DELETE,"takeIt();"), Diff(INSERT,"if (currentChar == 'n') {¶	        		takeIt();¶	        		if (currentChar == 'e') {¶	        			takeIt();¶	        			if (currentChar == 'w') {¶	        				takeIt();¶	        				return TokenKind.NEW;¶	        			}¶	        		}¶	        	}"), Diff(EQUAL,"¶	        	while(Character.isLetter(currentChar) ¶	        			|| Character.isDigit(currentChar)¶	        				|| currentChar == '_') {¶	        		takeIt();¶	        	}¶	        	return TokenKind.ID;¶	        ¶	        case '0':  case '1':  case '2':  case '3':  case '4':¶	        case '5':  case '6':  case '7':  case '8':  case '9':¶	            takeIt();¶	            while(Character.isDigit(currentChar)) {¶	            	takeIt();¶	            }¶	            return TokenKind.NUM;¶	        ¶	        case '>': case '<': case '=':¶	        	boolean isEqual = false;¶	        	if(currentChar == '=') {¶//	        		System.out.println("In scanner " +  currentChar);¶	        		isEqual = true;¶	        	}¶	            takeIt();¶	            if(currentChar == '=') {¶	            	isEqual = false;¶	                takeIt();¶	                return TokenKind.BINOP;¶	            } ¶	            return isEqual? TokenKind.EQUAL:TokenKind.BINOP;¶	        ¶	        case '+': case '*': case '/':¶	        	takeIt();¶	        	return TokenKind.BINOP;¶	        ¶	        case '&':¶	            takeIt();¶	            if(currentChar != '&') {¶	                System.exit(4);¶	            }¶	            takeIt();¶	            return TokenKind.BINOP;¶¶	        case '|':¶	            takeIt();¶	            if(currentChar != '|')¶	                System.exit(4);¶	            takeIt();¶	            return TokenKind.BINOP;¶	        ¶	        case '!':¶	            takeIt();¶	            if(currentChar == '=') {¶	                takeIt();¶	                return TokenKind.BINOP;¶	            }¶	            return TokenKind.UNOP;¶	            ¶	        case '-':¶	            takeIt();¶	            return TokenKind.MINUS;¶	        ¶	        case '.':¶	            takeIt();¶	            return TokenKind.DOT;¶¶	        case ',':¶	            takeIt();¶	            return TokenKind.COMMA;¶¶	        case ';':¶	            takeIt();¶	            return TokenKind.SEMICOLON;¶¶	        case '(':¶	            takeIt();¶	            return TokenKind.LPAREN;¶¶	        case ')':¶	            takeIt();¶	            return TokenKind.RPAREN;¶¶	        case '[':¶	            takeIt();¶	            return TokenKind.LBRACKET;¶¶	        case ']':¶	            takeIt();¶	            return TokenKind.RBRACKET;¶¶	        case '{':¶	            takeIt();¶	            return TokenKind.LCURLY;¶¶	        case '}':¶	            takeIt();¶	            return TokenKind.RCURLY;¶	        ¶	        default:¶				scanError("Unrecognized character '" + currentChar + "' in input");¶				return TokenKind.ERROR; ¶		}¶	}¶¶	¶	private void takeIt() {¶		currentSpelling.append(currentChar);¶		nextChar();¶	}¶	¶	private void take(char expectedChar) {¶		if (currentChar == expectedChar) {¶			takeIt();¶		}¶	}¶¶	private void skipIt() {¶		nextChar();¶	}¶¶¶	private void scanError(String m) {¶		reporter.reportError("Scan Error:  " + m);¶	}¶¶¶	private final static char eolUnix = '\n';¶	private final static char eolWindows = '\r';¶¶	/**¶	 * advance to next char in inputstream¶	 * detect end of file or end of line as end of input¶	 */¶	private void nextChar() {¶		if (!eot)¶			readChar();¶	}¶¶	private void readChar() {¶		try {¶			int c = inputStream.read();¶			currentChar = (char) c;¶			if (c == -1) {¶				System.out.print("1" + (c == -1));¶				System.out.print("2" + (currentChar == eolUnix ));¶				System.out.print("3" + (currentChar == eolWindows));¶				eot = true;¶			}¶		} catch (IOException e) {¶			scanError("I/O Exception!");¶			eot = true;¶		}¶	}¶	¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import java.io.IOException;
import java.io.InputStream;

import miniJava.ErrorReporter;
import miniJava.SyntacticAnalyzer.Token;
import miniJava.SyntacticAnalyzer.TokenKind;

public class Scanner {
	private boolean isComment;
	
//	comment state = 0 not comment
//			= 1 show /
//			= 2 show second /
//			= 12 show first *
//			= 13 show second *
//			= 3 show third /
//			= 4 show fourth / end of comment
//			= 14 show second / end of comment
	private int commentState;
	
	private InputStream inputStream;
	private ErrorReporter reporter;
	
	private char currentChar;
	private byte currentKind;
	private StringBuilder currentSpelling;
	
	// true when end of line is found
	private boolean eot = false; 
	
	public Scanner(InputStream inputStream, ErrorReporter reporter) {
		this.isComment = false;
		this.commentState = 0;
		this.inputStream = inputStream;
		this.reporter = reporter;

		// initialize scanner state
		readChar();
	}	
	
	/**
	 * skip whitespace and scan next token
	 */	
	
// ? SINGLE SLASH
//	comment state = 0 not comment
//	= 1 show /
//	= 2 show second /
//	= 12 show first *
//	= 13 show second *
//	= 14 show second / end of comment
	public void scanSeparator() {
		switch (commentState) {
			case 0:
				while (!eot && 
						(currentChar == ' ' ||
							currentChar == '\t' ||
								currentChar == '\n' ||
									currentChar == '\r')) {
					skipIt();
				}
				if (currentChar == '/') {
					commentState = 1;
					skipIt();
					scanSeparator();
				}
				break;
			
			case 1:
				if (currentChar == '/') {
					commentState = 2;
					isComment = true;
					skipIt();
					scanSeparator();
				} else if (currentChar == '*') {
					commentState = 12;
					isComment = true;
					skipIt();
					scanSeparator();
				} else {
					System.exit(4);
				}
				break;
			
			case 2:
				if (currentChar == '\r' || currentChar == '\n' || eot) {
					commentState = 0;
					isComment = false;
					scanSeparator();
				} else {
					skipIt();
					scanSeparator();		
				}
				break;
				
			case 12:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '*') {
					skipIt();
					scanSeparator();
				} else {
					commentState = 13;
					scanSeparator();
				}
				break;
			
			case 13:
				if (eot) {
					System.exit(4);
				}
				if (currentChar != '/') {
					skipIt();
					commentState = 12;
					scanSeparator();
				} else {
					commentState = 0;
					isComment = false;
					scanSeparator();
				}
				break;	
		}		
	}
	

	public Token scan() {
		// skip whitespace and comments
		scanSeparator();

		// start of a token: collect spelling and identify token kind
		currentSpelling = new StringBuilder();
		TokenKind kind = scanToken();
		String spelling = currentSpelling.toString();
		
		if (kind == TokenKind.ID) {
			switch (spelling) {
			case "class":
				kind = TokenKind.CLASS;
				break;
			case "public":
				kind = TokenKind.PUBLIC;
				break;
			case "private":
				kind = TokenKind.PRIVATE;
				break;
			case "static":
				kind = TokenKind.STATIC;
				break;
			case "int":
				kind = TokenKind.INT;
				break;
			case "boolean":
				kind = TokenKind.BOOLEAN;
				break;
			case "void":
				kind = TokenKind.VOID;
				break;
			case "this":
				kind = TokenKind.THIS;
				break;
			case "return":
				kind = TokenKind.RETURN;
				break;
			case "if":
				kind = TokenKind.IF;
				break;
			case "else":
				kind = TokenKind.ELSE;
				break;
			case "while":
				kind = TokenKind.WHILE;
				break;
			case "true":
				kind = TokenKind.TRUE;
				break;
			case "false":
				kind = TokenKind.FALSE;
				break;
			default:
				String[] ss = {"class","public","private","static","int","boolean","void","this","return","if","else","while","true","false"};
				for (String s : ss) {
					if (spelling.toLowerCase().equals(s)) {
						reporter.reportError("Key word should not be used as identifiers.");
						System.exit(4);
					}
				}
				break;
			}
		}

		// return new token
		return new Token(kind, spelling);
	}

	
	/**
	 * determine token kind
	 */
	public TokenKind scanToken() {
		if (eot) {
			return TokenKind.EOT; 
		}
			
		switch (currentChar) {
			case 'a':  case 'b':  case 'c':  case 'd':
			case 'e':  case 'f':  case 'g':  case 'h':
			case 'i':  case 'j':  case 'k':  case 'l':
			case 'm':  case 'n':  case 'o':  case 'p':
			case 'q':  case 'r':  case 's':  case 't':
	        case 'u':  case 'v':  case 'w':  case 'x':
	        case 'y':  case 'z':
	        
	        case 'A':  case 'B':  case 'C':  case 'D':
	        case 'E':  case 'F':  case 'G':  case 'H':
	        case 'I':  case 'J':  case 'K':  case 'L':
	        case 'M':  case 'N':  case 'O':	 case 'P':
	        case 'Q':  case 'R':  case 'S':  case 'T':
	        case 'U':  case 'V':  case 'W':  case 'X':
	        case 'Y':  case 'Z':
	        	if (currentChar == 'n') {
	        		takeIt();
	        		if (currentChar == 'e') {
	        			takeIt();
	        			if (currentChar == 'w') {
	        				takeIt();
	        				return TokenKind.NEW;
	        			}
	        		}
	        	}
	        	while(Character.isLetter(currentChar) 
	        			|| Character.isDigit(currentChar)
	        				|| currentChar == '_') {
	        		takeIt();
	        	}
	        	return TokenKind.ID;
	        
	        case '0':  case '1':  case '2':  case '3':  case '4':
	        case '5':  case '6':  case '7':  case '8':  case '9':
	            takeIt();
	            while(Character.isDigit(currentChar)) {
	            	takeIt();
	            }
	            return TokenKind.NUM;
	        
	        case '>': case '<': case '=':
	        	boolean isEqual = false;
	        	if(currentChar == '=') {
//	        		System.out.println("In scanner " +  currentChar);
	        		isEqual = true;
	        	}
	            takeIt();
	            if(currentChar == '=') {
	            	isEqual = false;
	                takeIt();
	                return TokenKind.BINOP;
	            } 
	            return isEqual? TokenKind.EQUAL:TokenKind.BINOP;
	        
	        case '+': case '*': case '/':
	        	takeIt();
	        	return TokenKind.BINOP;
	        
	        case '&':
	            takeIt();
	            if(currentChar != '&') {
	                System.exit(4);
	            }
	            takeIt();
	            return TokenKind.BINOP;

	        case '|':
	            takeIt();
	            if(currentChar != '|')
	                System.exit(4);
	            takeIt();
	            return TokenKind.BINOP;
	        
	        case '!':
	            takeIt();
	            if(currentChar == '=') {
	                takeIt();
	                return TokenKind.BINOP;
	            }
	            return TokenKind.UNOP;
	            
	        case '-':
	            takeIt();
	            return TokenKind.MINUS;
	        
	        case '.':
	            takeIt();
	            return TokenKind.DOT;

	        case ',':
	            takeIt();
	            return TokenKind.COMMA;

	        case ';':
	            takeIt();
	            return TokenKind.SEMICOLON;

	        case '(':
	            takeIt();
	            return TokenKind.LPAREN;

	        case ')':
	            takeIt();
	            return TokenKind.RPAREN;

	        case '[':
	            takeIt();
	            return TokenKind.LBRACKET;

	        case ']':
	            takeIt();
	            return TokenKind.RBRACKET;

	        case '{':
	            takeIt();
	            return TokenKind.LCURLY;

	        case '}':
	            takeIt();
	            return TokenKind.RCURLY;
	        
	        default:
				scanError("Unrecognized character '" + currentChar + "' in input");
				return TokenKind.ERROR; 
		}
	}

	
	private void takeIt() {
		currentSpelling.append(currentChar);
		nextChar();
	}
	
	private void take(char expectedChar) {
		if (currentChar == expectedChar) {
			takeIt();
		}
	}

	private void skipIt() {
		nextChar();
	}


	private void scanError(String m) {
		reporter.reportError("Scan Error:  " + m);
	}


	private final static char eolUnix = '\n';
	private final static char eolWindows = '\r';

	/**
	 * advance to next char in inputstream
	 * detect end of file or end of line as end of input
	 */
	private void nextChar() {
		if (!eot)
			readChar();
	}

	private void readChar() {
		try {
			int c = inputStream.read();
			currentChar = (char) c;
			if (c == -1) {
				System.out.print("1" + (c == -1));
				System.out.print("2" + (currentChar == eolUnix ));
				System.out.print("3" + (currentChar == eolWindows));
				eot = true;
			}
		} catch (IOException e) {
			scanError("I/O Exception!");
			eot = true;
		}
	}
	


}
]]></snapshot>
  </Command>
  <Command __id="9622" _type="ShellCommand" date="Sun Feb 27 20:04:57 EST 2022" starttimestamp="1645820509543" timestamp="189787727" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9623" _type="MoveCaretCommand" caretOffset="8603" date="Sun Feb 27 20:04:57 EST 2022" docOffset="8754" starttimestamp="1645820509543" timestamp="189787781" />
  <Command __id="9624" _type="MoveCaretCommand" caretOffset="8603" date="Sun Feb 27 20:04:57 EST 2022" docOffset="8754" starttimestamp="1645820509543" timestamp="189787781" />
  <DocumentChange __id="9625" _type="Insert" date="Sun Feb 27 20:04:58 EST 2022" docASTNodeCount="1113" docActiveCodeLength="8160" docExpressionCount="689" docLength="8992" length="2" offset="8716" starttimestamp="1645820509543" timestamp="189789226">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9626" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 20:04:58 EST 2022" starttimestamp="1645820509543" timestamp="189789247" />
  <Command __id="9627" _type="MoveCaretCommand" caretOffset="8643" date="Sun Feb 27 20:04:59 EST 2022" docOffset="8794" starttimestamp="1645820509543" timestamp="189789883" />
  <Command __id="9628" _type="MoveCaretCommand" caretOffset="8643" date="Sun Feb 27 20:04:59 EST 2022" docOffset="8794" starttimestamp="1645820509543" timestamp="189789883" />
  <DocumentChange __id="9629" _type="Insert" date="Sun Feb 27 20:04:59 EST 2022" docASTNodeCount="1101" docActiveCodeLength="8106" docExpressionCount="678" docLength="8994" length="2" offset="8758" starttimestamp="1645820509543" timestamp="189790008">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9630" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 20:04:59 EST 2022" starttimestamp="1645820509543" timestamp="189790027" />
  <Command __id="9631" _type="SelectTextCommand" caretOffset="480" date="Sun Feb 27 20:05:00 EST 2022" end="480" start="469" starttimestamp="1645820509543" timestamp="189790607" />
  <Command __id="9632" _type="SelectTextCommand" caretOffset="480" date="Sun Feb 27 20:05:00 EST 2022" end="480" start="469" starttimestamp="1645820509543" timestamp="189790607" />
  <DocumentChange __id="9633" _type="Insert" date="Sun Feb 27 20:05:00 EST 2022" docASTNodeCount="1096" docActiveCodeLength="8080" docExpressionCount="677" docLength="8996" length="2" offset="606" starttimestamp="1645820509543" timestamp="189790672">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9634" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 20:05:00 EST 2022" starttimestamp="1645820509543" timestamp="189790686" />
  <DocumentChange __id="9635" _type="Delete" date="Sun Feb 27 20:05:01 EST 2022" docASTNodeCount="1101" docActiveCodeLength="8106" docExpressionCount="678" docLength="8994" endLine="25" length="2" offset="606" startLine="25" starttimestamp="1645820509543" timestamp="189792186">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9636" _type="UndoCommand" date="Sun Feb 27 20:05:01 EST 2022" starttimestamp="1645820509543" timestamp="189792205" />
  <DocumentChange __id="9637" _type="Delete" date="Sun Feb 27 20:05:02 EST 2022" docASTNodeCount="1113" docActiveCodeLength="8160" docExpressionCount="689" docLength="8992" endLine="374" length="2" offset="8758" startLine="374" starttimestamp="1645820509543" timestamp="189792848">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9638" _type="UndoCommand" date="Sun Feb 27 20:05:02 EST 2022" starttimestamp="1645820509543" timestamp="189792874" />
  <DocumentChange __id="9639" _type="Insert" date="Sun Feb 27 20:05:03 EST 2022" docASTNodeCount="1101" docActiveCodeLength="8106" docExpressionCount="678" docLength="8994" length="2" offset="8758" starttimestamp="1645820509543" timestamp="189794336">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9640" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 20:05:03 EST 2022" starttimestamp="1645820509543" timestamp="189794356" />
  <Command __id="9641" _type="MoveCaretCommand" caretOffset="8690" date="Sun Feb 27 20:05:04 EST 2022" docOffset="8841" starttimestamp="1645820509543" timestamp="189795172" />
  <Command __id="9642" _type="MoveCaretCommand" caretOffset="8690" date="Sun Feb 27 20:05:04 EST 2022" docOffset="8841" starttimestamp="1645820509543" timestamp="189795172" />
  <Command __id="9644" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Feb 27 20:05:04 EST 2022" starttimestamp="1645820509543" timestamp="189795383" />
  <DocumentChange __id="9643" _type="Insert" date="Sun Feb 27 20:05:04 EST 2022" docASTNodeCount="1089" docActiveCodeLength="8050" docExpressionCount="667" docLength="8996" length="2" offset="8816" starttimestamp="1645820509543" timestamp="189795362">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9655" _type="RunCommand" date="Sun Feb 27 20:05:10 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189801456" type="Run" />
  <Command __id="9656" _type="RunCommand" date="Sun Feb 27 20:05:10 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189801456" type="Run" />
  <Command __id="9657" _type="RunCommand" date="Sun Feb 27 20:05:11 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189801616" type="Run" />
  <Command __id="9658" _type="RunCommand" date="Sun Feb 27 20:05:11 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189801616" type="Run" />
  <Command __id="9659" _type="EHExceptionCommand" date="Sun Feb 27 20:05:11 EST 2022" starttimestamp="1645820509543" timestamp="189801665" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
out here end of program: }
Sytactic analysis complete: Valid miniJava program
]]></outputString>
  </Command>
  <Command __id="9661" _type="SelectTextCommand" caretOffset="1441" date="Sun Feb 27 20:05:14 EST 2022" end="1442" start="1441" starttimestamp="1645820509543" timestamp="189805044" />
  <Command __id="9662" _type="SelectTextCommand" caretOffset="1441" date="Sun Feb 27 20:05:14 EST 2022" end="1442" start="1441" starttimestamp="1645820509543" timestamp="189805056" />
  <Command __id="9664" _type="ShellCommand" date="Sun Feb 27 20:05:15 EST 2022" starttimestamp="1645820509543" timestamp="189805588" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9665" _type="FindCommand" caseSensitive="false" date="Sun Feb 27 20:05:18 EST 2022" forward="true" matchWord="false" offset="1520" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1645820509543" timestamp="189808692" wrapSearch="false">
    <searchString><![CDATA[out here]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9660" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 20:05:14 EST 2022" docASTNodeCount="1561" docActiveCodeLength="11573" docExpressionCount="1086" docLength="13523" projectName="pa1" starttimestamp="1645820509543" timestamp="189804971">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\SyntacticAnalyzer\Parser.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava.SyntacticAnalyzer;¶¶import miniJava.SyntacticAnalyzer.Scanner;¶import miniJava.SyntacticAnalyzer.TokenKind;¶import miniJava.ErrorReporter;¶¶public class Parser {¶	private Scanner scanner;¶	private ErrorReporter reporter;¶	private Token currentToken;¶¶	public Parser(Scanner scanner, ErrorReporter reporter) {¶		this.scanner = scanner;¶		this.reporter = reporter;¶	}¶¶¶	/**¶	 *  parse input, catch possible parse error¶	 */¶	public void parse() {¶		currentToken = scanner.scan();¶		try {¶			parseProgram();¶		}¶		catch (SyntaxError e) { }¶	}¶	¶	private boolean startsDeclaration(TokenKind kind) {¶		return kind == TokenKind.PUBLIC ||¶				kind == TokenKind.PRIVATE ||¶				 kind == TokenKind.STATIC ||¶				  startsType(kind) ||¶					 kind == TokenKind.VOID;¶	}¶	¶	private boolean startsType(TokenKind kind) {¶		return kind == TokenKind.INT ||¶				   kind == TokenKind.BOOLEAN ||¶					kind == TokenKind.ID;¶	}¶¶	¶	//   ¶	private void parseProgram() throws SyntaxError {¶		accept(TokenKind.CLASS);¶		parseId();¶		accept(TokenKind.LCURLY);¶		¶//		System.out.print(currentToken.kind);¶		while (startsDeclaration(currentToken.kind)) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"			System.out.println("------------starting declaration-----------");¶			parseVisibility();¶			parseAccess();¶			switch(currentToken.kind) {¶				// Method Declaration¶				case VOID:¶					acceptIt();¶					parseId();¶					accept(TokenKind.LPAREN);¶					if (startsType(currentToken.kind)) {¶						parseParameterList();¶					}¶					accept(TokenKind.RPAREN);¶					accept(TokenKind.LCURLY);¶					¶					while (startsStatement(currentToken.kind)) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"						System.out.println("IN VOID METHOD DECLARATION");¶						parseStatement();¶"), Diff(INSERT,"//"), Diff(EQUAL,"						System.out.println("OUT VOID METHOD DECLARATION");¶					}¶					accept(TokenKind.RCURLY);¶					break;¶					¶				// both possible¶				default:¶					if (startsType(currentToken.kind)) {¶						parseType();¶						parseId();¶						switch(currentToken.kind) {¶							// Field Declaration¶							case SEMICOLON:¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							// Method Declaration¶							case LPAREN:¶								acceptIt();¶								if (startsType(currentToken.kind)) {¶									parseParameterList();¶								}¶								accept(TokenKind.RPAREN);¶								accept(TokenKind.LCURLY);¶								¶								while (startsStatement(currentToken.kind)) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"									System.out.println("IN METHOD DECLARATION");¶									parseStatement();¶"), Diff(INSERT,"//"), Diff(EQUAL,"									System.out.println("OUT METHOD DECLARATION");¶								}¶								accept(TokenKind.RCURLY);¶								break;¶						}¶					}¶					else {¶						parseError("Parsing wrong in declarations, no types declared.");¶					}¶					break;¶					¶			}¶"), Diff(INSERT,"//"), Diff(EQUAL,"			System.out.println("------------ending declaration-----------");¶		}¶		System.out.println("out here end of program: " + currentToken.spelling);¶¶		accept(TokenKind.RCURLY);¶		accept(TokenKind.EOT);¶	}¶	¶	private void parseStatement() throws SyntaxError {¶		switch (currentToken.kind) {¶			case LCURLY:¶				acceptIt();¶				while (startsStatement(currentToken.kind)) {¶					parseStatement();¶				}¶	//			System.out.println("in here: " + currentToken);¶				accept(TokenKind.RCURLY);¶				break;¶				¶			case INT: case BOOLEAN:¶				parseType();¶				parseId();¶				accept(TokenKind.EQUAL);¶				parseExpression();¶				accept(TokenKind.SEMICOLON);¶				break;¶			¶			case ID:			¶//				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				acceptIt();¶//				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");¶				switch (currentToken.kind) {¶					// in Type¶					case ID:¶						acceptIt();¶						accept(TokenKind.EQUAL);¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// in Reference¶					case EQUAL:¶		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						acceptIt();¶"), Diff(INSERT,"//"), Diff(EQUAL,"						System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");¶						parseExpression();¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						accept(TokenKind.SEMICOLON);¶						break;¶					¶					// both¶					case LBRACKET: ¶						acceptIt();¶						// in Type¶						if (currentToken.kind == TokenKind.RBRACKET) {¶							acceptIt();¶							accept(TokenKind.ID);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						} else {¶							// in Reference¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							accept(TokenKind.EQUAL);¶							parseExpression();¶							accept(TokenKind.SEMICOLON);¶						}¶						break;¶					¶					case DOT:¶						while (currentToken.kind == TokenKind.DOT) {¶							acceptIt();¶							accept(TokenKind.ID);¶						}¶						switch (currentToken.kind) {¶							case EQUAL:¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LBRACKET: ¶								acceptIt();¶								parseExpression();¶								accept(TokenKind.RBRACKET);¶								accept(TokenKind.EQUAL);¶								parseExpression();¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							case LPAREN:¶								acceptIt();¶								if (currentToken.kind == TokenKind.RPAREN) {¶									acceptIt();¶								} else {¶									parseArgumentList();¶									accept(TokenKind.RPAREN);¶								}¶								accept(TokenKind.SEMICOLON);¶								break;¶							¶							default:¶								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);¶						}¶						break;¶					default:¶						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);¶						break;¶				}¶				break;¶			¶			case THIS:¶				acceptIt();¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶				case EQUAL:¶					acceptIt();¶//					System.out.println("before");¶					parseExpression();¶//					System.out.println("after");¶					accept(TokenKind.SEMICOLON);¶					break;¶				¶				case LBRACKET:¶					acceptIt();¶					parseExpression();¶					accept(TokenKind.RBRACKET);¶					accept(TokenKind.EQUAL);¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶					break;¶					¶				case LPAREN:¶					acceptIt();¶					if (currentToken.kind == TokenKind.RPAREN) {¶						acceptIt();¶						accept(TokenKind.SEMICOLON);¶					} else {¶						parseArgumentList();¶						accept(TokenKind.RPAREN);¶						accept(TokenKind.SEMICOLON);¶					}¶					break;¶				¶				default:¶					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);¶				}¶				break;¶				¶			case RETURN:¶				acceptIt();¶				if (currentToken.kind == TokenKind.SEMICOLON) {¶					acceptIt();¶				} else {¶					parseExpression();¶					accept(TokenKind.SEMICOLON);¶				}¶				break;¶			¶			case IF:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				if (currentToken.kind == TokenKind.ELSE) {¶					acceptIt();¶					parseStatement();¶				}¶				break;¶				¶			case WHILE:¶				acceptIt();¶				accept(TokenKind.LPAREN);¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				parseStatement();¶				break;¶			¶			default:¶				parseError("parsing statement, current token is:" + currentToken);¶				break;¶		}¶		return ;¶		¶	}¶¶¶	private void parseArgumentList() {¶		// TODO Auto-generated method stub¶		parseExpression();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶	¶	private void parseExpression() {¶		// TODO Auto-generated method stub¶		switch (currentToken.kind) {¶			// starts with reference¶			case ID: case THIS:¶				acceptIt();¶				// dealing with (.id)*¶				while (currentToken.kind == TokenKind.DOT) {¶					acceptIt();¶					accept(TokenKind.ID);¶				}¶				switch (currentToken.kind) {¶					// reference[expression]¶					case LBRACKET:¶						acceptIt();¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					// reference(arglist?)¶					case LPAREN:¶						acceptIt();¶						if (currentToken.kind == TokenKind.RPAREN) {¶							acceptIt();¶						} else {¶							parseArgumentList();¶							accept(TokenKind.RPAREN);¶						}¶						break;¶						¶					// just reference¶					default:¶						break;¶//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶				¶			case UNOP: case MINUS:¶				acceptIt();¶				parseExpression();¶				break;¶			¶			case LPAREN:¶				acceptIt();¶				parseExpression();¶				accept(TokenKind.RPAREN);¶				break;¶			¶			case NUM: case TRUE: case FALSE:¶				acceptIt();¶				break;¶			¶			case NEW:¶				acceptIt();¶"), Diff(INSERT,"//"), Diff(EQUAL,"				System.out.println("in hereeee");¶				switch (currentToken.kind) {¶					case ID:¶						acceptIt();¶						switch (currentToken.kind) {¶						case LPAREN:¶							acceptIt();¶							accept(TokenKind.RPAREN);¶							break;¶						case LBRACKET:¶							acceptIt();¶							parseExpression();¶							accept(TokenKind.RBRACKET);¶							break;¶						default:¶							parseError("parsing expression, nothing after new.");¶						¶						}¶						break;¶					¶					case INT:¶						acceptIt();¶						accept(TokenKind.LBRACKET);¶						parseExpression();¶						accept(TokenKind.RBRACKET);¶						break;¶					¶					default:¶						parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				}¶				break;¶			¶			default:¶				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);¶				break;¶		}¶		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS ¶				|| currentToken.kind == TokenKind.EQUAL) {¶			acceptIt();¶			parseExpression();¶		}¶	}¶¶¶	private boolean startsStatement(TokenKind kind) {¶		return kind == TokenKind.LCURLY ||¶				startsType(kind) ||¶				 startsReference(kind) ||¶				  kind == TokenKind.RETURN ||¶				   kind == TokenKind.IF ||¶					kind == TokenKind.WHILE;¶	}¶¶¶	private boolean startsReference(TokenKind kind) {¶		return kind == TokenKind.ID ||¶				kind == TokenKind.THIS;¶	}¶¶¶	private void parseParameterList() throws SyntaxError {¶		parseType();¶		parseId();¶		while (currentToken.kind == TokenKind.COMMA) {¶			acceptIt();¶			parseType();¶			parseId();¶		}¶	}¶¶¶	private void parseType() throws SyntaxError{¶		switch (currentToken.kind) {¶		case INT:¶			acceptIt();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		case BOOLEAN:¶			acceptIt();¶			break;¶		case ID:¶			parseId();¶			if (currentToken.kind == TokenKind.LBRACKET) {¶				acceptIt();¶				accept(TokenKind.RBRACKET);¶			}¶			break;¶		default:¶			parseError("Wrong in parsing Type, currentToken is: " + currentToken);¶		}¶	}¶¶¶	private void parseId() throws SyntaxError {¶		accept(TokenKind.ID);¶	}¶¶¶	private void parseAccess() throws SyntaxError {¶		if (currentToken.kind == TokenKind.STATIC) {¶			accept(TokenKind.STATIC);¶		}¶	}¶¶¶	private void parseVisibility() throws SyntaxError {¶		if (currentToken.kind == TokenKind.PRIVATE) {¶			accept(TokenKind.PRIVATE);¶		} else if (currentToken.kind == TokenKind.PUBLIC) {¶			accept(TokenKind.PUBLIC);¶		}¶	}¶¶¶	private void parseClassDeclaration() throws SyntaxError {¶		while (currentToken.kind == TokenKind.CLASS) {¶			parseClassDeclaration();¶		}¶		accept(TokenKind.EOT);¶	}¶¶	/**¶	 * accept current token and advance to next token¶	 */¶	private void acceptIt() throws SyntaxError {¶		accept(currentToken.kind);¶	}¶¶	/**¶	 * verify that current token in input matches expected token and advance to next token¶	 * @param expectedToken¶	 * @throws SyntaxError  if match fails¶	 */¶	private void accept(TokenKind expectedTokenKind) throws SyntaxError {¶		if (currentToken.kind == expectedTokenKind) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"			System.out.println(currentToken.spelling);¶			currentToken = scanner.scan();¶		}¶		else¶			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +¶					"' but found '" + currentToken.kind + "'");¶	}¶¶	/**¶	 * report parse error and unwind call stack to start of parse¶	 * @param e  string with error detail¶	 * @throws SyntaxError¶	 */¶	private void parseError(String e) throws SyntaxError {¶		reporter.reportError("Parse error: " + e);¶		throw new SyntaxError();¶	}¶¶	// show parse stack whenever terminal is  accepted¶	private void pTrace() {¶		StackTraceElement [] stl = Thread.currentThread().getStackTrace();¶		for (int i = stl.length - 1; i > 0 ; i--) {¶			if(stl[i].toString().contains("parse"))¶				System.out.println(stl[i]);¶		}¶		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");¶		System.out.println();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package miniJava.SyntacticAnalyzer;

import miniJava.SyntacticAnalyzer.Scanner;
import miniJava.SyntacticAnalyzer.TokenKind;
import miniJava.ErrorReporter;

public class Parser {
	private Scanner scanner;
	private ErrorReporter reporter;
	private Token currentToken;

	public Parser(Scanner scanner, ErrorReporter reporter) {
		this.scanner = scanner;
		this.reporter = reporter;
	}


	/**
	 *  parse input, catch possible parse error
	 */
	public void parse() {
		currentToken = scanner.scan();
		try {
			parseProgram();
		}
		catch (SyntaxError e) { }
	}
	
	private boolean startsDeclaration(TokenKind kind) {
		return kind == TokenKind.PUBLIC ||
				kind == TokenKind.PRIVATE ||
				 kind == TokenKind.STATIC ||
				  startsType(kind) ||
					 kind == TokenKind.VOID;
	}
	
	private boolean startsType(TokenKind kind) {
		return kind == TokenKind.INT ||
				   kind == TokenKind.BOOLEAN ||
					kind == TokenKind.ID;
	}

	
	//   
	private void parseProgram() throws SyntaxError {
		accept(TokenKind.CLASS);
		parseId();
		accept(TokenKind.LCURLY);
		
//		System.out.print(currentToken.kind);
		while (startsDeclaration(currentToken.kind)) {
//			System.out.println("------------starting declaration-----------");
			parseVisibility();
			parseAccess();
			switch(currentToken.kind) {
				// Method Declaration
				case VOID:
					acceptIt();
					parseId();
					accept(TokenKind.LPAREN);
					if (startsType(currentToken.kind)) {
						parseParameterList();
					}
					accept(TokenKind.RPAREN);
					accept(TokenKind.LCURLY);
					
					while (startsStatement(currentToken.kind)) {
//						System.out.println("IN VOID METHOD DECLARATION");
						parseStatement();
//						System.out.println("OUT VOID METHOD DECLARATION");
					}
					accept(TokenKind.RCURLY);
					break;
					
				// both possible
				default:
					if (startsType(currentToken.kind)) {
						parseType();
						parseId();
						switch(currentToken.kind) {
							// Field Declaration
							case SEMICOLON:
								accept(TokenKind.SEMICOLON);
								break;
							
							// Method Declaration
							case LPAREN:
								acceptIt();
								if (startsType(currentToken.kind)) {
									parseParameterList();
								}
								accept(TokenKind.RPAREN);
								accept(TokenKind.LCURLY);
								
								while (startsStatement(currentToken.kind)) {
//									System.out.println("IN METHOD DECLARATION");
									parseStatement();
//									System.out.println("OUT METHOD DECLARATION");
								}
								accept(TokenKind.RCURLY);
								break;
						}
					}
					else {
						parseError("Parsing wrong in declarations, no types declared.");
					}
					break;
					
			}
//			System.out.println("------------ending declaration-----------");
		}
		System.out.println("out here end of program: " + currentToken.spelling);

		accept(TokenKind.RCURLY);
		accept(TokenKind.EOT);
	}
	
	private void parseStatement() throws SyntaxError {
		switch (currentToken.kind) {
			case LCURLY:
				acceptIt();
				while (startsStatement(currentToken.kind)) {
					parseStatement();
				}
	//			System.out.println("in here: " + currentToken);
				accept(TokenKind.RCURLY);
				break;
				
			case INT: case BOOLEAN:
				parseType();
				parseId();
				accept(TokenKind.EQUAL);
				parseExpression();
				accept(TokenKind.SEMICOLON);
				break;
			
			case ID:			
//				System.out.println("in here0, " + currentToken.kind + " is***" + currentToken.spelling + "***");
				acceptIt();
//				System.out.println("in here1, " + currentToken.kind + " is***" + currentToken.spelling + "***");
				switch (currentToken.kind) {
					// in Type
					case ID:
						acceptIt();
						accept(TokenKind.EQUAL);
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					// in Reference
					case EQUAL:
		//				System.out.println("in here2, " + currentToken.kind + " is*" + currentToken.spelling + "*");
						acceptIt();
//						System.out.println("in here3, " + currentToken.kind + " is*" + currentToken.spelling + "*");
						parseExpression();
						accept(TokenKind.SEMICOLON);
						break;
					
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						accept(TokenKind.SEMICOLON);
						break;
					
					// both
					case LBRACKET: 
						acceptIt();
						// in Type
						if (currentToken.kind == TokenKind.RBRACKET) {
							acceptIt();
							accept(TokenKind.ID);
							accept(TokenKind.EQUAL);
							parseExpression();
							accept(TokenKind.SEMICOLON);
						} else {
							// in Reference
							parseExpression();
							accept(TokenKind.RBRACKET);
							accept(TokenKind.EQUAL);
							parseExpression();
							accept(TokenKind.SEMICOLON);
						}
						break;
					
					case DOT:
						while (currentToken.kind == TokenKind.DOT) {
							acceptIt();
							accept(TokenKind.ID);
						}
						switch (currentToken.kind) {
							case EQUAL:
								acceptIt();
								parseExpression();
								accept(TokenKind.SEMICOLON);
								break;
							
							case LBRACKET: 
								acceptIt();
								parseExpression();
								accept(TokenKind.RBRACKET);
								accept(TokenKind.EQUAL);
								parseExpression();
								accept(TokenKind.SEMICOLON);
								break;
							
							case LPAREN:
								acceptIt();
								if (currentToken.kind == TokenKind.RPAREN) {
									acceptIt();
								} else {
									parseArgumentList();
									accept(TokenKind.RPAREN);
								}
								accept(TokenKind.SEMICOLON);
								break;
							
							default:
								parseError("parsing statement, in subcase ID, in subcase DOT, current token is: " + currentToken.spelling);
						}
						break;
					default:
						parseError("parsing statement, in subcase ID, current token is: " + currentToken.spelling);
						break;
				}
				break;
			
			case THIS:
				acceptIt();
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
				case EQUAL:
					acceptIt();
//					System.out.println("before");
					parseExpression();
//					System.out.println("after");
					accept(TokenKind.SEMICOLON);
					break;
				
				case LBRACKET:
					acceptIt();
					parseExpression();
					accept(TokenKind.RBRACKET);
					accept(TokenKind.EQUAL);
					parseExpression();
					accept(TokenKind.SEMICOLON);
					break;
					
				case LPAREN:
					acceptIt();
					if (currentToken.kind == TokenKind.RPAREN) {
						acceptIt();
						accept(TokenKind.SEMICOLON);
					} else {
						parseArgumentList();
						accept(TokenKind.RPAREN);
						accept(TokenKind.SEMICOLON);
					}
					break;
				
				default:
					parseError("parsing statement, in subcase THIS, current token is: " + currentToken);
				}
				break;
				
			case RETURN:
				acceptIt();
				if (currentToken.kind == TokenKind.SEMICOLON) {
					acceptIt();
				} else {
					parseExpression();
					accept(TokenKind.SEMICOLON);
				}
				break;
			
			case IF:
				acceptIt();
				accept(TokenKind.LPAREN);
				parseExpression();
				accept(TokenKind.RPAREN);
				parseStatement();
				if (currentToken.kind == TokenKind.ELSE) {
					acceptIt();
					parseStatement();
				}
				break;
				
			case WHILE:
				acceptIt();
				accept(TokenKind.LPAREN);
				parseExpression();
				accept(TokenKind.RPAREN);
				parseStatement();
				break;
			
			default:
				parseError("parsing statement, current token is:" + currentToken);
				break;
		}
		return ;
		
	}


	private void parseArgumentList() {
		// TODO Auto-generated method stub
		parseExpression();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseExpression();
		}
	}

	
	private void parseExpression() {
		// TODO Auto-generated method stub
		switch (currentToken.kind) {
			// starts with reference
			case ID: case THIS:
				acceptIt();
				// dealing with (.id)*
				while (currentToken.kind == TokenKind.DOT) {
					acceptIt();
					accept(TokenKind.ID);
				}
				switch (currentToken.kind) {
					// reference[expression]
					case LBRACKET:
						acceptIt();
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					// reference(arglist?)
					case LPAREN:
						acceptIt();
						if (currentToken.kind == TokenKind.RPAREN) {
							acceptIt();
						} else {
							parseArgumentList();
							accept(TokenKind.RPAREN);
						}
						break;
						
					// just reference
					default:
						break;
//						parseError("parsing expression, in subcase ID/THIS, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
				
			case UNOP: case MINUS:
				acceptIt();
				parseExpression();
				break;
			
			case LPAREN:
				acceptIt();
				parseExpression();
				accept(TokenKind.RPAREN);
				break;
			
			case NUM: case TRUE: case FALSE:
				acceptIt();
				break;
			
			case NEW:
				acceptIt();
//				System.out.println("in hereeee");
				switch (currentToken.kind) {
					case ID:
						acceptIt();
						switch (currentToken.kind) {
						case LPAREN:
							acceptIt();
							accept(TokenKind.RPAREN);
							break;
						case LBRACKET:
							acceptIt();
							parseExpression();
							accept(TokenKind.RBRACKET);
							break;
						default:
							parseError("parsing expression, nothing after new.");
						
						}
						break;
					
					case INT:
						acceptIt();
						accept(TokenKind.LBRACKET);
						parseExpression();
						accept(TokenKind.RBRACKET);
						break;
					
					default:
						parseError("parsing expression, in subcase NEW, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				}
				break;
			
			default:
				parseError("parsing expression, current token is: " + currentToken.spelling + "and its kind is: " + currentToken.kind);
				break;
		}
		if (currentToken.kind == TokenKind.BINOP || currentToken.kind == TokenKind.MINUS 
				|| currentToken.kind == TokenKind.EQUAL) {
			acceptIt();
			parseExpression();
		}
	}


	private boolean startsStatement(TokenKind kind) {
		return kind == TokenKind.LCURLY ||
				startsType(kind) ||
				 startsReference(kind) ||
				  kind == TokenKind.RETURN ||
				   kind == TokenKind.IF ||
					kind == TokenKind.WHILE;
	}


	private boolean startsReference(TokenKind kind) {
		return kind == TokenKind.ID ||
				kind == TokenKind.THIS;
	}


	private void parseParameterList() throws SyntaxError {
		parseType();
		parseId();
		while (currentToken.kind == TokenKind.COMMA) {
			acceptIt();
			parseType();
			parseId();
		}
	}


	private void parseType() throws SyntaxError{
		switch (currentToken.kind) {
		case INT:
			acceptIt();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		case BOOLEAN:
			acceptIt();
			break;
		case ID:
			parseId();
			if (currentToken.kind == TokenKind.LBRACKET) {
				acceptIt();
				accept(TokenKind.RBRACKET);
			}
			break;
		default:
			parseError("Wrong in parsing Type, currentToken is: " + currentToken);
		}
	}


	private void parseId() throws SyntaxError {
		accept(TokenKind.ID);
	}


	private void parseAccess() throws SyntaxError {
		if (currentToken.kind == TokenKind.STATIC) {
			accept(TokenKind.STATIC);
		}
	}


	private void parseVisibility() throws SyntaxError {
		if (currentToken.kind == TokenKind.PRIVATE) {
			accept(TokenKind.PRIVATE);
		} else if (currentToken.kind == TokenKind.PUBLIC) {
			accept(TokenKind.PUBLIC);
		}
	}


	private void parseClassDeclaration() throws SyntaxError {
		while (currentToken.kind == TokenKind.CLASS) {
			parseClassDeclaration();
		}
		accept(TokenKind.EOT);
	}

	/**
	 * accept current token and advance to next token
	 */
	private void acceptIt() throws SyntaxError {
		accept(currentToken.kind);
	}

	/**
	 * verify that current token in input matches expected token and advance to next token
	 * @param expectedToken
	 * @throws SyntaxError  if match fails
	 */
	private void accept(TokenKind expectedTokenKind) throws SyntaxError {
		if (currentToken.kind == expectedTokenKind) {
//			System.out.println(currentToken.spelling);
			currentToken = scanner.scan();
		}
		else
			parseError("Parsing " + currentToken.spelling + " and expecting '" + expectedTokenKind +
					"' but found '" + currentToken.kind + "'");
	}

	/**
	 * report parse error and unwind call stack to start of parse
	 * @param e  string with error detail
	 * @throws SyntaxError
	 */
	private void parseError(String e) throws SyntaxError {
		reporter.reportError("Parse error: " + e);
		throw new SyntaxError();
	}

	// show parse stack whenever terminal is  accepted
	private void pTrace() {
		StackTraceElement [] stl = Thread.currentThread().getStackTrace();
		for (int i = stl.length - 1; i > 0 ; i--) {
			if(stl[i].toString().contains("parse"))
				System.out.println(stl[i]);
		}
		System.out.println("accepting: " + currentToken.kind + " (\"" + currentToken.spelling + "\")");
		System.out.println();
	}

}
]]></snapshot>
  </Command>
  <Command __id="9666" _type="ShellCommand" date="Sun Feb 27 20:05:19 EST 2022" starttimestamp="1645820509543" timestamp="189810306" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9667" _type="MoveCaretCommand" caretOffset="2775" date="Sun Feb 27 20:05:20 EST 2022" docOffset="2853" starttimestamp="1645820509543" timestamp="189811235" />
  <Command __id="9668" _type="MoveCaretCommand" caretOffset="2775" date="Sun Feb 27 20:05:20 EST 2022" docOffset="2853" starttimestamp="1645820509543" timestamp="189811235" />
  <DocumentChange __id="9669" _type="Insert" date="Sun Feb 27 20:05:22 EST 2022" docASTNodeCount="1550" docActiveCodeLength="11499" docExpressionCount="1076" docLength="13525" length="2" offset="2838" starttimestamp="1645820509543" timestamp="189813371">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9674" _type="RunCommand" date="Sun Feb 27 20:05:25 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189815662" type="Run" />
  <Command __id="9675" _type="RunCommand" date="Sun Feb 27 20:05:25 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189815662" type="Run" />
  <Command __id="9676" _type="RunCommand" date="Sun Feb 27 20:05:25 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189815806" type="Run" />
  <Command __id="9677" _type="RunCommand" date="Sun Feb 27 20:05:25 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189815806" type="Run" />
  <Command __id="9678" _type="EHExceptionCommand" date="Sun Feb 27 20:05:25 EST 2022" starttimestamp="1645820509543" timestamp="189815866" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
Sytactic analysis complete: Valid miniJava program
]]></outputString>
  </Command>
  <Command __id="9680" _type="MoveCaretCommand" caretOffset="517" date="Sun Feb 27 20:05:47 EST 2022" docOffset="674" starttimestamp="1645820509543" timestamp="189837621" />
  <Command __id="9681" _type="MoveCaretCommand" caretOffset="679" date="Sun Feb 27 20:06:17 EST 2022" docOffset="836" starttimestamp="1645820509543" timestamp="189867500" />
  <Command __id="9679" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 20:05:47 EST 2022" docASTNodeCount="163" docActiveCodeLength="1007" docExpressionCount="111" docLength="1007" projectName="pa1" starttimestamp="1645820509543" timestamp="189837536">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\Compiler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶import java.io.FileInputStream;¶import java.io.FileNotFoundException;¶import java.io.InputStream;¶¶import miniJava.SyntacticAnalyzer.Parser;¶import miniJava.SyntacticAnalyzer.Scanner;¶¶public class Compiler {¶	public static void main(String[] args) {¶		InputStream inputStream = null;¶		try {¶			inputStream = new FileInputStream(args[0]);¶		} catch (FileNotFoundException e) {¶			System.out.println("Input file " + args[0] + " not found");¶			System.exit(1);¶		}¶		¶		ErrorReporter errorReporter = new ErrorReporter();¶		Scanner scanner = new Scanner(inputStream, errorReporter);¶		Parser parser = new Parser(scanner, errorReporter);¶		¶		System.out.println("Syntactic analysis ... ");¶		parser.parse();¶		System.out.print("Sytactic analysis complete: ");¶		if (errorReporter.hasErrors()) {¶			System.out.println("Invalid miniJava program");¶			System.exit(4);¶		}¶		else {¶			System.out.println("Valid miniJava program");¶			System.exit(0);¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="9682" _type="MoveCaretCommand" caretOffset="816" date="Sun Feb 27 20:06:23 EST 2022" docOffset="973" starttimestamp="1645820509543" timestamp="189873940" />
  <Command __id="9683" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 20:06:25 EST 2022" docASTNodeCount="194" docActiveCodeLength="926" docExpressionCount="119" docLength="926" projectName="pa1" starttimestamp="1645820509543" timestamp="189875933">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors(kk[] b, int[] c) {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			{¶				int i = 1;¶				boolean j = 2;¶				bo jdsaf2 = afdaf;¶				this = 1;¶				this.adsfaew.dafawe.d = adf123;¶				sdfawe.dsfaewf.safew[sdafaewfa.sdafaew.sdafaew.asd] = dsfs2;¶				this = this;¶				return;¶				return asdfawef;¶				if (adf) { dsafae = 12;}¶				else adfaewf =dsfaef;¶				while (asdfaew = dafawe) sdafaew = dsaf; ¶				a = -1;¶				a = !true;¶				a = false;¶				a = new dafef();¶				a = "), Diff(DELETE,"int[a == a]"), Diff(INSERT,"new asdfaadf[!true];¶				while(this) this = this;¶				return adfawef.dfaefd.faef(adfa,asdf,1,true,dsafew);¶				return (1)"), Diff(EQUAL,";¶			}¶			¶			System.out.println(message,dfaewf,asdfa,ef,aew);¶		}	¶}")]]]></diff>
    <snapshot><![CDATA[class ErrorReporter {

		int numErrors;
		public static boolean gg;

		static void ErrorReporter(int j, boolean k, boo[] a1) {
			numErrors = 0;
			try = !(a == a);
		}

		public static boolean hasErrors(kk[] b, int[] c) {
			return numErrors > 0;
		}

		public void reportError(String message) {
			{
				int i = 1;
				boolean j = 2;
				bo jdsaf2 = afdaf;
				this = 1;
				this.adsfaew.dafawe.d = adf123;
				sdfawe.dsfaewf.safew[sdafaewfa.sdafaew.sdafaew.asd] = dsfs2;
				this = this;
				return;
				return asdfawef;
				if (adf) { dsafae = 12;}
				else adfaewf =dsfaef;
				while (asdfaew = dafawe) sdafaew = dsaf; 
				a = -1;
				a = !true;
				a = false;
				a = new dafef();
				a = new asdfaadf[!true];
				while(this) this = this;
				return adfawef.dfaefd.faef(adfa,asdf,1,true,dsafew);
				return (1);
			}
			
			System.out.println(message,dfaewf,asdfa,ef,aew);
		}	
}]]></snapshot>
  </Command>
  <Command __id="9684" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 20:06:25 EST 2022" docASTNodeCount="38" docActiveCodeLength="219" docExpressionCount="17" docLength="219" projectName="pa1" starttimestamp="1645820509543" timestamp="189876408">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\test.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶public class test {¶	public static void main(String[] args) {¶		String[] b = {"F:\\eclipse2018-09\\workspace\\pa1\\src\\miniJava\\testfile"};¶		Compiler a = new Compiler();¶		a.main(b);¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="9686" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 20:06:26 EST 2022" docASTNodeCount="194" docActiveCodeLength="926" docExpressionCount="119" docLength="926" projectName="pa1" starttimestamp="1645820509543" timestamp="189877130">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\testfile]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"class ErrorReporter {¶¶		int numErrors;¶		public static boolean gg;¶¶		static void ErrorReporter(int j, boolean k, boo[] a1) {¶			numErrors = 0;¶			try = !(a == a);¶		}¶¶		public static boolean hasErrors(kk[] b, int[] c) {¶			return numErrors > 0;¶		}¶¶		public void reportError(String message) {¶			{¶				int i = 1;¶				boolean j = 2;¶				bo jdsaf2 = afdaf;¶				this = 1;¶				this.adsfaew.dafawe.d = adf123;¶				sdfawe.dsfaewf.safew[sdafaewfa.sdafaew.sdafaew.asd] = dsfs2;¶				this = this;¶				return;¶				return asdfawef;¶				if (adf) { dsafae = 12;}¶				else adfaewf =dsfaef;¶				while (asdfaew = dafawe) sdafaew = dsaf; ¶				a = -1;¶				a = !true;¶				a = false;¶				a = new dafef();¶				a = new asdfaadf[!true];¶				while(this) this = this;¶				return adfawef.dfaefd.faef(adfa,asdf,1,true,dsafew);¶				return (1);¶			}¶			¶			System.out.println(message,dfaewf,asdfa,ef,aew);¶		}	¶}")]]]></diff>
  </Command>
  <Command __id="9687" _type="RunCommand" date="Sun Feb 27 20:06:27 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189878377" type="Run" />
  <Command __id="9688" _type="RunCommand" date="Sun Feb 27 20:06:27 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189878377" type="Run" />
  <Command __id="9689" _type="RunCommand" date="Sun Feb 27 20:06:28 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189878515" type="Run" />
  <Command __id="9690" _type="RunCommand" date="Sun Feb 27 20:06:28 EST 2022" kind="HitBreakPoint" projectName="pa1" starttimestamp="1645820509543" timestamp="189878515" type="Run" />
  <Command __id="9691" _type="EHExceptionCommand" date="Sun Feb 27 20:06:28 EST 2022" starttimestamp="1645820509543" timestamp="189878577" type="Exception">
    <outputString><![CDATA[Syntactic analysis ... 
Sytactic analysis complete: Valid miniJava program
]]></outputString>
  </Command>
  <Command __id="9693" _type="MoveCaretCommand" caretOffset="816" date="Sun Feb 27 20:06:30 EST 2022" docOffset="973" starttimestamp="1645820509543" timestamp="189880742" />
  <Command __id="9694" _type="MoveCaretCommand" caretOffset="590" date="Sun Feb 27 20:06:35 EST 2022" docOffset="747" starttimestamp="1645820509543" timestamp="189885459" />
  <Command __id="9696" _type="PasteCommand" date="Sun Feb 27 20:06:55 EST 2022" starttimestamp="1645820509543" timestamp="189906181" />
  <Command __id="9697" _type="EclipseCommand" commandID="" date="Sun Feb 27 20:06:55 EST 2022" starttimestamp="1645820509543" timestamp="189906284" />
  <Command __id="9698" _type="EclipseCommand" commandID="" date="Sun Feb 27 20:06:55 EST 2022" starttimestamp="1645820509543" timestamp="189906306" />
  <Command __id="9700" _type="ShellCommand" date="Sun Feb 27 20:07:12 EST 2022" starttimestamp="1645820509543" timestamp="189923293" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9701" _type="EclipseCommand" commandID="" date="Sun Feb 27 20:07:12 EST 2022" starttimestamp="1645820509543" timestamp="189923352" />
  <Command __id="9702" _type="EclipseCommand" commandID="" date="Sun Feb 27 20:07:12 EST 2022" starttimestamp="1645820509543" timestamp="189923355" />
  <Command __id="9703" _type="ShellCommand" date="Sun Feb 27 20:07:15 EST 2022" starttimestamp="1645820509543" timestamp="189925973" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9704" _type="ShellCommand" date="Sun Feb 27 20:07:18 EST 2022" starttimestamp="1645820509543" timestamp="189929448" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9692" _type="DiffBasedFileOpenCommand" date="Sun Feb 27 20:06:30 EST 2022" docASTNodeCount="163" docActiveCodeLength="1007" docExpressionCount="111" docLength="1007" projectName="pa1" starttimestamp="1645820509543" timestamp="189880622">
    <filePath><![CDATA[F:\eclipse2018-09\workspace\pa1\src\miniJava\Compiler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package miniJava;¶¶import java.io.FileInputStream;¶import java.io.FileNotFoundException;¶import java.io.InputStream;¶¶import miniJava.SyntacticAnalyzer.Parser;¶import miniJava.SyntacticAnalyzer.Scanner;¶¶public class Compiler {¶	public static void main(String[] args) {¶		InputStream inputStream = null;¶		try {¶			inputStream = new FileInputStream(args[0]);¶		} catch (FileNotFoundException e) {¶			System.out.println("Input file " + args[0] + " not found");¶			System.exit(1);¶		}¶		¶		ErrorReporter errorReporter = new ErrorReporter();¶		Scanner scanner = new Scanner(inputStream, errorReporter);¶		Parser parser = new Parser(scanner, errorReporter);¶		¶		System.out.println("Syntactic analysis ... ");¶		parser.parse();¶		System.out.print("Sytactic analysis complete: ");¶		if (errorReporter.hasErrors()) {¶			System.out.println("Invalid miniJava program");¶			System.exit(4);¶		}¶		else {¶			System.out.println("Valid miniJava program");¶			System.exit(0);¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="9706" _type="ShellCommand" date="Sun Feb 27 20:07:23 EST 2022" starttimestamp="1645820509543" timestamp="189934269" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9707" _type="EclipseCommand" commandID="" date="Sun Feb 27 20:07:23 EST 2022" starttimestamp="1645820509543" timestamp="189934324" />
  <Command __id="9708" _type="EclipseCommand" commandID="" date="Sun Feb 27 20:07:23 EST 2022" starttimestamp="1645820509543" timestamp="189934328" />
  <Command __id="9710" _type="MoveCaretCommand" caretOffset="626" date="Sun Feb 27 20:07:26 EST 2022" docOffset="783" starttimestamp="1645820509543" timestamp="189937094" />
  <Command __id="9711" _type="ShellCommand" date="Sun Feb 27 20:07:34 EST 2022" starttimestamp="1645820509543" timestamp="189944975" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9712" _type="ShellCommand" date="Sun Feb 27 20:07:44 EST 2022" starttimestamp="1645820509543" timestamp="189955222" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9713" _type="EclipseCommand" commandID="org.eclipse.ui.file.export" date="Sun Feb 27 20:07:44 EST 2022" starttimestamp="1645820509543" timestamp="189955246" />
  <Command __id="9714" _type="EclipseCommand" commandID="org.eclipse.ui.file.export" date="Sun Feb 27 20:07:44 EST 2022" starttimestamp="1645820509543" timestamp="189955246" />
  <Command __id="9715" _type="ShellCommand" date="Sun Feb 27 20:07:46 EST 2022" starttimestamp="1645820509543" timestamp="189957372" type="ECLIPSE_LOST_FOCUS" />
</Events>
